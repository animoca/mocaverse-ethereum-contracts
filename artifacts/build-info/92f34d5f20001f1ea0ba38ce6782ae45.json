{"id":"92f34d5f20001f1ea0ba38ce6782ae45","_format":"hh-sol-build-info-1","solcVersion":"0.8.21","solcLongVersion":"0.8.21+commit.d9974bed","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/MocaPoints/interface/mock/IRealmId.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\n// import {RealmId} from \"../realmIdContract/RealmId.sol\";\n\ninterface IRealmId {\n\n    function burnCounts(uint256 realmId) external view returns (uint256);\n\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\n\n    function ownerOf(uint256 realmId) external view returns (address);\n\n}\n"},"contracts/MocaPoints/MocaPoints.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IRealmId} from \"./interface/mock/IRealmId.sol\";\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract MocaPoints is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\n    // Roles\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\");\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");\n\n    // Seasonal variables\n    bytes32 public currentSeason;\n    mapping(bytes32 => bool) public seasons;\n\n    // Address of the RealmId contract\n    IRealmId public realmIdContract;\n\n    // Balances mapping\n    mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256))) public balances; // season => realmId => realmIdVersion => balance\n\n    // Nonce mapping\n    mapping(uint256 => uint256) public nonces; // realmId => nonce\n\n    // Allowed consume reason codes mapping\n    mapping(bytes32 => bool) public allowedConsumeReasonCodes;\n\n    event SetCurrentSeason(bytes32 season);\n    event BatchAddedConsumeReasonCode(bytes32[] reasonCodes);\n    event BatchRemovedConsumeReasonCode(bytes32[] reasonCodes);\n    event Deposited(\n        address indexed sender,\n        bytes32 indexed season,\n        bytes32 indexed reasonCode,\n        uint256 realmId,\n        uint256 realmIdVersion,\n        uint256 amount\n    );\n\n    event Consumed(\n        uint256 indexed realmId,\n        bytes32 indexed season,\n        bytes32 indexed reasonCode,\n        address operator,\n        uint256 realmIdVersion,\n        uint256 amount,\n        address realmIdOwner,\n        uint256 nonce\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _realmIdContract, address _adminAddress) public initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n\n        require(address(_realmIdContract) != address(0), \"Not a valid Contract Address\");\n        require(address(_adminAddress) != address(0), \"Not a valid Admin Address\");\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _adminAddress);\n        realmIdContract = IRealmId(_realmIdContract);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}\n\n    function setCurrentSeason(bytes32 _season) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not an admin\");\n        require(!seasons[_season], \"Season already set\");\n        currentSeason = _season;\n        seasons[_season] = true;\n        emit SetCurrentSeason(_season);\n    }\n\n    function batchAddConsumeReasonCodes(bytes32[] memory _reasonCodes) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not an admin\");\n        // Check if each reason code is unique and does not already exist\n        for (uint256 i = 0; i < _reasonCodes.length; i++) {\n            require(!allowedConsumeReasonCodes[_reasonCodes[i]], \"Reason code already exists\");\n            allowedConsumeReasonCodes[_reasonCodes[i]] = true;\n        }\n\n        // Emit the event to indicate that all reason codes were added\n        emit BatchAddedConsumeReasonCode(_reasonCodes);\n    }\n\n    function batchRemoveConsumeReasonCodes(bytes32[] memory _reasonCodes) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not an admin\");\n\n        // Check if each reason code exists and can be removed\n        for (uint256 i = 0; i < _reasonCodes.length; i++) {\n            require(allowedConsumeReasonCodes[_reasonCodes[i]], \"Reason code does not exist\");\n            delete allowedConsumeReasonCodes[_reasonCodes[i]];\n        }\n\n        // Emit the event to indicate that all reason codes were removed\n        emit BatchRemovedConsumeReasonCode(_reasonCodes);\n    }\n\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) public {\n        // Check if the sender has the Depositor role\n        require(hasRole(DEPOSITOR_ROLE, msg.sender), \"Not a depositor\");\n\n        // Call the internal _deposit function to perform the deposit operation\n        balances[season][realmId][realmIdVersion] += amount;\n\n        // Emit the Deposit event\n        emit Deposited(msg.sender, season, depositReasonCode, realmId, realmIdVersion, amount);\n    }\n\n    function deposit(\n        bytes32 season,\n        bytes32 parentNode,\n        string memory name,\n        uint256 realmIdVersion,\n        uint256 amount,\n        bytes32 depositReasonCode\n    ) public {\n        // Create the realmId using parentNode and name\n        uint256 realmId = realmIdContract.getTokenId(name, parentNode);\n\n        // Call the internal _deposit function to perform the deposit operation\n        deposit(season, realmId, realmIdVersion, amount, depositReasonCode);\n    }\n\n    function _getSigner(\n        uint256 realmId,\n        uint256 realmIdVersion,\n        uint256 amount,\n        uint256 nonce,\n        bytes32 consumeReasonCode,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (address) {\n        bytes32 _messageHash = _preparePayload(realmId, realmIdVersion, amount, consumeReasonCode, nonce);\n        bytes32 messageDigest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\n        return ecrecover(messageDigest, v, r, s);\n    }\n\n    function _consume(uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 consumeReasonCode, address owner_) internal {\n        // Check if the sender has enough balance\n        require(balances[currentSeason][realmId][realmIdVersion] >= amount, \"Insufficient balance\");\n\n        // Check if the consumeReasonCode exists and is true in the mapping\n        require(allowedConsumeReasonCodes[consumeReasonCode], \"Invalid consume reason code\");\n\n        // Perform the consume operation\n        balances[currentSeason][realmId][realmIdVersion] -= amount;\n\n        // Emit the Consumed event\n        emit Consumed(realmId, currentSeason, consumeReasonCode, msg.sender, realmIdVersion, amount, owner_, nonces[realmId]);\n        // Increment the nonce for the realmId\n        nonces[realmId]++;\n    }\n\n    function consume(bytes32 parentNode, string memory _name, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) public {\n        // get the realmId using parentNode and name\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\n\n        consume(realmId, amount, consumeReasonCode, v, r, s);\n    }\n\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) public {\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\n        address signer = _getSigner(realmId, realmIdVersion, amount, nonces[realmId], consumeReasonCode, v, r, s);\n        address owner_ = realmIdContract.ownerOf(realmId);\n        require(signer == owner_, \"Signer not owner of realmId\");\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner_);\n    }\n\n    function consume(bytes32 parentNode, string memory _name, uint256 amount, bytes32 consumeReasonCode) public {\n        // Compute the realmId using the provided parentNode and name\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\n        // consumWithrealId call\n        consume(realmId, amount, consumeReasonCode);\n    }\n\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode) public {\n        address owner_ = realmIdContract.ownerOf(realmId);\n        require(msg.sender == owner_, \"Sender not owner of realmId\");\n\n        // Call the common _consume function for the core consume operation\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, msg.sender);\n    }\n\n    function balanceOf(bytes32 season, uint256 realmId) external view returns (uint256) {\n        // get realmIdVersion from the realmId contract\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\n\n        return balances[season][realmId][realmIdVersion];\n    }\n\n    function balanceOf(bytes32 season, bytes32 parentNode, string memory _name) external view returns (uint256) {\n        // Compute the realmId using the provided parentNode and name\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\n\n        // get realmIdVersion from the realmId contract\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\n\n        // Retrieve and return the balance for the calculated realmId\n        return balances[season][realmId][realmIdVersion];\n    }\n\n    function balanceOf(uint256 realmId) external view returns (uint256) {\n        // get realmIdVersion from the realmId contract\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\n\n        // Retrieve and return the balance for the given realmId at the current season\n        return balances[currentSeason][realmId][realmIdVersion];\n    }\n\n    function balanceOf(bytes32 parentNode, string memory _name) external view returns (uint256) {\n        // Compute the realmId using the provided parentNode and name\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\n\n        // get realmIdVersion from the realmId contract\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\n\n        // Retrieve and return the balance for the given realmId at the current season\n        return balances[currentSeason][realmId][realmIdVersion];\n    }\n\n    // Return the payload which is generated using the arguments, current season and the realmIdversion\n    function _preparePayload(\n        uint256 realmId,\n        uint256 realmIdVersion,\n        uint256 amount,\n        bytes32 reasonCode,\n        uint256 nonce\n    ) internal view returns (bytes32) {\n        bytes32 payload = keccak256(abi.encodePacked(realmId, realmIdVersion, amount, currentSeason, reasonCode, nonce));\n        return payload;\n    }\n\n    // Return the payload which is generated using the arguments, current nonce, current season, and the realmId version\n    function preparePayload(uint256 realmId, uint256 amount, bytes32 reasonCode) public view returns (bytes32) {\n        // get realmIdVersion from the realmId contract\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\n\n        return (_preparePayload(realmId, realmIdVersion, amount, reasonCode, nonces[realmId]));\n    }\n}\n"},"contracts/MocaPoints/mock/realmIdContract/MockRealmId.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// import {RealmId} from \"./RealmId.sol\";\n\ncontract MockRealmId {\n    function getTokenId(string calldata, bytes32) public pure returns (uint256) {\n        return 10;\n    }\n\n    function ownerOf(uint256) public pure returns (address) {\n        return address(0x90F79bf6EB2c4f870365E785982E1f101E93b906);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1408],"ContextUpgradeable":[1450],"ERC165Upgradeable":[1833],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[1845],"Initializable":[942],"MathUpgradeable":[2711],"SignedMathUpgradeable":[2816],"StringsUpgradeable":[1789]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":409,"src":"133:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1451,"src":"175:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1790,"src":"217:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1834,"src":"259:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":943,"src":"314:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"Initializable","nameLocations":["2065:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":942,"src":"2065:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"2065:13:0"},{"baseName":{"id":10,"name":"ContextUpgradeable","nameLocations":["2080:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1450,"src":"2080:18:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"2080:18:0"},{"baseName":{"id":12,"name":"IAccessControlUpgradeable","nameLocations":["2100:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"2100:25:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"2100:25:0"},{"baseName":{"id":14,"name":"ERC165Upgradeable","nameLocations":["2127:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":1833,"src":"2127:17:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"2127:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"358:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":335,"linearizedBaseContracts":[335,1833,1845,408,1450,942],"name":"AccessControlUpgradeable","nameLocation":"2037:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":20,"nodeType":"Block","src":"2209:7:0","statements":[]},"id":21,"implemented":true,"kind":"function","modifiers":[{"id":18,"kind":"modifierInvocation","modifierName":{"id":17,"name":"onlyInitializing","nameLocations":["2192:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"2192:16:0"},"nodeType":"ModifierInvocation","src":"2192:16:0"}],"name":"__AccessControl_init","nameLocation":"2160:20:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2180:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"2209:0:0"},"scope":335,"src":"2151:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"2290:7:0","statements":[]},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":24,"kind":"modifierInvocation","modifierName":{"id":23,"name":"onlyInitializing","nameLocations":["2273:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"2273:16:0"},"nodeType":"ModifierInvocation","src":"2273:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2231:30:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"2261:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"2290:0:0"},"scope":335,"src":"2222:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":34,"members":[{"constant":false,"id":31,"mutability":"mutable","name":"members","nameLocation":"2353:7:0","nodeType":"VariableDeclaration","scope":34,"src":"2328:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":30,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"2336:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2328:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2347:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"adminRole","nameLocation":"2378:9:0","nodeType":"VariableDeclaration","scope":34,"src":"2370:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2370:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2309:8:0","nodeType":"StructDefinition","scope":335,"src":"2302:92:0","visibility":"public"},{"constant":false,"id":39,"mutability":"mutable","name":"_roles","nameLocation":"2437:6:0","nodeType":"VariableDeclaration","scope":335,"src":"2400:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":38,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2408:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2400:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"RoleData","nameLocations":["2419:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":34,"src":"2419:8:0"},"referencedDeclaration":34,"src":"2419:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":42,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2474:18:0","nodeType":"VariableDeclaration","scope":335,"src":"2450:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2450:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":52,"nodeType":"Block","src":"2918:44:0","statements":[{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2939:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":47,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":107,"src":"2928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2928:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2928:16:0"},{"id":51,"nodeType":"PlaceholderStatement","src":"2954:1:0"}]},"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"2506:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":53,"name":"onlyRole","nameLocation":"2895:8:0","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"role","nameLocation":"2912:4:0","nodeType":"VariableDeclaration","scope":53,"src":"2904:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2903:14:0"},"src":"2886:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[1827],"body":{"id":74,"nodeType":"Block","src":"3120:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3137:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":64,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3157:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":63,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3152:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3152:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408","typeString":"type(contract IAccessControlUpgradeable)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3184:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"3152:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3137:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":70,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3223:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":68,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3199:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$335_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3205:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"3199:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3199:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3137:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":61,"id":73,"nodeType":"Return","src":"3130:105:0"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"2968:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":75,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3038:17:0","nodeType":"FunctionDefinition","overrides":{"id":58,"nodeType":"OverrideSpecifier","overrides":[],"src":"3096:8:0"},"parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"interfaceId","nameLocation":"3063:11:0","nodeType":"VariableDeclaration","scope":75,"src":"3056:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":55,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3056:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3055:20:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":75,"src":"3114:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"3114:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3113:6:0"},"scope":335,"src":"3029:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[375],"body":{"id":93,"nodeType":"Block","src":"3421:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":86,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"3438:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":88,"indexExpression":{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"3445:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3438:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":89,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3451:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3438:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":91,"indexExpression":{"id":90,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3459:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3438:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":85,"id":92,"nodeType":"Return","src":"3431:36:0"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"3248:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":94,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3338:7:0","nodeType":"FunctionDefinition","overrides":{"id":82,"nodeType":"OverrideSpecifier","overrides":[],"src":"3397:8:0"},"parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"3354:4:0","nodeType":"VariableDeclaration","scope":94,"src":"3346:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3346:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"3368:7:0","nodeType":"VariableDeclaration","scope":94,"src":"3360:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3360:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3345:31:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"3415:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":83,"name":"bool","nodeType":"ElementaryTypeName","src":"3415:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3414:6:0"},"scope":335,"src":"3329:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"3824:47:0","statements":[{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3845:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":102,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"3851:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3851:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":146,"src":"3834:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3834:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"3834:30:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3480:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":107,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3777:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"role","nameLocation":"3796:4:0","nodeType":"VariableDeclaration","scope":107,"src":"3788:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3788:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3787:14:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3824:0:0"},"scope":335,"src":"3768:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"4225:428:0","statements":[{"condition":{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4239:23:0","subExpression":{"arguments":[{"id":116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4248:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":117,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4254:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":115,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4240:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4240:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"4235:412:0","trueBody":{"id":143,"nodeType":"Block","src":"4264:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4372:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":128,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4454:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":126,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"4423:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1789_$","typeString":"type(library StringsUpgradeable)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4442:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1763,"src":"4423:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4423:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4488:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":135,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4572:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4564:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4564:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4564:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4579:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":131,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"4533:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1789_$","typeString":"type(library StringsUpgradeable)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4552:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1743,"src":"4533:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4533:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4330:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4334:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"4330:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":121,"name":"string","nodeType":"ElementaryTypeName","src":"4302:6:0","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":120,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4278:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4278:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4278:358:0"}]}}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3877:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4161:10:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"4180:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4172:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4172:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"4194:7:0","nodeType":"VariableDeclaration","scope":146,"src":"4186:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"4186:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4171:31:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"4225:0:0"},"scope":335,"src":"4152:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[383],"body":{"id":160,"nodeType":"Block","src":"4917:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":155,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"4934:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":157,"indexExpression":{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4941:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4934:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4947:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"4934:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":154,"id":159,"nodeType":"Return","src":"4927:29:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4659:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":161,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4843:12:0","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4890:8:0"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4864:4:0","nodeType":"VariableDeclaration","scope":161,"src":"4856:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4856:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4855:14:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"4908:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4908:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4907:9:0"},"scope":335,"src":"4834:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[391],"body":{"id":180,"nodeType":"Block","src":"5362:42:0","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5383:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5389:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":175,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"5372:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5372:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"5372:25:0"}]},"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"4969:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":181,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":171,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5355:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5342:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":173,"kind":"modifierInvocation","modifierName":{"id":169,"name":"onlyRole","nameLocations":["5333:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5333:8:0"},"nodeType":"ModifierInvocation","src":"5333:28:0"}],"name":"grantRole","nameLocation":"5268:9:0","nodeType":"FunctionDefinition","overrides":{"id":168,"nodeType":"OverrideSpecifier","overrides":[],"src":"5324:8:0"},"parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"role","nameLocation":"5286:4:0","nodeType":"VariableDeclaration","scope":181,"src":"5278:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5278:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"account","nameLocation":"5300:7:0","nodeType":"VariableDeclaration","scope":181,"src":"5292:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"5292:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5277:31:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"5362:0:0"},"scope":335,"src":"5259:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[399],"body":{"id":200,"nodeType":"Block","src":"5788:43:0","statements":[{"expression":{"arguments":[{"id":196,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5810:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5816:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":195,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5798:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5798:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"5798:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"5410:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":191,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5781:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":190,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5768:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5768:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":193,"kind":"modifierInvocation","modifierName":{"id":189,"name":"onlyRole","nameLocations":["5759:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5759:8:0"},"nodeType":"ModifierInvocation","src":"5759:28:0"}],"name":"revokeRole","nameLocation":"5693:10:0","nodeType":"FunctionDefinition","overrides":{"id":188,"nodeType":"OverrideSpecifier","overrides":[],"src":"5750:8:0"},"parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"role","nameLocation":"5712:4:0","nodeType":"VariableDeclaration","scope":201,"src":"5704:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5704:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"account","nameLocation":"5726:7:0","nodeType":"VariableDeclaration","scope":201,"src":"5718:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"5718:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5703:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5788:0:0"},"scope":335,"src":"5684:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[407],"body":{"id":223,"nodeType":"Block","src":"6445:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6463:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":212,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"6474:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6474:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6463:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6488:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6455:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"6455:83:0"},{"expression":{"arguments":[{"id":219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6561:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6567:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6549:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6549:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"6549:26:0"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"5837:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6377:12:0","nodeType":"FunctionDefinition","overrides":{"id":208,"nodeType":"OverrideSpecifier","overrides":[],"src":"6436:8:0"},"parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"role","nameLocation":"6398:4:0","nodeType":"VariableDeclaration","scope":224,"src":"6390:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6390:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"account","nameLocation":"6412:7:0","nodeType":"VariableDeclaration","scope":224,"src":"6404:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"6404:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6389:31:0"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"6445:0:0"},"scope":335,"src":"6368:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":237,"nodeType":"Block","src":"7335:42:0","statements":[{"expression":{"arguments":[{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7356:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7362:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":232,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7345:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7345:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"7345:25:0"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"6588:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7276:10:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"role","nameLocation":"7295:4:0","nodeType":"VariableDeclaration","scope":238,"src":"7287:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7287:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"account","nameLocation":"7309:7:0","nodeType":"VariableDeclaration","scope":238,"src":"7301:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"7301:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7286:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"7335:0:0"},"scope":335,"src":"7267:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"7575:174:0","statements":[{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7593:17:0","nodeType":"VariableDeclaration","scope":265,"src":"7585:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7585:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7626:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"7613:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7613:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7585:46:0"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":252,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7641:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":254,"indexExpression":{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7648:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7641:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7654:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"7641:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7666:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7641:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"7641:34:0"},{"eventCall":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7707:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7713:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7732:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7690:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7690:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":264,"nodeType":"EmitStatement","src":"7685:57:0"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"7383:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7511:13:0","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"7533:4:0","nodeType":"VariableDeclaration","scope":266,"src":"7525:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7525:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"adminRole","nameLocation":"7547:9:0","nodeType":"VariableDeclaration","scope":266,"src":"7539:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7539:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7524:33:0"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"7575:0:0"},"scope":335,"src":"7502:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":297,"nodeType":"Block","src":"7985:165:0","statements":[{"condition":{"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7999:23:0","subExpression":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"8008:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"8014:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8000:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8000:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"7995:149:0","trueBody":{"id":295,"nodeType":"Block","src":"8024:120:0","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":279,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8038:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":281,"indexExpression":{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"8045:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8038:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8051:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8038:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":284,"indexExpression":{"id":283,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"8059:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8038:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8070:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8038:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"ExpressionStatement","src":"8038:36:0"},{"eventCall":{"arguments":[{"id":289,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"8105:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"8111:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"8120:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8120:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":288,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"8093:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8093:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"EmitStatement","src":"8088:45:0"}]}}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"7755:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":298,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7926:10:0","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"role","nameLocation":"7945:4:0","nodeType":"VariableDeclaration","scope":298,"src":"7937:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7937:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"7959:7:0","nodeType":"VariableDeclaration","scope":298,"src":"7951:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"7951:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7936:31:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[],"src":"7985:0:0"},"scope":335,"src":"7917:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"8390:165:0","statements":[{"condition":{"arguments":[{"id":307,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8412:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":308,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8418:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8404:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8404:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"nodeType":"IfStatement","src":"8400:149:0","trueBody":{"id":326,"nodeType":"Block","src":"8428:121:0","statements":[{"expression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":310,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8442:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":312,"indexExpression":{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8449:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8442:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8455:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8442:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":315,"indexExpression":{"id":314,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8463:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8442:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8474:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8442:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"ExpressionStatement","src":"8442:37:0"},{"eventCall":{"arguments":[{"id":320,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8510:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8516:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"8525:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8525:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"8498:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8498:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"8493:45:0"}]}}]},"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"8156:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8330:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"8350:4:0","nodeType":"VariableDeclaration","scope":329,"src":"8342:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8342:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"account","nameLocation":"8364:7:0","nodeType":"VariableDeclaration","scope":329,"src":"8356:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"8356:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8341:31:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"8390:0:0"},"scope":335,"src":"8321:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"8561:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":334,"mutability":"mutable","name":"__gap","nameLocation":"8840:5:0","nodeType":"VariableDeclaration","scope":335,"src":"8820:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8820:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":333,"length":{"hexValue":"3439","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8828:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8820:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":336,"src":"2019:6829:0","usedErrors":[],"usedEvents":[347,356,365,788]}],"src":"108:8741:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":408,"linearizedBaseContracts":[408],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":347,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":347,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":347,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":347,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":356,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":356,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":356,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":356,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":365,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":365,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":365,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":365,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":375,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":372,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":408,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":383,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":408,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":391,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":391,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":408,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":399,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":399,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":408,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":407,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":407,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":408,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":409,"src":"209:2721:1","usedErrors":[],"usedEvents":[347,356,365]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[429]},"id":430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"132:133:2","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":429,"linearizedBaseContracts":[429],"name":"IERC1967Upgradeable","nameLocation":"276:19:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"302:68:2","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":416,"name":"Upgraded","nameLocation":"381:8:2","nodeType":"EventDefinition","parameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:2","nodeType":"VariableDeclaration","scope":416,"src":"390:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:2"},"src":"375:47:2"},{"anonymous":false,"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"428:67:2","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":423,"name":"AdminChanged","nameLocation":"506:12:2","nodeType":"EventDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:2","nodeType":"VariableDeclaration","scope":423,"src":"519:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":418,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":421,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:2","nodeType":"VariableDeclaration","scope":423,"src":"542:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:2"},"src":"500:60:2"},{"anonymous":false,"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"566:59:2","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":428,"name":"BeaconUpgraded","nameLocation":"636:14:2","nodeType":"EventDefinition","parameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:2","nodeType":"VariableDeclaration","scope":428,"src":"651:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":425,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:2"},"src":"630:45:2"}],"scope":430,"src":"266:411:2","usedErrors":[],"usedEvents":[416,423,428]}],"src":"107:571:2"},"id":2},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[439]},"id":440,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":431,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"138:203:3","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":439,"linearizedBaseContracts":[439],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"387:438:3","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":438,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:3","nodeType":"FunctionDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[],"src":"852:2:3"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"878:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:3"},"scope":439,"src":"830:57:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":440,"src":"342:547:3","usedErrors":[],"usedEvents":[]}],"src":"113:777:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1408],"ERC1967UpgradeUpgradeable":[763],"IBeaconUpgradeable":[773],"IERC1822ProxiableUpgradeable":[439],"IERC1967Upgradeable":[429],"Initializable":[942],"StorageSlotUpgradeable":[1560]},"id":764,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":441,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":442,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":764,"sourceUnit":774,"src":"141:42:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":764,"sourceUnit":430,"src":"184:50:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":764,"sourceUnit":440,"src":"235:56:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":764,"sourceUnit":1409,"src":"292:44:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":764,"sourceUnit":1561,"src":"337:48:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":764,"sourceUnit":943,"src":"386:36:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":449,"name":"Initializable","nameLocations":["656:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":942,"src":"656:13:4"},"id":450,"nodeType":"InheritanceSpecifier","src":"656:13:4"},{"baseName":{"id":451,"name":"IERC1967Upgradeable","nameLocations":["671:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":429,"src":"671:19:4"},"id":452,"nodeType":"InheritanceSpecifier","src":"671:19:4"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"424:184:4","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":763,"linearizedBaseContracts":[763,429,942],"name":"ERC1967UpgradeUpgradeable","nameLocation":"627:25:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":457,"nodeType":"Block","src":"756:7:4","statements":[]},"id":458,"implemented":true,"kind":"function","modifiers":[{"id":455,"kind":"modifierInvocation","modifierName":{"id":454,"name":"onlyInitializing","nameLocations":["739:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"739:16:4"},"nodeType":"ModifierInvocation","src":"739:16:4"}],"name":"__ERC1967Upgrade_init","nameLocation":"706:21:4","nodeType":"FunctionDefinition","parameters":{"id":453,"nodeType":"ParameterList","parameters":[],"src":"727:2:4"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[],"src":"756:0:4"},"scope":763,"src":"697:66:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":463,"nodeType":"Block","src":"838:7:4","statements":[]},"id":464,"implemented":true,"kind":"function","modifiers":[{"id":461,"kind":"modifierInvocation","modifierName":{"id":460,"name":"onlyInitializing","nameLocations":["821:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"821:16:4"},"nodeType":"ModifierInvocation","src":"821:16:4"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"778:31:4","nodeType":"FunctionDefinition","parameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"809:2:4"},"returnParameters":{"id":462,"nodeType":"ParameterList","parameters":[],"src":"838:0:4"},"scope":763,"src":"769:76:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":467,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"954:14:4","nodeType":"VariableDeclaration","scope":763,"src":"929:108:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"929:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"971:66:4","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":468,"nodeType":"StructuredDocumentation","src":"1044:214:4","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":471,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1289:20:4","nodeType":"VariableDeclaration","scope":763,"src":"1263:115:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1312:66:4","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":483,"nodeType":"Block","src":"1519:89:4","statements":[{"expression":{"expression":{"arguments":[{"id":479,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"1574:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":477,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1536:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1560_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1559:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"1536:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1456_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":481,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1596:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1455,"src":"1536:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":476,"id":482,"nodeType":"Return","src":"1529:72:4"}]},"documentation":{"id":472,"nodeType":"StructuredDocumentation","src":"1385:67:4","text":" @dev Returns the current implementation address."},"id":484,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1466:18:4","nodeType":"FunctionDefinition","parameters":{"id":473,"nodeType":"ParameterList","parameters":[],"src":"1484:2:4"},"returnParameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":484,"src":"1510:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"1510:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1509:9:4"},"scope":763,"src":"1457:151:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":507,"nodeType":"Block","src":"1762:218:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":493,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1810:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":491,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"1780:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1408_$","typeString":"type(library AddressUpgradeable)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1096,"src":"1780:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1780:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1830:47:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":490,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1772:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:106:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":497,"nodeType":"ExpressionStatement","src":"1772:106:4"},{"expression":{"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":501,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"1926:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":498,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1888:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1560_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1911:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"1888:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1456_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":503,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1948:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1455,"src":"1888:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":504,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1956:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1888:85:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":506,"nodeType":"ExpressionStatement","src":"1888:85:4"}]},"documentation":{"id":485,"nodeType":"StructuredDocumentation","src":"1614:80:4","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":508,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1708:18:4","nodeType":"FunctionDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":487,"mutability":"mutable","name":"newImplementation","nameLocation":"1735:17:4","nodeType":"VariableDeclaration","scope":508,"src":"1727:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":486,"name":"address","nodeType":"ElementaryTypeName","src":"1727:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1726:27:4"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[],"src":"1762:0:4"},"scope":763,"src":"1699:281:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":522,"nodeType":"Block","src":"2142:96:4","statements":[{"expression":{"arguments":[{"id":515,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"2171:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":514,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"2152:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2152:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":517,"nodeType":"ExpressionStatement","src":"2152:37:4"},{"eventCall":{"arguments":[{"id":519,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"2213:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":518,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"2204:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":521,"nodeType":"EmitStatement","src":"2199:32:4"}]},"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"1986:95:4","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":523,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2095:10:4","nodeType":"FunctionDefinition","parameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"newImplementation","nameLocation":"2114:17:4","nodeType":"VariableDeclaration","scope":523,"src":"2106:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"2106:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2105:27:4"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"2142:0:4"},"scope":763,"src":"2086:152:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":552,"nodeType":"Block","src":"2470:178:4","statements":[{"expression":{"arguments":[{"id":534,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2491:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":533,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"2480:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2480:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":536,"nodeType":"ExpressionStatement","src":"2480:29:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":537,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"2523:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2528:6:4","memberName":"length","nodeType":"MemberAccess","src":"2523:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2523:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":541,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2542:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2523:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":551,"nodeType":"IfStatement","src":"2519:123:4","trueBody":{"id":550,"nodeType":"Block","src":"2553:89:4","statements":[{"expression":{"arguments":[{"id":546,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2607:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":547,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"2626:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":543,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"2567:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1408_$","typeString":"type(library AddressUpgradeable)"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:20:4","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1295,"src":"2567:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:64:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":549,"nodeType":"ExpressionStatement","src":"2567:64:4"}]}}]},"documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"2244:123:4","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":553,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2381:17:4","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"mutability":"mutable","name":"newImplementation","nameLocation":"2407:17:4","nodeType":"VariableDeclaration","scope":553,"src":"2399:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"data","nameLocation":"2439:4:4","nodeType":"VariableDeclaration","scope":553,"src":"2426:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":527,"name":"bytes","nodeType":"ElementaryTypeName","src":"2426:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"forceCall","nameLocation":"2450:9:4","nodeType":"VariableDeclaration","scope":553,"src":"2445:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":529,"name":"bool","nodeType":"ElementaryTypeName","src":"2445:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2398:62:4"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[],"src":"2470:0:4"},"scope":763,"src":"2372:276:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":605,"nodeType":"Block","src":"2922:842:4","statements":[{"condition":{"expression":{"arguments":[{"id":565,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"3274:14:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":563,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3236:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1560_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:14:4","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":1493,"src":"3236:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$1459_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3236:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1459_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3290:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1458,"src":"3236:59:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":603,"nodeType":"Block","src":"3365:393:4","statements":[{"clauses":[{"block":{"id":588,"nodeType":"Block","src":"3470:115:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":582,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"3496:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":583,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"3504:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3496:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3526:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":581,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3488:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3488:82:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":587,"nodeType":"ExpressionStatement","src":"3488:82:4"}]},"errorName":"","id":589,"nodeType":"TryCatchClause","parameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"slot","nameLocation":"3464:4:4","nodeType":"VariableDeclaration","scope":589,"src":"3456:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3456:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3455:14:4"},"src":"3447:138:4"},{"block":{"id":594,"nodeType":"Block","src":"3592:89:4","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3617:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":590,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3610:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3610:56:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":593,"nodeType":"ExpressionStatement","src":"3610:56:4"}]},"errorName":"","id":595,"nodeType":"TryCatchClause","src":"3586:95:4"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":574,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"3412:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":573,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3383:28:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$439_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$439","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:13:4","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":438,"src":"3383:61:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:63:4","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":596,"nodeType":"TryStatement","src":"3379:302:4"},{"expression":{"arguments":[{"id":598,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"3712:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":599,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"3731:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":600,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"3737:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":597,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"3694:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3694:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":602,"nodeType":"ExpressionStatement","src":"3694:53:4"}]},"id":604,"nodeType":"IfStatement","src":"3232:526:4","trueBody":{"id":572,"nodeType":"Block","src":"3297:62:4","statements":[{"expression":{"arguments":[{"id":569,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"3330:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":568,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3311:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3311:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":571,"nodeType":"ExpressionStatement","src":"3311:37:4"}]}}]},"documentation":{"id":554,"nodeType":"StructuredDocumentation","src":"2654:161:4","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":606,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2829:21:4","nodeType":"FunctionDefinition","parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"newImplementation","nameLocation":"2859:17:4","nodeType":"VariableDeclaration","scope":606,"src":"2851:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"2851:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"data","nameLocation":"2891:4:4","nodeType":"VariableDeclaration","scope":606,"src":"2878:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":557,"name":"bytes","nodeType":"ElementaryTypeName","src":"2878:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"forceCall","nameLocation":"2902:9:4","nodeType":"VariableDeclaration","scope":606,"src":"2897:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":559,"name":"bool","nodeType":"ElementaryTypeName","src":"2897:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2850:62:4"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[],"src":"2922:0:4"},"scope":763,"src":"2820:944:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"3770:189:4","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":610,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3990:11:4","nodeType":"VariableDeclaration","scope":763,"src":"3964:106:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3964:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4004:66:4","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":622,"nodeType":"Block","src":"4185:80:4","statements":[{"expression":{"expression":{"arguments":[{"id":618,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"4240:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":616,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"4202:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1560_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4225:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"4202:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1456_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4202:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4253:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1455,"src":"4202:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":615,"id":621,"nodeType":"Return","src":"4195:63:4"}]},"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"4077:50:4","text":" @dev Returns the current admin."},"id":623,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4141:9:4","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"4150:2:4"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":623,"src":"4176:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":613,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4175:9:4"},"scope":763,"src":"4132:133:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":648,"nodeType":"Block","src":"4392:167:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":630,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"4410:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4430:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4422:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":631,"name":"address","nodeType":"ElementaryTypeName","src":"4422:7:4","typeDescriptions":{}}},"id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4422:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4410:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4434:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":629,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4402:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4402:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":638,"nodeType":"ExpressionStatement","src":"4402:73:4"},{"expression":{"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":642,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"4523:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":639,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"4485:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1560_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4508:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"4485:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1456_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4485:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4536:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1455,"src":"4485:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":645,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"4544:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4485:67:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":647,"nodeType":"ExpressionStatement","src":"4485:67:4"}]},"documentation":{"id":624,"nodeType":"StructuredDocumentation","src":"4271:71:4","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":649,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4356:9:4","nodeType":"FunctionDefinition","parameters":{"id":627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":626,"mutability":"mutable","name":"newAdmin","nameLocation":"4374:8:4","nodeType":"VariableDeclaration","scope":649,"src":"4366:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":625,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4365:18:4"},"returnParameters":{"id":628,"nodeType":"ParameterList","parameters":[],"src":"4392:0:4"},"scope":763,"src":"4347:212:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":665,"nodeType":"Block","src":"4719:86:4","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":656,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"4747:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":658,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"4760:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":655,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"4734:12:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":660,"nodeType":"EmitStatement","src":"4729:40:4"},{"expression":{"arguments":[{"id":662,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"4789:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":661,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"4779:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4779:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":664,"nodeType":"ExpressionStatement","src":"4779:19:4"}]},"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"4565:100:4","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":666,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4679:12:4","nodeType":"FunctionDefinition","parameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"newAdmin","nameLocation":"4700:8:4","nodeType":"VariableDeclaration","scope":666,"src":"4692:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":651,"name":"address","nodeType":"ElementaryTypeName","src":"4692:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4691:18:4"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"4719:0:4"},"scope":763,"src":"4670:135:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"4811:232:4","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":670,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5074:12:4","nodeType":"VariableDeclaration","scope":763,"src":"5048:107:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5048:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5089:66:4","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":682,"nodeType":"Block","src":"5272:81:4","statements":[{"expression":{"expression":{"arguments":[{"id":678,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"5327:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":676,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"5289:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1560_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5312:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"5289:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1456_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5289:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5341:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1455,"src":"5289:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":675,"id":681,"nodeType":"Return","src":"5282:64:4"}]},"documentation":{"id":671,"nodeType":"StructuredDocumentation","src":"5162:51:4","text":" @dev Returns the current beacon."},"id":683,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5227:10:4","nodeType":"FunctionDefinition","parameters":{"id":672,"nodeType":"ParameterList","parameters":[],"src":"5237:2:4"},"returnParameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":683,"src":"5263:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":673,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5262:9:4"},"scope":763,"src":"5218:135:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":718,"nodeType":"Block","src":"5482:368:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":692,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5530:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":690,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"5500:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1408_$","typeString":"type(library AddressUpgradeable)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5519:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1096,"src":"5500:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5500:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5542:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":689,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5492:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5492:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":696,"nodeType":"ExpressionStatement","src":"5492:90:4"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":701,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5662:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":700,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"5643:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$773_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$773","typeString":"contract IBeaconUpgradeable"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5673:14:4","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":772,"src":"5643:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":698,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"5613:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1408_$","typeString":"type(library AddressUpgradeable)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5632:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1096,"src":"5613:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5704:50:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":697,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5592:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:172:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":708,"nodeType":"ExpressionStatement","src":"5592:172:4"},{"expression":{"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":712,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"5812:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":709,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"5774:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1560_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5797:14:4","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"5774:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1456_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":714,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5826:5:4","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1455,"src":"5774:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":715,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5834:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5774:69:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":717,"nodeType":"ExpressionStatement","src":"5774:69:4"}]},"documentation":{"id":684,"nodeType":"StructuredDocumentation","src":"5359:71:4","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":719,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5444:10:4","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":686,"mutability":"mutable","name":"newBeacon","nameLocation":"5463:9:4","nodeType":"VariableDeclaration","scope":719,"src":"5455:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"5455:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5454:19:4"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"5482:0:4"},"scope":763,"src":"5435:415:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":756,"nodeType":"Block","src":"6249:239:4","statements":[{"expression":{"arguments":[{"id":730,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"6270:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":729,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"6259:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6259:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":732,"nodeType":"ExpressionStatement","src":"6259:21:4"},{"eventCall":{"arguments":[{"id":734,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"6310:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":733,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"6295:14:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6295:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":736,"nodeType":"EmitStatement","src":"6290:30:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":737,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"6334:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6339:6:4","memberName":"length","nodeType":"MemberAccess","src":"6334:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6348:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6334:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":741,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"6353:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6334:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":755,"nodeType":"IfStatement","src":"6330:152:4","trueBody":{"id":754,"nodeType":"Block","src":"6364:118:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":747,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"6437:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":746,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"6418:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$773_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$773","typeString":"contract IBeaconUpgradeable"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6448:14:4","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":772,"src":"6418:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":751,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"6466:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":743,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"6378:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1408_$","typeString":"type(library AddressUpgradeable)"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:20:4","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1295,"src":"6378:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6378:93:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":753,"nodeType":"ExpressionStatement","src":"6378:93:4"}]}}]},"documentation":{"id":720,"nodeType":"StructuredDocumentation","src":"5856:292:4","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":757,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6162:23:4","nodeType":"FunctionDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"newBeacon","nameLocation":"6194:9:4","nodeType":"VariableDeclaration","scope":757,"src":"6186:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":721,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":724,"mutability":"mutable","name":"data","nameLocation":"6218:4:4","nodeType":"VariableDeclaration","scope":757,"src":"6205:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":723,"name":"bytes","nodeType":"ElementaryTypeName","src":"6205:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"forceCall","nameLocation":"6229:9:4","nodeType":"VariableDeclaration","scope":757,"src":"6224:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":725,"name":"bool","nodeType":"ElementaryTypeName","src":"6224:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6185:54:4"},"returnParameters":{"id":728,"nodeType":"ParameterList","parameters":[],"src":"6249:0:4"},"scope":763,"src":"6153:335:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":758,"nodeType":"StructuredDocumentation","src":"6494:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":762,"mutability":"mutable","name":"__gap","nameLocation":"6773:5:4","nodeType":"VariableDeclaration","scope":763,"src":"6753:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"6753:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":761,"length":{"hexValue":"3530","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6761:2:4","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6753:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":764,"src":"609:6172:4","usedErrors":[],"usedEvents":[416,423,428,788]}],"src":"116:6666:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[773]},"id":774,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":765,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"118:79:5","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":773,"linearizedBaseContracts":[773],"name":"IBeaconUpgradeable","nameLocation":"208:18:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":767,"nodeType":"StructuredDocumentation","src":"233:162:5","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":772,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:5","nodeType":"FunctionDefinition","parameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"423:2:5"},"returnParameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":772,"src":"449:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:5"},"scope":773,"src":"400:58:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":774,"src":"198:262:5","usedErrors":[],"usedEvents":[]}],"src":"93:368:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1408],"Initializable":[942]},"id":943,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":775,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":776,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":943,"sourceUnit":1409,"src":"138:44:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"184:2209:6","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":942,"linearizedBaseContracts":[942],"name":"Initializable","nameLocation":"2412:13:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":778,"nodeType":"StructuredDocumentation","src":"2432:109:6","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":780,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:6","nodeType":"VariableDeclaration","scope":942,"src":"2546:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":779,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"2579:91:6","text":" @dev Indicates that the contract is in the process of being initialized."},"id":783,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:6","nodeType":"VariableDeclaration","scope":942,"src":"2675:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":782,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"2708:90:6","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":788,"name":"Initialized","nameLocation":"2809:11:6","nodeType":"EventDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:6","nodeType":"VariableDeclaration","scope":788,"src":"2821:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":785,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:6"},"src":"2803:33:6"},{"body":{"id":843,"nodeType":"Block","src":"3269:483:6","statements":[{"assignments":[792],"declarations":[{"constant":false,"id":792,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:6","nodeType":"VariableDeclaration","scope":843,"src":"3279:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":791,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":795,"initialValue":{"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:6","subExpression":{"id":793,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"3302:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":797,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"3347:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":798,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"3365:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":802,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:6","subExpression":{"arguments":[{"arguments":[{"id":807,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$942","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$942","typeString":"contract Initializable"}],"id":806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:6","typeDescriptions":{}}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":803,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"3388:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1408_$","typeString":"type(library AddressUpgradeable)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1096,"src":"3388:29:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":811,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"3436:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":796,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":819,"nodeType":"ExpressionStatement","src":"3325:201:6"},{"expression":{"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":820,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"3536:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":823,"nodeType":"ExpressionStatement","src":"3536:16:6"},{"condition":{"id":824,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"3566:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":830,"nodeType":"IfStatement","src":"3562:65:6","trueBody":{"id":829,"nodeType":"Block","src":"3582:45:6","statements":[{"expression":{"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":825,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"3596:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":828,"nodeType":"ExpressionStatement","src":"3596:20:6"}]}},{"id":831,"nodeType":"PlaceholderStatement","src":"3636:1:6"},{"condition":{"id":832,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"3651:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":842,"nodeType":"IfStatement","src":"3647:99:6","trueBody":{"id":841,"nodeType":"Block","src":"3667:79:6","statements":[{"expression":{"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":833,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"3681:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":836,"nodeType":"ExpressionStatement","src":"3681:21:6"},{"eventCall":{"arguments":[{"hexValue":"31","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":837,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"3721:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":840,"nodeType":"EmitStatement","src":"3716:19:6"}]}}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"2842:399:6","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":844,"name":"initializer","nameLocation":"3255:11:6","nodeType":"ModifierDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[],"src":"3266:2:6"},"src":"3246:506:6","virtual":false,"visibility":"internal"},{"body":{"id":876,"nodeType":"Block","src":"4863:255:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:6","subExpression":{"id":850,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"4882:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":852,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4899:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":853,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"4914:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":849,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":858,"nodeType":"ExpressionStatement","src":"4873:99:6"},{"expression":{"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":859,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4982:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":860,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"4997:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":862,"nodeType":"ExpressionStatement","src":"4982:22:6"},{"expression":{"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":863,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"5014:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":866,"nodeType":"ExpressionStatement","src":"5014:20:6"},{"id":867,"nodeType":"PlaceholderStatement","src":"5044:1:6"},{"expression":{"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":868,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"5055:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":871,"nodeType":"ExpressionStatement","src":"5055:21:6"},{"eventCall":{"arguments":[{"id":873,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"5103:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":872,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"5091:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":875,"nodeType":"EmitStatement","src":"5086:25:6"}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"3758:1062:6","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":877,"name":"reinitializer","nameLocation":"4834:13:6","nodeType":"ModifierDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"version","nameLocation":"4854:7:6","nodeType":"VariableDeclaration","scope":877,"src":"4848:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":846,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:6"},"src":"4825:293:6","virtual":false,"visibility":"internal"},{"body":{"id":886,"nodeType":"Block","src":"5356:97:6","statements":[{"expression":{"arguments":[{"id":881,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"5374:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":880,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":884,"nodeType":"ExpressionStatement","src":"5366:69:6"},{"id":885,"nodeType":"PlaceholderStatement","src":"5445:1:6"}]},"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"5124:199:6","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":887,"name":"onlyInitializing","nameLocation":"5337:16:6","nodeType":"ModifierDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"5353:2:6"},"src":"5328:125:6","virtual":false,"visibility":"internal"},{"body":{"id":922,"nodeType":"Block","src":"5988:231:6","statements":[{"expression":{"arguments":[{"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:6","subExpression":{"id":892,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"6007:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":891,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":896,"nodeType":"ExpressionStatement","src":"5998:66:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":897,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"6078:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":899,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":898,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:6","memberName":"max","nodeType":"MemberAccess","src":"6094:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":921,"nodeType":"IfStatement","src":"6074:139:6","trueBody":{"id":920,"nodeType":"Block","src":"6111:102:6","statements":[{"expression":{"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":904,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"6125:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":906,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":905,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:6","memberName":"max","nodeType":"MemberAccess","src":"6140:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":911,"nodeType":"ExpressionStatement","src":"6125:30:6"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":914,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":913,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:6","memberName":"max","nodeType":"MemberAccess","src":"6186:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":912,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"6174:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"EmitStatement","src":"6169:33:6"}]}}]},"documentation":{"id":888,"nodeType":"StructuredDocumentation","src":"5459:475:6","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":923,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:6","nodeType":"FunctionDefinition","parameters":{"id":889,"nodeType":"ParameterList","parameters":[],"src":"5968:2:6"},"returnParameters":{"id":890,"nodeType":"ParameterList","parameters":[],"src":"5988:0:6"},"scope":942,"src":"5939:280:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":931,"nodeType":"Block","src":"6393:36:6","statements":[{"expression":{"id":929,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"6410:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":928,"id":930,"nodeType":"Return","src":"6403:19:6"}]},"documentation":{"id":924,"nodeType":"StructuredDocumentation","src":"6225:99:6","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":932,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:6","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[],"src":"6360:2:6"},"returnParameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":932,"src":"6386:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":926,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:6"},"scope":942,"src":"6329:100:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":940,"nodeType":"Block","src":"6601:37:6","statements":[{"expression":{"id":938,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"6618:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":937,"id":939,"nodeType":"Return","src":"6611:20:6"}]},"documentation":{"id":933,"nodeType":"StructuredDocumentation","src":"6435:105:6","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":941,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:6","nodeType":"FunctionDefinition","parameters":{"id":934,"nodeType":"ParameterList","parameters":[],"src":"6569:2:6"},"returnParameters":{"id":937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":941,"src":"6595:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":935,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:6"},"scope":942,"src":"6545:93:6","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":943,"src":"2394:4246:6","usedErrors":[],"usedEvents":[788]}],"src":"113:6528:6"},"id":6},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1408],"ERC1967UpgradeUpgradeable":[763],"IBeaconUpgradeable":[773],"IERC1822ProxiableUpgradeable":[439],"IERC1967Upgradeable":[429],"Initializable":[942],"StorageSlotUpgradeable":[1560],"UUPSUpgradeable":[1078]},"id":1079,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":944,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":945,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1079,"sourceUnit":440,"src":"140:56:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":946,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1079,"sourceUnit":764,"src":"197:50:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1079,"sourceUnit":943,"src":"248:29:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":949,"name":"Initializable","nameLocations":["965:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":942,"src":"965:13:7"},"id":950,"nodeType":"InheritanceSpecifier","src":"965:13:7"},{"baseName":{"id":951,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":439,"src":"980:28:7"},"id":952,"nodeType":"InheritanceSpecifier","src":"980:28:7"},{"baseName":{"id":953,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":763,"src":"1010:25:7"},"id":954,"nodeType":"InheritanceSpecifier","src":"1010:25:7"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":948,"nodeType":"StructuredDocumentation","src":"279:648:7","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1078,"linearizedBaseContracts":[1078,763,429,439,942],"name":"UUPSUpgradeable","nameLocation":"946:15:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":959,"nodeType":"Block","src":"1102:7:7","statements":[]},"id":960,"implemented":true,"kind":"function","modifiers":[{"id":957,"kind":"modifierInvocation","modifierName":{"id":956,"name":"onlyInitializing","nameLocations":["1085:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"1085:16:7"},"nodeType":"ModifierInvocation","src":"1085:16:7"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:7","nodeType":"FunctionDefinition","parameters":{"id":955,"nodeType":"ParameterList","parameters":[],"src":"1073:2:7"},"returnParameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"1102:0:7"},"scope":1078,"src":"1042:67:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":965,"nodeType":"Block","src":"1185:7:7","statements":[]},"id":966,"implemented":true,"kind":"function","modifiers":[{"id":963,"kind":"modifierInvocation","modifierName":{"id":962,"name":"onlyInitializing","nameLocations":["1168:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"1168:16:7"},"nodeType":"ModifierInvocation","src":"1168:16:7"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:7","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[],"src":"1156:2:7"},"returnParameters":{"id":964,"nodeType":"ParameterList","parameters":[],"src":"1185:0:7"},"scope":1078,"src":"1115:77:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":967,"nodeType":"StructuredDocumentation","src":"1197:87:7","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":973,"mutability":"immutable","name":"__self","nameLocation":"1315:6:7","nodeType":"VariableDeclaration","scope":1078,"src":"1289:48:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":971,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1078","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1078","typeString":"contract UUPSUpgradeable"}],"id":970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:7","typeDescriptions":{}}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":995,"nodeType":"Block","src":"1863:205:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":979,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1078","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1078","typeString":"contract UUPSUpgradeable"}],"id":978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":977,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:7","typeDescriptions":{}}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":981,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"1898:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":976,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":985,"nodeType":"ExpressionStatement","src":"1873:80:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":987,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"1971:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":989,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"1995:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":986,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":993,"nodeType":"ExpressionStatement","src":"1963:87:7"},{"id":994,"nodeType":"PlaceholderStatement","src":"2060:1:7"}]},"documentation":{"id":974,"nodeType":"StructuredDocumentation","src":"1344:493:7","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":996,"name":"onlyProxy","nameLocation":"1851:9:7","nodeType":"ModifierDefinition","parameters":{"id":975,"nodeType":"ParameterList","parameters":[],"src":"1860:2:7"},"src":"1842:226:7","virtual":false,"visibility":"internal"},{"body":{"id":1010,"nodeType":"Block","src":"2298:120:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1002,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1078","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1078","typeString":"contract UUPSUpgradeable"}],"id":1001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:7","typeDescriptions":{}}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1004,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"2333:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":999,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1008,"nodeType":"ExpressionStatement","src":"2308:92:7"},{"id":1009,"nodeType":"PlaceholderStatement","src":"2410:1:7"}]},"documentation":{"id":997,"nodeType":"StructuredDocumentation","src":"2074:195:7","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1011,"name":"notDelegated","nameLocation":"2283:12:7","nodeType":"ModifierDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[],"src":"2295:2:7"},"src":"2274:144:7","virtual":false,"visibility":"internal"},{"baseFunctions":[438],"body":{"id":1022,"nodeType":"Block","src":"3093:44:7","statements":[{"expression":{"id":1020,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"3110:20:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1019,"id":1021,"nodeType":"Return","src":"3103:27:7"}]},"documentation":{"id":1012,"nodeType":"StructuredDocumentation","src":"2424:577:7","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1023,"implemented":true,"kind":"function","modifiers":[{"id":1016,"kind":"modifierInvocation","modifierName":{"id":1015,"name":"notDelegated","nameLocations":["3062:12:7"],"nodeType":"IdentifierPath","referencedDeclaration":1011,"src":"3062:12:7"},"nodeType":"ModifierInvocation","src":"3062:12:7"}],"name":"proxiableUUID","nameLocation":"3015:13:7","nodeType":"FunctionDefinition","overrides":{"id":1014,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:7"},"parameters":{"id":1013,"nodeType":"ParameterList","parameters":[],"src":"3028:2:7"},"returnParameters":{"id":1019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1023,"src":"3084:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1017,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:7"},"scope":1078,"src":"3006:131:7","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1044,"nodeType":"Block","src":"3458:124:7","statements":[{"expression":{"arguments":[{"id":1032,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"3486:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1031,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"3468:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3468:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1034,"nodeType":"ExpressionStatement","src":"3468:36:7"},{"expression":{"arguments":[{"id":1036,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"3536:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3555:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1037,"name":"bytes","nodeType":"ElementaryTypeName","src":"3559:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3555:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3569:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1035,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3514:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1043,"nodeType":"ExpressionStatement","src":"3514:61:7"}]},"documentation":{"id":1024,"nodeType":"StructuredDocumentation","src":"3143:239:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":1045,"implemented":true,"kind":"function","modifiers":[{"id":1029,"kind":"modifierInvocation","modifierName":{"id":1028,"name":"onlyProxy","nameLocations":["3448:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":996,"src":"3448:9:7"},"nodeType":"ModifierInvocation","src":"3448:9:7"}],"name":"upgradeTo","nameLocation":"3396:9:7","nodeType":"FunctionDefinition","parameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"newImplementation","nameLocation":"3414:17:7","nodeType":"VariableDeclaration","scope":1045,"src":"3406:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1025,"name":"address","nodeType":"ElementaryTypeName","src":"3406:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3405:27:7"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[],"src":"3458:0:7"},"scope":1078,"src":"3387:195:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1065,"nodeType":"Block","src":"4006:115:7","statements":[{"expression":{"arguments":[{"id":1056,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"4034:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1055,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"4016:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4016:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1058,"nodeType":"ExpressionStatement","src":"4016:36:7"},{"expression":{"arguments":[{"id":1060,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"4084:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1061,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"4103:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4109:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1059,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"4062:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1064,"nodeType":"ExpressionStatement","src":"4062:52:7"}]},"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"3588:308:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":1066,"implemented":true,"kind":"function","modifiers":[{"id":1053,"kind":"modifierInvocation","modifierName":{"id":1052,"name":"onlyProxy","nameLocations":["3996:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":996,"src":"3996:9:7"},"nodeType":"ModifierInvocation","src":"3996:9:7"}],"name":"upgradeToAndCall","nameLocation":"3910:16:7","nodeType":"FunctionDefinition","parameters":{"id":1051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"newImplementation","nameLocation":"3935:17:7","nodeType":"VariableDeclaration","scope":1066,"src":"3927:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"3927:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"data","nameLocation":"3967:4:7","nodeType":"VariableDeclaration","scope":1066,"src":"3954:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1049,"name":"bytes","nodeType":"ElementaryTypeName","src":"3954:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3926:46:7"},"returnParameters":{"id":1054,"nodeType":"ParameterList","parameters":[],"src":"4006:0:7"},"scope":1078,"src":"3901:220:7","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":1067,"nodeType":"StructuredDocumentation","src":"4127:397:7","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1072,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4538:17:7","nodeType":"FunctionDefinition","parameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1069,"mutability":"mutable","name":"newImplementation","nameLocation":"4564:17:7","nodeType":"VariableDeclaration","scope":1072,"src":"4556:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"4556:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4555:27:7"},"returnParameters":{"id":1071,"nodeType":"ParameterList","parameters":[],"src":"4599:0:7"},"scope":1078,"src":"4529:71:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"4606:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1077,"mutability":"mutable","name":"__gap","nameLocation":"4885:5:7","nodeType":"VariableDeclaration","scope":1078,"src":"4865:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1074,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1076,"length":{"hexValue":"3530","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4873:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4865:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1079,"src":"928:3965:7","usedErrors":[],"usedEvents":[416,423,428,788]}],"src":"115:4779:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1408]},"id":1409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1080,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1081,"nodeType":"StructuredDocumentation","src":"126:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1408,"linearizedBaseContracts":[1408],"name":"AddressUpgradeable","nameLocation":"202:18:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1095,"nodeType":"Block","src":"1489:254:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1089,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"1713:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:8","memberName":"code","nodeType":"MemberAccess","src":"1713:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:8","memberName":"length","nodeType":"MemberAccess","src":"1713:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1088,"id":1094,"nodeType":"Return","src":"1706:30:8"}]},"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"227:1191:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1096,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:8","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"mutability":"mutable","name":"account","nameLocation":"1451:7:8","nodeType":"VariableDeclaration","scope":1096,"src":"1443:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:8"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1096,"src":"1483:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1086,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:8"},"scope":1408,"src":"1423:320:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1129,"nodeType":"Block","src":"2729:241:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1107,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1408","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1408","typeString":"library AddressUpgradeable"}],"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1105,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:8","typeDescriptions":{}}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:8","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1110,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2772:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1104,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1114,"nodeType":"ExpressionStatement","src":"2739:73:8"},{"assignments":[1116,null],"declarations":[{"constant":false,"id":1116,"mutability":"mutable","name":"success","nameLocation":"2829:7:8","nodeType":"VariableDeclaration","scope":1129,"src":"2824:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1115,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1123,"initialValue":{"arguments":[{"hexValue":"","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1117,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"2842:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:8","memberName":"call","nodeType":"MemberAccess","src":"2842:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1119,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2864:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:8"},{"expression":{"arguments":[{"id":1125,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"2893:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1124,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"ExpressionStatement","src":"2885:78:8"}]},"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"1749:904:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1130,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:8","nodeType":"FunctionDefinition","parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:8","nodeType":"VariableDeclaration","scope":1130,"src":"2677:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"amount","nameLocation":"2712:6:8","nodeType":"VariableDeclaration","scope":1130,"src":"2704:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:8"},"returnParameters":{"id":1103,"nodeType":"ParameterList","parameters":[],"src":"2729:0:8"},"scope":1408,"src":"2658:312:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1147,"nodeType":"Block","src":"3801:96:8","statements":[{"expression":{"arguments":[{"id":1141,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"3840:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1142,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"3848:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1140,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1188,1232],"referencedDeclaration":1232,"src":"3818:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1139,"id":1146,"nodeType":"Return","src":"3811:79:8"}]},"documentation":{"id":1131,"nodeType":"StructuredDocumentation","src":"2976:731:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1148,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:8","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"mutability":"mutable","name":"target","nameLocation":"3742:6:8","nodeType":"VariableDeclaration","scope":1148,"src":"3734:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"data","nameLocation":"3763:4:8","nodeType":"VariableDeclaration","scope":1148,"src":"3750:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1134,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:8"},"returnParameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1148,"src":"3787:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1137,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:8"},"scope":1408,"src":"3712:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1167,"nodeType":"Block","src":"4266:76:8","statements":[{"expression":{"arguments":[{"id":1161,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"4305:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1162,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"4313:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1164,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"4322:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1160,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1188,1232],"referencedDeclaration":1232,"src":"4283:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1159,"id":1166,"nodeType":"Return","src":"4276:59:8"}]},"documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"3903:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1168,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:8","nodeType":"FunctionDefinition","parameters":{"id":1156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"target","nameLocation":"4158:6:8","nodeType":"VariableDeclaration","scope":1168,"src":"4150:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1150,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1153,"mutability":"mutable","name":"data","nameLocation":"4187:4:8","nodeType":"VariableDeclaration","scope":1168,"src":"4174:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1152,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1155,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:8","nodeType":"VariableDeclaration","scope":1168,"src":"4201:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1154,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:8"},"returnParameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1168,"src":"4252:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1157,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:8"},"scope":1408,"src":"4119:223:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1187,"nodeType":"Block","src":"4817:111:8","statements":[{"expression":{"arguments":[{"id":1181,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"4856:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1182,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"4864:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4870:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1180,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1188,1232],"referencedDeclaration":1232,"src":"4834:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1179,"id":1186,"nodeType":"Return","src":"4827:94:8"}]},"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"4348:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1188,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:8","nodeType":"FunctionDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"target","nameLocation":"4743:6:8","nodeType":"VariableDeclaration","scope":1188,"src":"4735:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"data","nameLocation":"4764:4:8","nodeType":"VariableDeclaration","scope":1188,"src":"4751:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1172,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1175,"mutability":"mutable","name":"value","nameLocation":"4778:5:8","nodeType":"VariableDeclaration","scope":1188,"src":"4770:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:8"},"returnParameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1188,"src":"4803:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1177,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:8"},"scope":1408,"src":"4704:224:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1231,"nodeType":"Block","src":"5355:267:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1205,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1408","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1408","typeString":"library AddressUpgradeable"}],"id":1204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:8","typeDescriptions":{}}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:8","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"5398:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1202,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1212,"nodeType":"ExpressionStatement","src":"5365:81:8"},{"assignments":[1214,1216],"declarations":[{"constant":false,"id":1214,"mutability":"mutable","name":"success","nameLocation":"5462:7:8","nodeType":"VariableDeclaration","scope":1231,"src":"5457:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1213,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:8","nodeType":"VariableDeclaration","scope":1231,"src":"5471:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1215,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1223,"initialValue":{"arguments":[{"id":1221,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"5524:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1217,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"5498:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:8","memberName":"call","nodeType":"MemberAccess","src":"5498:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"5517:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:8"},{"expression":{"arguments":[{"id":1225,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"5573:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1226,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"5581:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1227,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"5590:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1228,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"5602:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1224,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"5546:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1201,"id":1230,"nodeType":"Return","src":"5539:76:8"}]},"documentation":{"id":1189,"nodeType":"StructuredDocumentation","src":"4934:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1232,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:8","nodeType":"FunctionDefinition","parameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"target","nameLocation":"5224:6:8","nodeType":"VariableDeclaration","scope":1232,"src":"5216:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1190,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1193,"mutability":"mutable","name":"data","nameLocation":"5253:4:8","nodeType":"VariableDeclaration","scope":1232,"src":"5240:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1192,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1195,"mutability":"mutable","name":"value","nameLocation":"5275:5:8","nodeType":"VariableDeclaration","scope":1232,"src":"5267:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1194,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1197,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:8","nodeType":"VariableDeclaration","scope":1232,"src":"5290:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1196,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:8"},"returnParameters":{"id":1201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1232,"src":"5341:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1199,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:8"},"scope":1408,"src":"5176:446:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1248,"nodeType":"Block","src":"5899:97:8","statements":[{"expression":{"arguments":[{"id":1243,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"5935:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1244,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"5943:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1242,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1249,1278],"referencedDeclaration":1278,"src":"5916:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1241,"id":1247,"nodeType":"Return","src":"5909:80:8"}]},"documentation":{"id":1233,"nodeType":"StructuredDocumentation","src":"5628:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1249,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:8","nodeType":"FunctionDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"target","nameLocation":"5835:6:8","nodeType":"VariableDeclaration","scope":1249,"src":"5827:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1234,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"data","nameLocation":"5856:4:8","nodeType":"VariableDeclaration","scope":1249,"src":"5843:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1236,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:8"},"returnParameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1249,"src":"5885:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1239,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:8"},"scope":1408,"src":"5799:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1277,"nodeType":"Block","src":"6338:168:8","statements":[{"assignments":[1262,1264],"declarations":[{"constant":false,"id":1262,"mutability":"mutable","name":"success","nameLocation":"6354:7:8","nodeType":"VariableDeclaration","scope":1277,"src":"6349:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1261,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1264,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:8","nodeType":"VariableDeclaration","scope":1277,"src":"6363:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1263,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1269,"initialValue":{"arguments":[{"id":1267,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"6408:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1265,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"6390:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:8","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:8"},{"expression":{"arguments":[{"id":1271,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"6457:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1272,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"6465:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1273,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"6474:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1274,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"6486:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1270,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"6430:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1260,"id":1276,"nodeType":"Return","src":"6423:76:8"}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"6002:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1278,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:8","nodeType":"FunctionDefinition","parameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"target","nameLocation":"6225:6:8","nodeType":"VariableDeclaration","scope":1278,"src":"6217:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1251,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1254,"mutability":"mutable","name":"data","nameLocation":"6254:4:8","nodeType":"VariableDeclaration","scope":1278,"src":"6241:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1253,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1256,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:8","nodeType":"VariableDeclaration","scope":1278,"src":"6268:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1255,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:8"},"returnParameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1278,"src":"6324:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1258,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:8"},"scope":1408,"src":"6180:326:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1294,"nodeType":"Block","src":"6782:101:8","statements":[{"expression":{"arguments":[{"id":1289,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"6820:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1290,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"6828:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1288,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1295,1324],"referencedDeclaration":1324,"src":"6799:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1287,"id":1293,"nodeType":"Return","src":"6792:84:8"}]},"documentation":{"id":1279,"nodeType":"StructuredDocumentation","src":"6512:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1295,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:8","nodeType":"FunctionDefinition","parameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"target","nameLocation":"6723:6:8","nodeType":"VariableDeclaration","scope":1295,"src":"6715:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1280,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"data","nameLocation":"6744:4:8","nodeType":"VariableDeclaration","scope":1295,"src":"6731:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1282,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:8"},"returnParameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1295,"src":"6768:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1285,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:8"},"scope":1408,"src":"6685:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1323,"nodeType":"Block","src":"7224:170:8","statements":[{"assignments":[1308,1310],"declarations":[{"constant":false,"id":1308,"mutability":"mutable","name":"success","nameLocation":"7240:7:8","nodeType":"VariableDeclaration","scope":1323,"src":"7235:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1307,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:8","nodeType":"VariableDeclaration","scope":1323,"src":"7249:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1309,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1315,"initialValue":{"arguments":[{"id":1313,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"7296:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1311,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"7276:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:8","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:8"},{"expression":{"arguments":[{"id":1317,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"7345:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1318,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"7353:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1319,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"7362:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1320,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"7374:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1316,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7318:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1306,"id":1322,"nodeType":"Return","src":"7311:76:8"}]},"documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"6889:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1324,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:8","nodeType":"FunctionDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"target","nameLocation":"7116:6:8","nodeType":"VariableDeclaration","scope":1324,"src":"7108:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1297,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1300,"mutability":"mutable","name":"data","nameLocation":"7145:4:8","nodeType":"VariableDeclaration","scope":1324,"src":"7132:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1299,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:8","nodeType":"VariableDeclaration","scope":1324,"src":"7159:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1301,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:8"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1324,"src":"7210:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1304,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:8"},"scope":1408,"src":"7069:325:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1362,"nodeType":"Block","src":"7876:434:8","statements":[{"condition":{"id":1338,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"7890:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1360,"nodeType":"Block","src":"8246:58:8","statements":[{"expression":{"arguments":[{"id":1356,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"8268:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1357,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"8280:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1355,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"8260:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1359,"nodeType":"ExpressionStatement","src":"8260:33:8"}]},"id":1361,"nodeType":"IfStatement","src":"7886:418:8","trueBody":{"id":1354,"nodeType":"Block","src":"7899:341:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1339,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"7917:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:8","memberName":"length","nodeType":"MemberAccess","src":"7917:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1351,"nodeType":"IfStatement","src":"7913:286:8","trueBody":{"id":1350,"nodeType":"Block","src":"7941:258:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1345,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"8143:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1344,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"8132:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1343,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1349,"nodeType":"ExpressionStatement","src":"8124:60:8"}]}},{"expression":{"id":1352,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"8219:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1337,"id":1353,"nodeType":"Return","src":"8212:17:8"}]}}]},"documentation":{"id":1325,"nodeType":"StructuredDocumentation","src":"7400:277:8","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1363,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:8","nodeType":"FunctionDefinition","parameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1327,"mutability":"mutable","name":"target","nameLocation":"7735:6:8","nodeType":"VariableDeclaration","scope":1363,"src":"7727:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1326,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1329,"mutability":"mutable","name":"success","nameLocation":"7756:7:8","nodeType":"VariableDeclaration","scope":1363,"src":"7751:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1328,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1331,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:8","nodeType":"VariableDeclaration","scope":1363,"src":"7773:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1330,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1333,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:8","nodeType":"VariableDeclaration","scope":1363,"src":"7806:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1332,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:8"},"returnParameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1363,"src":"7862:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1335,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:8"},"scope":1408,"src":"7682:628:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1386,"nodeType":"Block","src":"8691:135:8","statements":[{"condition":{"id":1375,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"8705:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1384,"nodeType":"Block","src":"8762:58:8","statements":[{"expression":{"arguments":[{"id":1380,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"8784:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1381,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"8796:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1379,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"8776:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1383,"nodeType":"ExpressionStatement","src":"8776:33:8"}]},"id":1385,"nodeType":"IfStatement","src":"8701:119:8","trueBody":{"id":1378,"nodeType":"Block","src":"8714:42:8","statements":[{"expression":{"id":1376,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"8735:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1374,"id":1377,"nodeType":"Return","src":"8728:17:8"}]}}]},"documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"8316:210:8","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1387,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:8","nodeType":"FunctionDefinition","parameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"success","nameLocation":"8571:7:8","nodeType":"VariableDeclaration","scope":1387,"src":"8566:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1365,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:8","nodeType":"VariableDeclaration","scope":1387,"src":"8588:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1367,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:8","nodeType":"VariableDeclaration","scope":1387,"src":"8621:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1369,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:8"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1387,"src":"8677:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1372,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:8"},"scope":1408,"src":"8531:295:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1406,"nodeType":"Block","src":"8915:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1394,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"8991:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:8","memberName":"length","nodeType":"MemberAccess","src":"8991:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1404,"nodeType":"Block","src":"9321:45:8","statements":[{"expression":{"arguments":[{"id":1401,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"9342:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1400,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1403,"nodeType":"ExpressionStatement","src":"9335:20:8"}]},"id":1405,"nodeType":"IfStatement","src":"8987:379:8","trueBody":{"id":1399,"nodeType":"Block","src":"9014:301:8","statements":[{"AST":{"nativeSrc":"9172:133:8","nodeType":"YulBlock","src":"9172:133:8","statements":[{"nativeSrc":"9190:40:8","nodeType":"YulVariableDeclaration","src":"9190:40:8","value":{"arguments":[{"name":"returndata","nativeSrc":"9219:10:8","nodeType":"YulIdentifier","src":"9219:10:8"}],"functionName":{"name":"mload","nativeSrc":"9213:5:8","nodeType":"YulIdentifier","src":"9213:5:8"},"nativeSrc":"9213:17:8","nodeType":"YulFunctionCall","src":"9213:17:8"},"variables":[{"name":"returndata_size","nativeSrc":"9194:15:8","nodeType":"YulTypedName","src":"9194:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9258:2:8","nodeType":"YulLiteral","src":"9258:2:8","type":"","value":"32"},{"name":"returndata","nativeSrc":"9262:10:8","nodeType":"YulIdentifier","src":"9262:10:8"}],"functionName":{"name":"add","nativeSrc":"9254:3:8","nodeType":"YulIdentifier","src":"9254:3:8"},"nativeSrc":"9254:19:8","nodeType":"YulFunctionCall","src":"9254:19:8"},{"name":"returndata_size","nativeSrc":"9275:15:8","nodeType":"YulIdentifier","src":"9275:15:8"}],"functionName":{"name":"revert","nativeSrc":"9247:6:8","nodeType":"YulIdentifier","src":"9247:6:8"},"nativeSrc":"9247:44:8","nodeType":"YulFunctionCall","src":"9247:44:8"},"nativeSrc":"9247:44:8","nodeType":"YulExpressionStatement","src":"9247:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1389,"isOffset":false,"isSlot":false,"src":"9219:10:8","valueSize":1},{"declaration":1389,"isOffset":false,"isSlot":false,"src":"9262:10:8","valueSize":1}],"id":1398,"nodeType":"InlineAssembly","src":"9163:142:8"}]}}]},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:8","nodeType":"FunctionDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:8","nodeType":"VariableDeclaration","scope":1407,"src":"8849:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1388,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1391,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:8","nodeType":"VariableDeclaration","scope":1407,"src":"8874:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1390,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:8"},"returnParameters":{"id":1393,"nodeType":"ParameterList","parameters":[],"src":"8915:0:8"},"scope":1408,"src":"8832:540:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1409,"src":"194:9180:8","usedErrors":[],"usedEvents":[]}],"src":"101:9274:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1408],"ContextUpgradeable":[1450],"Initializable":[942]},"id":1451,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1451,"sourceUnit":943,"src":"110:42:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1413,"name":"Initializable","nameLocations":["691:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":942,"src":"691:13:9"},"id":1414,"nodeType":"InheritanceSpecifier","src":"691:13:9"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1412,"nodeType":"StructuredDocumentation","src":"154:496:9","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1450,"linearizedBaseContracts":[1450,942],"name":"ContextUpgradeable","nameLocation":"669:18:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1419,"nodeType":"Block","src":"763:7:9","statements":[]},"id":1420,"implemented":true,"kind":"function","modifiers":[{"id":1417,"kind":"modifierInvocation","modifierName":{"id":1416,"name":"onlyInitializing","nameLocations":["746:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"746:16:9"},"nodeType":"ModifierInvocation","src":"746:16:9"}],"name":"__Context_init","nameLocation":"720:14:9","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[],"src":"734:2:9"},"returnParameters":{"id":1418,"nodeType":"ParameterList","parameters":[],"src":"763:0:9"},"scope":1450,"src":"711:59:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1425,"nodeType":"Block","src":"838:7:9","statements":[]},"id":1426,"implemented":true,"kind":"function","modifiers":[{"id":1423,"kind":"modifierInvocation","modifierName":{"id":1422,"name":"onlyInitializing","nameLocations":["821:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"821:16:9"},"nodeType":"ModifierInvocation","src":"821:16:9"}],"name":"__Context_init_unchained","nameLocation":"785:24:9","nodeType":"FunctionDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[],"src":"809:2:9"},"returnParameters":{"id":1424,"nodeType":"ParameterList","parameters":[],"src":"838:0:9"},"scope":1450,"src":"776:69:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1434,"nodeType":"Block","src":"912:34:9","statements":[{"expression":{"expression":{"id":1431,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:9","memberName":"sender","nodeType":"MemberAccess","src":"929:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1430,"id":1433,"nodeType":"Return","src":"922:17:9"}]},"id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:9","nodeType":"FunctionDefinition","parameters":{"id":1427,"nodeType":"ParameterList","parameters":[],"src":"869:2:9"},"returnParameters":{"id":1430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1435,"src":"903:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1428,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:9"},"scope":1450,"src":"850:96:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1443,"nodeType":"Block","src":"1019:32:9","statements":[{"expression":{"expression":{"id":1440,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:9","memberName":"data","nodeType":"MemberAccess","src":"1036:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1439,"id":1442,"nodeType":"Return","src":"1029:15:9"}]},"id":1444,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:9","nodeType":"FunctionDefinition","parameters":{"id":1436,"nodeType":"ParameterList","parameters":[],"src":"969:2:9"},"returnParameters":{"id":1439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1444,"src":"1003:14:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1437,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:9"},"scope":1450,"src":"952:99:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1445,"nodeType":"StructuredDocumentation","src":"1057:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1449,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:9","nodeType":"VariableDeclaration","scope":1450,"src":"1316:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1446,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1448,"length":{"hexValue":"3530","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:9","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1451,"src":"651:693:9","usedErrors":[],"usedEvents":[788]}],"src":"86:1259:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[1560]},"id":1561,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1452,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"218:1201:10","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1560,"linearizedBaseContracts":[1560],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":1456,"members":[{"constant":false,"id":1455,"mutability":"mutable","name":"value","nameLocation":"1494:5:10","nodeType":"VariableDeclaration","scope":1456,"src":"1486:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1454,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:10","nodeType":"StructDefinition","scope":1560,"src":"1457:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":1459,"members":[{"constant":false,"id":1458,"mutability":"mutable","name":"value","nameLocation":"1546:5:10","nodeType":"VariableDeclaration","scope":1459,"src":"1541:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1457,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:10","nodeType":"StructDefinition","scope":1560,"src":"1512:46:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":1462,"members":[{"constant":false,"id":1461,"mutability":"mutable","name":"value","nameLocation":"1601:5:10","nodeType":"VariableDeclaration","scope":1462,"src":"1593:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:10","nodeType":"StructDefinition","scope":1560,"src":"1564:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":1465,"members":[{"constant":false,"id":1464,"mutability":"mutable","name":"value","nameLocation":"1656:5:10","nodeType":"VariableDeclaration","scope":1465,"src":"1648:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1463,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:10","nodeType":"StructDefinition","scope":1560,"src":"1619:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":1468,"members":[{"constant":false,"id":1467,"mutability":"mutable","name":"value","nameLocation":"1709:5:10","nodeType":"VariableDeclaration","scope":1468,"src":"1702:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1466,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:10","nodeType":"StructDefinition","scope":1560,"src":"1674:47:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":1471,"members":[{"constant":false,"id":1470,"mutability":"mutable","name":"value","nameLocation":"1760:5:10","nodeType":"VariableDeclaration","scope":1471,"src":"1754:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1469,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:10","nodeType":"StructDefinition","scope":1560,"src":"1727:45:10","visibility":"public"},{"body":{"id":1481,"nodeType":"Block","src":"1954:106:10","statements":[{"AST":{"nativeSrc":"2016:38:10","nodeType":"YulBlock","src":"2016:38:10","statements":[{"nativeSrc":"2030:14:10","nodeType":"YulAssignment","src":"2030:14:10","value":{"name":"slot","nativeSrc":"2040:4:10","nodeType":"YulIdentifier","src":"2040:4:10"},"variableNames":[{"name":"r.slot","nativeSrc":"2030:6:10","nodeType":"YulIdentifier","src":"2030:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1478,"isOffset":false,"isSlot":true,"src":"2030:6:10","suffix":"slot","valueSize":1},{"declaration":1474,"isOffset":false,"isSlot":false,"src":"2040:4:10","valueSize":1}],"id":1480,"nodeType":"InlineAssembly","src":"2007:47:10"}]},"documentation":{"id":1472,"nodeType":"StructuredDocumentation","src":"1778:87:10","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1482,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:10","nodeType":"FunctionDefinition","parameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"slot","nameLocation":"1902:4:10","nodeType":"VariableDeclaration","scope":1482,"src":"1894:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:10"},"returnParameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1478,"mutability":"mutable","name":"r","nameLocation":"1951:1:10","nodeType":"VariableDeclaration","scope":1482,"src":"1931:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":1477,"nodeType":"UserDefinedTypeName","pathNode":{"id":1476,"name":"AddressSlot","nameLocations":["1931:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1456,"src":"1931:11:10"},"referencedDeclaration":1456,"src":"1931:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1456_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:10"},"scope":1560,"src":"1870:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1492,"nodeType":"Block","src":"2242:106:10","statements":[{"AST":{"nativeSrc":"2304:38:10","nodeType":"YulBlock","src":"2304:38:10","statements":[{"nativeSrc":"2318:14:10","nodeType":"YulAssignment","src":"2318:14:10","value":{"name":"slot","nativeSrc":"2328:4:10","nodeType":"YulIdentifier","src":"2328:4:10"},"variableNames":[{"name":"r.slot","nativeSrc":"2318:6:10","nodeType":"YulIdentifier","src":"2318:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1489,"isOffset":false,"isSlot":true,"src":"2318:6:10","suffix":"slot","valueSize":1},{"declaration":1485,"isOffset":false,"isSlot":false,"src":"2328:4:10","valueSize":1}],"id":1491,"nodeType":"InlineAssembly","src":"2295:47:10"}]},"documentation":{"id":1483,"nodeType":"StructuredDocumentation","src":"2066:87:10","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1493,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:10","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1485,"mutability":"mutable","name":"slot","nameLocation":"2190:4:10","nodeType":"VariableDeclaration","scope":1493,"src":"2182:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:10"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"r","nameLocation":"2239:1:10","nodeType":"VariableDeclaration","scope":1493,"src":"2219:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1459_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":1488,"nodeType":"UserDefinedTypeName","pathNode":{"id":1487,"name":"BooleanSlot","nameLocations":["2219:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1459,"src":"2219:11:10"},"referencedDeclaration":1459,"src":"2219:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1459_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:10"},"scope":1560,"src":"2158:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1503,"nodeType":"Block","src":"2530:106:10","statements":[{"AST":{"nativeSrc":"2592:38:10","nodeType":"YulBlock","src":"2592:38:10","statements":[{"nativeSrc":"2606:14:10","nodeType":"YulAssignment","src":"2606:14:10","value":{"name":"slot","nativeSrc":"2616:4:10","nodeType":"YulIdentifier","src":"2616:4:10"},"variableNames":[{"name":"r.slot","nativeSrc":"2606:6:10","nodeType":"YulIdentifier","src":"2606:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1500,"isOffset":false,"isSlot":true,"src":"2606:6:10","suffix":"slot","valueSize":1},{"declaration":1496,"isOffset":false,"isSlot":false,"src":"2616:4:10","valueSize":1}],"id":1502,"nodeType":"InlineAssembly","src":"2583:47:10"}]},"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"2354:87:10","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:10","nodeType":"FunctionDefinition","parameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"slot","nameLocation":"2478:4:10","nodeType":"VariableDeclaration","scope":1504,"src":"2470:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:10"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"mutability":"mutable","name":"r","nameLocation":"2527:1:10","nodeType":"VariableDeclaration","scope":1504,"src":"2507:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1462_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":1499,"nodeType":"UserDefinedTypeName","pathNode":{"id":1498,"name":"Bytes32Slot","nameLocations":["2507:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1462,"src":"2507:11:10"},"referencedDeclaration":1462,"src":"2507:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1462_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:10"},"scope":1560,"src":"2446:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1514,"nodeType":"Block","src":"2818:106:10","statements":[{"AST":{"nativeSrc":"2880:38:10","nodeType":"YulBlock","src":"2880:38:10","statements":[{"nativeSrc":"2894:14:10","nodeType":"YulAssignment","src":"2894:14:10","value":{"name":"slot","nativeSrc":"2904:4:10","nodeType":"YulIdentifier","src":"2904:4:10"},"variableNames":[{"name":"r.slot","nativeSrc":"2894:6:10","nodeType":"YulIdentifier","src":"2894:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1511,"isOffset":false,"isSlot":true,"src":"2894:6:10","suffix":"slot","valueSize":1},{"declaration":1507,"isOffset":false,"isSlot":false,"src":"2904:4:10","valueSize":1}],"id":1513,"nodeType":"InlineAssembly","src":"2871:47:10"}]},"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"2642:87:10","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1515,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:10","nodeType":"FunctionDefinition","parameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"slot","nameLocation":"2766:4:10","nodeType":"VariableDeclaration","scope":1515,"src":"2758:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:10"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"r","nameLocation":"2815:1:10","nodeType":"VariableDeclaration","scope":1515,"src":"2795:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1465_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":1510,"nodeType":"UserDefinedTypeName","pathNode":{"id":1509,"name":"Uint256Slot","nameLocations":["2795:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1465,"src":"2795:11:10"},"referencedDeclaration":1465,"src":"2795:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1465_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:10"},"scope":1560,"src":"2734:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1525,"nodeType":"Block","src":"3103:106:10","statements":[{"AST":{"nativeSrc":"3165:38:10","nodeType":"YulBlock","src":"3165:38:10","statements":[{"nativeSrc":"3179:14:10","nodeType":"YulAssignment","src":"3179:14:10","value":{"name":"slot","nativeSrc":"3189:4:10","nodeType":"YulIdentifier","src":"3189:4:10"},"variableNames":[{"name":"r.slot","nativeSrc":"3179:6:10","nodeType":"YulIdentifier","src":"3179:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1522,"isOffset":false,"isSlot":true,"src":"3179:6:10","suffix":"slot","valueSize":1},{"declaration":1518,"isOffset":false,"isSlot":false,"src":"3189:4:10","valueSize":1}],"id":1524,"nodeType":"InlineAssembly","src":"3156:47:10"}]},"documentation":{"id":1516,"nodeType":"StructuredDocumentation","src":"2930:86:10","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1526,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:10","nodeType":"FunctionDefinition","parameters":{"id":1519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1518,"mutability":"mutable","name":"slot","nameLocation":"3052:4:10","nodeType":"VariableDeclaration","scope":1526,"src":"3044:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:10"},"returnParameters":{"id":1523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"r","nameLocation":"3100:1:10","nodeType":"VariableDeclaration","scope":1526,"src":"3081:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1468_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1521,"nodeType":"UserDefinedTypeName","pathNode":{"id":1520,"name":"StringSlot","nameLocations":["3081:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1468,"src":"3081:10:10"},"referencedDeclaration":1468,"src":"3081:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1468_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:10"},"scope":1560,"src":"3021:188:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1536,"nodeType":"Block","src":"3411:112:10","statements":[{"AST":{"nativeSrc":"3473:44:10","nodeType":"YulBlock","src":"3473:44:10","statements":[{"nativeSrc":"3487:20:10","nodeType":"YulAssignment","src":"3487:20:10","value":{"name":"store.slot","nativeSrc":"3497:10:10","nodeType":"YulIdentifier","src":"3497:10:10"},"variableNames":[{"name":"r.slot","nativeSrc":"3487:6:10","nodeType":"YulIdentifier","src":"3487:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1533,"isOffset":false,"isSlot":true,"src":"3487:6:10","suffix":"slot","valueSize":1},{"declaration":1529,"isOffset":false,"isSlot":true,"src":"3497:10:10","suffix":"slot","valueSize":1}],"id":1535,"nodeType":"InlineAssembly","src":"3464:53:10"}]},"documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"3215:101:10","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1537,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:10","nodeType":"FunctionDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"store","nameLocation":"3359:5:10","nodeType":"VariableDeclaration","scope":1537,"src":"3344:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1528,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:10"},"returnParameters":{"id":1534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1533,"mutability":"mutable","name":"r","nameLocation":"3408:1:10","nodeType":"VariableDeclaration","scope":1537,"src":"3389:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1468_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1532,"nodeType":"UserDefinedTypeName","pathNode":{"id":1531,"name":"StringSlot","nameLocations":["3389:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1468,"src":"3389:10:10"},"referencedDeclaration":1468,"src":"3389:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1468_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:10"},"scope":1560,"src":"3321:202:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1547,"nodeType":"Block","src":"3699:106:10","statements":[{"AST":{"nativeSrc":"3761:38:10","nodeType":"YulBlock","src":"3761:38:10","statements":[{"nativeSrc":"3775:14:10","nodeType":"YulAssignment","src":"3775:14:10","value":{"name":"slot","nativeSrc":"3785:4:10","nodeType":"YulIdentifier","src":"3785:4:10"},"variableNames":[{"name":"r.slot","nativeSrc":"3775:6:10","nodeType":"YulIdentifier","src":"3775:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1544,"isOffset":false,"isSlot":true,"src":"3775:6:10","suffix":"slot","valueSize":1},{"declaration":1540,"isOffset":false,"isSlot":false,"src":"3785:4:10","valueSize":1}],"id":1546,"nodeType":"InlineAssembly","src":"3752:47:10"}]},"documentation":{"id":1538,"nodeType":"StructuredDocumentation","src":"3529:85:10","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1548,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:10","nodeType":"FunctionDefinition","parameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"slot","nameLocation":"3649:4:10","nodeType":"VariableDeclaration","scope":1548,"src":"3641:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1539,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:10"},"returnParameters":{"id":1545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1544,"mutability":"mutable","name":"r","nameLocation":"3696:1:10","nodeType":"VariableDeclaration","scope":1548,"src":"3678:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1471_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1543,"nodeType":"UserDefinedTypeName","pathNode":{"id":1542,"name":"BytesSlot","nameLocations":["3678:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":1471,"src":"3678:9:10"},"referencedDeclaration":1471,"src":"3678:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1471_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:10"},"scope":1560,"src":"3619:186:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1558,"nodeType":"Block","src":"4002:112:10","statements":[{"AST":{"nativeSrc":"4064:44:10","nodeType":"YulBlock","src":"4064:44:10","statements":[{"nativeSrc":"4078:20:10","nodeType":"YulAssignment","src":"4078:20:10","value":{"name":"store.slot","nativeSrc":"4088:10:10","nodeType":"YulIdentifier","src":"4088:10:10"},"variableNames":[{"name":"r.slot","nativeSrc":"4078:6:10","nodeType":"YulIdentifier","src":"4078:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1555,"isOffset":false,"isSlot":true,"src":"4078:6:10","suffix":"slot","valueSize":1},{"declaration":1551,"isOffset":false,"isSlot":true,"src":"4088:10:10","suffix":"slot","valueSize":1}],"id":1557,"nodeType":"InlineAssembly","src":"4055:53:10"}]},"documentation":{"id":1549,"nodeType":"StructuredDocumentation","src":"3811:99:10","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1559,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:10","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"mutability":"mutable","name":"store","nameLocation":"3951:5:10","nodeType":"VariableDeclaration","scope":1559,"src":"3937:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1550,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:10"},"returnParameters":{"id":1556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"r","nameLocation":"3999:1:10","nodeType":"VariableDeclaration","scope":1559,"src":"3981:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1471_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1554,"nodeType":"UserDefinedTypeName","pathNode":{"id":1553,"name":"BytesSlot","nameLocations":["3981:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":1471,"src":"3981:9:10"},"referencedDeclaration":1471,"src":"3981:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1471_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:10"},"scope":1560,"src":"3915:199:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1561,"src":"1420:2696:10","usedErrors":[],"usedEvents":[]}],"src":"193:3924:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2711],"SignedMathUpgradeable":[2816],"StringsUpgradeable":[1789]},"id":1790,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1562,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1563,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1790,"sourceUnit":2712,"src":"126:36:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1790,"sourceUnit":2817,"src":"163:42:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1565,"nodeType":"StructuredDocumentation","src":"207:34:11","text":" @dev String operations."},"fullyImplemented":true,"id":1789,"linearizedBaseContracts":[1789],"name":"StringsUpgradeable","nameLocation":"250:18:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1568,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:11","nodeType":"VariableDeclaration","scope":1789,"src":"275:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1566,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1571,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:11","nodeType":"VariableDeclaration","scope":1789,"src":"335:43:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1569,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1618,"nodeType":"Block","src":"551:636:11","statements":[{"id":1617,"nodeType":"UncheckedBlock","src":"561:620:11","statements":[{"assignments":[1580],"declarations":[{"constant":false,"id":1580,"mutability":"mutable","name":"length","nameLocation":"593:6:11","nodeType":"VariableDeclaration","scope":1617,"src":"585:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1579,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1587,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"624:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1581,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"602:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2711_$","typeString":"type(library MathUpgradeable)"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:11","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2548,"src":"602:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:11"},{"assignments":[1589],"declarations":[{"constant":false,"id":1589,"mutability":"mutable","name":"buffer","nameLocation":"662:6:11","nodeType":"VariableDeclaration","scope":1617,"src":"648:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1588,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1594,"initialValue":{"arguments":[{"id":1592,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"682:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1590,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:11"},{"assignments":[1596],"declarations":[{"constant":false,"id":1596,"mutability":"mutable","name":"ptr","nameLocation":"711:3:11","nodeType":"VariableDeclaration","scope":1617,"src":"703:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1597,"nodeType":"VariableDeclarationStatement","src":"703:11:11"},{"AST":{"nativeSrc":"784:67:11","nodeType":"YulBlock","src":"784:67:11","statements":[{"nativeSrc":"802:35:11","nodeType":"YulAssignment","src":"802:35:11","value":{"arguments":[{"name":"buffer","nativeSrc":"813:6:11","nodeType":"YulIdentifier","src":"813:6:11"},{"arguments":[{"kind":"number","nativeSrc":"825:2:11","nodeType":"YulLiteral","src":"825:2:11","type":"","value":"32"},{"name":"length","nativeSrc":"829:6:11","nodeType":"YulIdentifier","src":"829:6:11"}],"functionName":{"name":"add","nativeSrc":"821:3:11","nodeType":"YulIdentifier","src":"821:3:11"},"nativeSrc":"821:15:11","nodeType":"YulFunctionCall","src":"821:15:11"}],"functionName":{"name":"add","nativeSrc":"809:3:11","nodeType":"YulIdentifier","src":"809:3:11"},"nativeSrc":"809:28:11","nodeType":"YulFunctionCall","src":"809:28:11"},"variableNames":[{"name":"ptr","nativeSrc":"802:3:11","nodeType":"YulIdentifier","src":"802:3:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1589,"isOffset":false,"isSlot":false,"src":"813:6:11","valueSize":1},{"declaration":1580,"isOffset":false,"isSlot":false,"src":"829:6:11","valueSize":1},{"declaration":1596,"isOffset":false,"isSlot":false,"src":"802:3:11","valueSize":1}],"id":1598,"nodeType":"InlineAssembly","src":"775:76:11"},{"body":{"id":1613,"nodeType":"Block","src":"877:267:11","statements":[{"expression":{"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:11","subExpression":{"id":1600,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"895:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1602,"nodeType":"ExpressionStatement","src":"895:5:11"},{"AST":{"nativeSrc":"978:84:11","nodeType":"YulBlock","src":"978:84:11","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1008:3:11","nodeType":"YulIdentifier","src":"1008:3:11"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1022:5:11","nodeType":"YulIdentifier","src":"1022:5:11"},{"kind":"number","nativeSrc":"1029:2:11","nodeType":"YulLiteral","src":"1029:2:11","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1018:3:11","nodeType":"YulIdentifier","src":"1018:3:11"},"nativeSrc":"1018:14:11","nodeType":"YulFunctionCall","src":"1018:14:11"},{"name":"_SYMBOLS","nativeSrc":"1034:8:11","nodeType":"YulIdentifier","src":"1034:8:11"}],"functionName":{"name":"byte","nativeSrc":"1013:4:11","nodeType":"YulIdentifier","src":"1013:4:11"},"nativeSrc":"1013:30:11","nodeType":"YulFunctionCall","src":"1013:30:11"}],"functionName":{"name":"mstore8","nativeSrc":"1000:7:11","nodeType":"YulIdentifier","src":"1000:7:11"},"nativeSrc":"1000:44:11","nodeType":"YulFunctionCall","src":"1000:44:11"},"nativeSrc":"1000:44:11","nodeType":"YulExpressionStatement","src":"1000:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1568,"isOffset":false,"isSlot":false,"src":"1034:8:11","valueSize":1},{"declaration":1596,"isOffset":false,"isSlot":false,"src":"1008:3:11","valueSize":1},{"declaration":1574,"isOffset":false,"isSlot":false,"src":"1022:5:11","valueSize":1}],"id":1603,"nodeType":"InlineAssembly","src":"969:93:11"},{"expression":{"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"1079:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1607,"nodeType":"ExpressionStatement","src":"1079:11:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"1112:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1612,"nodeType":"IfStatement","src":"1108:21:11","trueBody":{"id":1611,"nodeType":"Break","src":"1124:5:11"}}]},"condition":{"hexValue":"74727565","id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1614,"nodeType":"WhileStatement","src":"864:280:11"},{"expression":{"id":1615,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"1164:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1578,"id":1616,"nodeType":"Return","src":"1157:13:11"}]}]},"documentation":{"id":1572,"nodeType":"StructuredDocumentation","src":"385:90:11","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1619,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:11","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"value","nameLocation":"506:5:11","nodeType":"VariableDeclaration","scope":1619,"src":"498:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:11"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1619,"src":"536:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1576,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:11"},"scope":1789,"src":"480:707:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1646,"nodeType":"Block","src":"1357:114:11","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"1398:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:11","trueExpression":{"hexValue":"2d","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"1455:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1638,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"1429:21:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2816_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:11","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2815,"src":"1429:25:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1637,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1619,1647],"referencedDeclaration":1619,"src":"1420:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1629,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:11","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1627,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:11","typeDescriptions":{}}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1626,"id":1645,"nodeType":"Return","src":"1367:97:11"}]},"documentation":{"id":1620,"nodeType":"StructuredDocumentation","src":"1193:89:11","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1647,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:11","nodeType":"FunctionDefinition","parameters":{"id":1623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1622,"mutability":"mutable","name":"value","nameLocation":"1312:5:11","nodeType":"VariableDeclaration","scope":1647,"src":"1305:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1621,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:11"},"returnParameters":{"id":1626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1647,"src":"1342:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1624,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:11"},"scope":1789,"src":"1287:184:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1666,"nodeType":"Block","src":"1650:111:11","statements":[{"id":1665,"nodeType":"UncheckedBlock","src":"1660:95:11","statements":[{"expression":{"arguments":[{"id":1656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"1703:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1659,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"1733:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1657,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"1710:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2711_$","typeString":"type(library MathUpgradeable)"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:11","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2671,"src":"1710:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1655,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1667,1743,1763],"referencedDeclaration":1743,"src":"1691:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1654,"id":1664,"nodeType":"Return","src":"1684:60:11"}]}]},"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"1477:94:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1667,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:11","nodeType":"FunctionDefinition","parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"value","nameLocation":"1605:5:11","nodeType":"VariableDeclaration","scope":1667,"src":"1597:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:11"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1667,"src":"1635:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1652,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:11"},"scope":1789,"src":"1576:185:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1742,"nodeType":"Block","src":"1974:347:11","statements":[{"assignments":[1678],"declarations":[{"constant":false,"id":1678,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:11","nodeType":"VariableDeclaration","scope":1742,"src":"1984:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1677,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1687,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1682,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"2020:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1679,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:11"},{"expression":{"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1688,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2041:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1690,"indexExpression":{"hexValue":"30","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1693,"nodeType":"ExpressionStatement","src":"2041:15:11"},{"expression":{"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1694,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2066:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1696,"indexExpression":{"hexValue":"31","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1699,"nodeType":"ExpressionStatement","src":"2066:15:11"},{"body":{"id":1728,"nodeType":"Block","src":"2136:83:11","statements":[{"expression":{"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1714,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2150:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1716,"indexExpression":{"id":1715,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"2157:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1717,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"2162:8:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1721,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"2171:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:11","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1723,"nodeType":"ExpressionStatement","src":"2150:33:11"},{"expression":{"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"2197:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1727,"nodeType":"ExpressionStatement","src":"2197:11:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1708,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"2124:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1729,"initializationExpression":{"assignments":[1701],"declarations":[{"constant":false,"id":1701,"mutability":"mutable","name":"i","nameLocation":"2104:1:11","nodeType":"VariableDeclaration","scope":1729,"src":"2096:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1700,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1707,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1703,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"2112:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:11"},"loopExpression":{"expression":{"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:11","subExpression":{"id":1711,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"2133:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1713,"nodeType":"ExpressionStatement","src":"2131:3:11"},"nodeType":"ForStatement","src":"2091:128:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1731,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"2236:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1736,"nodeType":"ExpressionStatement","src":"2228:55:11"},{"expression":{"arguments":[{"id":1739,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2307:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1737,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:11","typeDescriptions":{}}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1676,"id":1741,"nodeType":"Return","src":"2293:21:11"}]},"documentation":{"id":1668,"nodeType":"StructuredDocumentation","src":"1767:112:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1743,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:11","nodeType":"FunctionDefinition","parameters":{"id":1673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"value","nameLocation":"1913:5:11","nodeType":"VariableDeclaration","scope":1743,"src":"1905:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1672,"mutability":"mutable","name":"length","nameLocation":"1928:6:11","nodeType":"VariableDeclaration","scope":1743,"src":"1920:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1671,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:11"},"returnParameters":{"id":1676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1743,"src":"1959:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1674,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:11"},"scope":1789,"src":"1884:437:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1762,"nodeType":"Block","src":"2546:76:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1756,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"2591:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1754,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:11","typeDescriptions":{}}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1752,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:11","typeDescriptions":{}}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1759,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"2599:15:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1751,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1667,1743,1763],"referencedDeclaration":1743,"src":"2563:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1750,"id":1761,"nodeType":"Return","src":"2556:59:11"}]},"documentation":{"id":1744,"nodeType":"StructuredDocumentation","src":"2327:141:11","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1763,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:11","nodeType":"FunctionDefinition","parameters":{"id":1747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"addr","nameLocation":"2502:4:11","nodeType":"VariableDeclaration","scope":1763,"src":"2494:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:11"},"returnParameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1763,"src":"2531:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1748,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:11"},"scope":1789,"src":"2473:149:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1787,"nodeType":"Block","src":"2777:66:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1776,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"2810:1:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1774,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:11","typeDescriptions":{}}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1773,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1782,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"2833:1:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1780,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:11","typeDescriptions":{}}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1779,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1772,"id":1786,"nodeType":"Return","src":"2787:49:11"}]},"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"2628:66:11","text":" @dev Returns true if the two strings are equal."},"id":1788,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:11","nodeType":"FunctionDefinition","parameters":{"id":1769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"a","nameLocation":"2728:1:11","nodeType":"VariableDeclaration","scope":1788,"src":"2714:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1765,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1768,"mutability":"mutable","name":"b","nameLocation":"2745:1:11","nodeType":"VariableDeclaration","scope":1788,"src":"2731:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1767,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:11"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1788,"src":"2771:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1770,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:11"},"scope":1789,"src":"2699:144:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1790,"src":"242:2603:11","usedErrors":[],"usedEvents":[]}],"src":"101:2745:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1408],"ERC165Upgradeable":[1833],"IERC165Upgradeable":[1845],"Initializable":[942]},"id":1834,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1791,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":1792,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1834,"sourceUnit":1846,"src":"124:34:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1793,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1834,"sourceUnit":943,"src":"159:45:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1795,"name":"Initializable","nameLocations":["822:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":942,"src":"822:13:12"},"id":1796,"nodeType":"InheritanceSpecifier","src":"822:13:12"},{"baseName":{"id":1797,"name":"IERC165Upgradeable","nameLocations":["837:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":1845,"src":"837:18:12"},"id":1798,"nodeType":"InheritanceSpecifier","src":"837:18:12"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1794,"nodeType":"StructuredDocumentation","src":"206:576:12","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1833,"linearizedBaseContracts":[1833,1845,942],"name":"ERC165Upgradeable","nameLocation":"801:17:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1803,"nodeType":"Block","src":"913:7:12","statements":[]},"id":1804,"implemented":true,"kind":"function","modifiers":[{"id":1801,"kind":"modifierInvocation","modifierName":{"id":1800,"name":"onlyInitializing","nameLocations":["896:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"896:16:12"},"nodeType":"ModifierInvocation","src":"896:16:12"}],"name":"__ERC165_init","nameLocation":"871:13:12","nodeType":"FunctionDefinition","parameters":{"id":1799,"nodeType":"ParameterList","parameters":[],"src":"884:2:12"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[],"src":"913:0:12"},"scope":1833,"src":"862:58:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1809,"nodeType":"Block","src":"987:7:12","statements":[]},"id":1810,"implemented":true,"kind":"function","modifiers":[{"id":1807,"kind":"modifierInvocation","modifierName":{"id":1806,"name":"onlyInitializing","nameLocations":["970:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":887,"src":"970:16:12"},"nodeType":"ModifierInvocation","src":"970:16:12"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:12","nodeType":"FunctionDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[],"src":"958:2:12"},"returnParameters":{"id":1808,"nodeType":"ParameterList","parameters":[],"src":"987:0:12"},"scope":1833,"src":"926:68:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1844],"body":{"id":1826,"nodeType":"Block","src":"1151:75:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1819,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"1168:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1821,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"1188:18:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1845_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1845_$","typeString":"type(contract IERC165Upgradeable)"}],"id":1820,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$1845","typeString":"type(contract IERC165Upgradeable)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1818,"id":1825,"nodeType":"Return","src":"1161:58:12"}]},"documentation":{"id":1811,"nodeType":"StructuredDocumentation","src":"999:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1827,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:12","nodeType":"FunctionDefinition","overrides":{"id":1815,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:12"},"parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1813,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:12","nodeType":"VariableDeclaration","scope":1827,"src":"1087:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1812,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:12"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1827,"src":"1145:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1816,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:12"},"scope":1833,"src":"1060:166:12","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1828,"nodeType":"StructuredDocumentation","src":"1232:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1832,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:12","nodeType":"VariableDeclaration","scope":1833,"src":"1491:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1831,"length":{"hexValue":"3530","id":1830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1834,"src":"783:736:12","usedErrors":[],"usedEvents":[788]}],"src":"99:1421:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[1845]},"id":1846,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1835,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1836,"nodeType":"StructuredDocumentation","src":"125:279:13","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1845,"linearizedBaseContracts":[1845],"name":"IERC165Upgradeable","nameLocation":"415:18:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1837,"nodeType":"StructuredDocumentation","src":"440:340:13","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1844,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:13","nodeType":"FunctionDefinition","parameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1839,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:13","nodeType":"VariableDeclaration","scope":1844,"src":"812:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1838,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:13"},"returnParameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1844,"src":"855:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1841,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:13"},"scope":1845,"src":"785:76:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1846,"src":"405:458:13","usedErrors":[],"usedEvents":[]}],"src":"100:764:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2711]},"id":2712,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1847,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1848,"nodeType":"StructuredDocumentation","src":"128:73:14","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2711,"linearizedBaseContracts":[2711],"name":"MathUpgradeable","nameLocation":"210:15:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1852,"members":[{"id":1849,"name":"Down","nameLocation":"256:4:14","nodeType":"EnumValue","src":"256:4:14"},{"id":1850,"name":"Up","nameLocation":"298:2:14","nodeType":"EnumValue","src":"298:2:14"},{"id":1851,"name":"Zero","nameLocation":"329:4:14","nodeType":"EnumValue","src":"329:4:14"}],"name":"Rounding","nameLocation":"237:8:14","nodeType":"EnumDefinition","src":"232:122:14"},{"body":{"id":1869,"nodeType":"Block","src":"491:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1862,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"508:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1863,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"512:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1866,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"520:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:14","trueExpression":{"id":1865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"516:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1861,"id":1868,"nodeType":"Return","src":"501:20:14"}]},"documentation":{"id":1853,"nodeType":"StructuredDocumentation","src":"360:59:14","text":" @dev Returns the largest of two numbers."},"id":1870,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:14","nodeType":"FunctionDefinition","parameters":{"id":1858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"a","nameLocation":"445:1:14","nodeType":"VariableDeclaration","scope":1870,"src":"437:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1857,"mutability":"mutable","name":"b","nameLocation":"456:1:14","nodeType":"VariableDeclaration","scope":1870,"src":"448:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1856,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:14"},"returnParameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1870,"src":"482:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1859,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:14"},"scope":2711,"src":"424:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1887,"nodeType":"Block","src":"666:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1880,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"683:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1881,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"687:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1884,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"695:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:14","trueExpression":{"id":1883,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"691:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1879,"id":1886,"nodeType":"Return","src":"676:20:14"}]},"documentation":{"id":1871,"nodeType":"StructuredDocumentation","src":"534:60:14","text":" @dev Returns the smallest of two numbers."},"id":1888,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:14","nodeType":"FunctionDefinition","parameters":{"id":1876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"a","nameLocation":"620:1:14","nodeType":"VariableDeclaration","scope":1888,"src":"612:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1872,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1875,"mutability":"mutable","name":"b","nameLocation":"631:1:14","nodeType":"VariableDeclaration","scope":1888,"src":"623:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1874,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:14"},"returnParameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1888,"src":"657:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1877,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:14"},"scope":2711,"src":"599:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1910,"nodeType":"Block","src":"887:82:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"942:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1899,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"946:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1901,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1902,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"952:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1903,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"956:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1897,"id":1909,"nodeType":"Return","src":"934:28:14"}]},"documentation":{"id":1889,"nodeType":"StructuredDocumentation","src":"709:102:14","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1911,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:14","nodeType":"FunctionDefinition","parameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"a","nameLocation":"841:1:14","nodeType":"VariableDeclaration","scope":1911,"src":"833:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1893,"mutability":"mutable","name":"b","nameLocation":"852:1:14","nodeType":"VariableDeclaration","scope":1911,"src":"844:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:14"},"returnParameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1911,"src":"878:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:14"},"scope":2711,"src":"816:153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1935,"nodeType":"Block","src":"1239:123:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"1327:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1925,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"1341:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1928,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1929,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"1350:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:14","trueExpression":{"hexValue":"30","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1920,"id":1934,"nodeType":"Return","src":"1320:35:14"}]},"documentation":{"id":1912,"nodeType":"StructuredDocumentation","src":"975:188:14","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1936,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:14","nodeType":"FunctionDefinition","parameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"a","nameLocation":"1193:1:14","nodeType":"VariableDeclaration","scope":1936,"src":"1185:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1913,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"b","nameLocation":"1204:1:14","nodeType":"VariableDeclaration","scope":1936,"src":"1196:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:14"},"returnParameters":{"id":1920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1936,"src":"1230:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1918,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:14"},"scope":2711,"src":"1168:194:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2058,"nodeType":"Block","src":"1776:4115:14","statements":[{"id":2057,"nodeType":"UncheckedBlock","src":"1786:4099:14","statements":[{"assignments":[1949],"declarations":[{"constant":false,"id":1949,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:14","nodeType":"VariableDeclaration","scope":2057,"src":"2107:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1948,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1950,"nodeType":"VariableDeclarationStatement","src":"2107:13:14"},{"assignments":[1952],"declarations":[{"constant":false,"id":1952,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:14","nodeType":"VariableDeclaration","scope":2057,"src":"2179:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1951,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1953,"nodeType":"VariableDeclarationStatement","src":"2179:13:14"},{"AST":{"nativeSrc":"2259:157:14","nodeType":"YulBlock","src":"2259:157:14","statements":[{"nativeSrc":"2277:30:14","nodeType":"YulVariableDeclaration","src":"2277:30:14","value":{"arguments":[{"name":"x","nativeSrc":"2294:1:14","nodeType":"YulIdentifier","src":"2294:1:14"},{"name":"y","nativeSrc":"2297:1:14","nodeType":"YulIdentifier","src":"2297:1:14"},{"arguments":[{"kind":"number","nativeSrc":"2304:1:14","nodeType":"YulLiteral","src":"2304:1:14","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2300:3:14","nodeType":"YulIdentifier","src":"2300:3:14"},"nativeSrc":"2300:6:14","nodeType":"YulFunctionCall","src":"2300:6:14"}],"functionName":{"name":"mulmod","nativeSrc":"2287:6:14","nodeType":"YulIdentifier","src":"2287:6:14"},"nativeSrc":"2287:20:14","nodeType":"YulFunctionCall","src":"2287:20:14"},"variables":[{"name":"mm","nativeSrc":"2281:2:14","nodeType":"YulTypedName","src":"2281:2:14","type":""}]},{"nativeSrc":"2324:18:14","nodeType":"YulAssignment","src":"2324:18:14","value":{"arguments":[{"name":"x","nativeSrc":"2337:1:14","nodeType":"YulIdentifier","src":"2337:1:14"},{"name":"y","nativeSrc":"2340:1:14","nodeType":"YulIdentifier","src":"2340:1:14"}],"functionName":{"name":"mul","nativeSrc":"2333:3:14","nodeType":"YulIdentifier","src":"2333:3:14"},"nativeSrc":"2333:9:14","nodeType":"YulFunctionCall","src":"2333:9:14"},"variableNames":[{"name":"prod0","nativeSrc":"2324:5:14","nodeType":"YulIdentifier","src":"2324:5:14"}]},{"nativeSrc":"2359:43:14","nodeType":"YulAssignment","src":"2359:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2376:2:14","nodeType":"YulIdentifier","src":"2376:2:14"},{"name":"prod0","nativeSrc":"2380:5:14","nodeType":"YulIdentifier","src":"2380:5:14"}],"functionName":{"name":"sub","nativeSrc":"2372:3:14","nodeType":"YulIdentifier","src":"2372:3:14"},"nativeSrc":"2372:14:14","nodeType":"YulFunctionCall","src":"2372:14:14"},{"arguments":[{"name":"mm","nativeSrc":"2391:2:14","nodeType":"YulIdentifier","src":"2391:2:14"},{"name":"prod0","nativeSrc":"2395:5:14","nodeType":"YulIdentifier","src":"2395:5:14"}],"functionName":{"name":"lt","nativeSrc":"2388:2:14","nodeType":"YulIdentifier","src":"2388:2:14"},"nativeSrc":"2388:13:14","nodeType":"YulFunctionCall","src":"2388:13:14"}],"functionName":{"name":"sub","nativeSrc":"2368:3:14","nodeType":"YulIdentifier","src":"2368:3:14"},"nativeSrc":"2368:34:14","nodeType":"YulFunctionCall","src":"2368:34:14"},"variableNames":[{"name":"prod1","nativeSrc":"2359:5:14","nodeType":"YulIdentifier","src":"2359:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1949,"isOffset":false,"isSlot":false,"src":"2324:5:14","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"2380:5:14","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"2395:5:14","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"2359:5:14","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"2294:1:14","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"2337:1:14","valueSize":1},{"declaration":1941,"isOffset":false,"isSlot":false,"src":"2297:1:14","valueSize":1},{"declaration":1941,"isOffset":false,"isSlot":false,"src":"2340:1:14","valueSize":1}],"id":1954,"nodeType":"InlineAssembly","src":"2250:166:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"2497:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1963,"nodeType":"IfStatement","src":"2493:368:14","trueBody":{"id":1962,"nodeType":"Block","src":"2509:352:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1958,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"2827:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1959,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"2835:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1947,"id":1961,"nodeType":"Return","src":"2820:26:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1965,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"2971:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1966,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"2985:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1964,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1970,"nodeType":"ExpressionStatement","src":"2963:53:14"},{"assignments":[1972],"declarations":[{"constant":false,"id":1972,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:14","nodeType":"VariableDeclaration","scope":2057,"src":"3272:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1973,"nodeType":"VariableDeclarationStatement","src":"3272:17:14"},{"AST":{"nativeSrc":"3312:291:14","nodeType":"YulBlock","src":"3312:291:14","statements":[{"nativeSrc":"3381:38:14","nodeType":"YulAssignment","src":"3381:38:14","value":{"arguments":[{"name":"x","nativeSrc":"3401:1:14","nodeType":"YulIdentifier","src":"3401:1:14"},{"name":"y","nativeSrc":"3404:1:14","nodeType":"YulIdentifier","src":"3404:1:14"},{"name":"denominator","nativeSrc":"3407:11:14","nodeType":"YulIdentifier","src":"3407:11:14"}],"functionName":{"name":"mulmod","nativeSrc":"3394:6:14","nodeType":"YulIdentifier","src":"3394:6:14"},"nativeSrc":"3394:25:14","nodeType":"YulFunctionCall","src":"3394:25:14"},"variableNames":[{"name":"remainder","nativeSrc":"3381:9:14","nodeType":"YulIdentifier","src":"3381:9:14"}]},{"nativeSrc":"3501:41:14","nodeType":"YulAssignment","src":"3501:41:14","value":{"arguments":[{"name":"prod1","nativeSrc":"3514:5:14","nodeType":"YulIdentifier","src":"3514:5:14"},{"arguments":[{"name":"remainder","nativeSrc":"3524:9:14","nodeType":"YulIdentifier","src":"3524:9:14"},{"name":"prod0","nativeSrc":"3535:5:14","nodeType":"YulIdentifier","src":"3535:5:14"}],"functionName":{"name":"gt","nativeSrc":"3521:2:14","nodeType":"YulIdentifier","src":"3521:2:14"},"nativeSrc":"3521:20:14","nodeType":"YulFunctionCall","src":"3521:20:14"}],"functionName":{"name":"sub","nativeSrc":"3510:3:14","nodeType":"YulIdentifier","src":"3510:3:14"},"nativeSrc":"3510:32:14","nodeType":"YulFunctionCall","src":"3510:32:14"},"variableNames":[{"name":"prod1","nativeSrc":"3501:5:14","nodeType":"YulIdentifier","src":"3501:5:14"}]},{"nativeSrc":"3559:30:14","nodeType":"YulAssignment","src":"3559:30:14","value":{"arguments":[{"name":"prod0","nativeSrc":"3572:5:14","nodeType":"YulIdentifier","src":"3572:5:14"},{"name":"remainder","nativeSrc":"3579:9:14","nodeType":"YulIdentifier","src":"3579:9:14"}],"functionName":{"name":"sub","nativeSrc":"3568:3:14","nodeType":"YulIdentifier","src":"3568:3:14"},"nativeSrc":"3568:21:14","nodeType":"YulFunctionCall","src":"3568:21:14"},"variableNames":[{"name":"prod0","nativeSrc":"3559:5:14","nodeType":"YulIdentifier","src":"3559:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1943,"isOffset":false,"isSlot":false,"src":"3407:11:14","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"3535:5:14","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"3559:5:14","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"3572:5:14","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"3501:5:14","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"3514:5:14","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"3381:9:14","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"3524:9:14","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"3579:9:14","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"3401:1:14","valueSize":1},{"declaration":1941,"isOffset":false,"isSlot":false,"src":"3404:1:14","valueSize":1}],"id":1974,"nodeType":"InlineAssembly","src":"3303:300:14"},{"assignments":[1976],"declarations":[{"constant":false,"id":1976,"mutability":"mutable","name":"twos","nameLocation":"3918:4:14","nodeType":"VariableDeclaration","scope":2057,"src":"3910:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1975,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1984,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1977,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"3925:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:14","subExpression":{"id":1978,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"3941:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1982,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:14"},{"AST":{"nativeSrc":"3980:362:14","nodeType":"YulBlock","src":"3980:362:14","statements":[{"nativeSrc":"4045:37:14","nodeType":"YulAssignment","src":"4045:37:14","value":{"arguments":[{"name":"denominator","nativeSrc":"4064:11:14","nodeType":"YulIdentifier","src":"4064:11:14"},{"name":"twos","nativeSrc":"4077:4:14","nodeType":"YulIdentifier","src":"4077:4:14"}],"functionName":{"name":"div","nativeSrc":"4060:3:14","nodeType":"YulIdentifier","src":"4060:3:14"},"nativeSrc":"4060:22:14","nodeType":"YulFunctionCall","src":"4060:22:14"},"variableNames":[{"name":"denominator","nativeSrc":"4045:11:14","nodeType":"YulIdentifier","src":"4045:11:14"}]},{"nativeSrc":"4149:25:14","nodeType":"YulAssignment","src":"4149:25:14","value":{"arguments":[{"name":"prod0","nativeSrc":"4162:5:14","nodeType":"YulIdentifier","src":"4162:5:14"},{"name":"twos","nativeSrc":"4169:4:14","nodeType":"YulIdentifier","src":"4169:4:14"}],"functionName":{"name":"div","nativeSrc":"4158:3:14","nodeType":"YulIdentifier","src":"4158:3:14"},"nativeSrc":"4158:16:14","nodeType":"YulFunctionCall","src":"4158:16:14"},"variableNames":[{"name":"prod0","nativeSrc":"4149:5:14","nodeType":"YulIdentifier","src":"4149:5:14"}]},{"nativeSrc":"4289:39:14","nodeType":"YulAssignment","src":"4289:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4309:1:14","nodeType":"YulLiteral","src":"4309:1:14","type":"","value":"0"},{"name":"twos","nativeSrc":"4312:4:14","nodeType":"YulIdentifier","src":"4312:4:14"}],"functionName":{"name":"sub","nativeSrc":"4305:3:14","nodeType":"YulIdentifier","src":"4305:3:14"},"nativeSrc":"4305:12:14","nodeType":"YulFunctionCall","src":"4305:12:14"},{"name":"twos","nativeSrc":"4319:4:14","nodeType":"YulIdentifier","src":"4319:4:14"}],"functionName":{"name":"div","nativeSrc":"4301:3:14","nodeType":"YulIdentifier","src":"4301:3:14"},"nativeSrc":"4301:23:14","nodeType":"YulFunctionCall","src":"4301:23:14"},{"kind":"number","nativeSrc":"4326:1:14","nodeType":"YulLiteral","src":"4326:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4297:3:14","nodeType":"YulIdentifier","src":"4297:3:14"},"nativeSrc":"4297:31:14","nodeType":"YulFunctionCall","src":"4297:31:14"},"variableNames":[{"name":"twos","nativeSrc":"4289:4:14","nodeType":"YulIdentifier","src":"4289:4:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1943,"isOffset":false,"isSlot":false,"src":"4045:11:14","valueSize":1},{"declaration":1943,"isOffset":false,"isSlot":false,"src":"4064:11:14","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"4149:5:14","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"4162:5:14","valueSize":1},{"declaration":1976,"isOffset":false,"isSlot":false,"src":"4077:4:14","valueSize":1},{"declaration":1976,"isOffset":false,"isSlot":false,"src":"4169:4:14","valueSize":1},{"declaration":1976,"isOffset":false,"isSlot":false,"src":"4289:4:14","valueSize":1},{"declaration":1976,"isOffset":false,"isSlot":false,"src":"4312:4:14","valueSize":1},{"declaration":1976,"isOffset":false,"isSlot":false,"src":"4319:4:14","valueSize":1}],"id":1985,"nodeType":"InlineAssembly","src":"3971:371:14"},{"expression":{"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1986,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"4408:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1987,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"4417:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1988,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"4425:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1991,"nodeType":"ExpressionStatement","src":"4408:21:14"},{"assignments":[1993],"declarations":[{"constant":false,"id":1993,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:14","nodeType":"VariableDeclaration","scope":2057,"src":"4747:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1992,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2000,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1995,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"4770:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1997,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:14"},{"expression":{"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2001,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5003:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2003,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"5018:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2004,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5032:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2008,"nodeType":"ExpressionStatement","src":"5003:36:14"},{"expression":{"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2009,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5072:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2011,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"5087:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2012,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5101:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2016,"nodeType":"ExpressionStatement","src":"5072:36:14"},{"expression":{"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2017,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5142:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2019,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"5157:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2020,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5171:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2024,"nodeType":"ExpressionStatement","src":"5142:36:14"},{"expression":{"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2025,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5212:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2027,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"5227:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2028,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5241:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2032,"nodeType":"ExpressionStatement","src":"5212:36:14"},{"expression":{"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2033,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5282:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2035,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"5297:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2036,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5311:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2040,"nodeType":"ExpressionStatement","src":"5282:36:14"},{"expression":{"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2041,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5353:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2043,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"5368:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2044,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5382:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2048,"nodeType":"ExpressionStatement","src":"5353:36:14"},{"expression":{"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5823:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2050,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"5832:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2051,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5840:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2054,"nodeType":"ExpressionStatement","src":"5823:24:14"},{"expression":{"id":2055,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5868:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1947,"id":2056,"nodeType":"Return","src":"5861:13:14"}]}]},"documentation":{"id":1937,"nodeType":"StructuredDocumentation","src":"1368:305:14","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2059,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:14","nodeType":"FunctionDefinition","parameters":{"id":1944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"x","nameLocation":"1702:1:14","nodeType":"VariableDeclaration","scope":2059,"src":"1694:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1941,"mutability":"mutable","name":"y","nameLocation":"1713:1:14","nodeType":"VariableDeclaration","scope":2059,"src":"1705:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1940,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:14","nodeType":"VariableDeclaration","scope":2059,"src":"1716:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:14"},"returnParameters":{"id":1947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1946,"mutability":"mutable","name":"result","nameLocation":"1768:6:14","nodeType":"VariableDeclaration","scope":2059,"src":"1760:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1945,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:14"},"scope":2711,"src":"1678:4213:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2102,"nodeType":"Block","src":"6133:189:14","statements":[{"assignments":[2075],"declarations":[{"constant":false,"id":2075,"mutability":"mutable","name":"result","nameLocation":"6151:6:14","nodeType":"VariableDeclaration","scope":2102,"src":"6143:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2074,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2081,"initialValue":{"arguments":[{"id":2077,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"6167:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2078,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"6170:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2079,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2066,"src":"6173:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2076,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2059,2103],"referencedDeclaration":2059,"src":"6160:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2082,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"6199:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2083,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"6211:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1852_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1850,"src":"6211:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2087,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"6233:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2088,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"6236:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2089,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2066,"src":"6239:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2086,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2099,"nodeType":"IfStatement","src":"6195:98:14","trueBody":{"id":2098,"nodeType":"Block","src":"6257:36:14","statements":[{"expression":{"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2094,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"6271:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2097,"nodeType":"ExpressionStatement","src":"6271:11:14"}]}},{"expression":{"id":2100,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"6309:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2073,"id":2101,"nodeType":"Return","src":"6302:13:14"}]},"documentation":{"id":2060,"nodeType":"StructuredDocumentation","src":"5897:121:14","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2103,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:14","nodeType":"FunctionDefinition","parameters":{"id":2070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"mutability":"mutable","name":"x","nameLocation":"6047:1:14","nodeType":"VariableDeclaration","scope":2103,"src":"6039:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2064,"mutability":"mutable","name":"y","nameLocation":"6058:1:14","nodeType":"VariableDeclaration","scope":2103,"src":"6050:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2063,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2066,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:14","nodeType":"VariableDeclaration","scope":2103,"src":"6061:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2065,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2069,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:14","nodeType":"VariableDeclaration","scope":2103,"src":"6082:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2068,"nodeType":"UserDefinedTypeName","pathNode":{"id":2067,"name":"Rounding","nameLocations":["6082:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1852,"src":"6082:8:14"},"referencedDeclaration":1852,"src":"6082:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:14"},"returnParameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2103,"src":"6124:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2071,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:14"},"scope":2711,"src":"6023:299:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2214,"nodeType":"Block","src":"6598:1585:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2111,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"6612:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2117,"nodeType":"IfStatement","src":"6608:45:14","trueBody":{"id":2116,"nodeType":"Block","src":"6620:33:14","statements":[{"expression":{"hexValue":"30","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2110,"id":2115,"nodeType":"Return","src":"6634:8:14"}]}},{"assignments":[2119],"declarations":[{"constant":false,"id":2119,"mutability":"mutable","name":"result","nameLocation":"7340:6:14","nodeType":"VariableDeclaration","scope":2214,"src":"7332:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2128,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2122,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"7360:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2121,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2383,2419],"referencedDeclaration":2383,"src":"7355:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2126,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:14"},{"id":2213,"nodeType":"UncheckedBlock","src":"7769:408:14","statements":[{"expression":{"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7793:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2130,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7803:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"7812:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2132,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7816:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2135,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2139,"nodeType":"ExpressionStatement","src":"7793:35:14"},{"expression":{"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2140,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7842:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2141,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7852:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2142,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"7861:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2143,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7865:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2146,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2150,"nodeType":"ExpressionStatement","src":"7842:35:14"},{"expression":{"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2151,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7891:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2152,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7901:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2153,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"7910:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2154,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7914:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2157,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2161,"nodeType":"ExpressionStatement","src":"7891:35:14"},{"expression":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2162,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7940:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2163,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7950:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"7959:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7963:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2168,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2172,"nodeType":"ExpressionStatement","src":"7940:35:14"},{"expression":{"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2173,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7989:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7999:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"8008:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2176,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8012:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2183,"nodeType":"ExpressionStatement","src":"7989:35:14"},{"expression":{"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8038:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8048:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2186,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"8057:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2187,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8061:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2190,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2194,"nodeType":"ExpressionStatement","src":"8038:35:14"},{"expression":{"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2195,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8087:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2196,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8097:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2197,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"8106:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2198,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8110:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2201,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2205,"nodeType":"ExpressionStatement","src":"8087:35:14"},{"expression":{"arguments":[{"id":2207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8147:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2208,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"8155:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2209,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"8159:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2206,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"8143:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2110,"id":2212,"nodeType":"Return","src":"8136:30:14"}]}]},"documentation":{"id":2104,"nodeType":"StructuredDocumentation","src":"6328:208:14","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2215,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:14","nodeType":"FunctionDefinition","parameters":{"id":2107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2106,"mutability":"mutable","name":"a","nameLocation":"6563:1:14","nodeType":"VariableDeclaration","scope":2215,"src":"6555:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2105,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:14"},"returnParameters":{"id":2110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2109,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2215,"src":"6589:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2108,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:14"},"scope":2711,"src":"6541:1642:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2250,"nodeType":"Block","src":"8359:161:14","statements":[{"id":2249,"nodeType":"UncheckedBlock","src":"8369:145:14","statements":[{"assignments":[2227],"declarations":[{"constant":false,"id":2227,"mutability":"mutable","name":"result","nameLocation":"8401:6:14","nodeType":"VariableDeclaration","scope":2249,"src":"8393:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2231,"initialValue":{"arguments":[{"id":2229,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"8415:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2228,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2215,2251],"referencedDeclaration":2215,"src":"8410:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2232,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8438:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2233,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"8448:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2234,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"8460:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1852_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1850,"src":"8460:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2237,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8475:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8484:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2240,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"8493:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:14","trueExpression":{"hexValue":"31","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2246,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2225,"id":2248,"nodeType":"Return","src":"8431:72:14"}]}]},"documentation":{"id":2216,"nodeType":"StructuredDocumentation","src":"8189:89:14","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2251,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:14","nodeType":"FunctionDefinition","parameters":{"id":2222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2218,"mutability":"mutable","name":"a","nameLocation":"8305:1:14","nodeType":"VariableDeclaration","scope":2251,"src":"8297:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2217,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2221,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:14","nodeType":"VariableDeclaration","scope":2251,"src":"8308:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2220,"nodeType":"UserDefinedTypeName","pathNode":{"id":2219,"name":"Rounding","nameLocations":["8308:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1852,"src":"8308:8:14"},"referencedDeclaration":1852,"src":"8308:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:14"},"returnParameters":{"id":2225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2251,"src":"8350:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2223,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:14"},"scope":2711,"src":"8283:237:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2382,"nodeType":"Block","src":"8705:922:14","statements":[{"assignments":[2260],"declarations":[{"constant":false,"id":2260,"mutability":"mutable","name":"result","nameLocation":"8723:6:14","nodeType":"VariableDeclaration","scope":2382,"src":"8715:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2259,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2262,"initialValue":{"hexValue":"30","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:14"},{"id":2379,"nodeType":"UncheckedBlock","src":"8743:855:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"8771:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2277,"nodeType":"IfStatement","src":"8767:99:14","trueBody":{"id":2276,"nodeType":"Block","src":"8789:77:14","statements":[{"expression":{"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2268,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"8807:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2271,"nodeType":"ExpressionStatement","src":"8807:13:14"},{"expression":{"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8838:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2275,"nodeType":"ExpressionStatement","src":"8838:13:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"8883:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2292,"nodeType":"IfStatement","src":"8879:96:14","trueBody":{"id":2291,"nodeType":"Block","src":"8900:75:14","statements":[{"expression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"8918:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2286,"nodeType":"ExpressionStatement","src":"8918:12:14"},{"expression":{"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2287,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"8948:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2290,"nodeType":"ExpressionStatement","src":"8948:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2293,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"8992:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2307,"nodeType":"IfStatement","src":"8988:96:14","trueBody":{"id":2306,"nodeType":"Block","src":"9009:75:14","statements":[{"expression":{"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2298,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9027:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2301,"nodeType":"ExpressionStatement","src":"9027:12:14"},{"expression":{"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"9057:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2305,"nodeType":"ExpressionStatement","src":"9057:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9101:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2322,"nodeType":"IfStatement","src":"9097:96:14","trueBody":{"id":2321,"nodeType":"Block","src":"9118:75:14","statements":[{"expression":{"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2313,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9136:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2316,"nodeType":"ExpressionStatement","src":"9136:12:14"},{"expression":{"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"9166:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2320,"nodeType":"ExpressionStatement","src":"9166:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9210:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2337,"nodeType":"IfStatement","src":"9206:93:14","trueBody":{"id":2336,"nodeType":"Block","src":"9226:73:14","statements":[{"expression":{"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9244:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2331,"nodeType":"ExpressionStatement","src":"9244:11:14"},{"expression":{"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2332,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"9273:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2335,"nodeType":"ExpressionStatement","src":"9273:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9316:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2352,"nodeType":"IfStatement","src":"9312:93:14","trueBody":{"id":2351,"nodeType":"Block","src":"9332:73:14","statements":[{"expression":{"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9350:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2346,"nodeType":"ExpressionStatement","src":"9350:11:14"},{"expression":{"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2347,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"9379:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2350,"nodeType":"ExpressionStatement","src":"9379:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9422:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2367,"nodeType":"IfStatement","src":"9418:93:14","trueBody":{"id":2366,"nodeType":"Block","src":"9438:73:14","statements":[{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9456:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"9456:11:14"},{"expression":{"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2362,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"9485:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2365,"nodeType":"ExpressionStatement","src":"9485:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"9528:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2378,"nodeType":"IfStatement","src":"9524:64:14","trueBody":{"id":2377,"nodeType":"Block","src":"9544:44:14","statements":[{"expression":{"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2373,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"9562:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2376,"nodeType":"ExpressionStatement","src":"9562:11:14"}]}}]},{"expression":{"id":2380,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"9614:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2258,"id":2381,"nodeType":"Return","src":"9607:13:14"}]},"documentation":{"id":2252,"nodeType":"StructuredDocumentation","src":"8526:113:14","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2383,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:14","nodeType":"FunctionDefinition","parameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"value","nameLocation":"8666:5:14","nodeType":"VariableDeclaration","scope":2383,"src":"8658:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2253,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:14"},"returnParameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2383,"src":"8696:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2256,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:14"},"scope":2711,"src":"8644:983:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2418,"nodeType":"Block","src":"9860:165:14","statements":[{"id":2417,"nodeType":"UncheckedBlock","src":"9870:149:14","statements":[{"assignments":[2395],"declarations":[{"constant":false,"id":2395,"mutability":"mutable","name":"result","nameLocation":"9902:6:14","nodeType":"VariableDeclaration","scope":2417,"src":"9894:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2399,"initialValue":{"arguments":[{"id":2397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"9916:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2396,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2383,2419],"referencedDeclaration":2383,"src":"9911:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2400,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9943:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2401,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"9953:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2402,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"9965:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1852_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1850,"src":"9965:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"9985:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"9994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:14","trueExpression":{"hexValue":"31","id":2411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2414,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2393,"id":2416,"nodeType":"Return","src":"9936:72:14"}]}]},"documentation":{"id":2384,"nodeType":"StructuredDocumentation","src":"9633:142:14","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2419,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:14","nodeType":"FunctionDefinition","parameters":{"id":2390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"value","nameLocation":"9802:5:14","nodeType":"VariableDeclaration","scope":2419,"src":"9794:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2385,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2389,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:14","nodeType":"VariableDeclaration","scope":2419,"src":"9809:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2388,"nodeType":"UserDefinedTypeName","pathNode":{"id":2387,"name":"Rounding","nameLocations":["9809:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1852,"src":"9809:8:14"},"referencedDeclaration":1852,"src":"9809:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:14"},"returnParameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2419,"src":"9851:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2391,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:14"},"scope":2711,"src":"9780:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2547,"nodeType":"Block","src":"10212:854:14","statements":[{"assignments":[2428],"declarations":[{"constant":false,"id":2428,"mutability":"mutable","name":"result","nameLocation":"10230:6:14","nodeType":"VariableDeclaration","scope":2547,"src":"10222:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2430,"initialValue":{"hexValue":"30","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:14"},{"id":2544,"nodeType":"UncheckedBlock","src":"10250:787:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10278:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2447,"nodeType":"IfStatement","src":"10274:103:14","trueBody":{"id":2446,"nodeType":"Block","src":"10297:80:14","statements":[{"expression":{"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2436,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10315:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"nodeType":"ExpressionStatement","src":"10315:17:14"},{"expression":{"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2442,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10350:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2445,"nodeType":"ExpressionStatement","src":"10350:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10394:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2464,"nodeType":"IfStatement","src":"10390:103:14","trueBody":{"id":2463,"nodeType":"Block","src":"10413:80:14","statements":[{"expression":{"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10431:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2458,"nodeType":"ExpressionStatement","src":"10431:17:14"},{"expression":{"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2459,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10466:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2462,"nodeType":"ExpressionStatement","src":"10466:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10510:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2481,"nodeType":"IfStatement","src":"10506:103:14","trueBody":{"id":2480,"nodeType":"Block","src":"10529:80:14","statements":[{"expression":{"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10547:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2475,"nodeType":"ExpressionStatement","src":"10547:17:14"},{"expression":{"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2476,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10582:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2479,"nodeType":"ExpressionStatement","src":"10582:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10626:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2498,"nodeType":"IfStatement","src":"10622:100:14","trueBody":{"id":2497,"nodeType":"Block","src":"10644:78:14","statements":[{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10662:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2492,"nodeType":"ExpressionStatement","src":"10662:16:14"},{"expression":{"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2493,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10696:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2496,"nodeType":"ExpressionStatement","src":"10696:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10739:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2515,"nodeType":"IfStatement","src":"10735:100:14","trueBody":{"id":2514,"nodeType":"Block","src":"10757:78:14","statements":[{"expression":{"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10775:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2509,"nodeType":"ExpressionStatement","src":"10775:16:14"},{"expression":{"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10809:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2513,"nodeType":"ExpressionStatement","src":"10809:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10852:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2532,"nodeType":"IfStatement","src":"10848:100:14","trueBody":{"id":2531,"nodeType":"Block","src":"10870:78:14","statements":[{"expression":{"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10888:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2526,"nodeType":"ExpressionStatement","src":"10888:16:14"},{"expression":{"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2527,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10922:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2530,"nodeType":"ExpressionStatement","src":"10922:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"10965:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2543,"nodeType":"IfStatement","src":"10961:66:14","trueBody":{"id":2542,"nodeType":"Block","src":"10983:44:14","statements":[{"expression":{"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2538,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"11001:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2541,"nodeType":"ExpressionStatement","src":"11001:11:14"}]}}]},{"expression":{"id":2545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"11053:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2426,"id":2546,"nodeType":"Return","src":"11046:13:14"}]},"documentation":{"id":2420,"nodeType":"StructuredDocumentation","src":"10031:114:14","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2548,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:14","nodeType":"FunctionDefinition","parameters":{"id":2423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2422,"mutability":"mutable","name":"value","nameLocation":"10173:5:14","nodeType":"VariableDeclaration","scope":2548,"src":"10165:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2421,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:14"},"returnParameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2548,"src":"10203:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2424,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:14"},"scope":2711,"src":"10150:916:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2583,"nodeType":"Block","src":"11301:167:14","statements":[{"id":2582,"nodeType":"UncheckedBlock","src":"11311:151:14","statements":[{"assignments":[2560],"declarations":[{"constant":false,"id":2560,"mutability":"mutable","name":"result","nameLocation":"11343:6:14","nodeType":"VariableDeclaration","scope":2582,"src":"11335:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2559,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2564,"initialValue":{"arguments":[{"id":2562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"11358:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2561,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2548,2584],"referencedDeclaration":2548,"src":"11352:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2565,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"11385:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2566,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"11395:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2567,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"11407:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1852_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1850,"src":"11407:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2571,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"11428:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"11437:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:14","trueExpression":{"hexValue":"31","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2579,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2558,"id":2581,"nodeType":"Return","src":"11378:73:14"}]}]},"documentation":{"id":2549,"nodeType":"StructuredDocumentation","src":"11072:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2584,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:14","nodeType":"FunctionDefinition","parameters":{"id":2555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"mutability":"mutable","name":"value","nameLocation":"11243:5:14","nodeType":"VariableDeclaration","scope":2584,"src":"11235:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2554,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:14","nodeType":"VariableDeclaration","scope":2584,"src":"11250:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2553,"nodeType":"UserDefinedTypeName","pathNode":{"id":2552,"name":"Rounding","nameLocations":["11250:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1852,"src":"11250:8:14"},"referencedDeclaration":1852,"src":"11250:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:14"},"returnParameters":{"id":2558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2584,"src":"11292:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2556,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:14"},"scope":2711,"src":"11220:248:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2670,"nodeType":"Block","src":"11782:600:14","statements":[{"assignments":[2593],"declarations":[{"constant":false,"id":2593,"mutability":"mutable","name":"result","nameLocation":"11800:6:14","nodeType":"VariableDeclaration","scope":2670,"src":"11792:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2595,"initialValue":{"hexValue":"30","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:14"},{"id":2667,"nodeType":"UncheckedBlock","src":"11820:533:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"11848:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2610,"nodeType":"IfStatement","src":"11844:98:14","trueBody":{"id":2609,"nodeType":"Block","src":"11866:76:14","statements":[{"expression":{"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"11884:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2604,"nodeType":"ExpressionStatement","src":"11884:13:14"},{"expression":{"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2605,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"11915:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2608,"nodeType":"ExpressionStatement","src":"11915:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"11959:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2625,"nodeType":"IfStatement","src":"11955:95:14","trueBody":{"id":2624,"nodeType":"Block","src":"11976:74:14","statements":[{"expression":{"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2616,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"11994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2619,"nodeType":"ExpressionStatement","src":"11994:12:14"},{"expression":{"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2620,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"12024:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2623,"nodeType":"ExpressionStatement","src":"12024:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2626,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"12067:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2640,"nodeType":"IfStatement","src":"12063:95:14","trueBody":{"id":2639,"nodeType":"Block","src":"12084:74:14","statements":[{"expression":{"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"12102:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2634,"nodeType":"ExpressionStatement","src":"12102:12:14"},{"expression":{"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"12132:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2638,"nodeType":"ExpressionStatement","src":"12132:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"12175:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2655,"nodeType":"IfStatement","src":"12171:95:14","trueBody":{"id":2654,"nodeType":"Block","src":"12192:74:14","statements":[{"expression":{"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"12210:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2649,"nodeType":"ExpressionStatement","src":"12210:12:14"},{"expression":{"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2650,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"12240:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2653,"nodeType":"ExpressionStatement","src":"12240:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"12283:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2666,"nodeType":"IfStatement","src":"12279:64:14","trueBody":{"id":2665,"nodeType":"Block","src":"12299:44:14","statements":[{"expression":{"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2661,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"12317:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2664,"nodeType":"ExpressionStatement","src":"12317:11:14"}]}}]},{"expression":{"id":2668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"12369:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2591,"id":2669,"nodeType":"Return","src":"12362:13:14"}]},"documentation":{"id":2585,"nodeType":"StructuredDocumentation","src":"11474:240:14","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2671,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:14","nodeType":"FunctionDefinition","parameters":{"id":2588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2587,"mutability":"mutable","name":"value","nameLocation":"11743:5:14","nodeType":"VariableDeclaration","scope":2671,"src":"11735:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2586,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:14"},"returnParameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2671,"src":"11773:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2589,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:14"},"scope":2711,"src":"11719:663:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2709,"nodeType":"Block","src":"12619:174:14","statements":[{"id":2708,"nodeType":"UncheckedBlock","src":"12629:158:14","statements":[{"assignments":[2683],"declarations":[{"constant":false,"id":2683,"mutability":"mutable","name":"result","nameLocation":"12661:6:14","nodeType":"VariableDeclaration","scope":2708,"src":"12653:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2682,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2687,"initialValue":{"arguments":[{"id":2685,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"12677:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2684,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2671,2710],"referencedDeclaration":2671,"src":"12670:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"12704:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2689,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"12714:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2690,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"12726:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1852_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1850,"src":"12726:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"12747:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2697,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"12762:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:14","trueExpression":{"hexValue":"31","id":2702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2705,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2681,"id":2707,"nodeType":"Return","src":"12697:79:14"}]}]},"documentation":{"id":2672,"nodeType":"StructuredDocumentation","src":"12388:144:14","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2710,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:14","nodeType":"FunctionDefinition","parameters":{"id":2678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2674,"mutability":"mutable","name":"value","nameLocation":"12561:5:14","nodeType":"VariableDeclaration","scope":2710,"src":"12553:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2673,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2677,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:14","nodeType":"VariableDeclaration","scope":2710,"src":"12568:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2676,"nodeType":"UserDefinedTypeName","pathNode":{"id":2675,"name":"Rounding","nameLocations":["12568:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1852,"src":"12568:8:14"},"referencedDeclaration":1852,"src":"12568:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1852","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:14"},"returnParameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2710,"src":"12610:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2679,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:14"},"scope":2711,"src":"12537:256:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2712,"src":"202:12593:14","usedErrors":[],"usedEvents":[]}],"src":"103:12693:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2816]},"id":2817,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2713,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2714,"nodeType":"StructuredDocumentation","src":"134:80:15","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2816,"linearizedBaseContracts":[2816],"name":"SignedMathUpgradeable","nameLocation":"223:21:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":2731,"nodeType":"Block","src":"386:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2724,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"403:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2725,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"407:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2728,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"415:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:15","trueExpression":{"id":2727,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"411:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2723,"id":2730,"nodeType":"Return","src":"396:20:15"}]},"documentation":{"id":2715,"nodeType":"StructuredDocumentation","src":"251:66:15","text":" @dev Returns the largest of two signed numbers."},"id":2732,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:15","nodeType":"FunctionDefinition","parameters":{"id":2720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2717,"mutability":"mutable","name":"a","nameLocation":"342:1:15","nodeType":"VariableDeclaration","scope":2732,"src":"335:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2716,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2719,"mutability":"mutable","name":"b","nameLocation":"352:1:15","nodeType":"VariableDeclaration","scope":2732,"src":"345:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2718,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:15"},"returnParameters":{"id":2723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2732,"src":"378:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2721,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:15"},"scope":2816,"src":"322:101:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2749,"nodeType":"Block","src":"565:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2742,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"582:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2743,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"586:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2746,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"594:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:15","trueExpression":{"id":2745,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"590:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2741,"id":2748,"nodeType":"Return","src":"575:20:15"}]},"documentation":{"id":2733,"nodeType":"StructuredDocumentation","src":"429:67:15","text":" @dev Returns the smallest of two signed numbers."},"id":2750,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:15","nodeType":"FunctionDefinition","parameters":{"id":2738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2735,"mutability":"mutable","name":"a","nameLocation":"521:1:15","nodeType":"VariableDeclaration","scope":2750,"src":"514:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2734,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2737,"mutability":"mutable","name":"b","nameLocation":"531:1:15","nodeType":"VariableDeclaration","scope":2750,"src":"524:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2736,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:15"},"returnParameters":{"id":2741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2750,"src":"557:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2739,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:15"},"scope":2816,"src":"501:101:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2793,"nodeType":"Block","src":"807:162:15","statements":[{"assignments":[2761],"declarations":[{"constant":false,"id":2761,"mutability":"mutable","name":"x","nameLocation":"876:1:15","nodeType":"VariableDeclaration","scope":2793,"src":"869:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2760,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2774,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2762,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"881:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2763,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"885:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2766,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"892:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2767,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"896:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2769,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2772,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:15"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2775,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"921:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2780,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"941:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2778,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:15","typeDescriptions":{}}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2776,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:15","typeDescriptions":{}}},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2785,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"955:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2786,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"959:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2790,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2759,"id":2792,"nodeType":"Return","src":"914:48:15"}]},"documentation":{"id":2751,"nodeType":"StructuredDocumentation","src":"608:126:15","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2794,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:15","nodeType":"FunctionDefinition","parameters":{"id":2756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"a","nameLocation":"763:1:15","nodeType":"VariableDeclaration","scope":2794,"src":"756:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2752,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2755,"mutability":"mutable","name":"b","nameLocation":"773:1:15","nodeType":"VariableDeclaration","scope":2794,"src":"766:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2754,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:15"},"returnParameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2794,"src":"799:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2757,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:15"},"scope":2816,"src":"739:230:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2814,"nodeType":"Block","src":"1113:158:15","statements":[{"id":2813,"nodeType":"UncheckedBlock","src":"1123:142:15","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2804,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2797,"src":"1238:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:15","subExpression":{"id":2808,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2797,"src":"1252:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:15","trueExpression":{"id":2807,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2797,"src":"1247:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:15","typeDescriptions":{}}},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2801,"id":2812,"nodeType":"Return","src":"1223:31:15"}]}]},"documentation":{"id":2795,"nodeType":"StructuredDocumentation","src":"975:78:15","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2815,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:15","nodeType":"FunctionDefinition","parameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"n","nameLocation":"1078:1:15","nodeType":"VariableDeclaration","scope":2815,"src":"1071:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2796,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:15"},"returnParameters":{"id":2801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2815,"src":"1104:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:15"},"scope":2816,"src":"1058:213:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2817,"src":"215:1058:15","usedErrors":[],"usedEvents":[]}],"src":"109:1165:15"},"id":15},"contracts/MocaPoints/MocaPoints.sol":{"ast":{"absolutePath":"contracts/MocaPoints/MocaPoints.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"IRealmId":[3680],"Initializable":[942],"MocaPoints":[3654],"UUPSUpgradeable":[1078]},"id":3655,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2818,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:16"},{"absolutePath":"contracts/MocaPoints/interface/mock/IRealmId.sol","file":"./interface/mock/IRealmId.sol","id":2820,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3655,"sourceUnit":3681,"src":"57:55:16","symbolAliases":[{"foreign":{"id":2819,"name":"IRealmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"65:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":2822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3655,"sourceUnit":336,"src":"113:113:16","symbolAliases":[{"foreign":{"id":2821,"name":"AccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"121:24:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":2824,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3655,"sourceUnit":943,"src":"227:96:16","symbolAliases":[{"foreign":{"id":2823,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"235:13:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":2826,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3655,"sourceUnit":1079,"src":"324:100:16","symbolAliases":[{"foreign":{"id":2825,"name":"UUPSUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"332:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2827,"name":"Initializable","nameLocations":["449:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":942,"src":"449:13:16"},"id":2828,"nodeType":"InheritanceSpecifier","src":"449:13:16"},{"baseName":{"id":2829,"name":"AccessControlUpgradeable","nameLocations":["464:24:16"],"nodeType":"IdentifierPath","referencedDeclaration":335,"src":"464:24:16"},"id":2830,"nodeType":"InheritanceSpecifier","src":"464:24:16"},{"baseName":{"id":2831,"name":"UUPSUpgradeable","nameLocations":["490:15:16"],"nodeType":"IdentifierPath","referencedDeclaration":1078,"src":"490:15:16"},"id":2832,"nodeType":"InheritanceSpecifier","src":"490:15:16"}],"canonicalName":"MocaPoints","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3654,"linearizedBaseContracts":[3654,1078,763,429,439,335,1833,1845,408,1450,942],"name":"MocaPoints","nameLocation":"435:10:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"e63ab1e9","id":2837,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"549:11:16","nodeType":"VariableDeclaration","scope":3654,"src":"525:62:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"525:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"573:13:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":2834,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"563:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"563:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"f72c0d8b","id":2842,"mutability":"constant","name":"UPGRADER_ROLE","nameLocation":"617:13:16","nodeType":"VariableDeclaration","scope":3654,"src":"593:66:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2838,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"55504752414445525f524f4c45","id":2840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"643:15:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""},"value":"UPGRADER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""}],"id":2839,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"633:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"633:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"a3b0b5a3","id":2847,"mutability":"constant","name":"DEPOSITOR_ROLE","nameLocation":"689:14:16","nodeType":"VariableDeclaration","scope":3654,"src":"665:68:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2843,"name":"bytes32","nodeType":"ElementaryTypeName","src":"665:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4445504f5349544f525f524f4c45","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"716:16:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9","typeString":"literal_string \"DEPOSITOR_ROLE\""},"value":"DEPOSITOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9","typeString":"literal_string \"DEPOSITOR_ROLE\""}],"id":2844,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"706:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"706:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"bcb39621","id":2849,"mutability":"mutable","name":"currentSeason","nameLocation":"781:13:16","nodeType":"VariableDeclaration","scope":3654,"src":"766:28:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2848,"name":"bytes32","nodeType":"ElementaryTypeName","src":"766:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"4529cc1b","id":2853,"mutability":"mutable","name":"seasons","nameLocation":"832:7:16","nodeType":"VariableDeclaration","scope":3654,"src":"800:39:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2852,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2850,"name":"bytes32","nodeType":"ElementaryTypeName","src":"808:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"800:24:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2851,"name":"bool","nodeType":"ElementaryTypeName","src":"819:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"2b48dc72","id":2856,"mutability":"mutable","name":"realmIdContract","nameLocation":"901:15:16","nodeType":"VariableDeclaration","scope":3654,"src":"885:31:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"},"typeName":{"id":2855,"nodeType":"UserDefinedTypeName","pathNode":{"id":2854,"name":"IRealmId","nameLocations":["885:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3680,"src":"885:8:16"},"referencedDeclaration":3680,"src":"885:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"visibility":"public"},{"constant":false,"functionSelector":"51955dfc","id":2864,"mutability":"mutable","name":"balances","nameLocation":"1022:8:16","nodeType":"VariableDeclaration","scope":3654,"src":"947:83:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"},"typeName":{"id":2863,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"955:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"947:67:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2862,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2858,"name":"uint256","nodeType":"ElementaryTypeName","src":"974:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"966:47:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2861,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"993:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"985:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2860,"name":"uint256","nodeType":"ElementaryTypeName","src":"1004:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}}},"visibility":"public"},{"constant":false,"functionSelector":"141a468c","id":2868,"mutability":"mutable","name":"nonces","nameLocation":"1143:6:16","nodeType":"VariableDeclaration","scope":3654,"src":"1108:41:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2867,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2865,"name":"uint256","nodeType":"ElementaryTypeName","src":"1116:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1108:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"1127:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"f9515962","id":2872,"mutability":"mutable","name":"allowedConsumeReasonCodes","nameLocation":"1252:25:16","nodeType":"VariableDeclaration","scope":3654,"src":"1220:57:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2871,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2869,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1228:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1220:24:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2870,"name":"bool","nodeType":"ElementaryTypeName","src":"1239:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"61228c895f8ba06548597d3e34a23bc0ecb6d1e62a1eb3fa30be04883a17ef31","id":2876,"name":"SetCurrentSeason","nameLocation":"1290:16:16","nodeType":"EventDefinition","parameters":{"id":2875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2874,"indexed":false,"mutability":"mutable","name":"season","nameLocation":"1315:6:16","nodeType":"VariableDeclaration","scope":2876,"src":"1307:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1307:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1306:16:16"},"src":"1284:39:16"},{"anonymous":false,"eventSelector":"0d8c56a8918ec09c2fe3c4d9fcc00ece66df217a1ab3ad768dd0a71620da5b4e","id":2881,"name":"BatchAddedConsumeReasonCode","nameLocation":"1334:27:16","nodeType":"EventDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"indexed":false,"mutability":"mutable","name":"reasonCodes","nameLocation":"1372:11:16","nodeType":"VariableDeclaration","scope":2881,"src":"1362:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2877,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1362:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2878,"nodeType":"ArrayTypeName","src":"1362:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1361:23:16"},"src":"1328:57:16"},{"anonymous":false,"eventSelector":"5b2c9fcbb27d48bdbfc59f0564b5ba81539309ebf09a940fad64d171bcfb9ff9","id":2886,"name":"BatchRemovedConsumeReasonCode","nameLocation":"1396:29:16","nodeType":"EventDefinition","parameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"indexed":false,"mutability":"mutable","name":"reasonCodes","nameLocation":"1436:11:16","nodeType":"VariableDeclaration","scope":2886,"src":"1426:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1426:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2883,"nodeType":"ArrayTypeName","src":"1426:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1425:23:16"},"src":"1390:59:16"},{"anonymous":false,"eventSelector":"9092bf6bd1cf7db4fcf41aedc7c0333b51c57f5b80b429bc3d9caa5587c6ad82","id":2900,"name":"Deposited","nameLocation":"1460:9:16","nodeType":"EventDefinition","parameters":{"id":2899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2888,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1495:6:16","nodeType":"VariableDeclaration","scope":2900,"src":"1479:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2887,"name":"address","nodeType":"ElementaryTypeName","src":"1479:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2890,"indexed":true,"mutability":"mutable","name":"season","nameLocation":"1527:6:16","nodeType":"VariableDeclaration","scope":2900,"src":"1511:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2889,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1511:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2892,"indexed":true,"mutability":"mutable","name":"reasonCode","nameLocation":"1559:10:16","nodeType":"VariableDeclaration","scope":2900,"src":"1543:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2891,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1543:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2894,"indexed":false,"mutability":"mutable","name":"realmId","nameLocation":"1587:7:16","nodeType":"VariableDeclaration","scope":2900,"src":"1579:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2893,"name":"uint256","nodeType":"ElementaryTypeName","src":"1579:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2896,"indexed":false,"mutability":"mutable","name":"realmIdVersion","nameLocation":"1612:14:16","nodeType":"VariableDeclaration","scope":2900,"src":"1604:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1604:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2898,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1644:6:16","nodeType":"VariableDeclaration","scope":2900,"src":"1636:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1636:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1469:187:16"},"src":"1454:203:16"},{"anonymous":false,"eventSelector":"42d4212eaef22a85f07461ad57d262e7c780323e1ed2af838b92d5bcf85138c1","id":2918,"name":"Consumed","nameLocation":"1669:8:16","nodeType":"EventDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2902,"indexed":true,"mutability":"mutable","name":"realmId","nameLocation":"1703:7:16","nodeType":"VariableDeclaration","scope":2918,"src":"1687:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"1687:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2904,"indexed":true,"mutability":"mutable","name":"season","nameLocation":"1736:6:16","nodeType":"VariableDeclaration","scope":2918,"src":"1720:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2903,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1720:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2906,"indexed":true,"mutability":"mutable","name":"reasonCode","nameLocation":"1768:10:16","nodeType":"VariableDeclaration","scope":2918,"src":"1752:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2905,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2908,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1796:8:16","nodeType":"VariableDeclaration","scope":2918,"src":"1788:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2907,"name":"address","nodeType":"ElementaryTypeName","src":"1788:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2910,"indexed":false,"mutability":"mutable","name":"realmIdVersion","nameLocation":"1822:14:16","nodeType":"VariableDeclaration","scope":2918,"src":"1814:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1814:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2912,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1854:6:16","nodeType":"VariableDeclaration","scope":2918,"src":"1846:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"1846:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2914,"indexed":false,"mutability":"mutable","name":"realmIdOwner","nameLocation":"1878:12:16","nodeType":"VariableDeclaration","scope":2918,"src":"1870:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2913,"name":"address","nodeType":"ElementaryTypeName","src":"1870:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2916,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"1908:5:16","nodeType":"VariableDeclaration","scope":2918,"src":"1900:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2915,"name":"uint256","nodeType":"ElementaryTypeName","src":"1900:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1677:242:16"},"src":"1663:257:16"},{"body":{"id":2925,"nodeType":"Block","src":"1993:39:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2922,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"2003:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2003:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2924,"nodeType":"ExpressionStatement","src":"2003:22:16"}]},"documentation":{"id":2919,"nodeType":"StructuredDocumentation","src":"1926:48:16","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":2926,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2920,"nodeType":"ParameterList","parameters":[],"src":"1990:2:16"},"returnParameters":{"id":2921,"nodeType":"ParameterList","parameters":[],"src":"1993:0:16"},"scope":3654,"src":"1979:53:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2978,"nodeType":"Block","src":"2126:358:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2935,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"2136:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2136:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2937,"nodeType":"ExpressionStatement","src":"2136:22:16"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2938,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2168:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2940,"nodeType":"ExpressionStatement","src":"2168:24:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2944,"name":"_realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"2219:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2211:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2942,"name":"address","nodeType":"ElementaryTypeName","src":"2211:7:16","typeDescriptions":{}}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2211:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2248:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2240:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2946,"name":"address","nodeType":"ElementaryTypeName","src":"2240:7:16","typeDescriptions":{}}},"id":2949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2240:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2211:39:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420612076616c696420436f6e74726163742041646472657373","id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2252:30:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_8df5911bab3053dea66a043ac5ac0de5a7f7e7f620bbba7bd30bfd675316ef3f","typeString":"literal_string \"Not a valid Contract Address\""},"value":"Not a valid Contract Address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8df5911bab3053dea66a043ac5ac0de5a7f7e7f620bbba7bd30bfd675316ef3f","typeString":"literal_string \"Not a valid Contract Address\""}],"id":2941,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2203:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2203:80:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2953,"nodeType":"ExpressionStatement","src":"2203:80:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2957,"name":"_adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"2309:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2301:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2955,"name":"address","nodeType":"ElementaryTypeName","src":"2301:7:16","typeDescriptions":{}}},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2301:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2335:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2327:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2959,"name":"address","nodeType":"ElementaryTypeName","src":"2327:7:16","typeDescriptions":{}}},"id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2327:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2301:36:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420612076616c69642041646d696e2041646472657373","id":2964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2339:27:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_43f75645c653e44028cb8fda54db27b2d2fd1861c70f450be62ca0f614688f4f","typeString":"literal_string \"Not a valid Admin Address\""},"value":"Not a valid Admin Address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_43f75645c653e44028cb8fda54db27b2d2fd1861c70f450be62ca0f614688f4f","typeString":"literal_string \"Not a valid Admin Address\""}],"id":2954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2293:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2293:74:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2966,"nodeType":"ExpressionStatement","src":"2293:74:16"},{"expression":{"arguments":[{"id":2968,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"2389:18:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2969,"name":"_adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"2409:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2967,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2378:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2378:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2971,"nodeType":"ExpressionStatement","src":"2378:45:16"},{"expression":{"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2972,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"2433:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2974,"name":"_realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"2460:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2973,"name":"IRealmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"2451:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRealmId_$3680_$","typeString":"type(contract IRealmId)"}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2451:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"src":"2433:44:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":2977,"nodeType":"ExpressionStatement","src":"2433:44:16"}]},"functionSelector":"485cc955","id":2979,"implemented":true,"kind":"function","modifiers":[{"id":2933,"kind":"modifierInvocation","modifierName":{"id":2932,"name":"initializer","nameLocations":["2114:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":844,"src":"2114:11:16"},"nodeType":"ModifierInvocation","src":"2114:11:16"}],"name":"initialize","nameLocation":"2047:10:16","nodeType":"FunctionDefinition","parameters":{"id":2931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2928,"mutability":"mutable","name":"_realmIdContract","nameLocation":"2066:16:16","nodeType":"VariableDeclaration","scope":2979,"src":"2058:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2927,"name":"address","nodeType":"ElementaryTypeName","src":"2058:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2930,"mutability":"mutable","name":"_adminAddress","nameLocation":"2092:13:16","nodeType":"VariableDeclaration","scope":2979,"src":"2084:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2929,"name":"address","nodeType":"ElementaryTypeName","src":"2084:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2057:49:16"},"returnParameters":{"id":2934,"nodeType":"ParameterList","parameters":[],"src":"2126:0:16"},"scope":3654,"src":"2038:446:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1072],"body":{"id":2988,"nodeType":"Block","src":"2586:2:16","statements":[]},"id":2989,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2985,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"2571:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2986,"kind":"modifierInvocation","modifierName":{"id":2984,"name":"onlyRole","nameLocations":["2562:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"2562:8:16"},"nodeType":"ModifierInvocation","src":"2562:23:16"}],"name":"_authorizeUpgrade","nameLocation":"2499:17:16","nodeType":"FunctionDefinition","overrides":{"id":2983,"nodeType":"OverrideSpecifier","overrides":[],"src":"2553:8:16"},"parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"newImplementation","nameLocation":"2525:17:16","nodeType":"VariableDeclaration","scope":2989,"src":"2517:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2980,"name":"address","nodeType":"ElementaryTypeName","src":"2517:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2516:27:16"},"returnParameters":{"id":2987,"nodeType":"ParameterList","parameters":[],"src":"2586:0:16"},"scope":3654,"src":"2490:98:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3025,"nodeType":"Block","src":"2646:245:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":2996,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"2672:18:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2997,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2692:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2696:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2692:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2995,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2664:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2664:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616e2061646d696e","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2705:14:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250","typeString":"literal_string \"Not an admin\""},"value":"Not an admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250","typeString":"literal_string \"Not an admin\""}],"id":2994,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2656:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2656:64:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3002,"nodeType":"ExpressionStatement","src":"2656:64:16"},{"expression":{"arguments":[{"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2738:17:16","subExpression":{"baseExpression":{"id":3004,"name":"seasons","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"2739:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3006,"indexExpression":{"id":3005,"name":"_season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"2747:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2739:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536561736f6e20616c726561647920736574","id":3008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2757:20:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_907c90511d11a47c16170b9c7277878fac4c767ef53260ccef12b8a0b94ac892","typeString":"literal_string \"Season already set\""},"value":"Season already set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_907c90511d11a47c16170b9c7277878fac4c767ef53260ccef12b8a0b94ac892","typeString":"literal_string \"Season already set\""}],"id":3003,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2730:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3010,"nodeType":"ExpressionStatement","src":"2730:48:16"},{"expression":{"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3011,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"2788:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3012,"name":"_season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"2804:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2788:23:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3014,"nodeType":"ExpressionStatement","src":"2788:23:16"},{"expression":{"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3015,"name":"seasons","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"2821:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3017,"indexExpression":{"id":3016,"name":"_season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"2829:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2821:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2840:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2821:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3020,"nodeType":"ExpressionStatement","src":"2821:23:16"},{"eventCall":{"arguments":[{"id":3022,"name":"_season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"2876:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3021,"name":"SetCurrentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"2859:16:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2859:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3024,"nodeType":"EmitStatement","src":"2854:30:16"}]},"functionSelector":"86a8e98a","id":3026,"implemented":true,"kind":"function","modifiers":[],"name":"setCurrentSeason","nameLocation":"2603:16:16","nodeType":"FunctionDefinition","parameters":{"id":2992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2991,"mutability":"mutable","name":"_season","nameLocation":"2628:7:16","nodeType":"VariableDeclaration","scope":3026,"src":"2620:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2990,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2620:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2619:17:16"},"returnParameters":{"id":2993,"nodeType":"ParameterList","parameters":[],"src":"2646:0:16"},"scope":3654,"src":"2594:297:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3076,"nodeType":"Block","src":"2971:512:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":3034,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"2997:18:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3035,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3017:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3021:6:16","memberName":"sender","nodeType":"MemberAccess","src":"3017:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3033,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2989:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2989:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616e2061646d696e","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3030:14:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250","typeString":"literal_string \"Not an admin\""},"value":"Not an admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250","typeString":"literal_string \"Not an admin\""}],"id":3032,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2981:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2981:64:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3040,"nodeType":"ExpressionStatement","src":"2981:64:16"},{"body":{"id":3070,"nodeType":"Block","src":"3179:170:16","statements":[{"expression":{"arguments":[{"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3201:43:16","subExpression":{"baseExpression":{"id":3053,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"3202:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3057,"indexExpression":{"baseExpression":{"id":3054,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"3228:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3056,"indexExpression":{"id":3055,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"3241:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3228:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3202:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526561736f6e20636f646520616c726561647920657869737473","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3246:28:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_549711b1ccfcfb6570cbeff13c1a55762b5fcc708885df874c421714530ed56a","typeString":"literal_string \"Reason code already exists\""},"value":"Reason code already exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_549711b1ccfcfb6570cbeff13c1a55762b5fcc708885df874c421714530ed56a","typeString":"literal_string \"Reason code already exists\""}],"id":3052,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3193:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3193:82:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3061,"nodeType":"ExpressionStatement","src":"3193:82:16"},{"expression":{"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3062,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"3289:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3066,"indexExpression":{"baseExpression":{"id":3063,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"3315:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3065,"indexExpression":{"id":3064,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"3328:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3315:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3289:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3334:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3289:49:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3069,"nodeType":"ExpressionStatement","src":"3289:49:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3045,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"3149:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3046,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"3153:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3166:6:16","memberName":"length","nodeType":"MemberAccess","src":"3153:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3149:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3071,"initializationExpression":{"assignments":[3042],"declarations":[{"constant":false,"id":3042,"mutability":"mutable","name":"i","nameLocation":"3142:1:16","nodeType":"VariableDeclaration","scope":3071,"src":"3134:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3041,"name":"uint256","nodeType":"ElementaryTypeName","src":"3134:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3044,"initialValue":{"hexValue":"30","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3146:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3134:13:16"},"loopExpression":{"expression":{"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3174:3:16","subExpression":{"id":3049,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"3174:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3051,"nodeType":"ExpressionStatement","src":"3174:3:16"},"nodeType":"ForStatement","src":"3129:220:16"},{"eventCall":{"arguments":[{"id":3073,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"3463:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":3072,"name":"BatchAddedConsumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"3435:27:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32[] memory)"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3435:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3075,"nodeType":"EmitStatement","src":"3430:46:16"}]},"functionSelector":"3f30b00f","id":3077,"implemented":true,"kind":"function","modifiers":[],"name":"batchAddConsumeReasonCodes","nameLocation":"2906:26:16","nodeType":"FunctionDefinition","parameters":{"id":3030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3029,"mutability":"mutable","name":"_reasonCodes","nameLocation":"2950:12:16","nodeType":"VariableDeclaration","scope":3077,"src":"2933:29:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2933:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3028,"nodeType":"ArrayTypeName","src":"2933:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2932:31:16"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[],"src":"2971:0:16"},"scope":3654,"src":"2897:586:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3125,"nodeType":"Block","src":"3566:505:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":3085,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"3592:18:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3086,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3612:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3616:6:16","memberName":"sender","nodeType":"MemberAccess","src":"3612:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3084,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3584:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3584:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616e2061646d696e","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3625:14:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250","typeString":"literal_string \"Not an admin\""},"value":"Not an admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250","typeString":"literal_string \"Not an admin\""}],"id":3083,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3576:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3576:64:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3091,"nodeType":"ExpressionStatement","src":"3576:64:16"},{"body":{"id":3119,"nodeType":"Block","src":"3764:169:16","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3104,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"3786:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3108,"indexExpression":{"baseExpression":{"id":3105,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"3812:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3107,"indexExpression":{"id":3106,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"3825:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3812:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3786:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526561736f6e20636f646520646f6573206e6f74206578697374","id":3109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3830:28:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ad26fe53f2fca31247987ef6a4af0496ee097218b3387432e3c6fed944f205a4","typeString":"literal_string \"Reason code does not exist\""},"value":"Reason code does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ad26fe53f2fca31247987ef6a4af0496ee097218b3387432e3c6fed944f205a4","typeString":"literal_string \"Reason code does not exist\""}],"id":3103,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3778:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3778:81:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3111,"nodeType":"ExpressionStatement","src":"3778:81:16"},{"expression":{"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3873:49:16","subExpression":{"baseExpression":{"id":3112,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"3880:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3116,"indexExpression":{"baseExpression":{"id":3113,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"3906:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3115,"indexExpression":{"id":3114,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"3919:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3906:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3880:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3118,"nodeType":"ExpressionStatement","src":"3873:49:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3096,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"3734:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3097,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"3738:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3751:6:16","memberName":"length","nodeType":"MemberAccess","src":"3738:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3734:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3120,"initializationExpression":{"assignments":[3093],"declarations":[{"constant":false,"id":3093,"mutability":"mutable","name":"i","nameLocation":"3727:1:16","nodeType":"VariableDeclaration","scope":3120,"src":"3719:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3092,"name":"uint256","nodeType":"ElementaryTypeName","src":"3719:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3095,"initialValue":{"hexValue":"30","id":3094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3731:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3719:13:16"},"loopExpression":{"expression":{"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3759:3:16","subExpression":{"id":3100,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"3759:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3102,"nodeType":"ExpressionStatement","src":"3759:3:16"},"nodeType":"ForStatement","src":"3714:219:16"},{"eventCall":{"arguments":[{"id":3122,"name":"_reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"4051:12:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":3121,"name":"BatchRemovedConsumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"4021:29:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32[] memory)"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4021:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3124,"nodeType":"EmitStatement","src":"4016:48:16"}]},"functionSelector":"906405a3","id":3126,"implemented":true,"kind":"function","modifiers":[],"name":"batchRemoveConsumeReasonCodes","nameLocation":"3498:29:16","nodeType":"FunctionDefinition","parameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3080,"mutability":"mutable","name":"_reasonCodes","nameLocation":"3545:12:16","nodeType":"VariableDeclaration","scope":3126,"src":"3528:29:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3528:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3079,"nodeType":"ArrayTypeName","src":"3528:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3527:31:16"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[],"src":"3566:0:16"},"scope":3654,"src":"3489:582:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3168,"nodeType":"Block","src":"4201:407:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":3141,"name":"DEPOSITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"4281:14:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3142,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4297:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4301:6:16","memberName":"sender","nodeType":"MemberAccess","src":"4297:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3140,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4273:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4273:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f742061206465706f7369746f72","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4310:17:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_a187824b079404be555a1b9418b8031a46fa39c4a1a1c5cfe26b3286229770d1","typeString":"literal_string \"Not a depositor\""},"value":"Not a depositor"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a187824b079404be555a1b9418b8031a46fa39c4a1a1c5cfe26b3286229770d1","typeString":"literal_string \"Not a depositor\""}],"id":3139,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4265:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4265:63:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3147,"nodeType":"ExpressionStatement","src":"4265:63:16"},{"expression":{"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3148,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"4419:8:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":3152,"indexExpression":{"id":3149,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"4428:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4419:16:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3153,"indexExpression":{"id":3150,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4436:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4419:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3154,"indexExpression":{"id":3151,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4445:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4419:41:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3155,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3134,"src":"4464:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4419:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3157,"nodeType":"ExpressionStatement","src":"4419:51:16"},{"eventCall":{"arguments":[{"expression":{"id":3159,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4530:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4534:6:16","memberName":"sender","nodeType":"MemberAccess","src":"4530:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3161,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"4542:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3162,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"4550:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3163,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4569:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3164,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4578:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3165,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3134,"src":"4594:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3158,"name":"Deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"4520:9:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,bytes32,uint256,uint256,uint256)"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4520:81:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3167,"nodeType":"EmitStatement","src":"4515:86:16"}]},"functionSelector":"18ee89f0","id":3169,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"4086:7:16","nodeType":"FunctionDefinition","parameters":{"id":3137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3128,"mutability":"mutable","name":"season","nameLocation":"4102:6:16","nodeType":"VariableDeclaration","scope":3169,"src":"4094:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3127,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4094:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3130,"mutability":"mutable","name":"realmId","nameLocation":"4118:7:16","nodeType":"VariableDeclaration","scope":3169,"src":"4110:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3129,"name":"uint256","nodeType":"ElementaryTypeName","src":"4110:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"realmIdVersion","nameLocation":"4135:14:16","nodeType":"VariableDeclaration","scope":3169,"src":"4127:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3131,"name":"uint256","nodeType":"ElementaryTypeName","src":"4127:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3134,"mutability":"mutable","name":"amount","nameLocation":"4159:6:16","nodeType":"VariableDeclaration","scope":3169,"src":"4151:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4151:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3136,"mutability":"mutable","name":"depositReasonCode","nameLocation":"4175:17:16","nodeType":"VariableDeclaration","scope":3169,"src":"4167:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4167:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4093:100:16"},"returnParameters":{"id":3138,"nodeType":"ParameterList","parameters":[],"src":"4201:0:16"},"scope":3654,"src":"4077:531:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3200,"nodeType":"Block","src":"4815:293:16","statements":[{"assignments":[3185],"declarations":[{"constant":false,"id":3185,"mutability":"mutable","name":"realmId","nameLocation":"4889:7:16","nodeType":"VariableDeclaration","scope":3200,"src":"4881:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3184,"name":"uint256","nodeType":"ElementaryTypeName","src":"4881:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3191,"initialValue":{"arguments":[{"id":3188,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"4926:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3189,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"4932:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3186,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"4899:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4915:10:16","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":3672,"src":"4899:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4899:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4881:62:16"},{"expression":{"arguments":[{"id":3193,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3171,"src":"5042:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3194,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"5050:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3195,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"5059:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3196,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"5075:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3197,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"5083:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3192,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[3169,3201],"referencedDeclaration":3169,"src":"5034:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (bytes32,uint256,uint256,uint256,bytes32)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5034:67:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3199,"nodeType":"ExpressionStatement","src":"5034:67:16"}]},"functionSelector":"9d70b005","id":3201,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"4623:7:16","nodeType":"FunctionDefinition","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3171,"mutability":"mutable","name":"season","nameLocation":"4648:6:16","nodeType":"VariableDeclaration","scope":3201,"src":"4640:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4640:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3173,"mutability":"mutable","name":"parentNode","nameLocation":"4672:10:16","nodeType":"VariableDeclaration","scope":3201,"src":"4664:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4664:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3175,"mutability":"mutable","name":"name","nameLocation":"4706:4:16","nodeType":"VariableDeclaration","scope":3201,"src":"4692:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3174,"name":"string","nodeType":"ElementaryTypeName","src":"4692:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3177,"mutability":"mutable","name":"realmIdVersion","nameLocation":"4728:14:16","nodeType":"VariableDeclaration","scope":3201,"src":"4720:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3176,"name":"uint256","nodeType":"ElementaryTypeName","src":"4720:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"amount","nameLocation":"4760:6:16","nodeType":"VariableDeclaration","scope":3201,"src":"4752:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"4752:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"depositReasonCode","nameLocation":"4784:17:16","nodeType":"VariableDeclaration","scope":3201,"src":"4776:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4776:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4630:177:16"},"returnParameters":{"id":3183,"nodeType":"ParameterList","parameters":[],"src":"4815:0:16"},"scope":3654,"src":"4614:494:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3249,"nodeType":"Block","src":"5366:275:16","statements":[{"assignments":[3223],"declarations":[{"constant":false,"id":3223,"mutability":"mutable","name":"_messageHash","nameLocation":"5384:12:16","nodeType":"VariableDeclaration","scope":3249,"src":"5376:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3222,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5376:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3231,"initialValue":{"arguments":[{"id":3225,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"5415:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3226,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"5424:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3227,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"5440:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3228,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"5448:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3229,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"5467:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3224,"name":"_preparePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3623,"src":"5399:15:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256,uint256,uint256,bytes32,uint256) view returns (bytes32)"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5399:74:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5376:97:16"},{"assignments":[3233],"declarations":[{"constant":false,"id":3233,"mutability":"mutable","name":"messageDigest","nameLocation":"5491:13:16","nodeType":"VariableDeclaration","scope":3249,"src":"5483:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5483:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3241,"initialValue":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":3237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5534:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":3238,"name":"_messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3223,"src":"5570:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3235,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5517:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5521:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"5517:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5517:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3234,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5507:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5507:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5483:101:16"},{"expression":{"arguments":[{"id":3243,"name":"messageDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"5611:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3244,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"5626:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3245,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"5629:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3246,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"5632:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3242,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"5601:9:16","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5601:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3221,"id":3248,"nodeType":"Return","src":"5594:40:16"}]},"id":3250,"implemented":true,"kind":"function","modifiers":[],"name":"_getSigner","nameLocation":"5123:10:16","nodeType":"FunctionDefinition","parameters":{"id":3218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3203,"mutability":"mutable","name":"realmId","nameLocation":"5151:7:16","nodeType":"VariableDeclaration","scope":3250,"src":"5143:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3202,"name":"uint256","nodeType":"ElementaryTypeName","src":"5143:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3205,"mutability":"mutable","name":"realmIdVersion","nameLocation":"5176:14:16","nodeType":"VariableDeclaration","scope":3250,"src":"5168:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"5168:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3207,"mutability":"mutable","name":"amount","nameLocation":"5208:6:16","nodeType":"VariableDeclaration","scope":3250,"src":"5200:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3206,"name":"uint256","nodeType":"ElementaryTypeName","src":"5200:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"nonce","nameLocation":"5232:5:16","nodeType":"VariableDeclaration","scope":3250,"src":"5224:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3208,"name":"uint256","nodeType":"ElementaryTypeName","src":"5224:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3211,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"5255:17:16","nodeType":"VariableDeclaration","scope":3250,"src":"5247:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3210,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5247:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3213,"mutability":"mutable","name":"v","nameLocation":"5288:1:16","nodeType":"VariableDeclaration","scope":3250,"src":"5282:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3212,"name":"uint8","nodeType":"ElementaryTypeName","src":"5282:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3215,"mutability":"mutable","name":"r","nameLocation":"5307:1:16","nodeType":"VariableDeclaration","scope":3250,"src":"5299:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5299:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3217,"mutability":"mutable","name":"s","nameLocation":"5326:1:16","nodeType":"VariableDeclaration","scope":3250,"src":"5318:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3216,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5318:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5133:200:16"},"returnParameters":{"id":3221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3250,"src":"5357:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3219,"name":"address","nodeType":"ElementaryTypeName","src":"5357:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5356:9:16"},"scope":3654,"src":"5114:527:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3312,"nodeType":"Block","src":"5774:676:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3264,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"5842:8:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":3266,"indexExpression":{"id":3265,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"5851:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5842:23:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3268,"indexExpression":{"id":3267,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"5866:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5842:32:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3270,"indexExpression":{"id":3269,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"5875:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5842:48:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3271,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"5894:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5842:58:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e6365","id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5902:22:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""},"value":"Insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""}],"id":3263,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5834:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5834:91:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3275,"nodeType":"ExpressionStatement","src":"5834:91:16"},{"expression":{"arguments":[{"baseExpression":{"id":3277,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"6020:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3279,"indexExpression":{"id":3278,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"6046:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6020:44:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420636f6e73756d6520726561736f6e20636f6465","id":3280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6066:29:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_56252a6247989a0782d1ad52265d2b3540f4fc7db600e892a3420904180ee89b","typeString":"literal_string \"Invalid consume reason code\""},"value":"Invalid consume reason code"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_56252a6247989a0782d1ad52265d2b3540f4fc7db600e892a3420904180ee89b","typeString":"literal_string \"Invalid consume reason code\""}],"id":3276,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6012:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6012:84:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3282,"nodeType":"ExpressionStatement","src":"6012:84:16"},{"expression":{"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3283,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"6148:8:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":3287,"indexExpression":{"id":3284,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"6157:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6148:23:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3288,"indexExpression":{"id":3285,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"6172:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6148:32:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3289,"indexExpression":{"id":3286,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"6181:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6148:48:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3290,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"6200:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6148:58:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3292,"nodeType":"ExpressionStatement","src":"6148:58:16"},{"eventCall":{"arguments":[{"id":3294,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"6266:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3295,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"6275:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3296,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"6290:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3297,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6309:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6313:6:16","memberName":"sender","nodeType":"MemberAccess","src":"6309:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3299,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"6321:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3300,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"6337:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3301,"name":"owner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"6345:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3302,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"6353:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3304,"indexExpression":{"id":3303,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"6360:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6353:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3293,"name":"Consumed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"6257:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,bytes32,bytes32,address,uint256,uint256,address,uint256)"}},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6257:112:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3306,"nodeType":"EmitStatement","src":"6252:117:16"},{"expression":{"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6426:17:16","subExpression":{"baseExpression":{"id":3307,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"6426:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3309,"indexExpression":{"id":3308,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"6433:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6426:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3311,"nodeType":"ExpressionStatement","src":"6426:17:16"}]},"id":3313,"implemented":true,"kind":"function","modifiers":[],"name":"_consume","nameLocation":"5656:8:16","nodeType":"FunctionDefinition","parameters":{"id":3261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3252,"mutability":"mutable","name":"realmId","nameLocation":"5673:7:16","nodeType":"VariableDeclaration","scope":3313,"src":"5665:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3251,"name":"uint256","nodeType":"ElementaryTypeName","src":"5665:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3254,"mutability":"mutable","name":"realmIdVersion","nameLocation":"5690:14:16","nodeType":"VariableDeclaration","scope":3313,"src":"5682:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3253,"name":"uint256","nodeType":"ElementaryTypeName","src":"5682:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3256,"mutability":"mutable","name":"amount","nameLocation":"5714:6:16","nodeType":"VariableDeclaration","scope":3313,"src":"5706:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3255,"name":"uint256","nodeType":"ElementaryTypeName","src":"5706:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3258,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"5730:17:16","nodeType":"VariableDeclaration","scope":3313,"src":"5722:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5722:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3260,"mutability":"mutable","name":"owner_","nameLocation":"5757:6:16","nodeType":"VariableDeclaration","scope":3313,"src":"5749:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3259,"name":"address","nodeType":"ElementaryTypeName","src":"5749:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5664:100:16"},"returnParameters":{"id":3262,"nodeType":"ParameterList","parameters":[],"src":"5774:0:16"},"scope":3654,"src":"5647:803:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3347,"nodeType":"Block","src":"6595:196:16","statements":[{"assignments":[3331],"declarations":[{"constant":false,"id":3331,"mutability":"mutable","name":"realmId","nameLocation":"6666:7:16","nodeType":"VariableDeclaration","scope":3347,"src":"6658:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3330,"name":"uint256","nodeType":"ElementaryTypeName","src":"6658:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3337,"initialValue":{"arguments":[{"id":3334,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"6703:5:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3335,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"6710:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3332,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"6676:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6692:10:16","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":3672,"src":"6676:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6676:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6658:63:16"},{"expression":{"arguments":[{"id":3339,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"6740:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3340,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"6749:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3341,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3321,"src":"6757:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3342,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"6776:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3343,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"6779:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3344,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"6782:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3338,"name":"consume","nodeType":"Identifier","overloadedDeclarations":[3348,3408,3434,3475],"referencedDeclaration":3408,"src":"6732:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (uint256,uint256,bytes32,uint8,bytes32,bytes32)"}},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6732:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3346,"nodeType":"ExpressionStatement","src":"6732:52:16"}]},"functionSelector":"99d342ac","id":3348,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"6465:7:16","nodeType":"FunctionDefinition","parameters":{"id":3328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3315,"mutability":"mutable","name":"parentNode","nameLocation":"6481:10:16","nodeType":"VariableDeclaration","scope":3348,"src":"6473:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3317,"mutability":"mutable","name":"_name","nameLocation":"6507:5:16","nodeType":"VariableDeclaration","scope":3348,"src":"6493:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3316,"name":"string","nodeType":"ElementaryTypeName","src":"6493:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3319,"mutability":"mutable","name":"amount","nameLocation":"6522:6:16","nodeType":"VariableDeclaration","scope":3348,"src":"6514:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3318,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3321,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"6538:17:16","nodeType":"VariableDeclaration","scope":3348,"src":"6530:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6530:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3323,"mutability":"mutable","name":"v","nameLocation":"6563:1:16","nodeType":"VariableDeclaration","scope":3348,"src":"6557:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3322,"name":"uint8","nodeType":"ElementaryTypeName","src":"6557:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3325,"mutability":"mutable","name":"r","nameLocation":"6574:1:16","nodeType":"VariableDeclaration","scope":3348,"src":"6566:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6566:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3327,"mutability":"mutable","name":"s","nameLocation":"6585:1:16","nodeType":"VariableDeclaration","scope":3348,"src":"6577:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6577:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6472:115:16"},"returnParameters":{"id":3329,"nodeType":"ParameterList","parameters":[],"src":"6595:0:16"},"scope":3654,"src":"6456:335:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3407,"nodeType":"Block","src":"6912:395:16","statements":[{"assignments":[3364],"declarations":[{"constant":false,"id":3364,"mutability":"mutable","name":"realmIdVersion","nameLocation":"6930:14:16","nodeType":"VariableDeclaration","scope":3407,"src":"6922:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3363,"name":"uint256","nodeType":"ElementaryTypeName","src":"6922:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3369,"initialValue":{"arguments":[{"id":3367,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"6974:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3365,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"6947:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6963:10:16","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"6947:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6947:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6922:60:16"},{"assignments":[3371],"declarations":[{"constant":false,"id":3371,"mutability":"mutable","name":"signer","nameLocation":"7000:6:16","nodeType":"VariableDeclaration","scope":3407,"src":"6992:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3370,"name":"address","nodeType":"ElementaryTypeName","src":"6992:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3384,"initialValue":{"arguments":[{"id":3373,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"7020:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3374,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3364,"src":"7029:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3375,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"7045:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":3376,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"7053:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3378,"indexExpression":{"id":3377,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"7060:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7053:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3379,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"7070:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3380,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"7089:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3381,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"7092:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3382,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"7095:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3372,"name":"_getSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"7009:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (uint256,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32) view returns (address)"}},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7009:88:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6992:105:16"},{"assignments":[3386],"declarations":[{"constant":false,"id":3386,"mutability":"mutable","name":"owner_","nameLocation":"7115:6:16","nodeType":"VariableDeclaration","scope":3407,"src":"7107:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3385,"name":"address","nodeType":"ElementaryTypeName","src":"7107:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3391,"initialValue":{"arguments":[{"id":3389,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"7148:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3387,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"7124:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7140:7:16","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3679,"src":"7124:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7124:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7107:49:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3393,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7174:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3394,"name":"owner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"7184:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7174:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e6572206e6f74206f776e6572206f66207265616c6d4964","id":3396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7192:29:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_22a5118d0663dcf9667a9c0b2238f19c1ed6e9f7598968af96eea021ee61c19e","typeString":"literal_string \"Signer not owner of realmId\""},"value":"Signer not owner of realmId"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_22a5118d0663dcf9667a9c0b2238f19c1ed6e9f7598968af96eea021ee61c19e","typeString":"literal_string \"Signer not owner of realmId\""}],"id":3392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7166:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7166:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3398,"nodeType":"ExpressionStatement","src":"7166:56:16"},{"expression":{"arguments":[{"id":3400,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"7241:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3401,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3364,"src":"7250:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3402,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"7266:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3403,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"7274:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3404,"name":"owner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"7293:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3399,"name":"_consume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"7232:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (uint256,uint256,uint256,bytes32,address)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7232:68:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3406,"nodeType":"ExpressionStatement","src":"7232:68:16"}]},"functionSelector":"dc893ce4","id":3408,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"6806:7:16","nodeType":"FunctionDefinition","parameters":{"id":3361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3350,"mutability":"mutable","name":"realmId","nameLocation":"6822:7:16","nodeType":"VariableDeclaration","scope":3408,"src":"6814:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3349,"name":"uint256","nodeType":"ElementaryTypeName","src":"6814:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3352,"mutability":"mutable","name":"amount","nameLocation":"6839:6:16","nodeType":"VariableDeclaration","scope":3408,"src":"6831:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3351,"name":"uint256","nodeType":"ElementaryTypeName","src":"6831:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3354,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"6855:17:16","nodeType":"VariableDeclaration","scope":3408,"src":"6847:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6847:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3356,"mutability":"mutable","name":"v","nameLocation":"6880:1:16","nodeType":"VariableDeclaration","scope":3408,"src":"6874:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3355,"name":"uint8","nodeType":"ElementaryTypeName","src":"6874:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3358,"mutability":"mutable","name":"r","nameLocation":"6891:1:16","nodeType":"VariableDeclaration","scope":3408,"src":"6883:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6883:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3360,"mutability":"mutable","name":"s","nameLocation":"6902:1:16","nodeType":"VariableDeclaration","scope":3408,"src":"6894:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6894:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6813:91:16"},"returnParameters":{"id":3362,"nodeType":"ParameterList","parameters":[],"src":"6912:0:16"},"scope":3654,"src":"6797:510:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3433,"nodeType":"Block","src":"7421:236:16","statements":[{"assignments":[3420],"declarations":[{"constant":false,"id":3420,"mutability":"mutable","name":"realmId","nameLocation":"7509:7:16","nodeType":"VariableDeclaration","scope":3433,"src":"7501:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3419,"name":"uint256","nodeType":"ElementaryTypeName","src":"7501:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3426,"initialValue":{"arguments":[{"id":3423,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"7546:5:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3424,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3410,"src":"7553:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3421,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"7519:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7535:10:16","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":3672,"src":"7519:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7519:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7501:63:16"},{"expression":{"arguments":[{"id":3428,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"7615:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3429,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3414,"src":"7624:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3430,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3416,"src":"7632:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3427,"name":"consume","nodeType":"Identifier","overloadedDeclarations":[3348,3408,3434,3475],"referencedDeclaration":3475,"src":"7607:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (uint256,uint256,bytes32)"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7607:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3432,"nodeType":"ExpressionStatement","src":"7607:43:16"}]},"functionSelector":"e564a0e2","id":3434,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"7322:7:16","nodeType":"FunctionDefinition","parameters":{"id":3417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3410,"mutability":"mutable","name":"parentNode","nameLocation":"7338:10:16","nodeType":"VariableDeclaration","scope":3434,"src":"7330:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7330:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3412,"mutability":"mutable","name":"_name","nameLocation":"7364:5:16","nodeType":"VariableDeclaration","scope":3434,"src":"7350:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3411,"name":"string","nodeType":"ElementaryTypeName","src":"7350:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3414,"mutability":"mutable","name":"amount","nameLocation":"7379:6:16","nodeType":"VariableDeclaration","scope":3434,"src":"7371:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3413,"name":"uint256","nodeType":"ElementaryTypeName","src":"7371:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3416,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"7395:17:16","nodeType":"VariableDeclaration","scope":3434,"src":"7387:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7387:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7329:84:16"},"returnParameters":{"id":3418,"nodeType":"ParameterList","parameters":[],"src":"7421:0:16"},"scope":3654,"src":"7313:344:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3474,"nodeType":"Block","src":"7747:365:16","statements":[{"assignments":[3444],"declarations":[{"constant":false,"id":3444,"mutability":"mutable","name":"owner_","nameLocation":"7765:6:16","nodeType":"VariableDeclaration","scope":3474,"src":"7757:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3443,"name":"address","nodeType":"ElementaryTypeName","src":"7757:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3449,"initialValue":{"arguments":[{"id":3447,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"7798:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3445,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"7774:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7790:7:16","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3679,"src":"7774:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7774:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7757:49:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3451,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7824:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7828:6:16","memberName":"sender","nodeType":"MemberAccess","src":"7824:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3453,"name":"owner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"7838:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7824:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656e646572206e6f74206f776e6572206f66207265616c6d4964","id":3455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7846:29:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ea2a70fe2e8a1ed3ee633ddb0061dffa9a3291682c0f893cb32f8645c9bdf74b","typeString":"literal_string \"Sender not owner of realmId\""},"value":"Sender not owner of realmId"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ea2a70fe2e8a1ed3ee633ddb0061dffa9a3291682c0f893cb32f8645c9bdf74b","typeString":"literal_string \"Sender not owner of realmId\""}],"id":3450,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7816:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7816:60:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3457,"nodeType":"ExpressionStatement","src":"7816:60:16"},{"assignments":[3459],"declarations":[{"constant":false,"id":3459,"mutability":"mutable","name":"realmIdVersion","nameLocation":"7971:14:16","nodeType":"VariableDeclaration","scope":3474,"src":"7963:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3458,"name":"uint256","nodeType":"ElementaryTypeName","src":"7963:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3464,"initialValue":{"arguments":[{"id":3462,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"8015:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3460,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"7988:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8004:10:16","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"7988:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7988:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7963:60:16"},{"expression":{"arguments":[{"id":3466,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"8042:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3467,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"8051:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3468,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"8067:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3469,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"8075:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3470,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8094:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8098:6:16","memberName":"sender","nodeType":"MemberAccess","src":"8094:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3465,"name":"_consume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"8033:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (uint256,uint256,uint256,bytes32,address)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8033:72:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3473,"nodeType":"ExpressionStatement","src":"8033:72:16"}]},"functionSelector":"d14a5c71","id":3475,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"7672:7:16","nodeType":"FunctionDefinition","parameters":{"id":3441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"realmId","nameLocation":"7688:7:16","nodeType":"VariableDeclaration","scope":3475,"src":"7680:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3435,"name":"uint256","nodeType":"ElementaryTypeName","src":"7680:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3438,"mutability":"mutable","name":"amount","nameLocation":"7705:6:16","nodeType":"VariableDeclaration","scope":3475,"src":"7697:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3437,"name":"uint256","nodeType":"ElementaryTypeName","src":"7697:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3440,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"7721:17:16","nodeType":"VariableDeclaration","scope":3475,"src":"7713:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7713:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7679:60:16"},"returnParameters":{"id":3442,"nodeType":"ParameterList","parameters":[],"src":"7747:0:16"},"scope":3654,"src":"7663:449:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3499,"nodeType":"Block","src":"8202:192:16","statements":[{"assignments":[3485],"declarations":[{"constant":false,"id":3485,"mutability":"mutable","name":"realmIdVersion","nameLocation":"8276:14:16","nodeType":"VariableDeclaration","scope":3499,"src":"8268:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3484,"name":"uint256","nodeType":"ElementaryTypeName","src":"8268:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3490,"initialValue":{"arguments":[{"id":3488,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"8320:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3486,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"8293:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8309:10:16","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"8293:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8293:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8268:60:16"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3491,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"8346:8:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":3493,"indexExpression":{"id":3492,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"8355:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8346:16:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3495,"indexExpression":{"id":3494,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"8363:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8346:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3497,"indexExpression":{"id":3496,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"8372:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8346:41:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3483,"id":3498,"nodeType":"Return","src":"8339:48:16"}]},"functionSelector":"ad3b1d48","id":3500,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"8127:9:16","nodeType":"FunctionDefinition","parameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3477,"mutability":"mutable","name":"season","nameLocation":"8145:6:16","nodeType":"VariableDeclaration","scope":3500,"src":"8137:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3476,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8137:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3479,"mutability":"mutable","name":"realmId","nameLocation":"8161:7:16","nodeType":"VariableDeclaration","scope":3500,"src":"8153:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3478,"name":"uint256","nodeType":"ElementaryTypeName","src":"8153:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8136:33:16"},"returnParameters":{"id":3483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3500,"src":"8193:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3481,"name":"uint256","nodeType":"ElementaryTypeName","src":"8193:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8192:9:16"},"scope":3654,"src":"8118:276:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3534,"nodeType":"Block","src":"8508:406:16","statements":[{"assignments":[3512],"declarations":[{"constant":false,"id":3512,"mutability":"mutable","name":"realmId","nameLocation":"8596:7:16","nodeType":"VariableDeclaration","scope":3534,"src":"8588:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3511,"name":"uint256","nodeType":"ElementaryTypeName","src":"8588:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3518,"initialValue":{"arguments":[{"id":3515,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"8633:5:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3516,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"8640:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3513,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"8606:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8622:10:16","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":3672,"src":"8606:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8606:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8588:63:16"},{"assignments":[3520],"declarations":[{"constant":false,"id":3520,"mutability":"mutable","name":"realmIdVersion","nameLocation":"8726:14:16","nodeType":"VariableDeclaration","scope":3534,"src":"8718:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3519,"name":"uint256","nodeType":"ElementaryTypeName","src":"8718:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3525,"initialValue":{"arguments":[{"id":3523,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"8770:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3521,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"8743:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8759:10:16","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"8743:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8743:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8718:60:16"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3526,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"8866:8:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":3528,"indexExpression":{"id":3527,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"8875:6:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8866:16:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3530,"indexExpression":{"id":3529,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"8883:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8866:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3532,"indexExpression":{"id":3531,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"8892:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8866:41:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3510,"id":3533,"nodeType":"Return","src":"8859:48:16"}]},"functionSelector":"098b6419","id":3535,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"8409:9:16","nodeType":"FunctionDefinition","parameters":{"id":3507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3502,"mutability":"mutable","name":"season","nameLocation":"8427:6:16","nodeType":"VariableDeclaration","scope":3535,"src":"8419:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3504,"mutability":"mutable","name":"parentNode","nameLocation":"8443:10:16","nodeType":"VariableDeclaration","scope":3535,"src":"8435:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8435:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3506,"mutability":"mutable","name":"_name","nameLocation":"8469:5:16","nodeType":"VariableDeclaration","scope":3535,"src":"8455:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3505,"name":"string","nodeType":"ElementaryTypeName","src":"8455:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8418:57:16"},"returnParameters":{"id":3510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3509,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3535,"src":"8499:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3508,"name":"uint256","nodeType":"ElementaryTypeName","src":"8499:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8498:9:16"},"scope":3654,"src":"8400:514:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3557,"nodeType":"Block","src":"8988:286:16","statements":[{"assignments":[3543],"declarations":[{"constant":false,"id":3543,"mutability":"mutable","name":"realmIdVersion","nameLocation":"9062:14:16","nodeType":"VariableDeclaration","scope":3557,"src":"9054:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"9054:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3548,"initialValue":{"arguments":[{"id":3546,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"9106:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3544,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"9079:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9095:10:16","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"9079:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9079:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9054:60:16"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3549,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"9219:8:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":3551,"indexExpression":{"id":3550,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"9228:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9219:23:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3553,"indexExpression":{"id":3552,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"9243:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9219:32:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3555,"indexExpression":{"id":3554,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"9252:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9219:48:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3541,"id":3556,"nodeType":"Return","src":"9212:55:16"}]},"functionSelector":"9cc7f708","id":3558,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"8929:9:16","nodeType":"FunctionDefinition","parameters":{"id":3538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3537,"mutability":"mutable","name":"realmId","nameLocation":"8947:7:16","nodeType":"VariableDeclaration","scope":3558,"src":"8939:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3536,"name":"uint256","nodeType":"ElementaryTypeName","src":"8939:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8938:17:16"},"returnParameters":{"id":3541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3558,"src":"8979:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3539,"name":"uint256","nodeType":"ElementaryTypeName","src":"8979:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8978:9:16"},"scope":3654,"src":"8920:354:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3590,"nodeType":"Block","src":"9372:430:16","statements":[{"assignments":[3568],"declarations":[{"constant":false,"id":3568,"mutability":"mutable","name":"realmId","nameLocation":"9460:7:16","nodeType":"VariableDeclaration","scope":3590,"src":"9452:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"9452:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3574,"initialValue":{"arguments":[{"id":3571,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"9497:5:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3572,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"9504:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3569,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"9470:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9486:10:16","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":3672,"src":"9470:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9470:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9452:63:16"},{"assignments":[3576],"declarations":[{"constant":false,"id":3576,"mutability":"mutable","name":"realmIdVersion","nameLocation":"9590:14:16","nodeType":"VariableDeclaration","scope":3590,"src":"9582:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3575,"name":"uint256","nodeType":"ElementaryTypeName","src":"9582:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3581,"initialValue":{"arguments":[{"id":3579,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"9634:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3577,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"9607:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9623:10:16","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"9607:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9607:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9582:60:16"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":3582,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"9747:8:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":3584,"indexExpression":{"id":3583,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"9756:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9747:23:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3586,"indexExpression":{"id":3585,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"9771:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9747:32:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3588,"indexExpression":{"id":3587,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"9780:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9747:48:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3566,"id":3589,"nodeType":"Return","src":"9740:55:16"}]},"functionSelector":"794459be","id":3591,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"9289:9:16","nodeType":"FunctionDefinition","parameters":{"id":3563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3560,"mutability":"mutable","name":"parentNode","nameLocation":"9307:10:16","nodeType":"VariableDeclaration","scope":3591,"src":"9299:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9299:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3562,"mutability":"mutable","name":"_name","nameLocation":"9333:5:16","nodeType":"VariableDeclaration","scope":3591,"src":"9319:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3561,"name":"string","nodeType":"ElementaryTypeName","src":"9319:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9298:41:16"},"returnParameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3591,"src":"9363:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"9363:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9362:9:16"},"scope":3654,"src":"9280:522:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3622,"nodeType":"Block","src":"10107:153:16","statements":[{"assignments":[3607],"declarations":[{"constant":false,"id":3607,"mutability":"mutable","name":"payload","nameLocation":"10125:7:16","nodeType":"VariableDeclaration","scope":3622,"src":"10117:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10117:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3619,"initialValue":{"arguments":[{"arguments":[{"id":3611,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"10162:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3612,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"10171:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3613,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"10187:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3614,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"10195:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3615,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"10210:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3616,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"10222:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3609,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10145:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10149:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"10145:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10145:83:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3608,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10135:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10135:94:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10117:112:16"},{"expression":{"id":3620,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"10246:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3605,"id":3621,"nodeType":"Return","src":"10239:14:16"}]},"id":3623,"implemented":true,"kind":"function","modifiers":[],"name":"_preparePayload","nameLocation":"9921:15:16","nodeType":"FunctionDefinition","parameters":{"id":3602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3593,"mutability":"mutable","name":"realmId","nameLocation":"9954:7:16","nodeType":"VariableDeclaration","scope":3623,"src":"9946:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"9946:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3595,"mutability":"mutable","name":"realmIdVersion","nameLocation":"9979:14:16","nodeType":"VariableDeclaration","scope":3623,"src":"9971:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3594,"name":"uint256","nodeType":"ElementaryTypeName","src":"9971:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3597,"mutability":"mutable","name":"amount","nameLocation":"10011:6:16","nodeType":"VariableDeclaration","scope":3623,"src":"10003:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"10003:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3599,"mutability":"mutable","name":"reasonCode","nameLocation":"10035:10:16","nodeType":"VariableDeclaration","scope":3623,"src":"10027:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10027:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3601,"mutability":"mutable","name":"nonce","nameLocation":"10063:5:16","nodeType":"VariableDeclaration","scope":3623,"src":"10055:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3600,"name":"uint256","nodeType":"ElementaryTypeName","src":"10055:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9936:138:16"},"returnParameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3623,"src":"10098:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10098:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10097:9:16"},"scope":3654,"src":"9912:348:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3652,"nodeType":"Block","src":"10494:230:16","statements":[{"assignments":[3635],"declarations":[{"constant":false,"id":3635,"mutability":"mutable","name":"realmIdVersion","nameLocation":"10568:14:16","nodeType":"VariableDeclaration","scope":3652,"src":"10560:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3634,"name":"uint256","nodeType":"ElementaryTypeName","src":"10560:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3640,"initialValue":{"arguments":[{"id":3638,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"10612:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3636,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"10585:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$3680","typeString":"contract IRealmId"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10601:10:16","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":3663,"src":"10585:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10585:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10560:60:16"},{"expression":{"components":[{"arguments":[{"id":3642,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"10655:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3643,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"10664:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3644,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"10680:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3645,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"10688:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":3646,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"10700:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3648,"indexExpression":{"id":3647,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"10707:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10700:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3641,"name":"_preparePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3623,"src":"10639:15:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256,uint256,uint256,bytes32,uint256) view returns (bytes32)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10639:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3650,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10638:79:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3633,"id":3651,"nodeType":"Return","src":"10631:86:16"}]},"functionSelector":"df00bb24","id":3653,"implemented":true,"kind":"function","modifiers":[],"name":"preparePayload","nameLocation":"10396:14:16","nodeType":"FunctionDefinition","parameters":{"id":3630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3625,"mutability":"mutable","name":"realmId","nameLocation":"10419:7:16","nodeType":"VariableDeclaration","scope":3653,"src":"10411:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3624,"name":"uint256","nodeType":"ElementaryTypeName","src":"10411:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3627,"mutability":"mutable","name":"amount","nameLocation":"10436:6:16","nodeType":"VariableDeclaration","scope":3653,"src":"10428:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3626,"name":"uint256","nodeType":"ElementaryTypeName","src":"10428:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"reasonCode","nameLocation":"10452:10:16","nodeType":"VariableDeclaration","scope":3653,"src":"10444:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10444:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10410:53:16"},"returnParameters":{"id":3633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3653,"src":"10485:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10485:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10484:9:16"},"scope":3654,"src":"10387:337:16","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3655,"src":"426:10300:16","usedErrors":[],"usedEvents":[347,356,365,416,423,428,788,2876,2881,2886,2900,2918]}],"src":"32:10695:16"},"id":16},"contracts/MocaPoints/interface/mock/IRealmId.sol":{"ast":{"absolutePath":"contracts/MocaPoints/interface/mock/IRealmId.sol","exportedSymbols":{"IRealmId":[3680]},"id":3681,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3656,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"45:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IRealmId","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3680,"linearizedBaseContracts":[3680],"name":"IRealmId","nameLocation":"140:8:17","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a9735f94","id":3663,"implemented":false,"kind":"function","modifiers":[],"name":"burnCounts","nameLocation":"165:10:17","nodeType":"FunctionDefinition","parameters":{"id":3659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3658,"mutability":"mutable","name":"realmId","nameLocation":"184:7:17","nodeType":"VariableDeclaration","scope":3663,"src":"176:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3657,"name":"uint256","nodeType":"ElementaryTypeName","src":"176:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"175:17:17"},"returnParameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3663,"src":"216:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3660,"name":"uint256","nodeType":"ElementaryTypeName","src":"216:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"215:9:17"},"scope":3680,"src":"156:69:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cad6b901","id":3672,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"240:10:17","nodeType":"FunctionDefinition","parameters":{"id":3668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3665,"mutability":"mutable","name":"name","nameLocation":"267:4:17","nodeType":"VariableDeclaration","scope":3672,"src":"251:20:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3664,"name":"string","nodeType":"ElementaryTypeName","src":"251:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3667,"mutability":"mutable","name":"parentNode","nameLocation":"281:10:17","nodeType":"VariableDeclaration","scope":3672,"src":"273:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3666,"name":"bytes32","nodeType":"ElementaryTypeName","src":"273:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"250:42:17"},"returnParameters":{"id":3671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3672,"src":"316:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3669,"name":"uint256","nodeType":"ElementaryTypeName","src":"316:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"315:9:17"},"scope":3680,"src":"231:94:17","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"6352211e","id":3679,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"340:7:17","nodeType":"FunctionDefinition","parameters":{"id":3675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3674,"mutability":"mutable","name":"realmId","nameLocation":"356:7:17","nodeType":"VariableDeclaration","scope":3679,"src":"348:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3673,"name":"uint256","nodeType":"ElementaryTypeName","src":"348:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"347:17:17"},"returnParameters":{"id":3678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3677,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3679,"src":"388:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3676,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"387:9:17"},"scope":3680,"src":"331:66:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3681,"src":"130:270:17","usedErrors":[],"usedEvents":[]}],"src":"45:356:17"},"id":17},"contracts/MocaPoints/mock/realmIdContract/MockRealmId.sol":{"ast":{"absolutePath":"contracts/MocaPoints/mock/realmIdContract/MockRealmId.sol","exportedSymbols":{"MockRealmId":[3708]},"id":3709,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3682,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"MockRealmId","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3708,"linearizedBaseContracts":[3708],"name":"MockRealmId","nameLocation":"109:11:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3693,"nodeType":"Block","src":"203:26:18","statements":[{"expression":{"hexValue":"3130","id":3691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"220:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"functionReturnParameters":3690,"id":3692,"nodeType":"Return","src":"213:9:18"}]},"functionSelector":"cad6b901","id":3694,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"136:10:18","nodeType":"FunctionDefinition","parameters":{"id":3687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3694,"src":"147:15:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3683,"name":"string","nodeType":"ElementaryTypeName","src":"147:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3694,"src":"164:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"164:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"146:26:18"},"returnParameters":{"id":3690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3694,"src":"194:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3688,"name":"uint256","nodeType":"ElementaryTypeName","src":"194:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"193:9:18"},"scope":3708,"src":"127:102:18","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":3706,"nodeType":"Block","src":"291:75:18","statements":[{"expression":{"arguments":[{"hexValue":"307839304637396266364542326334663837303336354537383539383245316631303145393362393036","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"316:42:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x90F79bf6EB2c4f870365E785982E1f101E93b906"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"308:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3701,"name":"address","nodeType":"ElementaryTypeName","src":"308:7:18","typeDescriptions":{}}},"id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"308:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3700,"id":3705,"nodeType":"Return","src":"301:58:18"}]},"functionSelector":"6352211e","id":3707,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"244:7:18","nodeType":"FunctionDefinition","parameters":{"id":3697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3707,"src":"252:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3695,"name":"uint256","nodeType":"ElementaryTypeName","src":"252:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"251:9:18"},"returnParameters":{"id":3700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3699,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3707,"src":"282:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3698,"name":"address","nodeType":"ElementaryTypeName","src":"282:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"281:9:18"},"scope":3708,"src":"235:131:18","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":3709,"src":"100:268:18","usedErrors":[],"usedEvents":[]}],"src":"32:337:18"},"id":18}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":783,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1449,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1832,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":783,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":762,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":783,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":783,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":762,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1077,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087cb31f628dc53824618bcdd91cfac0e52ee53f1c35546a3d7a7fb8c665163e164736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xCB BALANCE 0xF6 0x28 0xDC MSTORE8 DUP3 CHAINID XOR 0xBC 0xDD SWAP2 0xCF 0xAC 0xE MSTORE 0xEE MSTORE8 CALL 0xC3 SSTORE CHAINID LOG3 0xD7 0xA7 0xFB DUP13 PUSH7 0x5163E164736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"194:9180:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087cb31f628dc53824618bcdd91cfac0e52ee53f1c35546a3d7a7fb8c665163e164736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xCB BALANCE 0xF6 0x28 0xDC MSTORE8 DUP3 CHAINID XOR 0xBC 0xDD SWAP2 0xCF 0xAC 0xE MSTORE 0xEE MSTORE8 CALL 0xC3 SSTORE CHAINID LOG3 0xD7 0xA7 0xFB DUP13 PUSH7 0x5163E164736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"194:9180:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":783,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1449,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0ecf4356b24fee3bd2e88da538377bfd2055e56b4a363f13686d739505a08ce64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xEC DELEGATECALL CALLDATALOAD PUSH12 0x24FEE3BD2E88DA538377BFD2 SDIV 0x5E JUMP 0xB4 LOG3 PUSH4 0xF13686D7 CODECOPY POP GAS ADDMOD 0xCE PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1420:2696:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2696:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0ecf4356b24fee3bd2e88da538377bfd2055e56b4a363f13686d739505a08ce64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xEC DELEGATECALL CALLDATALOAD PUSH12 0x24FEE3BD2E88DA538377BFD2 SDIV 0x5E JUMP 0xB4 LOG3 PUSH4 0xF13686D7 CODECOPY POP GAS ADDMOD 0xCE PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1420:2696:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9145aaed77b06eb837e79b2c1082780d6f8bc76c15a7e61e995a4aab4c0b42564736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 EQ GAS 0xAE 0xD7 PUSH28 0x6EB837E79B2C1082780D6F8BC76C15A7E61E995A4AAB4C0B4256473 PUSH16 0x6C634300081500330000000000000000 ","sourceMap":"242:2603:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;242:2603:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9145aaed77b06eb837e79b2c1082780d6f8bc76c15a7e61e995a4aab4c0b42564736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 EQ GAS 0xAE 0xD7 PUSH28 0x6EB837E79B2C1082780D6F8BC76C15A7E61E995A4AAB4C0B4256473 PUSH16 0x6C634300081500330000000000000000 ","sourceMap":"242:2603:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":783,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1832,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f15fe5676a90ea6a57e0a960df2f8b7cad7ec10e05c0a8c15cee8de0db72755964736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL PUSH0 0xE5 PUSH8 0x6A90EA6A57E0A960 0xDF 0x2F DUP12 PUSH29 0xAD7EC10E05C0A8C15CEE8DE0DB72755964736F6C634300081500330000 ","sourceMap":"202:12593:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12593:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f15fe5676a90ea6a57e0a960df2f8b7cad7ec10e05c0a8c15cee8de0db72755964736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL PUSH0 0xE5 PUSH8 0x6A90EA6A57E0A960 0xDF 0x2F DUP12 PUSH29 0xAD7EC10E05C0A8C15CEE8DE0DB72755964736F6C634300081500330000 ","sourceMap":"202:12593:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5cbdc2d9e226fa785e37e9d36ba26e66c1936de71444d6fe9f232f801476a4964736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0xCB 0xDC 0x2D SWAP15 0x22 PUSH16 0xA785E37E9D36BA26E66C1936DE71444D PUSH16 0xE9F232F801476A4964736F6C63430008 ISZERO STOP CALLER ","sourceMap":"215:1058:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1058:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5cbdc2d9e226fa785e37e9d36ba26e66c1936de71444d6fe9f232f801476a4964736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0xCB 0xDC 0x2D SWAP15 0x22 PUSH16 0xA785E37E9D36BA26E66C1936DE71444D PUSH16 0xE9F232F801476A4964736F6C63430008 ISZERO STOP CALLER ","sourceMap":"215:1058:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MocaPoints/MocaPoints.sol":{"MocaPoints":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"BatchAddedConsumeReasonCode","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"BatchRemovedConsumeReasonCode","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"realmId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"realmIdOwner","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"Consumed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"realmId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"SetCurrentSeason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEPOSITOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UPGRADER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"allowedConsumeReasonCodes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"_name","type":"string"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"_name","type":"string"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"_reasonCodes","type":"bytes32[]"}],"name":"batchAddConsumeReasonCodes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"_reasonCodes","type":"bytes32[]"}],"name":"batchRemoveConsumeReasonCodes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentSeason","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_realmIdContract","type":"address"},{"internalType":"address","name":"_adminAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"}],"name":"preparePayload","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"realmIdContract","outputs":[{"internalType":"contract IRealmId","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"seasons","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_season","type":"bytes32"}],"name":"setCurrentSeason","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2926":{"entryPoint":null,"id":2926,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_923":{"entryPoint":38,"id":923,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:608:19","nodeType":"YulBlock","src":"0:608:19","statements":[{"nativeSrc":"6:3:19","nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nativeSrc":"188:229:19","nodeType":"YulBlock","src":"188:229:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"205:9:19","nodeType":"YulIdentifier","src":"205:9:19"},{"kind":"number","nativeSrc":"216:2:19","nodeType":"YulLiteral","src":"216:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"198:6:19","nodeType":"YulIdentifier","src":"198:6:19"},"nativeSrc":"198:21:19","nodeType":"YulFunctionCall","src":"198:21:19"},"nativeSrc":"198:21:19","nodeType":"YulExpressionStatement","src":"198:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"239:9:19","nodeType":"YulIdentifier","src":"239:9:19"},{"kind":"number","nativeSrc":"250:2:19","nodeType":"YulLiteral","src":"250:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"235:3:19","nodeType":"YulIdentifier","src":"235:3:19"},"nativeSrc":"235:18:19","nodeType":"YulFunctionCall","src":"235:18:19"},{"kind":"number","nativeSrc":"255:2:19","nodeType":"YulLiteral","src":"255:2:19","type":"","value":"39"}],"functionName":{"name":"mstore","nativeSrc":"228:6:19","nodeType":"YulIdentifier","src":"228:6:19"},"nativeSrc":"228:30:19","nodeType":"YulFunctionCall","src":"228:30:19"},"nativeSrc":"228:30:19","nodeType":"YulExpressionStatement","src":"228:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"278:9:19","nodeType":"YulIdentifier","src":"278:9:19"},{"kind":"number","nativeSrc":"289:2:19","nodeType":"YulLiteral","src":"289:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"274:3:19","nodeType":"YulIdentifier","src":"274:3:19"},"nativeSrc":"274:18:19","nodeType":"YulFunctionCall","src":"274:18:19"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nativeSrc":"294:34:19","nodeType":"YulLiteral","src":"294:34:19","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nativeSrc":"267:6:19","nodeType":"YulIdentifier","src":"267:6:19"},"nativeSrc":"267:62:19","nodeType":"YulFunctionCall","src":"267:62:19"},"nativeSrc":"267:62:19","nodeType":"YulExpressionStatement","src":"267:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"349:9:19","nodeType":"YulIdentifier","src":"349:9:19"},{"kind":"number","nativeSrc":"360:2:19","nodeType":"YulLiteral","src":"360:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"345:3:19","nodeType":"YulIdentifier","src":"345:3:19"},"nativeSrc":"345:18:19","nodeType":"YulFunctionCall","src":"345:18:19"},{"hexValue":"616c697a696e67","kind":"string","nativeSrc":"365:9:19","nodeType":"YulLiteral","src":"365:9:19","type":"","value":"alizing"}],"functionName":{"name":"mstore","nativeSrc":"338:6:19","nodeType":"YulIdentifier","src":"338:6:19"},"nativeSrc":"338:37:19","nodeType":"YulFunctionCall","src":"338:37:19"},"nativeSrc":"338:37:19","nodeType":"YulExpressionStatement","src":"338:37:19"},{"nativeSrc":"384:27:19","nodeType":"YulAssignment","src":"384:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"396:9:19","nodeType":"YulIdentifier","src":"396:9:19"},{"kind":"number","nativeSrc":"407:3:19","nodeType":"YulLiteral","src":"407:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"392:3:19","nodeType":"YulIdentifier","src":"392:3:19"},"nativeSrc":"392:19:19","nodeType":"YulFunctionCall","src":"392:19:19"},"variableNames":[{"name":"tail","nativeSrc":"384:4:19","nodeType":"YulIdentifier","src":"384:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14:403:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"165:9:19","nodeType":"YulTypedName","src":"165:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"179:4:19","nodeType":"YulTypedName","src":"179:4:19","type":""}],"src":"14:403:19"},{"body":{"nativeSrc":"519:87:19","nodeType":"YulBlock","src":"519:87:19","statements":[{"nativeSrc":"529:26:19","nodeType":"YulAssignment","src":"529:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"541:9:19","nodeType":"YulIdentifier","src":"541:9:19"},{"kind":"number","nativeSrc":"552:2:19","nodeType":"YulLiteral","src":"552:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"537:3:19","nodeType":"YulIdentifier","src":"537:3:19"},"nativeSrc":"537:18:19","nodeType":"YulFunctionCall","src":"537:18:19"},"variableNames":[{"name":"tail","nativeSrc":"529:4:19","nodeType":"YulIdentifier","src":"529:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"571:9:19","nodeType":"YulIdentifier","src":"571:9:19"},{"arguments":[{"name":"value0","nativeSrc":"586:6:19","nodeType":"YulIdentifier","src":"586:6:19"},{"kind":"number","nativeSrc":"594:4:19","nodeType":"YulLiteral","src":"594:4:19","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"582:3:19","nodeType":"YulIdentifier","src":"582:3:19"},"nativeSrc":"582:17:19","nodeType":"YulFunctionCall","src":"582:17:19"}],"functionName":{"name":"mstore","nativeSrc":"564:6:19","nodeType":"YulIdentifier","src":"564:6:19"},"nativeSrc":"564:36:19","nodeType":"YulFunctionCall","src":"564:36:19"},"nativeSrc":"564:36:19","nodeType":"YulExpressionStatement","src":"564:36:19"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"422:184:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"488:9:19","nodeType":"YulTypedName","src":"488:9:19","type":""},{"name":"value0","nativeSrc":"499:6:19","nodeType":"YulTypedName","src":"499:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"510:4:19","nodeType":"YulTypedName","src":"510:4:19","type":""}],"src":"422:184:19"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x20 PUSH3 0x26 JUMP JUMPDEST PUSH3 0xE7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH3 0xE5 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x38DE PUSH3 0x11F PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xB62 ADD MSTORE DUP2 DUP2 PUSH2 0xC12 ADD MSTORE DUP2 DUP2 PUSH2 0x121B ADD MSTORE DUP2 DUP2 PUSH2 0x12CB ADD MSTORE PUSH2 0x1410 ADD MSTORE PUSH2 0x38DE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x219 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x906405A3 GT PUSH2 0x11D JUMPI DUP1 PUSH4 0xBCB39621 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xDF00BB24 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE63AB1E9 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x6BA JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x6EE JUMPI DUP1 PUSH4 0xF9515962 EQ PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDF00BB24 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0xE564A0E2 EQ PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBCB39621 EQ PUSH2 0x604 JUMPI DUP1 PUSH4 0xD14A5C71 EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xDC893CE4 EQ PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9D70B005 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x9D70B005 EQ PUSH2 0x57B JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0xA3B0B5A3 EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0xAD3B1D48 EQ PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x906405A3 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0x99D342AC EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0x9CC7F708 EQ PUSH2 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0x794459BE EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x86A8E98A EQ PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x51955DFC EQ PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x3F30B00F EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x4529CC1B EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x2B48DC72 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x98B6419 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x141A468C EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x18EE89F0 EQ PUSH2 0x2AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FEB JUMP JUMPDEST PUSH2 0x753 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0x3141 JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x29C CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x31AA JUMP JUMPDEST PUSH2 0x94D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFD SLOAD PUSH2 0x32D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xA6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xA98 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xB4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x3CD CALLDATASIZE PUSH1 0x4 PUSH2 0x3254 JUMP JUMPDEST PUSH2 0xD50 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x3ED CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x32FA JUMP JUMPDEST PUSH2 0xF24 JUMP JUMPDEST PUSH2 0x2CE PUSH2 0x430 CALLDATASIZE PUSH1 0x4 PUSH2 0x3328 JUMP JUMPDEST PUSH2 0x1204 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x338C JUMP JUMPDEST PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x13F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x33B8 JUMP JUMPDEST PUSH2 0x14E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH2 0x164A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3254 JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x556 CALLDATASIZE PUSH1 0x4 PUSH2 0x340B JUMP JUMPDEST PUSH2 0x19A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x576 CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH2 0x1A55 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x596 CALLDATASIZE PUSH1 0x4 PUSH2 0x3489 JUMP JUMPDEST PUSH2 0x1B1C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x5FF CALLDATASIZE PUSH1 0x4 PUSH2 0x34F5 JUMP JUMPDEST PUSH2 0x1BCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH1 0xFB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x635 CALLDATASIZE PUSH1 0x4 PUSH2 0x338C JUMP JUMPDEST PUSH2 0x1C8C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x655 CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0x1E4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x675 CALLDATASIZE PUSH1 0x4 PUSH2 0x3517 JUMP JUMPDEST PUSH2 0x1E70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x695 CALLDATASIZE PUSH1 0x4 PUSH2 0x338C JUMP JUMPDEST PUSH2 0x2073 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x6B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x216E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x73D CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x7E6 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x849 SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x866 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x88A SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x923 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x0 SWAP7 DUP8 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP10 KECCAK256 SWAP5 DUP10 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP9 KECCAK256 SWAP2 DUP9 MSTORE MSTORE POP SWAP1 SWAP4 KECCAK256 SLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x85C17057E64B90C0253930284E1A55B6799192F06EFD0CF6B55DDE7BDC2502B4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061206465706F7369746F720000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xA1B SWAP1 DUP5 SWAP1 PUSH2 0x3697 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 SWAP1 DUP7 SWAP1 CALLER SWAP1 PUSH32 0x9092BF6BD1CF7DB4FCF41AEDC7C0333B51C57F5B80B429BC3D9CAA5587C6AD82 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA89 DUP2 PUSH2 0x2215 JUMP JUMPDEST PUSH2 0xA93 DUP4 DUP4 PUSH2 0x221F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0xB3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0xB47 DUP3 DUP3 PUSH2 0x2313 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xC10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC85 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0xD31 DUP2 PUSH2 0x23CE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD4D SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x23F8 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xFFDFC1249C027F9191656349FEB0761381BB32C9F557E01F419FD08754BF5A1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E2061646D696E0000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xEE9 JUMPI PUSH2 0x100 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE90 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526561736F6E20636F646520616C726561647920657869737473000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x100 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEA9 JUMPI PUSH2 0xEA9 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xEE1 SWAP1 PUSH2 0x36D9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDEB JUMP JUMPDEST POP PUSH32 0xD8C56A8918EC09C2FE3C4D9FCC00ECE66DF217A1AB3AD768DD0A71620DA5B4E DUP2 PUSH1 0x40 MLOAD PUSH2 0xF19 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xF44 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xF5E JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF5E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xFEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1048 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1050 PUSH2 0x25F7 JUMP JUMPDEST PUSH2 0x1058 PUSH2 0x25F7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x10D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420612076616C696420436F6E7472616374204164647265737300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420612076616C69642041646D696E204164647265737300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x115D PUSH1 0x0 DUP4 PUSH2 0x221F JUMP JUMPDEST PUSH1 0xFD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x12C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x133E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x13EA DUP3 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0xB47 DUP3 DUP3 PUSH1 0x1 PUSH2 0x23F8 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x14BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x153F SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x155C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1580 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1619 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xFFDFC1249C027F9191656349FEB0761381BB32C9F557E01F419FD08754BF5A1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x16E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E2061646D696E0000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x175B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536561736F6E20616C7265616479207365740000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0xFB DUP2 SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x61228C895F8BA06548597D3E34A23BC0ECB6D1E62A1EB3FA30BE04883A17EF31 SWAP1 PUSH2 0xF19 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xFFDFC1249C027F9191656349FEB0761381BB32C9F557E01F419FD08754BF5A1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1861 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E2061646D696E0000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1971 JUMPI PUSH2 0x100 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1884 JUMPI PUSH2 0x1884 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1908 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526561736F6E20636F646520646F6573206E6F74206578697374000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x191F JUMPI PUSH2 0x191F PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 PUSH2 0x1969 DUP2 PUSH2 0x36D9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1864 JUMP JUMPDEST POP PUSH32 0x5B2C9FCBB27D48BDBFC59F0564B5BA81539309EBF09A940FAD64D171BCFB9FF9 DUP2 PUSH1 0x40 MLOAD PUSH2 0xF19 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x19FA SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A3B SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1A4B DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E70 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AED SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 DUP2 MSTORE DUP6 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1B75 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB6 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1BC5 DUP8 DUP3 DUP7 DUP7 DUP7 PUSH2 0x94D JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C66 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP7 KECCAK256 SWAP2 DUP7 MSTORE MSTORE POP POP SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D20 SWAP2 SWAP1 PUSH2 0x3755 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x1DA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656E646572206E6F74206F776E6572206F66207265616C6D49640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E35 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1E44 DUP6 DUP3 DUP7 DUP7 CALLER PUSH2 0x2690 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1E66 DUP2 PUSH2 0x2215 JUMP JUMPDEST PUSH2 0xA93 DUP4 DUP4 PUSH2 0x2313 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F04 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F2B DUP9 DUP4 DUP10 PUSH1 0xFF PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP11 DUP11 DUP11 DUP11 PUSH2 0x286F JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FC4 SWAP2 SWAP1 PUSH2 0x3755 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x205B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E6572206E6F74206F776E6572206F66207265616C6D49640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x2068 DUP10 DUP5 DUP11 DUP11 DUP6 PUSH2 0x2690 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x210B SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xFF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD PUSH1 0xFB SLOAD DUP4 MLOAD DUP1 DUP5 ADD SWAP11 SWAP1 SWAP11 MSTORE DUP10 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP9 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xC0 DUP1 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE DUP4 MLOAD DUP1 DUP8 SUB SWAP1 SWAP6 ADD DUP6 MSTORE PUSH1 0xE0 SWAP1 SWAP6 ADD SWAP1 SWAP3 MSTORE POP POP DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x21C7 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2208 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1E44 DUP2 DUP5 DUP5 PUSH2 0x1C8C JUMP JUMPDEST PUSH2 0xD4D DUP2 CALLER PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB47 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x22B5 CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB47 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 PUSH2 0xB47 DUP2 PUSH2 0x2215 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x242B JUMPI PUSH2 0xA93 DUP4 PUSH2 0x2A6F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24B0 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24AD SWAP2 DUP2 ADD SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x253C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x25EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH2 0xA93 DUP4 DUP4 DUP4 PUSH2 0x2B79 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x268E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 GT ISZERO PUSH2 0x271E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH2 0x100 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2797 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6E73756D6520726561736F6E20636F64650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x27CB SWAP1 DUP5 SWAP1 PUSH2 0x3772 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xFB SLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xFF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD CALLER DUP2 MSTORE SWAP2 DUP3 ADD DUP9 SWAP1 MSTORE DUP2 DUP4 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD DUP5 SWAP3 SWAP2 DUP9 SWAP2 PUSH32 0x42D4212EAEF22A85F07461AD57D262E7C780323E1ED2AF838B92D5BCF85138C1 SWAP2 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP1 LOG4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xFF PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x2863 DUP4 PUSH2 0x36D9 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP13 SWAP1 MSTORE DUP2 DUP4 ADD DUP12 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xA0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xC0 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 POP PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x297D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB47 JUMPI PUSH2 0x29F5 DUP2 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x2A00 DUP4 PUSH1 0x20 PUSH2 0x2BC3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A11 SWAP3 SWAP2 SWAP1 PUSH2 0x3785 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH2 0x9E1 SWAP2 PUSH1 0x4 ADD PUSH2 0x3806 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x2B13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2B82 DUP4 PUSH2 0x2E0D JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2B8F JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xA93 JUMPI PUSH2 0x2B9E DUP4 DUP4 PUSH2 0x2E5A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7E6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2BD2 DUP4 PUSH1 0x2 PUSH2 0x3819 JUMP JUMPDEST PUSH2 0x2BDD SWAP1 PUSH1 0x2 PUSH2 0x3697 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF5 JUMPI PUSH2 0x2BF5 PUSH2 0x302D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C1F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2C56 JUMPI PUSH2 0x2C56 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2CB9 JUMPI PUSH2 0x2CB9 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2CF5 DUP5 PUSH1 0x2 PUSH2 0x3819 JUMP JUMPDEST PUSH2 0x2D00 SWAP1 PUSH1 0x1 PUSH2 0x3697 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2D9D JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2D41 JUMPI PUSH2 0x2D41 PUSH2 0x36AA JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D57 JUMPI PUSH2 0x2D57 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2D96 DUP2 PUSH2 0x3830 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D03 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x2E06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2E16 DUP2 PUSH2 0x2A6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E06 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3882 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x2EA4 SWAP2 SWAP1 PUSH2 0x3865 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EDF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EE4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2EF5 DUP7 DUP4 DUP4 DUP8 PUSH2 0x2EFF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2F95 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x2F8E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x2F8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST POP DUP2 PUSH2 0x2F9F JUMP JUMPDEST PUSH2 0x2F9F DUP4 DUP4 PUSH2 0x2FA7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x2FB7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 SWAP1 PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x2E06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x30A3 JUMPI PUSH2 0x30A3 PUSH2 0x302D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x30C5 JUMPI PUSH2 0x30C5 PUSH2 0x302D JUMP JUMPDEST PUSH2 0x30F6 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD PUSH2 0x305C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x310A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E06 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x30AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x317B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3187 DUP7 DUP3 DUP8 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x31C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x321A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x322C DUP2 PUSH2 0x31E5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E06 DUP2 PUSH2 0x31E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x327F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x32A5 JUMPI PUSH2 0x32A5 PUSH2 0x302D JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x32B6 DUP5 DUP4 ADD PUSH2 0x305C JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 DUP4 ADD DUP5 ADD SWAP2 DUP5 DUP2 ADD SWAP1 DUP9 DUP5 GT ISZERO PUSH2 0x32D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x32EE JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x32D5 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x330D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3318 DUP2 PUSH2 0x31E5 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x322C DUP2 PUSH2 0x31E5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x333B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3346 DUP2 PUSH2 0x31E5 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x3373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3382 DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x30AB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x33A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3382 DUP6 DUP3 DUP7 ADD PUSH2 0x3121 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3444 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3450 DUP11 DUP3 DUP12 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x346D PUSH1 0x80 DUP10 ADD PUSH2 0x33F5 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x34A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34D3 DUP10 DUP3 DUP11 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x354E PUSH1 0x60 DUP9 ADD PUSH2 0x33F5 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x357E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x359C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35A8 DUP8 DUP3 DUP9 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35DA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x35C2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x35FB DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3640 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3661 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x3668 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x370A JUMPI PUSH2 0x370A PUSH2 0x3668 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3749 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x372D JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E06 DUP2 PUSH2 0x31E5 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x3668 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x37BD DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x35BF JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x37FA DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x35BF JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2E06 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35E3 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x3668 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x383F JUMPI PUSH2 0x383F PUSH2 0x3668 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3877 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x35BF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212208FA1B7 SWAP10 SHL 0xBA PUSH18 0xB13B5260964A301BD4A4E43A882E89C0E1A4 LOG2 PUSH18 0xEFAAF875DE64736F6C634300081500330000 ","sourceMap":"426:10300:16:-:0;;;1332:4:7;1289:48;;1979:53:16;;;;;;;;;-1:-1:-1;2003:22:16;:20;:22::i;:::-;426:10300;;5939:280:6;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:6;;216:2:19;5998:66:6;;;198:21:19;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:19;;;338:37;392:19;;5998:66:6;;;;;;;;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:6;6140:15;6125:30;;;;;;6174:28;;564:36:19;;;6174:28:6;;552:2:19;537:18;6174:28:6;;;;;;;6074:139;5939:280::o;422:184:19:-;426:10300:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":null,"id":42,"parameterSlots":0,"returnSlots":0},"@DEPOSITOR_ROLE_2847":{"entryPoint":null,"id":2847,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_2837":{"entryPoint":null,"id":2837,"parameterSlots":0,"returnSlots":0},"@UPGRADER_ROLE_2842":{"entryPoint":null,"id":2842,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":9719,"id":21,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_960":{"entryPoint":null,"id":960,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_2989":{"entryPoint":9166,"id":2989,"parameterSlots":1,"returnSlots":0},"@_checkRole_107":{"entryPoint":8725,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":10677,"id":146,"parameterSlots":2,"returnSlots":0},"@_consume_3313":{"entryPoint":9872,"id":3313,"parameterSlots":5,"returnSlots":0},"@_getImplementation_484":{"entryPoint":null,"id":484,"parameterSlots":0,"returnSlots":1},"@_getSigner_3250":{"entryPoint":10351,"id":3250,"parameterSlots":8,"returnSlots":1},"@_grantRole_298":{"entryPoint":8735,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_1435":{"entryPoint":null,"id":1435,"parameterSlots":0,"returnSlots":1},"@_preparePayload_3623":{"entryPoint":null,"id":3623,"parameterSlots":5,"returnSlots":1},"@_revert_1407":{"entryPoint":12199,"id":1407,"parameterSlots":2,"returnSlots":0},"@_revokeRole_329":{"entryPoint":8979,"id":329,"parameterSlots":2,"returnSlots":0},"@_setImplementation_508":{"entryPoint":10863,"id":508,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_606":{"entryPoint":9208,"id":606,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_553":{"entryPoint":11129,"id":553,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_523":{"entryPoint":11789,"id":523,"parameterSlots":1,"returnSlots":0},"@allowedConsumeReasonCodes_2872":{"entryPoint":null,"id":2872,"parameterSlots":0,"returnSlots":0},"@balanceOf_3500":{"entryPoint":7118,"id":3500,"parameterSlots":2,"returnSlots":1},"@balanceOf_3535":{"entryPoint":2028,"id":3535,"parameterSlots":3,"returnSlots":1},"@balanceOf_3558":{"entryPoint":6741,"id":3558,"parameterSlots":1,"returnSlots":1},"@balanceOf_3591":{"entryPoint":5346,"id":3591,"parameterSlots":2,"returnSlots":1},"@balances_2864":{"entryPoint":null,"id":2864,"parameterSlots":0,"returnSlots":0},"@batchAddConsumeReasonCodes_3077":{"entryPoint":3408,"id":3077,"parameterSlots":1,"returnSlots":0},"@batchRemoveConsumeReasonCodes_3126":{"entryPoint":6089,"id":3126,"parameterSlots":1,"returnSlots":0},"@consume_3348":{"entryPoint":6561,"id":3348,"parameterSlots":7,"returnSlots":0},"@consume_3408":{"entryPoint":7792,"id":3408,"parameterSlots":6,"returnSlots":0},"@consume_3434":{"entryPoint":8558,"id":3434,"parameterSlots":4,"returnSlots":0},"@consume_3475":{"entryPoint":7308,"id":3475,"parameterSlots":3,"returnSlots":0},"@currentSeason_2849":{"entryPoint":null,"id":2849,"parameterSlots":0,"returnSlots":0},"@deposit_3169":{"entryPoint":2381,"id":3169,"parameterSlots":5,"returnSlots":0},"@deposit_3201":{"entryPoint":6940,"id":3201,"parameterSlots":6,"returnSlots":0},"@functionDelegateCall_1295":{"entryPoint":11866,"id":1295,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1324":{"entryPoint":null,"id":1324,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_1482":{"entryPoint":null,"id":1482,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_1493":{"entryPoint":null,"id":1493,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":null,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":2670,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":null,"id":94,"parameterSlots":2,"returnSlots":1},"@initialize_2979":{"entryPoint":3876,"id":2979,"parameterSlots":2,"returnSlots":0},"@isContract_1096":{"entryPoint":null,"id":1096,"parameterSlots":1,"returnSlots":1},"@nonces_2868":{"entryPoint":null,"id":2868,"parameterSlots":0,"returnSlots":0},"@preparePayload_3653":{"entryPoint":8307,"id":3653,"parameterSlots":3,"returnSlots":1},"@proxiableUUID_1023":{"entryPoint":5110,"id":1023,"parameterSlots":0,"returnSlots":1},"@realmIdContract_2856":{"entryPoint":null,"id":2856,"parameterSlots":0,"returnSlots":0},"@renounceRole_224":{"entryPoint":2712,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":7755,"id":201,"parameterSlots":2,"returnSlots":0},"@seasons_2853":{"entryPoint":null,"id":2853,"parameterSlots":0,"returnSlots":0},"@setCurrentSeason_3026":{"entryPoint":5706,"id":3026,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1827":{"entryPoint":null,"id":1827,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1875,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_1743":{"entryPoint":11203,"id":1743,"parameterSlots":2,"returnSlots":1},"@toHexString_1763":{"entryPoint":11172,"id":1763,"parameterSlots":1,"returnSlots":1},"@upgradeToAndCall_1066":{"entryPoint":4612,"id":1066,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1045":{"entryPoint":2891,"id":1045,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1363":{"entryPoint":12031,"id":1363,"parameterSlots":4,"returnSlots":1},"abi_decode_available_length_string":{"entryPoint":12459,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_string":{"entryPoint":12577,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":12855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":14165,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":13050,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":13096,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":12884,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":12807,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_string_memory_ptr":{"entryPoint":12609,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes32t_string_memory_ptrt_uint256t_uint256t_bytes32":{"entryPoint":13449,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes32t_string_memory_ptr":{"entryPoint":13240,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_string_memory_ptrt_uint256t_bytes32":{"entryPoint":13672,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_string_memory_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32":{"entryPoint":13323,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":13557,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_uint256":{"entryPoint":13196,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32":{"entryPoint":12714,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes4":{"entryPoint":12267,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":12689,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":13903,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32":{"entryPoint":13591,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_uint8":{"entryPoint":13301,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string":{"entryPoint":13795,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14437,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14213,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_uint256_t_uint256_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":14097,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_contract$_IRealmId_$3680__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14342,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed":{"entryPoint":13869,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_22a5118d0663dcf9667a9c0b2238f19c1ed6e9f7598968af96eea021ee61c19e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_43f75645c653e44028cb8fda54db27b2d2fd1861c70f450be62ca0f614688f4f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_549711b1ccfcfb6570cbeff13c1a55762b5fcc708885df874c421714530ed56a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_56252a6247989a0782d1ad52265d2b3540f4fc7db600e892a3420904180ee89b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8df5911bab3053dea66a043ac5ac0de5a7f7e7f620bbba7bd30bfd675316ef3f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_907c90511d11a47c16170b9c7277878fac4c767ef53260ccef12b8a0b94ac892__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a187824b079404be555a1b9418b8031a46fa39c4a1a1c5cfe26b3286229770d1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ad26fe53f2fca31247987ef6a4af0496ee097218b3387432e3c6fed944f205a4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ea2a70fe2e8a1ed3ee633ddb0061dffa9a3291682c0f893cb32f8645c9bdf74b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":12380,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":13975,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":14361,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":14194,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":13759,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":14384,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":14041,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":13928,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":13994,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":12333,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":12773,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:25660:19","nodeType":"YulBlock","src":"0:25660:19","statements":[{"nativeSrc":"6:3:19","nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nativeSrc":"83:263:19","nodeType":"YulBlock","src":"83:263:19","statements":[{"body":{"nativeSrc":"129:16:19","nodeType":"YulBlock","src":"129:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:19","nodeType":"YulLiteral","src":"138:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:19","nodeType":"YulLiteral","src":"141:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:19","nodeType":"YulIdentifier","src":"131:6:19"},"nativeSrc":"131:12:19","nodeType":"YulFunctionCall","src":"131:12:19"},"nativeSrc":"131:12:19","nodeType":"YulExpressionStatement","src":"131:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:19","nodeType":"YulIdentifier","src":"104:7:19"},{"name":"headStart","nativeSrc":"113:9:19","nodeType":"YulIdentifier","src":"113:9:19"}],"functionName":{"name":"sub","nativeSrc":"100:3:19","nodeType":"YulIdentifier","src":"100:3:19"},"nativeSrc":"100:23:19","nodeType":"YulFunctionCall","src":"100:23:19"},{"kind":"number","nativeSrc":"125:2:19","nodeType":"YulLiteral","src":"125:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:19","nodeType":"YulIdentifier","src":"96:3:19"},"nativeSrc":"96:32:19","nodeType":"YulFunctionCall","src":"96:32:19"},"nativeSrc":"93:52:19","nodeType":"YulIf","src":"93:52:19"},{"nativeSrc":"154:36:19","nodeType":"YulVariableDeclaration","src":"154:36:19","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:19","nodeType":"YulIdentifier","src":"180:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:19","nodeType":"YulIdentifier","src":"167:12:19"},"nativeSrc":"167:23:19","nodeType":"YulFunctionCall","src":"167:23:19"},"variables":[{"name":"value","nativeSrc":"158:5:19","nodeType":"YulTypedName","src":"158:5:19","type":""}]},{"body":{"nativeSrc":"300:16:19","nodeType":"YulBlock","src":"300:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:19","nodeType":"YulLiteral","src":"309:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:19","nodeType":"YulLiteral","src":"312:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:19","nodeType":"YulIdentifier","src":"302:6:19"},"nativeSrc":"302:12:19","nodeType":"YulFunctionCall","src":"302:12:19"},"nativeSrc":"302:12:19","nodeType":"YulExpressionStatement","src":"302:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:19","nodeType":"YulIdentifier","src":"212:5:19"},{"arguments":[{"name":"value","nativeSrc":"223:5:19","nodeType":"YulIdentifier","src":"223:5:19"},{"kind":"number","nativeSrc":"230:66:19","nodeType":"YulLiteral","src":"230:66:19","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:19","nodeType":"YulIdentifier","src":"219:3:19"},"nativeSrc":"219:78:19","nodeType":"YulFunctionCall","src":"219:78:19"}],"functionName":{"name":"eq","nativeSrc":"209:2:19","nodeType":"YulIdentifier","src":"209:2:19"},"nativeSrc":"209:89:19","nodeType":"YulFunctionCall","src":"209:89:19"}],"functionName":{"name":"iszero","nativeSrc":"202:6:19","nodeType":"YulIdentifier","src":"202:6:19"},"nativeSrc":"202:97:19","nodeType":"YulFunctionCall","src":"202:97:19"},"nativeSrc":"199:117:19","nodeType":"YulIf","src":"199:117:19"},{"nativeSrc":"325:15:19","nodeType":"YulAssignment","src":"325:15:19","value":{"name":"value","nativeSrc":"335:5:19","nodeType":"YulIdentifier","src":"335:5:19"},"variableNames":[{"name":"value0","nativeSrc":"325:6:19","nodeType":"YulIdentifier","src":"325:6:19"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:19","nodeType":"YulTypedName","src":"49:9:19","type":""},{"name":"dataEnd","nativeSrc":"60:7:19","nodeType":"YulTypedName","src":"60:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:19","nodeType":"YulTypedName","src":"72:6:19","type":""}],"src":"14:332:19"},{"body":{"nativeSrc":"446:92:19","nodeType":"YulBlock","src":"446:92:19","statements":[{"nativeSrc":"456:26:19","nodeType":"YulAssignment","src":"456:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:19","nodeType":"YulIdentifier","src":"468:9:19"},{"kind":"number","nativeSrc":"479:2:19","nodeType":"YulLiteral","src":"479:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:19","nodeType":"YulIdentifier","src":"464:3:19"},"nativeSrc":"464:18:19","nodeType":"YulFunctionCall","src":"464:18:19"},"variableNames":[{"name":"tail","nativeSrc":"456:4:19","nodeType":"YulIdentifier","src":"456:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:19","nodeType":"YulIdentifier","src":"498:9:19"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:19","nodeType":"YulIdentifier","src":"523:6:19"}],"functionName":{"name":"iszero","nativeSrc":"516:6:19","nodeType":"YulIdentifier","src":"516:6:19"},"nativeSrc":"516:14:19","nodeType":"YulFunctionCall","src":"516:14:19"}],"functionName":{"name":"iszero","nativeSrc":"509:6:19","nodeType":"YulIdentifier","src":"509:6:19"},"nativeSrc":"509:22:19","nodeType":"YulFunctionCall","src":"509:22:19"}],"functionName":{"name":"mstore","nativeSrc":"491:6:19","nodeType":"YulIdentifier","src":"491:6:19"},"nativeSrc":"491:41:19","nodeType":"YulFunctionCall","src":"491:41:19"},"nativeSrc":"491:41:19","nodeType":"YulExpressionStatement","src":"491:41:19"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:19","nodeType":"YulTypedName","src":"415:9:19","type":""},{"name":"value0","nativeSrc":"426:6:19","nodeType":"YulTypedName","src":"426:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:19","nodeType":"YulTypedName","src":"437:4:19","type":""}],"src":"351:187:19"},{"body":{"nativeSrc":"575:152:19","nodeType":"YulBlock","src":"575:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"592:1:19","nodeType":"YulLiteral","src":"592:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"595:77:19","nodeType":"YulLiteral","src":"595:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"585:6:19","nodeType":"YulIdentifier","src":"585:6:19"},"nativeSrc":"585:88:19","nodeType":"YulFunctionCall","src":"585:88:19"},"nativeSrc":"585:88:19","nodeType":"YulExpressionStatement","src":"585:88:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"689:1:19","nodeType":"YulLiteral","src":"689:1:19","type":"","value":"4"},{"kind":"number","nativeSrc":"692:4:19","nodeType":"YulLiteral","src":"692:4:19","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"682:6:19","nodeType":"YulIdentifier","src":"682:6:19"},"nativeSrc":"682:15:19","nodeType":"YulFunctionCall","src":"682:15:19"},"nativeSrc":"682:15:19","nodeType":"YulExpressionStatement","src":"682:15:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"713:1:19","nodeType":"YulLiteral","src":"713:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"716:4:19","nodeType":"YulLiteral","src":"716:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"706:6:19","nodeType":"YulIdentifier","src":"706:6:19"},"nativeSrc":"706:15:19","nodeType":"YulFunctionCall","src":"706:15:19"},"nativeSrc":"706:15:19","nodeType":"YulExpressionStatement","src":"706:15:19"}]},"name":"panic_error_0x41","nativeSrc":"543:184:19","nodeType":"YulFunctionDefinition","src":"543:184:19"},{"body":{"nativeSrc":"777:289:19","nodeType":"YulBlock","src":"777:289:19","statements":[{"nativeSrc":"787:19:19","nodeType":"YulAssignment","src":"787:19:19","value":{"arguments":[{"kind":"number","nativeSrc":"803:2:19","nodeType":"YulLiteral","src":"803:2:19","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"797:5:19","nodeType":"YulIdentifier","src":"797:5:19"},"nativeSrc":"797:9:19","nodeType":"YulFunctionCall","src":"797:9:19"},"variableNames":[{"name":"memPtr","nativeSrc":"787:6:19","nodeType":"YulIdentifier","src":"787:6:19"}]},{"nativeSrc":"815:117:19","nodeType":"YulVariableDeclaration","src":"815:117:19","value":{"arguments":[{"name":"memPtr","nativeSrc":"837:6:19","nodeType":"YulIdentifier","src":"837:6:19"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"853:4:19","nodeType":"YulIdentifier","src":"853:4:19"},{"kind":"number","nativeSrc":"859:2:19","nodeType":"YulLiteral","src":"859:2:19","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"849:3:19","nodeType":"YulIdentifier","src":"849:3:19"},"nativeSrc":"849:13:19","nodeType":"YulFunctionCall","src":"849:13:19"},{"kind":"number","nativeSrc":"864:66:19","nodeType":"YulLiteral","src":"864:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"845:3:19","nodeType":"YulIdentifier","src":"845:3:19"},"nativeSrc":"845:86:19","nodeType":"YulFunctionCall","src":"845:86:19"}],"functionName":{"name":"add","nativeSrc":"833:3:19","nodeType":"YulIdentifier","src":"833:3:19"},"nativeSrc":"833:99:19","nodeType":"YulFunctionCall","src":"833:99:19"},"variables":[{"name":"newFreePtr","nativeSrc":"819:10:19","nodeType":"YulTypedName","src":"819:10:19","type":""}]},{"body":{"nativeSrc":"1007:22:19","nodeType":"YulBlock","src":"1007:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1009:16:19","nodeType":"YulIdentifier","src":"1009:16:19"},"nativeSrc":"1009:18:19","nodeType":"YulFunctionCall","src":"1009:18:19"},"nativeSrc":"1009:18:19","nodeType":"YulExpressionStatement","src":"1009:18:19"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"950:10:19","nodeType":"YulIdentifier","src":"950:10:19"},{"kind":"number","nativeSrc":"962:18:19","nodeType":"YulLiteral","src":"962:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"947:2:19","nodeType":"YulIdentifier","src":"947:2:19"},"nativeSrc":"947:34:19","nodeType":"YulFunctionCall","src":"947:34:19"},{"arguments":[{"name":"newFreePtr","nativeSrc":"986:10:19","nodeType":"YulIdentifier","src":"986:10:19"},{"name":"memPtr","nativeSrc":"998:6:19","nodeType":"YulIdentifier","src":"998:6:19"}],"functionName":{"name":"lt","nativeSrc":"983:2:19","nodeType":"YulIdentifier","src":"983:2:19"},"nativeSrc":"983:22:19","nodeType":"YulFunctionCall","src":"983:22:19"}],"functionName":{"name":"or","nativeSrc":"944:2:19","nodeType":"YulIdentifier","src":"944:2:19"},"nativeSrc":"944:62:19","nodeType":"YulFunctionCall","src":"944:62:19"},"nativeSrc":"941:88:19","nodeType":"YulIf","src":"941:88:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1045:2:19","nodeType":"YulLiteral","src":"1045:2:19","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1049:10:19","nodeType":"YulIdentifier","src":"1049:10:19"}],"functionName":{"name":"mstore","nativeSrc":"1038:6:19","nodeType":"YulIdentifier","src":"1038:6:19"},"nativeSrc":"1038:22:19","nodeType":"YulFunctionCall","src":"1038:22:19"},"nativeSrc":"1038:22:19","nodeType":"YulExpressionStatement","src":"1038:22:19"}]},"name":"allocate_memory","nativeSrc":"732:334:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"757:4:19","nodeType":"YulTypedName","src":"757:4:19","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"766:6:19","nodeType":"YulTypedName","src":"766:6:19","type":""}],"src":"732:334:19"},{"body":{"nativeSrc":"1146:391:19","nodeType":"YulBlock","src":"1146:391:19","statements":[{"body":{"nativeSrc":"1190:22:19","nodeType":"YulBlock","src":"1190:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1192:16:19","nodeType":"YulIdentifier","src":"1192:16:19"},"nativeSrc":"1192:18:19","nodeType":"YulFunctionCall","src":"1192:18:19"},"nativeSrc":"1192:18:19","nodeType":"YulExpressionStatement","src":"1192:18:19"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1162:6:19","nodeType":"YulIdentifier","src":"1162:6:19"},{"kind":"number","nativeSrc":"1170:18:19","nodeType":"YulLiteral","src":"1170:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1159:2:19","nodeType":"YulIdentifier","src":"1159:2:19"},"nativeSrc":"1159:30:19","nodeType":"YulFunctionCall","src":"1159:30:19"},"nativeSrc":"1156:56:19","nodeType":"YulIf","src":"1156:56:19"},{"nativeSrc":"1221:125:19","nodeType":"YulAssignment","src":"1221:125:19","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nativeSrc":"1258:6:19","nodeType":"YulIdentifier","src":"1258:6:19"},{"kind":"number","nativeSrc":"1266:2:19","nodeType":"YulLiteral","src":"1266:2:19","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1254:3:19","nodeType":"YulIdentifier","src":"1254:3:19"},"nativeSrc":"1254:15:19","nodeType":"YulFunctionCall","src":"1254:15:19"},{"kind":"number","nativeSrc":"1271:66:19","nodeType":"YulLiteral","src":"1271:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1250:3:19","nodeType":"YulIdentifier","src":"1250:3:19"},"nativeSrc":"1250:88:19","nodeType":"YulFunctionCall","src":"1250:88:19"},{"kind":"number","nativeSrc":"1340:4:19","nodeType":"YulLiteral","src":"1340:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1246:3:19","nodeType":"YulIdentifier","src":"1246:3:19"},"nativeSrc":"1246:99:19","nodeType":"YulFunctionCall","src":"1246:99:19"}],"functionName":{"name":"allocate_memory","nativeSrc":"1230:15:19","nodeType":"YulIdentifier","src":"1230:15:19"},"nativeSrc":"1230:116:19","nodeType":"YulFunctionCall","src":"1230:116:19"},"variableNames":[{"name":"array","nativeSrc":"1221:5:19","nodeType":"YulIdentifier","src":"1221:5:19"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"1362:5:19","nodeType":"YulIdentifier","src":"1362:5:19"},{"name":"length","nativeSrc":"1369:6:19","nodeType":"YulIdentifier","src":"1369:6:19"}],"functionName":{"name":"mstore","nativeSrc":"1355:6:19","nodeType":"YulIdentifier","src":"1355:6:19"},"nativeSrc":"1355:21:19","nodeType":"YulFunctionCall","src":"1355:21:19"},"nativeSrc":"1355:21:19","nodeType":"YulExpressionStatement","src":"1355:21:19"},{"body":{"nativeSrc":"1414:16:19","nodeType":"YulBlock","src":"1414:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1423:1:19","nodeType":"YulLiteral","src":"1423:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"1426:1:19","nodeType":"YulLiteral","src":"1426:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1416:6:19","nodeType":"YulIdentifier","src":"1416:6:19"},"nativeSrc":"1416:12:19","nodeType":"YulFunctionCall","src":"1416:12:19"},"nativeSrc":"1416:12:19","nodeType":"YulExpressionStatement","src":"1416:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1395:3:19","nodeType":"YulIdentifier","src":"1395:3:19"},{"name":"length","nativeSrc":"1400:6:19","nodeType":"YulIdentifier","src":"1400:6:19"}],"functionName":{"name":"add","nativeSrc":"1391:3:19","nodeType":"YulIdentifier","src":"1391:3:19"},"nativeSrc":"1391:16:19","nodeType":"YulFunctionCall","src":"1391:16:19"},{"name":"end","nativeSrc":"1409:3:19","nodeType":"YulIdentifier","src":"1409:3:19"}],"functionName":{"name":"gt","nativeSrc":"1388:2:19","nodeType":"YulIdentifier","src":"1388:2:19"},"nativeSrc":"1388:25:19","nodeType":"YulFunctionCall","src":"1388:25:19"},"nativeSrc":"1385:45:19","nodeType":"YulIf","src":"1385:45:19"},{"expression":{"arguments":[{"arguments":[{"name":"array","nativeSrc":"1456:5:19","nodeType":"YulIdentifier","src":"1456:5:19"},{"kind":"number","nativeSrc":"1463:4:19","nodeType":"YulLiteral","src":"1463:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1452:3:19","nodeType":"YulIdentifier","src":"1452:3:19"},"nativeSrc":"1452:16:19","nodeType":"YulFunctionCall","src":"1452:16:19"},{"name":"src","nativeSrc":"1470:3:19","nodeType":"YulIdentifier","src":"1470:3:19"},{"name":"length","nativeSrc":"1475:6:19","nodeType":"YulIdentifier","src":"1475:6:19"}],"functionName":{"name":"calldatacopy","nativeSrc":"1439:12:19","nodeType":"YulIdentifier","src":"1439:12:19"},"nativeSrc":"1439:43:19","nodeType":"YulFunctionCall","src":"1439:43:19"},"nativeSrc":"1439:43:19","nodeType":"YulExpressionStatement","src":"1439:43:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nativeSrc":"1506:5:19","nodeType":"YulIdentifier","src":"1506:5:19"},{"name":"length","nativeSrc":"1513:6:19","nodeType":"YulIdentifier","src":"1513:6:19"}],"functionName":{"name":"add","nativeSrc":"1502:3:19","nodeType":"YulIdentifier","src":"1502:3:19"},"nativeSrc":"1502:18:19","nodeType":"YulFunctionCall","src":"1502:18:19"},{"kind":"number","nativeSrc":"1522:4:19","nodeType":"YulLiteral","src":"1522:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1498:3:19","nodeType":"YulIdentifier","src":"1498:3:19"},"nativeSrc":"1498:29:19","nodeType":"YulFunctionCall","src":"1498:29:19"},{"kind":"number","nativeSrc":"1529:1:19","nodeType":"YulLiteral","src":"1529:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1491:6:19","nodeType":"YulIdentifier","src":"1491:6:19"},"nativeSrc":"1491:40:19","nodeType":"YulFunctionCall","src":"1491:40:19"},"nativeSrc":"1491:40:19","nodeType":"YulExpressionStatement","src":"1491:40:19"}]},"name":"abi_decode_available_length_string","nativeSrc":"1071:466:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1115:3:19","nodeType":"YulTypedName","src":"1115:3:19","type":""},{"name":"length","nativeSrc":"1120:6:19","nodeType":"YulTypedName","src":"1120:6:19","type":""},{"name":"end","nativeSrc":"1128:3:19","nodeType":"YulTypedName","src":"1128:3:19","type":""}],"returnVariables":[{"name":"array","nativeSrc":"1136:5:19","nodeType":"YulTypedName","src":"1136:5:19","type":""}],"src":"1071:466:19"},{"body":{"nativeSrc":"1595:169:19","nodeType":"YulBlock","src":"1595:169:19","statements":[{"body":{"nativeSrc":"1644:16:19","nodeType":"YulBlock","src":"1644:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1653:1:19","nodeType":"YulLiteral","src":"1653:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"1656:1:19","nodeType":"YulLiteral","src":"1656:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1646:6:19","nodeType":"YulIdentifier","src":"1646:6:19"},"nativeSrc":"1646:12:19","nodeType":"YulFunctionCall","src":"1646:12:19"},"nativeSrc":"1646:12:19","nodeType":"YulExpressionStatement","src":"1646:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1623:6:19","nodeType":"YulIdentifier","src":"1623:6:19"},{"kind":"number","nativeSrc":"1631:4:19","nodeType":"YulLiteral","src":"1631:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1619:3:19","nodeType":"YulIdentifier","src":"1619:3:19"},"nativeSrc":"1619:17:19","nodeType":"YulFunctionCall","src":"1619:17:19"},{"name":"end","nativeSrc":"1638:3:19","nodeType":"YulIdentifier","src":"1638:3:19"}],"functionName":{"name":"slt","nativeSrc":"1615:3:19","nodeType":"YulIdentifier","src":"1615:3:19"},"nativeSrc":"1615:27:19","nodeType":"YulFunctionCall","src":"1615:27:19"}],"functionName":{"name":"iszero","nativeSrc":"1608:6:19","nodeType":"YulIdentifier","src":"1608:6:19"},"nativeSrc":"1608:35:19","nodeType":"YulFunctionCall","src":"1608:35:19"},"nativeSrc":"1605:55:19","nodeType":"YulIf","src":"1605:55:19"},{"nativeSrc":"1669:89:19","nodeType":"YulAssignment","src":"1669:89:19","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1717:6:19","nodeType":"YulIdentifier","src":"1717:6:19"},{"kind":"number","nativeSrc":"1725:4:19","nodeType":"YulLiteral","src":"1725:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1713:3:19","nodeType":"YulIdentifier","src":"1713:3:19"},"nativeSrc":"1713:17:19","nodeType":"YulFunctionCall","src":"1713:17:19"},{"arguments":[{"name":"offset","nativeSrc":"1745:6:19","nodeType":"YulIdentifier","src":"1745:6:19"}],"functionName":{"name":"calldataload","nativeSrc":"1732:12:19","nodeType":"YulIdentifier","src":"1732:12:19"},"nativeSrc":"1732:20:19","nodeType":"YulFunctionCall","src":"1732:20:19"},{"name":"end","nativeSrc":"1754:3:19","nodeType":"YulIdentifier","src":"1754:3:19"}],"functionName":{"name":"abi_decode_available_length_string","nativeSrc":"1678:34:19","nodeType":"YulIdentifier","src":"1678:34:19"},"nativeSrc":"1678:80:19","nodeType":"YulFunctionCall","src":"1678:80:19"},"variableNames":[{"name":"array","nativeSrc":"1669:5:19","nodeType":"YulIdentifier","src":"1669:5:19"}]}]},"name":"abi_decode_string","nativeSrc":"1542:222:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1569:6:19","nodeType":"YulTypedName","src":"1569:6:19","type":""},{"name":"end","nativeSrc":"1577:3:19","nodeType":"YulTypedName","src":"1577:3:19","type":""}],"returnVariables":[{"name":"array","nativeSrc":"1585:5:19","nodeType":"YulTypedName","src":"1585:5:19","type":""}],"src":"1542:222:19"},{"body":{"nativeSrc":"1883:344:19","nodeType":"YulBlock","src":"1883:344:19","statements":[{"body":{"nativeSrc":"1929:16:19","nodeType":"YulBlock","src":"1929:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1938:1:19","nodeType":"YulLiteral","src":"1938:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"1941:1:19","nodeType":"YulLiteral","src":"1941:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1931:6:19","nodeType":"YulIdentifier","src":"1931:6:19"},"nativeSrc":"1931:12:19","nodeType":"YulFunctionCall","src":"1931:12:19"},"nativeSrc":"1931:12:19","nodeType":"YulExpressionStatement","src":"1931:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1904:7:19","nodeType":"YulIdentifier","src":"1904:7:19"},{"name":"headStart","nativeSrc":"1913:9:19","nodeType":"YulIdentifier","src":"1913:9:19"}],"functionName":{"name":"sub","nativeSrc":"1900:3:19","nodeType":"YulIdentifier","src":"1900:3:19"},"nativeSrc":"1900:23:19","nodeType":"YulFunctionCall","src":"1900:23:19"},{"kind":"number","nativeSrc":"1925:2:19","nodeType":"YulLiteral","src":"1925:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"1896:3:19","nodeType":"YulIdentifier","src":"1896:3:19"},"nativeSrc":"1896:32:19","nodeType":"YulFunctionCall","src":"1896:32:19"},"nativeSrc":"1893:52:19","nodeType":"YulIf","src":"1893:52:19"},{"nativeSrc":"1954:33:19","nodeType":"YulAssignment","src":"1954:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"1977:9:19","nodeType":"YulIdentifier","src":"1977:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"1964:12:19","nodeType":"YulIdentifier","src":"1964:12:19"},"nativeSrc":"1964:23:19","nodeType":"YulFunctionCall","src":"1964:23:19"},"variableNames":[{"name":"value0","nativeSrc":"1954:6:19","nodeType":"YulIdentifier","src":"1954:6:19"}]},{"nativeSrc":"1996:42:19","nodeType":"YulAssignment","src":"1996:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2023:9:19","nodeType":"YulIdentifier","src":"2023:9:19"},{"kind":"number","nativeSrc":"2034:2:19","nodeType":"YulLiteral","src":"2034:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2019:3:19","nodeType":"YulIdentifier","src":"2019:3:19"},"nativeSrc":"2019:18:19","nodeType":"YulFunctionCall","src":"2019:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"2006:12:19","nodeType":"YulIdentifier","src":"2006:12:19"},"nativeSrc":"2006:32:19","nodeType":"YulFunctionCall","src":"2006:32:19"},"variableNames":[{"name":"value1","nativeSrc":"1996:6:19","nodeType":"YulIdentifier","src":"1996:6:19"}]},{"nativeSrc":"2047:46:19","nodeType":"YulVariableDeclaration","src":"2047:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2078:9:19","nodeType":"YulIdentifier","src":"2078:9:19"},{"kind":"number","nativeSrc":"2089:2:19","nodeType":"YulLiteral","src":"2089:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2074:3:19","nodeType":"YulIdentifier","src":"2074:3:19"},"nativeSrc":"2074:18:19","nodeType":"YulFunctionCall","src":"2074:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"2061:12:19","nodeType":"YulIdentifier","src":"2061:12:19"},"nativeSrc":"2061:32:19","nodeType":"YulFunctionCall","src":"2061:32:19"},"variables":[{"name":"offset","nativeSrc":"2051:6:19","nodeType":"YulTypedName","src":"2051:6:19","type":""}]},{"body":{"nativeSrc":"2136:16:19","nodeType":"YulBlock","src":"2136:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2145:1:19","nodeType":"YulLiteral","src":"2145:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"2148:1:19","nodeType":"YulLiteral","src":"2148:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2138:6:19","nodeType":"YulIdentifier","src":"2138:6:19"},"nativeSrc":"2138:12:19","nodeType":"YulFunctionCall","src":"2138:12:19"},"nativeSrc":"2138:12:19","nodeType":"YulExpressionStatement","src":"2138:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2108:6:19","nodeType":"YulIdentifier","src":"2108:6:19"},{"kind":"number","nativeSrc":"2116:18:19","nodeType":"YulLiteral","src":"2116:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2105:2:19","nodeType":"YulIdentifier","src":"2105:2:19"},"nativeSrc":"2105:30:19","nodeType":"YulFunctionCall","src":"2105:30:19"},"nativeSrc":"2102:50:19","nodeType":"YulIf","src":"2102:50:19"},{"nativeSrc":"2161:60:19","nodeType":"YulAssignment","src":"2161:60:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2193:9:19","nodeType":"YulIdentifier","src":"2193:9:19"},{"name":"offset","nativeSrc":"2204:6:19","nodeType":"YulIdentifier","src":"2204:6:19"}],"functionName":{"name":"add","nativeSrc":"2189:3:19","nodeType":"YulIdentifier","src":"2189:3:19"},"nativeSrc":"2189:22:19","nodeType":"YulFunctionCall","src":"2189:22:19"},{"name":"dataEnd","nativeSrc":"2213:7:19","nodeType":"YulIdentifier","src":"2213:7:19"}],"functionName":{"name":"abi_decode_string","nativeSrc":"2171:17:19","nodeType":"YulIdentifier","src":"2171:17:19"},"nativeSrc":"2171:50:19","nodeType":"YulFunctionCall","src":"2171:50:19"},"variableNames":[{"name":"value2","nativeSrc":"2161:6:19","nodeType":"YulIdentifier","src":"2161:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_string_memory_ptr","nativeSrc":"1769:458:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1833:9:19","nodeType":"YulTypedName","src":"1833:9:19","type":""},{"name":"dataEnd","nativeSrc":"1844:7:19","nodeType":"YulTypedName","src":"1844:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1856:6:19","nodeType":"YulTypedName","src":"1856:6:19","type":""},{"name":"value1","nativeSrc":"1864:6:19","nodeType":"YulTypedName","src":"1864:6:19","type":""},{"name":"value2","nativeSrc":"1872:6:19","nodeType":"YulTypedName","src":"1872:6:19","type":""}],"src":"1769:458:19"},{"body":{"nativeSrc":"2333:76:19","nodeType":"YulBlock","src":"2333:76:19","statements":[{"nativeSrc":"2343:26:19","nodeType":"YulAssignment","src":"2343:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"2355:9:19","nodeType":"YulIdentifier","src":"2355:9:19"},{"kind":"number","nativeSrc":"2366:2:19","nodeType":"YulLiteral","src":"2366:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2351:3:19","nodeType":"YulIdentifier","src":"2351:3:19"},"nativeSrc":"2351:18:19","nodeType":"YulFunctionCall","src":"2351:18:19"},"variableNames":[{"name":"tail","nativeSrc":"2343:4:19","nodeType":"YulIdentifier","src":"2343:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2385:9:19","nodeType":"YulIdentifier","src":"2385:9:19"},{"name":"value0","nativeSrc":"2396:6:19","nodeType":"YulIdentifier","src":"2396:6:19"}],"functionName":{"name":"mstore","nativeSrc":"2378:6:19","nodeType":"YulIdentifier","src":"2378:6:19"},"nativeSrc":"2378:25:19","nodeType":"YulFunctionCall","src":"2378:25:19"},"nativeSrc":"2378:25:19","nodeType":"YulExpressionStatement","src":"2378:25:19"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"2232:177:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2302:9:19","nodeType":"YulTypedName","src":"2302:9:19","type":""},{"name":"value0","nativeSrc":"2313:6:19","nodeType":"YulTypedName","src":"2313:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2324:4:19","nodeType":"YulTypedName","src":"2324:4:19","type":""}],"src":"2232:177:19"},{"body":{"nativeSrc":"2484:110:19","nodeType":"YulBlock","src":"2484:110:19","statements":[{"body":{"nativeSrc":"2530:16:19","nodeType":"YulBlock","src":"2530:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2539:1:19","nodeType":"YulLiteral","src":"2539:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"2542:1:19","nodeType":"YulLiteral","src":"2542:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2532:6:19","nodeType":"YulIdentifier","src":"2532:6:19"},"nativeSrc":"2532:12:19","nodeType":"YulFunctionCall","src":"2532:12:19"},"nativeSrc":"2532:12:19","nodeType":"YulExpressionStatement","src":"2532:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2505:7:19","nodeType":"YulIdentifier","src":"2505:7:19"},{"name":"headStart","nativeSrc":"2514:9:19","nodeType":"YulIdentifier","src":"2514:9:19"}],"functionName":{"name":"sub","nativeSrc":"2501:3:19","nodeType":"YulIdentifier","src":"2501:3:19"},"nativeSrc":"2501:23:19","nodeType":"YulFunctionCall","src":"2501:23:19"},{"kind":"number","nativeSrc":"2526:2:19","nodeType":"YulLiteral","src":"2526:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2497:3:19","nodeType":"YulIdentifier","src":"2497:3:19"},"nativeSrc":"2497:32:19","nodeType":"YulFunctionCall","src":"2497:32:19"},"nativeSrc":"2494:52:19","nodeType":"YulIf","src":"2494:52:19"},{"nativeSrc":"2555:33:19","nodeType":"YulAssignment","src":"2555:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"2578:9:19","nodeType":"YulIdentifier","src":"2578:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"2565:12:19","nodeType":"YulIdentifier","src":"2565:12:19"},"nativeSrc":"2565:23:19","nodeType":"YulFunctionCall","src":"2565:23:19"},"variableNames":[{"name":"value0","nativeSrc":"2555:6:19","nodeType":"YulIdentifier","src":"2555:6:19"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2414:180:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2450:9:19","nodeType":"YulTypedName","src":"2450:9:19","type":""},{"name":"dataEnd","nativeSrc":"2461:7:19","nodeType":"YulTypedName","src":"2461:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2473:6:19","nodeType":"YulTypedName","src":"2473:6:19","type":""}],"src":"2414:180:19"},{"body":{"nativeSrc":"2737:316:19","nodeType":"YulBlock","src":"2737:316:19","statements":[{"body":{"nativeSrc":"2784:16:19","nodeType":"YulBlock","src":"2784:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2793:1:19","nodeType":"YulLiteral","src":"2793:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"2796:1:19","nodeType":"YulLiteral","src":"2796:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2786:6:19","nodeType":"YulIdentifier","src":"2786:6:19"},"nativeSrc":"2786:12:19","nodeType":"YulFunctionCall","src":"2786:12:19"},"nativeSrc":"2786:12:19","nodeType":"YulExpressionStatement","src":"2786:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2758:7:19","nodeType":"YulIdentifier","src":"2758:7:19"},{"name":"headStart","nativeSrc":"2767:9:19","nodeType":"YulIdentifier","src":"2767:9:19"}],"functionName":{"name":"sub","nativeSrc":"2754:3:19","nodeType":"YulIdentifier","src":"2754:3:19"},"nativeSrc":"2754:23:19","nodeType":"YulFunctionCall","src":"2754:23:19"},{"kind":"number","nativeSrc":"2779:3:19","nodeType":"YulLiteral","src":"2779:3:19","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"2750:3:19","nodeType":"YulIdentifier","src":"2750:3:19"},"nativeSrc":"2750:33:19","nodeType":"YulFunctionCall","src":"2750:33:19"},"nativeSrc":"2747:53:19","nodeType":"YulIf","src":"2747:53:19"},{"nativeSrc":"2809:33:19","nodeType":"YulAssignment","src":"2809:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"2832:9:19","nodeType":"YulIdentifier","src":"2832:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"2819:12:19","nodeType":"YulIdentifier","src":"2819:12:19"},"nativeSrc":"2819:23:19","nodeType":"YulFunctionCall","src":"2819:23:19"},"variableNames":[{"name":"value0","nativeSrc":"2809:6:19","nodeType":"YulIdentifier","src":"2809:6:19"}]},{"nativeSrc":"2851:42:19","nodeType":"YulAssignment","src":"2851:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2878:9:19","nodeType":"YulIdentifier","src":"2878:9:19"},{"kind":"number","nativeSrc":"2889:2:19","nodeType":"YulLiteral","src":"2889:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2874:3:19","nodeType":"YulIdentifier","src":"2874:3:19"},"nativeSrc":"2874:18:19","nodeType":"YulFunctionCall","src":"2874:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"2861:12:19","nodeType":"YulIdentifier","src":"2861:12:19"},"nativeSrc":"2861:32:19","nodeType":"YulFunctionCall","src":"2861:32:19"},"variableNames":[{"name":"value1","nativeSrc":"2851:6:19","nodeType":"YulIdentifier","src":"2851:6:19"}]},{"nativeSrc":"2902:42:19","nodeType":"YulAssignment","src":"2902:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2929:9:19","nodeType":"YulIdentifier","src":"2929:9:19"},{"kind":"number","nativeSrc":"2940:2:19","nodeType":"YulLiteral","src":"2940:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2925:3:19","nodeType":"YulIdentifier","src":"2925:3:19"},"nativeSrc":"2925:18:19","nodeType":"YulFunctionCall","src":"2925:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"2912:12:19","nodeType":"YulIdentifier","src":"2912:12:19"},"nativeSrc":"2912:32:19","nodeType":"YulFunctionCall","src":"2912:32:19"},"variableNames":[{"name":"value2","nativeSrc":"2902:6:19","nodeType":"YulIdentifier","src":"2902:6:19"}]},{"nativeSrc":"2953:42:19","nodeType":"YulAssignment","src":"2953:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2980:9:19","nodeType":"YulIdentifier","src":"2980:9:19"},{"kind":"number","nativeSrc":"2991:2:19","nodeType":"YulLiteral","src":"2991:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2976:3:19","nodeType":"YulIdentifier","src":"2976:3:19"},"nativeSrc":"2976:18:19","nodeType":"YulFunctionCall","src":"2976:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"2963:12:19","nodeType":"YulIdentifier","src":"2963:12:19"},"nativeSrc":"2963:32:19","nodeType":"YulFunctionCall","src":"2963:32:19"},"variableNames":[{"name":"value3","nativeSrc":"2953:6:19","nodeType":"YulIdentifier","src":"2953:6:19"}]},{"nativeSrc":"3004:43:19","nodeType":"YulAssignment","src":"3004:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3031:9:19","nodeType":"YulIdentifier","src":"3031:9:19"},{"kind":"number","nativeSrc":"3042:3:19","nodeType":"YulLiteral","src":"3042:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3027:3:19","nodeType":"YulIdentifier","src":"3027:3:19"},"nativeSrc":"3027:19:19","nodeType":"YulFunctionCall","src":"3027:19:19"}],"functionName":{"name":"calldataload","nativeSrc":"3014:12:19","nodeType":"YulIdentifier","src":"3014:12:19"},"nativeSrc":"3014:33:19","nodeType":"YulFunctionCall","src":"3014:33:19"},"variableNames":[{"name":"value4","nativeSrc":"3004:6:19","nodeType":"YulIdentifier","src":"3004:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32","nativeSrc":"2599:454:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2671:9:19","nodeType":"YulTypedName","src":"2671:9:19","type":""},{"name":"dataEnd","nativeSrc":"2682:7:19","nodeType":"YulTypedName","src":"2682:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2694:6:19","nodeType":"YulTypedName","src":"2694:6:19","type":""},{"name":"value1","nativeSrc":"2702:6:19","nodeType":"YulTypedName","src":"2702:6:19","type":""},{"name":"value2","nativeSrc":"2710:6:19","nodeType":"YulTypedName","src":"2710:6:19","type":""},{"name":"value3","nativeSrc":"2718:6:19","nodeType":"YulTypedName","src":"2718:6:19","type":""},{"name":"value4","nativeSrc":"2726:6:19","nodeType":"YulTypedName","src":"2726:6:19","type":""}],"src":"2599:454:19"},{"body":{"nativeSrc":"3128:110:19","nodeType":"YulBlock","src":"3128:110:19","statements":[{"body":{"nativeSrc":"3174:16:19","nodeType":"YulBlock","src":"3174:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3183:1:19","nodeType":"YulLiteral","src":"3183:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"3186:1:19","nodeType":"YulLiteral","src":"3186:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3176:6:19","nodeType":"YulIdentifier","src":"3176:6:19"},"nativeSrc":"3176:12:19","nodeType":"YulFunctionCall","src":"3176:12:19"},"nativeSrc":"3176:12:19","nodeType":"YulExpressionStatement","src":"3176:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3149:7:19","nodeType":"YulIdentifier","src":"3149:7:19"},{"name":"headStart","nativeSrc":"3158:9:19","nodeType":"YulIdentifier","src":"3158:9:19"}],"functionName":{"name":"sub","nativeSrc":"3145:3:19","nodeType":"YulIdentifier","src":"3145:3:19"},"nativeSrc":"3145:23:19","nodeType":"YulFunctionCall","src":"3145:23:19"},{"kind":"number","nativeSrc":"3170:2:19","nodeType":"YulLiteral","src":"3170:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3141:3:19","nodeType":"YulIdentifier","src":"3141:3:19"},"nativeSrc":"3141:32:19","nodeType":"YulFunctionCall","src":"3141:32:19"},"nativeSrc":"3138:52:19","nodeType":"YulIf","src":"3138:52:19"},{"nativeSrc":"3199:33:19","nodeType":"YulAssignment","src":"3199:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"3222:9:19","nodeType":"YulIdentifier","src":"3222:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"3209:12:19","nodeType":"YulIdentifier","src":"3209:12:19"},"nativeSrc":"3209:23:19","nodeType":"YulFunctionCall","src":"3209:23:19"},"variableNames":[{"name":"value0","nativeSrc":"3199:6:19","nodeType":"YulIdentifier","src":"3199:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"3058:180:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3094:9:19","nodeType":"YulTypedName","src":"3094:9:19","type":""},{"name":"dataEnd","nativeSrc":"3105:7:19","nodeType":"YulTypedName","src":"3105:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3117:6:19","nodeType":"YulTypedName","src":"3117:6:19","type":""}],"src":"3058:180:19"},{"body":{"nativeSrc":"3344:76:19","nodeType":"YulBlock","src":"3344:76:19","statements":[{"nativeSrc":"3354:26:19","nodeType":"YulAssignment","src":"3354:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"3366:9:19","nodeType":"YulIdentifier","src":"3366:9:19"},{"kind":"number","nativeSrc":"3377:2:19","nodeType":"YulLiteral","src":"3377:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3362:3:19","nodeType":"YulIdentifier","src":"3362:3:19"},"nativeSrc":"3362:18:19","nodeType":"YulFunctionCall","src":"3362:18:19"},"variableNames":[{"name":"tail","nativeSrc":"3354:4:19","nodeType":"YulIdentifier","src":"3354:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3396:9:19","nodeType":"YulIdentifier","src":"3396:9:19"},{"name":"value0","nativeSrc":"3407:6:19","nodeType":"YulIdentifier","src":"3407:6:19"}],"functionName":{"name":"mstore","nativeSrc":"3389:6:19","nodeType":"YulIdentifier","src":"3389:6:19"},"nativeSrc":"3389:25:19","nodeType":"YulFunctionCall","src":"3389:25:19"},"nativeSrc":"3389:25:19","nodeType":"YulExpressionStatement","src":"3389:25:19"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3243:177:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3313:9:19","nodeType":"YulTypedName","src":"3313:9:19","type":""},{"name":"value0","nativeSrc":"3324:6:19","nodeType":"YulTypedName","src":"3324:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3335:4:19","nodeType":"YulTypedName","src":"3335:4:19","type":""}],"src":"3243:177:19"},{"body":{"nativeSrc":"3543:125:19","nodeType":"YulBlock","src":"3543:125:19","statements":[{"nativeSrc":"3553:26:19","nodeType":"YulAssignment","src":"3553:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"3565:9:19","nodeType":"YulIdentifier","src":"3565:9:19"},{"kind":"number","nativeSrc":"3576:2:19","nodeType":"YulLiteral","src":"3576:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3561:3:19","nodeType":"YulIdentifier","src":"3561:3:19"},"nativeSrc":"3561:18:19","nodeType":"YulFunctionCall","src":"3561:18:19"},"variableNames":[{"name":"tail","nativeSrc":"3553:4:19","nodeType":"YulIdentifier","src":"3553:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3595:9:19","nodeType":"YulIdentifier","src":"3595:9:19"},{"arguments":[{"name":"value0","nativeSrc":"3610:6:19","nodeType":"YulIdentifier","src":"3610:6:19"},{"kind":"number","nativeSrc":"3618:42:19","nodeType":"YulLiteral","src":"3618:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3606:3:19","nodeType":"YulIdentifier","src":"3606:3:19"},"nativeSrc":"3606:55:19","nodeType":"YulFunctionCall","src":"3606:55:19"}],"functionName":{"name":"mstore","nativeSrc":"3588:6:19","nodeType":"YulIdentifier","src":"3588:6:19"},"nativeSrc":"3588:74:19","nodeType":"YulFunctionCall","src":"3588:74:19"},"nativeSrc":"3588:74:19","nodeType":"YulExpressionStatement","src":"3588:74:19"}]},"name":"abi_encode_tuple_t_contract$_IRealmId_$3680__to_t_address__fromStack_reversed","nativeSrc":"3425:243:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3512:9:19","nodeType":"YulTypedName","src":"3512:9:19","type":""},{"name":"value0","nativeSrc":"3523:6:19","nodeType":"YulTypedName","src":"3523:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3534:4:19","nodeType":"YulTypedName","src":"3534:4:19","type":""}],"src":"3425:243:19"},{"body":{"nativeSrc":"3718:109:19","nodeType":"YulBlock","src":"3718:109:19","statements":[{"body":{"nativeSrc":"3805:16:19","nodeType":"YulBlock","src":"3805:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3814:1:19","nodeType":"YulLiteral","src":"3814:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"3817:1:19","nodeType":"YulLiteral","src":"3817:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3807:6:19","nodeType":"YulIdentifier","src":"3807:6:19"},"nativeSrc":"3807:12:19","nodeType":"YulFunctionCall","src":"3807:12:19"},"nativeSrc":"3807:12:19","nodeType":"YulExpressionStatement","src":"3807:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3741:5:19","nodeType":"YulIdentifier","src":"3741:5:19"},{"arguments":[{"name":"value","nativeSrc":"3752:5:19","nodeType":"YulIdentifier","src":"3752:5:19"},{"kind":"number","nativeSrc":"3759:42:19","nodeType":"YulLiteral","src":"3759:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3748:3:19","nodeType":"YulIdentifier","src":"3748:3:19"},"nativeSrc":"3748:54:19","nodeType":"YulFunctionCall","src":"3748:54:19"}],"functionName":{"name":"eq","nativeSrc":"3738:2:19","nodeType":"YulIdentifier","src":"3738:2:19"},"nativeSrc":"3738:65:19","nodeType":"YulFunctionCall","src":"3738:65:19"}],"functionName":{"name":"iszero","nativeSrc":"3731:6:19","nodeType":"YulIdentifier","src":"3731:6:19"},"nativeSrc":"3731:73:19","nodeType":"YulFunctionCall","src":"3731:73:19"},"nativeSrc":"3728:93:19","nodeType":"YulIf","src":"3728:93:19"}]},"name":"validator_revert_address","nativeSrc":"3673:154:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3707:5:19","nodeType":"YulTypedName","src":"3707:5:19","type":""}],"src":"3673:154:19"},{"body":{"nativeSrc":"3919:228:19","nodeType":"YulBlock","src":"3919:228:19","statements":[{"body":{"nativeSrc":"3965:16:19","nodeType":"YulBlock","src":"3965:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3974:1:19","nodeType":"YulLiteral","src":"3974:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"3977:1:19","nodeType":"YulLiteral","src":"3977:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3967:6:19","nodeType":"YulIdentifier","src":"3967:6:19"},"nativeSrc":"3967:12:19","nodeType":"YulFunctionCall","src":"3967:12:19"},"nativeSrc":"3967:12:19","nodeType":"YulExpressionStatement","src":"3967:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3940:7:19","nodeType":"YulIdentifier","src":"3940:7:19"},{"name":"headStart","nativeSrc":"3949:9:19","nodeType":"YulIdentifier","src":"3949:9:19"}],"functionName":{"name":"sub","nativeSrc":"3936:3:19","nodeType":"YulIdentifier","src":"3936:3:19"},"nativeSrc":"3936:23:19","nodeType":"YulFunctionCall","src":"3936:23:19"},{"kind":"number","nativeSrc":"3961:2:19","nodeType":"YulLiteral","src":"3961:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3932:3:19","nodeType":"YulIdentifier","src":"3932:3:19"},"nativeSrc":"3932:32:19","nodeType":"YulFunctionCall","src":"3932:32:19"},"nativeSrc":"3929:52:19","nodeType":"YulIf","src":"3929:52:19"},{"nativeSrc":"3990:33:19","nodeType":"YulAssignment","src":"3990:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"4013:9:19","nodeType":"YulIdentifier","src":"4013:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"4000:12:19","nodeType":"YulIdentifier","src":"4000:12:19"},"nativeSrc":"4000:23:19","nodeType":"YulFunctionCall","src":"4000:23:19"},"variableNames":[{"name":"value0","nativeSrc":"3990:6:19","nodeType":"YulIdentifier","src":"3990:6:19"}]},{"nativeSrc":"4032:45:19","nodeType":"YulVariableDeclaration","src":"4032:45:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4062:9:19","nodeType":"YulIdentifier","src":"4062:9:19"},{"kind":"number","nativeSrc":"4073:2:19","nodeType":"YulLiteral","src":"4073:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4058:3:19","nodeType":"YulIdentifier","src":"4058:3:19"},"nativeSrc":"4058:18:19","nodeType":"YulFunctionCall","src":"4058:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"4045:12:19","nodeType":"YulIdentifier","src":"4045:12:19"},"nativeSrc":"4045:32:19","nodeType":"YulFunctionCall","src":"4045:32:19"},"variables":[{"name":"value","nativeSrc":"4036:5:19","nodeType":"YulTypedName","src":"4036:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4111:5:19","nodeType":"YulIdentifier","src":"4111:5:19"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4086:24:19","nodeType":"YulIdentifier","src":"4086:24:19"},"nativeSrc":"4086:31:19","nodeType":"YulFunctionCall","src":"4086:31:19"},"nativeSrc":"4086:31:19","nodeType":"YulExpressionStatement","src":"4086:31:19"},{"nativeSrc":"4126:15:19","nodeType":"YulAssignment","src":"4126:15:19","value":{"name":"value","nativeSrc":"4136:5:19","nodeType":"YulIdentifier","src":"4136:5:19"},"variableNames":[{"name":"value1","nativeSrc":"4126:6:19","nodeType":"YulIdentifier","src":"4126:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"3832:315:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3877:9:19","nodeType":"YulTypedName","src":"3877:9:19","type":""},{"name":"dataEnd","nativeSrc":"3888:7:19","nodeType":"YulTypedName","src":"3888:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3900:6:19","nodeType":"YulTypedName","src":"3900:6:19","type":""},{"name":"value1","nativeSrc":"3908:6:19","nodeType":"YulTypedName","src":"3908:6:19","type":""}],"src":"3832:315:19"},{"body":{"nativeSrc":"4222:177:19","nodeType":"YulBlock","src":"4222:177:19","statements":[{"body":{"nativeSrc":"4268:16:19","nodeType":"YulBlock","src":"4268:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4277:1:19","nodeType":"YulLiteral","src":"4277:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"4280:1:19","nodeType":"YulLiteral","src":"4280:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4270:6:19","nodeType":"YulIdentifier","src":"4270:6:19"},"nativeSrc":"4270:12:19","nodeType":"YulFunctionCall","src":"4270:12:19"},"nativeSrc":"4270:12:19","nodeType":"YulExpressionStatement","src":"4270:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4243:7:19","nodeType":"YulIdentifier","src":"4243:7:19"},{"name":"headStart","nativeSrc":"4252:9:19","nodeType":"YulIdentifier","src":"4252:9:19"}],"functionName":{"name":"sub","nativeSrc":"4239:3:19","nodeType":"YulIdentifier","src":"4239:3:19"},"nativeSrc":"4239:23:19","nodeType":"YulFunctionCall","src":"4239:23:19"},{"kind":"number","nativeSrc":"4264:2:19","nodeType":"YulLiteral","src":"4264:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4235:3:19","nodeType":"YulIdentifier","src":"4235:3:19"},"nativeSrc":"4235:32:19","nodeType":"YulFunctionCall","src":"4235:32:19"},"nativeSrc":"4232:52:19","nodeType":"YulIf","src":"4232:52:19"},{"nativeSrc":"4293:36:19","nodeType":"YulVariableDeclaration","src":"4293:36:19","value":{"arguments":[{"name":"headStart","nativeSrc":"4319:9:19","nodeType":"YulIdentifier","src":"4319:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"4306:12:19","nodeType":"YulIdentifier","src":"4306:12:19"},"nativeSrc":"4306:23:19","nodeType":"YulFunctionCall","src":"4306:23:19"},"variables":[{"name":"value","nativeSrc":"4297:5:19","nodeType":"YulTypedName","src":"4297:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4363:5:19","nodeType":"YulIdentifier","src":"4363:5:19"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4338:24:19","nodeType":"YulIdentifier","src":"4338:24:19"},"nativeSrc":"4338:31:19","nodeType":"YulFunctionCall","src":"4338:31:19"},"nativeSrc":"4338:31:19","nodeType":"YulExpressionStatement","src":"4338:31:19"},{"nativeSrc":"4378:15:19","nodeType":"YulAssignment","src":"4378:15:19","value":{"name":"value","nativeSrc":"4388:5:19","nodeType":"YulIdentifier","src":"4388:5:19"},"variableNames":[{"name":"value0","nativeSrc":"4378:6:19","nodeType":"YulIdentifier","src":"4378:6:19"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"4152:247:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4188:9:19","nodeType":"YulTypedName","src":"4188:9:19","type":""},{"name":"dataEnd","nativeSrc":"4199:7:19","nodeType":"YulTypedName","src":"4199:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4211:6:19","nodeType":"YulTypedName","src":"4211:6:19","type":""}],"src":"4152:247:19"},{"body":{"nativeSrc":"4499:851:19","nodeType":"YulBlock","src":"4499:851:19","statements":[{"nativeSrc":"4509:12:19","nodeType":"YulVariableDeclaration","src":"4509:12:19","value":{"kind":"number","nativeSrc":"4519:2:19","nodeType":"YulLiteral","src":"4519:2:19","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"4513:2:19","nodeType":"YulTypedName","src":"4513:2:19","type":""}]},{"body":{"nativeSrc":"4566:16:19","nodeType":"YulBlock","src":"4566:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4575:1:19","nodeType":"YulLiteral","src":"4575:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"4578:1:19","nodeType":"YulLiteral","src":"4578:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4568:6:19","nodeType":"YulIdentifier","src":"4568:6:19"},"nativeSrc":"4568:12:19","nodeType":"YulFunctionCall","src":"4568:12:19"},"nativeSrc":"4568:12:19","nodeType":"YulExpressionStatement","src":"4568:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4541:7:19","nodeType":"YulIdentifier","src":"4541:7:19"},{"name":"headStart","nativeSrc":"4550:9:19","nodeType":"YulIdentifier","src":"4550:9:19"}],"functionName":{"name":"sub","nativeSrc":"4537:3:19","nodeType":"YulIdentifier","src":"4537:3:19"},"nativeSrc":"4537:23:19","nodeType":"YulFunctionCall","src":"4537:23:19"},{"name":"_1","nativeSrc":"4562:2:19","nodeType":"YulIdentifier","src":"4562:2:19"}],"functionName":{"name":"slt","nativeSrc":"4533:3:19","nodeType":"YulIdentifier","src":"4533:3:19"},"nativeSrc":"4533:32:19","nodeType":"YulFunctionCall","src":"4533:32:19"},"nativeSrc":"4530:52:19","nodeType":"YulIf","src":"4530:52:19"},{"nativeSrc":"4591:37:19","nodeType":"YulVariableDeclaration","src":"4591:37:19","value":{"arguments":[{"name":"headStart","nativeSrc":"4618:9:19","nodeType":"YulIdentifier","src":"4618:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"4605:12:19","nodeType":"YulIdentifier","src":"4605:12:19"},"nativeSrc":"4605:23:19","nodeType":"YulFunctionCall","src":"4605:23:19"},"variables":[{"name":"offset","nativeSrc":"4595:6:19","nodeType":"YulTypedName","src":"4595:6:19","type":""}]},{"nativeSrc":"4637:28:19","nodeType":"YulVariableDeclaration","src":"4637:28:19","value":{"kind":"number","nativeSrc":"4647:18:19","nodeType":"YulLiteral","src":"4647:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"4641:2:19","nodeType":"YulTypedName","src":"4641:2:19","type":""}]},{"body":{"nativeSrc":"4692:16:19","nodeType":"YulBlock","src":"4692:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4701:1:19","nodeType":"YulLiteral","src":"4701:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"4704:1:19","nodeType":"YulLiteral","src":"4704:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4694:6:19","nodeType":"YulIdentifier","src":"4694:6:19"},"nativeSrc":"4694:12:19","nodeType":"YulFunctionCall","src":"4694:12:19"},"nativeSrc":"4694:12:19","nodeType":"YulExpressionStatement","src":"4694:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4680:6:19","nodeType":"YulIdentifier","src":"4680:6:19"},{"name":"_2","nativeSrc":"4688:2:19","nodeType":"YulIdentifier","src":"4688:2:19"}],"functionName":{"name":"gt","nativeSrc":"4677:2:19","nodeType":"YulIdentifier","src":"4677:2:19"},"nativeSrc":"4677:14:19","nodeType":"YulFunctionCall","src":"4677:14:19"},"nativeSrc":"4674:34:19","nodeType":"YulIf","src":"4674:34:19"},{"nativeSrc":"4717:32:19","nodeType":"YulVariableDeclaration","src":"4717:32:19","value":{"arguments":[{"name":"headStart","nativeSrc":"4731:9:19","nodeType":"YulIdentifier","src":"4731:9:19"},{"name":"offset","nativeSrc":"4742:6:19","nodeType":"YulIdentifier","src":"4742:6:19"}],"functionName":{"name":"add","nativeSrc":"4727:3:19","nodeType":"YulIdentifier","src":"4727:3:19"},"nativeSrc":"4727:22:19","nodeType":"YulFunctionCall","src":"4727:22:19"},"variables":[{"name":"_3","nativeSrc":"4721:2:19","nodeType":"YulTypedName","src":"4721:2:19","type":""}]},{"body":{"nativeSrc":"4797:16:19","nodeType":"YulBlock","src":"4797:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4806:1:19","nodeType":"YulLiteral","src":"4806:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"4809:1:19","nodeType":"YulLiteral","src":"4809:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4799:6:19","nodeType":"YulIdentifier","src":"4799:6:19"},"nativeSrc":"4799:12:19","nodeType":"YulFunctionCall","src":"4799:12:19"},"nativeSrc":"4799:12:19","nodeType":"YulExpressionStatement","src":"4799:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"4776:2:19","nodeType":"YulIdentifier","src":"4776:2:19"},{"kind":"number","nativeSrc":"4780:4:19","nodeType":"YulLiteral","src":"4780:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4772:3:19","nodeType":"YulIdentifier","src":"4772:3:19"},"nativeSrc":"4772:13:19","nodeType":"YulFunctionCall","src":"4772:13:19"},{"name":"dataEnd","nativeSrc":"4787:7:19","nodeType":"YulIdentifier","src":"4787:7:19"}],"functionName":{"name":"slt","nativeSrc":"4768:3:19","nodeType":"YulIdentifier","src":"4768:3:19"},"nativeSrc":"4768:27:19","nodeType":"YulFunctionCall","src":"4768:27:19"}],"functionName":{"name":"iszero","nativeSrc":"4761:6:19","nodeType":"YulIdentifier","src":"4761:6:19"},"nativeSrc":"4761:35:19","nodeType":"YulFunctionCall","src":"4761:35:19"},"nativeSrc":"4758:55:19","nodeType":"YulIf","src":"4758:55:19"},{"nativeSrc":"4822:26:19","nodeType":"YulVariableDeclaration","src":"4822:26:19","value":{"arguments":[{"name":"_3","nativeSrc":"4845:2:19","nodeType":"YulIdentifier","src":"4845:2:19"}],"functionName":{"name":"calldataload","nativeSrc":"4832:12:19","nodeType":"YulIdentifier","src":"4832:12:19"},"nativeSrc":"4832:16:19","nodeType":"YulFunctionCall","src":"4832:16:19"},"variables":[{"name":"_4","nativeSrc":"4826:2:19","nodeType":"YulTypedName","src":"4826:2:19","type":""}]},{"body":{"nativeSrc":"4871:22:19","nodeType":"YulBlock","src":"4871:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4873:16:19","nodeType":"YulIdentifier","src":"4873:16:19"},"nativeSrc":"4873:18:19","nodeType":"YulFunctionCall","src":"4873:18:19"},"nativeSrc":"4873:18:19","nodeType":"YulExpressionStatement","src":"4873:18:19"}]},"condition":{"arguments":[{"name":"_4","nativeSrc":"4863:2:19","nodeType":"YulIdentifier","src":"4863:2:19"},{"name":"_2","nativeSrc":"4867:2:19","nodeType":"YulIdentifier","src":"4867:2:19"}],"functionName":{"name":"gt","nativeSrc":"4860:2:19","nodeType":"YulIdentifier","src":"4860:2:19"},"nativeSrc":"4860:10:19","nodeType":"YulFunctionCall","src":"4860:10:19"},"nativeSrc":"4857:36:19","nodeType":"YulIf","src":"4857:36:19"},{"nativeSrc":"4902:20:19","nodeType":"YulVariableDeclaration","src":"4902:20:19","value":{"arguments":[{"kind":"number","nativeSrc":"4916:1:19","nodeType":"YulLiteral","src":"4916:1:19","type":"","value":"5"},{"name":"_4","nativeSrc":"4919:2:19","nodeType":"YulIdentifier","src":"4919:2:19"}],"functionName":{"name":"shl","nativeSrc":"4912:3:19","nodeType":"YulIdentifier","src":"4912:3:19"},"nativeSrc":"4912:10:19","nodeType":"YulFunctionCall","src":"4912:10:19"},"variables":[{"name":"_5","nativeSrc":"4906:2:19","nodeType":"YulTypedName","src":"4906:2:19","type":""}]},{"nativeSrc":"4931:39:19","nodeType":"YulVariableDeclaration","src":"4931:39:19","value":{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"4962:2:19","nodeType":"YulIdentifier","src":"4962:2:19"},{"name":"_1","nativeSrc":"4966:2:19","nodeType":"YulIdentifier","src":"4966:2:19"}],"functionName":{"name":"add","nativeSrc":"4958:3:19","nodeType":"YulIdentifier","src":"4958:3:19"},"nativeSrc":"4958:11:19","nodeType":"YulFunctionCall","src":"4958:11:19"}],"functionName":{"name":"allocate_memory","nativeSrc":"4942:15:19","nodeType":"YulIdentifier","src":"4942:15:19"},"nativeSrc":"4942:28:19","nodeType":"YulFunctionCall","src":"4942:28:19"},"variables":[{"name":"dst","nativeSrc":"4935:3:19","nodeType":"YulTypedName","src":"4935:3:19","type":""}]},{"nativeSrc":"4979:16:19","nodeType":"YulVariableDeclaration","src":"4979:16:19","value":{"name":"dst","nativeSrc":"4992:3:19","nodeType":"YulIdentifier","src":"4992:3:19"},"variables":[{"name":"dst_1","nativeSrc":"4983:5:19","nodeType":"YulTypedName","src":"4983:5:19","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"5011:3:19","nodeType":"YulIdentifier","src":"5011:3:19"},{"name":"_4","nativeSrc":"5016:2:19","nodeType":"YulIdentifier","src":"5016:2:19"}],"functionName":{"name":"mstore","nativeSrc":"5004:6:19","nodeType":"YulIdentifier","src":"5004:6:19"},"nativeSrc":"5004:15:19","nodeType":"YulFunctionCall","src":"5004:15:19"},"nativeSrc":"5004:15:19","nodeType":"YulExpressionStatement","src":"5004:15:19"},{"nativeSrc":"5028:19:19","nodeType":"YulAssignment","src":"5028:19:19","value":{"arguments":[{"name":"dst","nativeSrc":"5039:3:19","nodeType":"YulIdentifier","src":"5039:3:19"},{"name":"_1","nativeSrc":"5044:2:19","nodeType":"YulIdentifier","src":"5044:2:19"}],"functionName":{"name":"add","nativeSrc":"5035:3:19","nodeType":"YulIdentifier","src":"5035:3:19"},"nativeSrc":"5035:12:19","nodeType":"YulFunctionCall","src":"5035:12:19"},"variableNames":[{"name":"dst","nativeSrc":"5028:3:19","nodeType":"YulIdentifier","src":"5028:3:19"}]},{"nativeSrc":"5056:34:19","nodeType":"YulVariableDeclaration","src":"5056:34:19","value":{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"5078:2:19","nodeType":"YulIdentifier","src":"5078:2:19"},{"name":"_5","nativeSrc":"5082:2:19","nodeType":"YulIdentifier","src":"5082:2:19"}],"functionName":{"name":"add","nativeSrc":"5074:3:19","nodeType":"YulIdentifier","src":"5074:3:19"},"nativeSrc":"5074:11:19","nodeType":"YulFunctionCall","src":"5074:11:19"},{"name":"_1","nativeSrc":"5087:2:19","nodeType":"YulIdentifier","src":"5087:2:19"}],"functionName":{"name":"add","nativeSrc":"5070:3:19","nodeType":"YulIdentifier","src":"5070:3:19"},"nativeSrc":"5070:20:19","nodeType":"YulFunctionCall","src":"5070:20:19"},"variables":[{"name":"srcEnd","nativeSrc":"5060:6:19","nodeType":"YulTypedName","src":"5060:6:19","type":""}]},{"body":{"nativeSrc":"5122:16:19","nodeType":"YulBlock","src":"5122:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5131:1:19","nodeType":"YulLiteral","src":"5131:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"5134:1:19","nodeType":"YulLiteral","src":"5134:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5124:6:19","nodeType":"YulIdentifier","src":"5124:6:19"},"nativeSrc":"5124:12:19","nodeType":"YulFunctionCall","src":"5124:12:19"},"nativeSrc":"5124:12:19","nodeType":"YulExpressionStatement","src":"5124:12:19"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"5105:6:19","nodeType":"YulIdentifier","src":"5105:6:19"},{"name":"dataEnd","nativeSrc":"5113:7:19","nodeType":"YulIdentifier","src":"5113:7:19"}],"functionName":{"name":"gt","nativeSrc":"5102:2:19","nodeType":"YulIdentifier","src":"5102:2:19"},"nativeSrc":"5102:19:19","nodeType":"YulFunctionCall","src":"5102:19:19"},"nativeSrc":"5099:39:19","nodeType":"YulIf","src":"5099:39:19"},{"nativeSrc":"5147:22:19","nodeType":"YulVariableDeclaration","src":"5147:22:19","value":{"arguments":[{"name":"_3","nativeSrc":"5162:2:19","nodeType":"YulIdentifier","src":"5162:2:19"},{"name":"_1","nativeSrc":"5166:2:19","nodeType":"YulIdentifier","src":"5166:2:19"}],"functionName":{"name":"add","nativeSrc":"5158:3:19","nodeType":"YulIdentifier","src":"5158:3:19"},"nativeSrc":"5158:11:19","nodeType":"YulFunctionCall","src":"5158:11:19"},"variables":[{"name":"src","nativeSrc":"5151:3:19","nodeType":"YulTypedName","src":"5151:3:19","type":""}]},{"body":{"nativeSrc":"5234:86:19","nodeType":"YulBlock","src":"5234:86:19","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"5255:3:19","nodeType":"YulIdentifier","src":"5255:3:19"},{"arguments":[{"name":"src","nativeSrc":"5273:3:19","nodeType":"YulIdentifier","src":"5273:3:19"}],"functionName":{"name":"calldataload","nativeSrc":"5260:12:19","nodeType":"YulIdentifier","src":"5260:12:19"},"nativeSrc":"5260:17:19","nodeType":"YulFunctionCall","src":"5260:17:19"}],"functionName":{"name":"mstore","nativeSrc":"5248:6:19","nodeType":"YulIdentifier","src":"5248:6:19"},"nativeSrc":"5248:30:19","nodeType":"YulFunctionCall","src":"5248:30:19"},"nativeSrc":"5248:30:19","nodeType":"YulExpressionStatement","src":"5248:30:19"},{"nativeSrc":"5291:19:19","nodeType":"YulAssignment","src":"5291:19:19","value":{"arguments":[{"name":"dst","nativeSrc":"5302:3:19","nodeType":"YulIdentifier","src":"5302:3:19"},{"name":"_1","nativeSrc":"5307:2:19","nodeType":"YulIdentifier","src":"5307:2:19"}],"functionName":{"name":"add","nativeSrc":"5298:3:19","nodeType":"YulIdentifier","src":"5298:3:19"},"nativeSrc":"5298:12:19","nodeType":"YulFunctionCall","src":"5298:12:19"},"variableNames":[{"name":"dst","nativeSrc":"5291:3:19","nodeType":"YulIdentifier","src":"5291:3:19"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"5189:3:19","nodeType":"YulIdentifier","src":"5189:3:19"},{"name":"srcEnd","nativeSrc":"5194:6:19","nodeType":"YulIdentifier","src":"5194:6:19"}],"functionName":{"name":"lt","nativeSrc":"5186:2:19","nodeType":"YulIdentifier","src":"5186:2:19"},"nativeSrc":"5186:15:19","nodeType":"YulFunctionCall","src":"5186:15:19"},"nativeSrc":"5178:142:19","nodeType":"YulForLoop","post":{"nativeSrc":"5202:23:19","nodeType":"YulBlock","src":"5202:23:19","statements":[{"nativeSrc":"5204:19:19","nodeType":"YulAssignment","src":"5204:19:19","value":{"arguments":[{"name":"src","nativeSrc":"5215:3:19","nodeType":"YulIdentifier","src":"5215:3:19"},{"name":"_1","nativeSrc":"5220:2:19","nodeType":"YulIdentifier","src":"5220:2:19"}],"functionName":{"name":"add","nativeSrc":"5211:3:19","nodeType":"YulIdentifier","src":"5211:3:19"},"nativeSrc":"5211:12:19","nodeType":"YulFunctionCall","src":"5211:12:19"},"variableNames":[{"name":"src","nativeSrc":"5204:3:19","nodeType":"YulIdentifier","src":"5204:3:19"}]}]},"pre":{"nativeSrc":"5182:3:19","nodeType":"YulBlock","src":"5182:3:19","statements":[]},"src":"5178:142:19"},{"nativeSrc":"5329:15:19","nodeType":"YulAssignment","src":"5329:15:19","value":{"name":"dst_1","nativeSrc":"5339:5:19","nodeType":"YulIdentifier","src":"5339:5:19"},"variableNames":[{"name":"value0","nativeSrc":"5329:6:19","nodeType":"YulIdentifier","src":"5329:6:19"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr","nativeSrc":"4404:946:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4465:9:19","nodeType":"YulTypedName","src":"4465:9:19","type":""},{"name":"dataEnd","nativeSrc":"4476:7:19","nodeType":"YulTypedName","src":"4476:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4488:6:19","nodeType":"YulTypedName","src":"4488:6:19","type":""}],"src":"4404:946:19"},{"body":{"nativeSrc":"5442:301:19","nodeType":"YulBlock","src":"5442:301:19","statements":[{"body":{"nativeSrc":"5488:16:19","nodeType":"YulBlock","src":"5488:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5497:1:19","nodeType":"YulLiteral","src":"5497:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"5500:1:19","nodeType":"YulLiteral","src":"5500:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5490:6:19","nodeType":"YulIdentifier","src":"5490:6:19"},"nativeSrc":"5490:12:19","nodeType":"YulFunctionCall","src":"5490:12:19"},"nativeSrc":"5490:12:19","nodeType":"YulExpressionStatement","src":"5490:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5463:7:19","nodeType":"YulIdentifier","src":"5463:7:19"},{"name":"headStart","nativeSrc":"5472:9:19","nodeType":"YulIdentifier","src":"5472:9:19"}],"functionName":{"name":"sub","nativeSrc":"5459:3:19","nodeType":"YulIdentifier","src":"5459:3:19"},"nativeSrc":"5459:23:19","nodeType":"YulFunctionCall","src":"5459:23:19"},{"kind":"number","nativeSrc":"5484:2:19","nodeType":"YulLiteral","src":"5484:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5455:3:19","nodeType":"YulIdentifier","src":"5455:3:19"},"nativeSrc":"5455:32:19","nodeType":"YulFunctionCall","src":"5455:32:19"},"nativeSrc":"5452:52:19","nodeType":"YulIf","src":"5452:52:19"},{"nativeSrc":"5513:36:19","nodeType":"YulVariableDeclaration","src":"5513:36:19","value":{"arguments":[{"name":"headStart","nativeSrc":"5539:9:19","nodeType":"YulIdentifier","src":"5539:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"5526:12:19","nodeType":"YulIdentifier","src":"5526:12:19"},"nativeSrc":"5526:23:19","nodeType":"YulFunctionCall","src":"5526:23:19"},"variables":[{"name":"value","nativeSrc":"5517:5:19","nodeType":"YulTypedName","src":"5517:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5583:5:19","nodeType":"YulIdentifier","src":"5583:5:19"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5558:24:19","nodeType":"YulIdentifier","src":"5558:24:19"},"nativeSrc":"5558:31:19","nodeType":"YulFunctionCall","src":"5558:31:19"},"nativeSrc":"5558:31:19","nodeType":"YulExpressionStatement","src":"5558:31:19"},{"nativeSrc":"5598:15:19","nodeType":"YulAssignment","src":"5598:15:19","value":{"name":"value","nativeSrc":"5608:5:19","nodeType":"YulIdentifier","src":"5608:5:19"},"variableNames":[{"name":"value0","nativeSrc":"5598:6:19","nodeType":"YulIdentifier","src":"5598:6:19"}]},{"nativeSrc":"5622:47:19","nodeType":"YulVariableDeclaration","src":"5622:47:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5654:9:19","nodeType":"YulIdentifier","src":"5654:9:19"},{"kind":"number","nativeSrc":"5665:2:19","nodeType":"YulLiteral","src":"5665:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5650:3:19","nodeType":"YulIdentifier","src":"5650:3:19"},"nativeSrc":"5650:18:19","nodeType":"YulFunctionCall","src":"5650:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"5637:12:19","nodeType":"YulIdentifier","src":"5637:12:19"},"nativeSrc":"5637:32:19","nodeType":"YulFunctionCall","src":"5637:32:19"},"variables":[{"name":"value_1","nativeSrc":"5626:7:19","nodeType":"YulTypedName","src":"5626:7:19","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"5703:7:19","nodeType":"YulIdentifier","src":"5703:7:19"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5678:24:19","nodeType":"YulIdentifier","src":"5678:24:19"},"nativeSrc":"5678:33:19","nodeType":"YulFunctionCall","src":"5678:33:19"},"nativeSrc":"5678:33:19","nodeType":"YulExpressionStatement","src":"5678:33:19"},{"nativeSrc":"5720:17:19","nodeType":"YulAssignment","src":"5720:17:19","value":{"name":"value_1","nativeSrc":"5730:7:19","nodeType":"YulIdentifier","src":"5730:7:19"},"variableNames":[{"name":"value1","nativeSrc":"5720:6:19","nodeType":"YulIdentifier","src":"5720:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"5355:388:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5400:9:19","nodeType":"YulTypedName","src":"5400:9:19","type":""},{"name":"dataEnd","nativeSrc":"5411:7:19","nodeType":"YulTypedName","src":"5411:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5423:6:19","nodeType":"YulTypedName","src":"5423:6:19","type":""},{"name":"value1","nativeSrc":"5431:6:19","nodeType":"YulTypedName","src":"5431:6:19","type":""}],"src":"5355:388:19"},{"body":{"nativeSrc":"5844:489:19","nodeType":"YulBlock","src":"5844:489:19","statements":[{"body":{"nativeSrc":"5890:16:19","nodeType":"YulBlock","src":"5890:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5899:1:19","nodeType":"YulLiteral","src":"5899:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"5902:1:19","nodeType":"YulLiteral","src":"5902:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5892:6:19","nodeType":"YulIdentifier","src":"5892:6:19"},"nativeSrc":"5892:12:19","nodeType":"YulFunctionCall","src":"5892:12:19"},"nativeSrc":"5892:12:19","nodeType":"YulExpressionStatement","src":"5892:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5865:7:19","nodeType":"YulIdentifier","src":"5865:7:19"},{"name":"headStart","nativeSrc":"5874:9:19","nodeType":"YulIdentifier","src":"5874:9:19"}],"functionName":{"name":"sub","nativeSrc":"5861:3:19","nodeType":"YulIdentifier","src":"5861:3:19"},"nativeSrc":"5861:23:19","nodeType":"YulFunctionCall","src":"5861:23:19"},{"kind":"number","nativeSrc":"5886:2:19","nodeType":"YulLiteral","src":"5886:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5857:3:19","nodeType":"YulIdentifier","src":"5857:3:19"},"nativeSrc":"5857:32:19","nodeType":"YulFunctionCall","src":"5857:32:19"},"nativeSrc":"5854:52:19","nodeType":"YulIf","src":"5854:52:19"},{"nativeSrc":"5915:36:19","nodeType":"YulVariableDeclaration","src":"5915:36:19","value":{"arguments":[{"name":"headStart","nativeSrc":"5941:9:19","nodeType":"YulIdentifier","src":"5941:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"5928:12:19","nodeType":"YulIdentifier","src":"5928:12:19"},"nativeSrc":"5928:23:19","nodeType":"YulFunctionCall","src":"5928:23:19"},"variables":[{"name":"value","nativeSrc":"5919:5:19","nodeType":"YulTypedName","src":"5919:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5985:5:19","nodeType":"YulIdentifier","src":"5985:5:19"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5960:24:19","nodeType":"YulIdentifier","src":"5960:24:19"},"nativeSrc":"5960:31:19","nodeType":"YulFunctionCall","src":"5960:31:19"},"nativeSrc":"5960:31:19","nodeType":"YulExpressionStatement","src":"5960:31:19"},{"nativeSrc":"6000:15:19","nodeType":"YulAssignment","src":"6000:15:19","value":{"name":"value","nativeSrc":"6010:5:19","nodeType":"YulIdentifier","src":"6010:5:19"},"variableNames":[{"name":"value0","nativeSrc":"6000:6:19","nodeType":"YulIdentifier","src":"6000:6:19"}]},{"nativeSrc":"6024:46:19","nodeType":"YulVariableDeclaration","src":"6024:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6055:9:19","nodeType":"YulIdentifier","src":"6055:9:19"},{"kind":"number","nativeSrc":"6066:2:19","nodeType":"YulLiteral","src":"6066:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6051:3:19","nodeType":"YulIdentifier","src":"6051:3:19"},"nativeSrc":"6051:18:19","nodeType":"YulFunctionCall","src":"6051:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"6038:12:19","nodeType":"YulIdentifier","src":"6038:12:19"},"nativeSrc":"6038:32:19","nodeType":"YulFunctionCall","src":"6038:32:19"},"variables":[{"name":"offset","nativeSrc":"6028:6:19","nodeType":"YulTypedName","src":"6028:6:19","type":""}]},{"body":{"nativeSrc":"6113:16:19","nodeType":"YulBlock","src":"6113:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6122:1:19","nodeType":"YulLiteral","src":"6122:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"6125:1:19","nodeType":"YulLiteral","src":"6125:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6115:6:19","nodeType":"YulIdentifier","src":"6115:6:19"},"nativeSrc":"6115:12:19","nodeType":"YulFunctionCall","src":"6115:12:19"},"nativeSrc":"6115:12:19","nodeType":"YulExpressionStatement","src":"6115:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6085:6:19","nodeType":"YulIdentifier","src":"6085:6:19"},{"kind":"number","nativeSrc":"6093:18:19","nodeType":"YulLiteral","src":"6093:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6082:2:19","nodeType":"YulIdentifier","src":"6082:2:19"},"nativeSrc":"6082:30:19","nodeType":"YulFunctionCall","src":"6082:30:19"},"nativeSrc":"6079:50:19","nodeType":"YulIf","src":"6079:50:19"},{"nativeSrc":"6138:32:19","nodeType":"YulVariableDeclaration","src":"6138:32:19","value":{"arguments":[{"name":"headStart","nativeSrc":"6152:9:19","nodeType":"YulIdentifier","src":"6152:9:19"},{"name":"offset","nativeSrc":"6163:6:19","nodeType":"YulIdentifier","src":"6163:6:19"}],"functionName":{"name":"add","nativeSrc":"6148:3:19","nodeType":"YulIdentifier","src":"6148:3:19"},"nativeSrc":"6148:22:19","nodeType":"YulFunctionCall","src":"6148:22:19"},"variables":[{"name":"_1","nativeSrc":"6142:2:19","nodeType":"YulTypedName","src":"6142:2:19","type":""}]},{"body":{"nativeSrc":"6218:16:19","nodeType":"YulBlock","src":"6218:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6227:1:19","nodeType":"YulLiteral","src":"6227:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"6230:1:19","nodeType":"YulLiteral","src":"6230:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6220:6:19","nodeType":"YulIdentifier","src":"6220:6:19"},"nativeSrc":"6220:12:19","nodeType":"YulFunctionCall","src":"6220:12:19"},"nativeSrc":"6220:12:19","nodeType":"YulExpressionStatement","src":"6220:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"6197:2:19","nodeType":"YulIdentifier","src":"6197:2:19"},{"kind":"number","nativeSrc":"6201:4:19","nodeType":"YulLiteral","src":"6201:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"6193:3:19","nodeType":"YulIdentifier","src":"6193:3:19"},"nativeSrc":"6193:13:19","nodeType":"YulFunctionCall","src":"6193:13:19"},{"name":"dataEnd","nativeSrc":"6208:7:19","nodeType":"YulIdentifier","src":"6208:7:19"}],"functionName":{"name":"slt","nativeSrc":"6189:3:19","nodeType":"YulIdentifier","src":"6189:3:19"},"nativeSrc":"6189:27:19","nodeType":"YulFunctionCall","src":"6189:27:19"}],"functionName":{"name":"iszero","nativeSrc":"6182:6:19","nodeType":"YulIdentifier","src":"6182:6:19"},"nativeSrc":"6182:35:19","nodeType":"YulFunctionCall","src":"6182:35:19"},"nativeSrc":"6179:55:19","nodeType":"YulIf","src":"6179:55:19"},{"nativeSrc":"6243:84:19","nodeType":"YulAssignment","src":"6243:84:19","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"6292:2:19","nodeType":"YulIdentifier","src":"6292:2:19"},{"kind":"number","nativeSrc":"6296:2:19","nodeType":"YulLiteral","src":"6296:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6288:3:19","nodeType":"YulIdentifier","src":"6288:3:19"},"nativeSrc":"6288:11:19","nodeType":"YulFunctionCall","src":"6288:11:19"},{"arguments":[{"name":"_1","nativeSrc":"6314:2:19","nodeType":"YulIdentifier","src":"6314:2:19"}],"functionName":{"name":"calldataload","nativeSrc":"6301:12:19","nodeType":"YulIdentifier","src":"6301:12:19"},"nativeSrc":"6301:16:19","nodeType":"YulFunctionCall","src":"6301:16:19"},{"name":"dataEnd","nativeSrc":"6319:7:19","nodeType":"YulIdentifier","src":"6319:7:19"}],"functionName":{"name":"abi_decode_available_length_string","nativeSrc":"6253:34:19","nodeType":"YulIdentifier","src":"6253:34:19"},"nativeSrc":"6253:74:19","nodeType":"YulFunctionCall","src":"6253:74:19"},"variableNames":[{"name":"value1","nativeSrc":"6243:6:19","nodeType":"YulIdentifier","src":"6243:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nativeSrc":"5748:585:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5802:9:19","nodeType":"YulTypedName","src":"5802:9:19","type":""},{"name":"dataEnd","nativeSrc":"5813:7:19","nodeType":"YulTypedName","src":"5813:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5825:6:19","nodeType":"YulTypedName","src":"5825:6:19","type":""},{"name":"value1","nativeSrc":"5833:6:19","nodeType":"YulTypedName","src":"5833:6:19","type":""}],"src":"5748:585:19"},{"body":{"nativeSrc":"6442:212:19","nodeType":"YulBlock","src":"6442:212:19","statements":[{"body":{"nativeSrc":"6488:16:19","nodeType":"YulBlock","src":"6488:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6497:1:19","nodeType":"YulLiteral","src":"6497:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"6500:1:19","nodeType":"YulLiteral","src":"6500:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6490:6:19","nodeType":"YulIdentifier","src":"6490:6:19"},"nativeSrc":"6490:12:19","nodeType":"YulFunctionCall","src":"6490:12:19"},"nativeSrc":"6490:12:19","nodeType":"YulExpressionStatement","src":"6490:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6463:7:19","nodeType":"YulIdentifier","src":"6463:7:19"},{"name":"headStart","nativeSrc":"6472:9:19","nodeType":"YulIdentifier","src":"6472:9:19"}],"functionName":{"name":"sub","nativeSrc":"6459:3:19","nodeType":"YulIdentifier","src":"6459:3:19"},"nativeSrc":"6459:23:19","nodeType":"YulFunctionCall","src":"6459:23:19"},{"kind":"number","nativeSrc":"6484:2:19","nodeType":"YulLiteral","src":"6484:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6455:3:19","nodeType":"YulIdentifier","src":"6455:3:19"},"nativeSrc":"6455:32:19","nodeType":"YulFunctionCall","src":"6455:32:19"},"nativeSrc":"6452:52:19","nodeType":"YulIf","src":"6452:52:19"},{"nativeSrc":"6513:33:19","nodeType":"YulAssignment","src":"6513:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"6536:9:19","nodeType":"YulIdentifier","src":"6536:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"6523:12:19","nodeType":"YulIdentifier","src":"6523:12:19"},"nativeSrc":"6523:23:19","nodeType":"YulFunctionCall","src":"6523:23:19"},"variableNames":[{"name":"value0","nativeSrc":"6513:6:19","nodeType":"YulIdentifier","src":"6513:6:19"}]},{"nativeSrc":"6555:42:19","nodeType":"YulAssignment","src":"6555:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6582:9:19","nodeType":"YulIdentifier","src":"6582:9:19"},{"kind":"number","nativeSrc":"6593:2:19","nodeType":"YulLiteral","src":"6593:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6578:3:19","nodeType":"YulIdentifier","src":"6578:3:19"},"nativeSrc":"6578:18:19","nodeType":"YulFunctionCall","src":"6578:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"6565:12:19","nodeType":"YulIdentifier","src":"6565:12:19"},"nativeSrc":"6565:32:19","nodeType":"YulFunctionCall","src":"6565:32:19"},"variableNames":[{"name":"value1","nativeSrc":"6555:6:19","nodeType":"YulIdentifier","src":"6555:6:19"}]},{"nativeSrc":"6606:42:19","nodeType":"YulAssignment","src":"6606:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6633:9:19","nodeType":"YulIdentifier","src":"6633:9:19"},{"kind":"number","nativeSrc":"6644:2:19","nodeType":"YulLiteral","src":"6644:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6629:3:19","nodeType":"YulIdentifier","src":"6629:3:19"},"nativeSrc":"6629:18:19","nodeType":"YulFunctionCall","src":"6629:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"6616:12:19","nodeType":"YulIdentifier","src":"6616:12:19"},"nativeSrc":"6616:32:19","nodeType":"YulFunctionCall","src":"6616:32:19"},"variableNames":[{"name":"value2","nativeSrc":"6606:6:19","nodeType":"YulIdentifier","src":"6606:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256","nativeSrc":"6338:316:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6392:9:19","nodeType":"YulTypedName","src":"6392:9:19","type":""},{"name":"dataEnd","nativeSrc":"6403:7:19","nodeType":"YulTypedName","src":"6403:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6415:6:19","nodeType":"YulTypedName","src":"6415:6:19","type":""},{"name":"value1","nativeSrc":"6423:6:19","nodeType":"YulTypedName","src":"6423:6:19","type":""},{"name":"value2","nativeSrc":"6431:6:19","nodeType":"YulTypedName","src":"6431:6:19","type":""}],"src":"6338:316:19"},{"body":{"nativeSrc":"6756:293:19","nodeType":"YulBlock","src":"6756:293:19","statements":[{"body":{"nativeSrc":"6802:16:19","nodeType":"YulBlock","src":"6802:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6811:1:19","nodeType":"YulLiteral","src":"6811:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"6814:1:19","nodeType":"YulLiteral","src":"6814:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6804:6:19","nodeType":"YulIdentifier","src":"6804:6:19"},"nativeSrc":"6804:12:19","nodeType":"YulFunctionCall","src":"6804:12:19"},"nativeSrc":"6804:12:19","nodeType":"YulExpressionStatement","src":"6804:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6777:7:19","nodeType":"YulIdentifier","src":"6777:7:19"},{"name":"headStart","nativeSrc":"6786:9:19","nodeType":"YulIdentifier","src":"6786:9:19"}],"functionName":{"name":"sub","nativeSrc":"6773:3:19","nodeType":"YulIdentifier","src":"6773:3:19"},"nativeSrc":"6773:23:19","nodeType":"YulFunctionCall","src":"6773:23:19"},{"kind":"number","nativeSrc":"6798:2:19","nodeType":"YulLiteral","src":"6798:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6769:3:19","nodeType":"YulIdentifier","src":"6769:3:19"},"nativeSrc":"6769:32:19","nodeType":"YulFunctionCall","src":"6769:32:19"},"nativeSrc":"6766:52:19","nodeType":"YulIf","src":"6766:52:19"},{"nativeSrc":"6827:33:19","nodeType":"YulAssignment","src":"6827:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"6850:9:19","nodeType":"YulIdentifier","src":"6850:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"6837:12:19","nodeType":"YulIdentifier","src":"6837:12:19"},"nativeSrc":"6837:23:19","nodeType":"YulFunctionCall","src":"6837:23:19"},"variableNames":[{"name":"value0","nativeSrc":"6827:6:19","nodeType":"YulIdentifier","src":"6827:6:19"}]},{"nativeSrc":"6869:46:19","nodeType":"YulVariableDeclaration","src":"6869:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6900:9:19","nodeType":"YulIdentifier","src":"6900:9:19"},{"kind":"number","nativeSrc":"6911:2:19","nodeType":"YulLiteral","src":"6911:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6896:3:19","nodeType":"YulIdentifier","src":"6896:3:19"},"nativeSrc":"6896:18:19","nodeType":"YulFunctionCall","src":"6896:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"6883:12:19","nodeType":"YulIdentifier","src":"6883:12:19"},"nativeSrc":"6883:32:19","nodeType":"YulFunctionCall","src":"6883:32:19"},"variables":[{"name":"offset","nativeSrc":"6873:6:19","nodeType":"YulTypedName","src":"6873:6:19","type":""}]},{"body":{"nativeSrc":"6958:16:19","nodeType":"YulBlock","src":"6958:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6967:1:19","nodeType":"YulLiteral","src":"6967:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"6970:1:19","nodeType":"YulLiteral","src":"6970:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6960:6:19","nodeType":"YulIdentifier","src":"6960:6:19"},"nativeSrc":"6960:12:19","nodeType":"YulFunctionCall","src":"6960:12:19"},"nativeSrc":"6960:12:19","nodeType":"YulExpressionStatement","src":"6960:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6930:6:19","nodeType":"YulIdentifier","src":"6930:6:19"},{"kind":"number","nativeSrc":"6938:18:19","nodeType":"YulLiteral","src":"6938:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6927:2:19","nodeType":"YulIdentifier","src":"6927:2:19"},"nativeSrc":"6927:30:19","nodeType":"YulFunctionCall","src":"6927:30:19"},"nativeSrc":"6924:50:19","nodeType":"YulIf","src":"6924:50:19"},{"nativeSrc":"6983:60:19","nodeType":"YulAssignment","src":"6983:60:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7015:9:19","nodeType":"YulIdentifier","src":"7015:9:19"},{"name":"offset","nativeSrc":"7026:6:19","nodeType":"YulIdentifier","src":"7026:6:19"}],"functionName":{"name":"add","nativeSrc":"7011:3:19","nodeType":"YulIdentifier","src":"7011:3:19"},"nativeSrc":"7011:22:19","nodeType":"YulFunctionCall","src":"7011:22:19"},{"name":"dataEnd","nativeSrc":"7035:7:19","nodeType":"YulIdentifier","src":"7035:7:19"}],"functionName":{"name":"abi_decode_string","nativeSrc":"6993:17:19","nodeType":"YulIdentifier","src":"6993:17:19"},"nativeSrc":"6993:50:19","nodeType":"YulFunctionCall","src":"6993:50:19"},"variableNames":[{"name":"value1","nativeSrc":"6983:6:19","nodeType":"YulIdentifier","src":"6983:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_memory_ptr","nativeSrc":"6659:390:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6714:9:19","nodeType":"YulTypedName","src":"6714:9:19","type":""},{"name":"dataEnd","nativeSrc":"6725:7:19","nodeType":"YulTypedName","src":"6725:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6737:6:19","nodeType":"YulTypedName","src":"6737:6:19","type":""},{"name":"value1","nativeSrc":"6745:6:19","nodeType":"YulTypedName","src":"6745:6:19","type":""}],"src":"6659:390:19"},{"body":{"nativeSrc":"7101:109:19","nodeType":"YulBlock","src":"7101:109:19","statements":[{"nativeSrc":"7111:29:19","nodeType":"YulAssignment","src":"7111:29:19","value":{"arguments":[{"name":"offset","nativeSrc":"7133:6:19","nodeType":"YulIdentifier","src":"7133:6:19"}],"functionName":{"name":"calldataload","nativeSrc":"7120:12:19","nodeType":"YulIdentifier","src":"7120:12:19"},"nativeSrc":"7120:20:19","nodeType":"YulFunctionCall","src":"7120:20:19"},"variableNames":[{"name":"value","nativeSrc":"7111:5:19","nodeType":"YulIdentifier","src":"7111:5:19"}]},{"body":{"nativeSrc":"7188:16:19","nodeType":"YulBlock","src":"7188:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7197:1:19","nodeType":"YulLiteral","src":"7197:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"7200:1:19","nodeType":"YulLiteral","src":"7200:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7190:6:19","nodeType":"YulIdentifier","src":"7190:6:19"},"nativeSrc":"7190:12:19","nodeType":"YulFunctionCall","src":"7190:12:19"},"nativeSrc":"7190:12:19","nodeType":"YulExpressionStatement","src":"7190:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7162:5:19","nodeType":"YulIdentifier","src":"7162:5:19"},{"arguments":[{"name":"value","nativeSrc":"7173:5:19","nodeType":"YulIdentifier","src":"7173:5:19"},{"kind":"number","nativeSrc":"7180:4:19","nodeType":"YulLiteral","src":"7180:4:19","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"7169:3:19","nodeType":"YulIdentifier","src":"7169:3:19"},"nativeSrc":"7169:16:19","nodeType":"YulFunctionCall","src":"7169:16:19"}],"functionName":{"name":"eq","nativeSrc":"7159:2:19","nodeType":"YulIdentifier","src":"7159:2:19"},"nativeSrc":"7159:27:19","nodeType":"YulFunctionCall","src":"7159:27:19"}],"functionName":{"name":"iszero","nativeSrc":"7152:6:19","nodeType":"YulIdentifier","src":"7152:6:19"},"nativeSrc":"7152:35:19","nodeType":"YulFunctionCall","src":"7152:35:19"},"nativeSrc":"7149:55:19","nodeType":"YulIf","src":"7149:55:19"}]},"name":"abi_decode_uint8","nativeSrc":"7054:156:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7080:6:19","nodeType":"YulTypedName","src":"7080:6:19","type":""}],"returnVariables":[{"name":"value","nativeSrc":"7091:5:19","nodeType":"YulTypedName","src":"7091:5:19","type":""}],"src":"7054:156:19"},{"body":{"nativeSrc":"7395:556:19","nodeType":"YulBlock","src":"7395:556:19","statements":[{"body":{"nativeSrc":"7442:16:19","nodeType":"YulBlock","src":"7442:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7451:1:19","nodeType":"YulLiteral","src":"7451:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"7454:1:19","nodeType":"YulLiteral","src":"7454:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7444:6:19","nodeType":"YulIdentifier","src":"7444:6:19"},"nativeSrc":"7444:12:19","nodeType":"YulFunctionCall","src":"7444:12:19"},"nativeSrc":"7444:12:19","nodeType":"YulExpressionStatement","src":"7444:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7416:7:19","nodeType":"YulIdentifier","src":"7416:7:19"},{"name":"headStart","nativeSrc":"7425:9:19","nodeType":"YulIdentifier","src":"7425:9:19"}],"functionName":{"name":"sub","nativeSrc":"7412:3:19","nodeType":"YulIdentifier","src":"7412:3:19"},"nativeSrc":"7412:23:19","nodeType":"YulFunctionCall","src":"7412:23:19"},{"kind":"number","nativeSrc":"7437:3:19","nodeType":"YulLiteral","src":"7437:3:19","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"7408:3:19","nodeType":"YulIdentifier","src":"7408:3:19"},"nativeSrc":"7408:33:19","nodeType":"YulFunctionCall","src":"7408:33:19"},"nativeSrc":"7405:53:19","nodeType":"YulIf","src":"7405:53:19"},{"nativeSrc":"7467:33:19","nodeType":"YulAssignment","src":"7467:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"7490:9:19","nodeType":"YulIdentifier","src":"7490:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"7477:12:19","nodeType":"YulIdentifier","src":"7477:12:19"},"nativeSrc":"7477:23:19","nodeType":"YulFunctionCall","src":"7477:23:19"},"variableNames":[{"name":"value0","nativeSrc":"7467:6:19","nodeType":"YulIdentifier","src":"7467:6:19"}]},{"nativeSrc":"7509:46:19","nodeType":"YulVariableDeclaration","src":"7509:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7540:9:19","nodeType":"YulIdentifier","src":"7540:9:19"},{"kind":"number","nativeSrc":"7551:2:19","nodeType":"YulLiteral","src":"7551:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7536:3:19","nodeType":"YulIdentifier","src":"7536:3:19"},"nativeSrc":"7536:18:19","nodeType":"YulFunctionCall","src":"7536:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"7523:12:19","nodeType":"YulIdentifier","src":"7523:12:19"},"nativeSrc":"7523:32:19","nodeType":"YulFunctionCall","src":"7523:32:19"},"variables":[{"name":"offset","nativeSrc":"7513:6:19","nodeType":"YulTypedName","src":"7513:6:19","type":""}]},{"body":{"nativeSrc":"7598:16:19","nodeType":"YulBlock","src":"7598:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7607:1:19","nodeType":"YulLiteral","src":"7607:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"7610:1:19","nodeType":"YulLiteral","src":"7610:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7600:6:19","nodeType":"YulIdentifier","src":"7600:6:19"},"nativeSrc":"7600:12:19","nodeType":"YulFunctionCall","src":"7600:12:19"},"nativeSrc":"7600:12:19","nodeType":"YulExpressionStatement","src":"7600:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7570:6:19","nodeType":"YulIdentifier","src":"7570:6:19"},{"kind":"number","nativeSrc":"7578:18:19","nodeType":"YulLiteral","src":"7578:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7567:2:19","nodeType":"YulIdentifier","src":"7567:2:19"},"nativeSrc":"7567:30:19","nodeType":"YulFunctionCall","src":"7567:30:19"},"nativeSrc":"7564:50:19","nodeType":"YulIf","src":"7564:50:19"},{"nativeSrc":"7623:60:19","nodeType":"YulAssignment","src":"7623:60:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7655:9:19","nodeType":"YulIdentifier","src":"7655:9:19"},{"name":"offset","nativeSrc":"7666:6:19","nodeType":"YulIdentifier","src":"7666:6:19"}],"functionName":{"name":"add","nativeSrc":"7651:3:19","nodeType":"YulIdentifier","src":"7651:3:19"},"nativeSrc":"7651:22:19","nodeType":"YulFunctionCall","src":"7651:22:19"},{"name":"dataEnd","nativeSrc":"7675:7:19","nodeType":"YulIdentifier","src":"7675:7:19"}],"functionName":{"name":"abi_decode_string","nativeSrc":"7633:17:19","nodeType":"YulIdentifier","src":"7633:17:19"},"nativeSrc":"7633:50:19","nodeType":"YulFunctionCall","src":"7633:50:19"},"variableNames":[{"name":"value1","nativeSrc":"7623:6:19","nodeType":"YulIdentifier","src":"7623:6:19"}]},{"nativeSrc":"7692:42:19","nodeType":"YulAssignment","src":"7692:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7719:9:19","nodeType":"YulIdentifier","src":"7719:9:19"},{"kind":"number","nativeSrc":"7730:2:19","nodeType":"YulLiteral","src":"7730:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7715:3:19","nodeType":"YulIdentifier","src":"7715:3:19"},"nativeSrc":"7715:18:19","nodeType":"YulFunctionCall","src":"7715:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"7702:12:19","nodeType":"YulIdentifier","src":"7702:12:19"},"nativeSrc":"7702:32:19","nodeType":"YulFunctionCall","src":"7702:32:19"},"variableNames":[{"name":"value2","nativeSrc":"7692:6:19","nodeType":"YulIdentifier","src":"7692:6:19"}]},{"nativeSrc":"7743:42:19","nodeType":"YulAssignment","src":"7743:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7770:9:19","nodeType":"YulIdentifier","src":"7770:9:19"},{"kind":"number","nativeSrc":"7781:2:19","nodeType":"YulLiteral","src":"7781:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7766:3:19","nodeType":"YulIdentifier","src":"7766:3:19"},"nativeSrc":"7766:18:19","nodeType":"YulFunctionCall","src":"7766:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"7753:12:19","nodeType":"YulIdentifier","src":"7753:12:19"},"nativeSrc":"7753:32:19","nodeType":"YulFunctionCall","src":"7753:32:19"},"variableNames":[{"name":"value3","nativeSrc":"7743:6:19","nodeType":"YulIdentifier","src":"7743:6:19"}]},{"nativeSrc":"7794:47:19","nodeType":"YulAssignment","src":"7794:47:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7825:9:19","nodeType":"YulIdentifier","src":"7825:9:19"},{"kind":"number","nativeSrc":"7836:3:19","nodeType":"YulLiteral","src":"7836:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7821:3:19","nodeType":"YulIdentifier","src":"7821:3:19"},"nativeSrc":"7821:19:19","nodeType":"YulFunctionCall","src":"7821:19:19"}],"functionName":{"name":"abi_decode_uint8","nativeSrc":"7804:16:19","nodeType":"YulIdentifier","src":"7804:16:19"},"nativeSrc":"7804:37:19","nodeType":"YulFunctionCall","src":"7804:37:19"},"variableNames":[{"name":"value4","nativeSrc":"7794:6:19","nodeType":"YulIdentifier","src":"7794:6:19"}]},{"nativeSrc":"7850:43:19","nodeType":"YulAssignment","src":"7850:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7877:9:19","nodeType":"YulIdentifier","src":"7877:9:19"},{"kind":"number","nativeSrc":"7888:3:19","nodeType":"YulLiteral","src":"7888:3:19","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7873:3:19","nodeType":"YulIdentifier","src":"7873:3:19"},"nativeSrc":"7873:19:19","nodeType":"YulFunctionCall","src":"7873:19:19"}],"functionName":{"name":"calldataload","nativeSrc":"7860:12:19","nodeType":"YulIdentifier","src":"7860:12:19"},"nativeSrc":"7860:33:19","nodeType":"YulFunctionCall","src":"7860:33:19"},"variableNames":[{"name":"value5","nativeSrc":"7850:6:19","nodeType":"YulIdentifier","src":"7850:6:19"}]},{"nativeSrc":"7902:43:19","nodeType":"YulAssignment","src":"7902:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7929:9:19","nodeType":"YulIdentifier","src":"7929:9:19"},{"kind":"number","nativeSrc":"7940:3:19","nodeType":"YulLiteral","src":"7940:3:19","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"7925:3:19","nodeType":"YulIdentifier","src":"7925:3:19"},"nativeSrc":"7925:19:19","nodeType":"YulFunctionCall","src":"7925:19:19"}],"functionName":{"name":"calldataload","nativeSrc":"7912:12:19","nodeType":"YulIdentifier","src":"7912:12:19"},"nativeSrc":"7912:33:19","nodeType":"YulFunctionCall","src":"7912:33:19"},"variableNames":[{"name":"value6","nativeSrc":"7902:6:19","nodeType":"YulIdentifier","src":"7902:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_memory_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32","nativeSrc":"7215:736:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7313:9:19","nodeType":"YulTypedName","src":"7313:9:19","type":""},{"name":"dataEnd","nativeSrc":"7324:7:19","nodeType":"YulTypedName","src":"7324:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7336:6:19","nodeType":"YulTypedName","src":"7336:6:19","type":""},{"name":"value1","nativeSrc":"7344:6:19","nodeType":"YulTypedName","src":"7344:6:19","type":""},{"name":"value2","nativeSrc":"7352:6:19","nodeType":"YulTypedName","src":"7352:6:19","type":""},{"name":"value3","nativeSrc":"7360:6:19","nodeType":"YulTypedName","src":"7360:6:19","type":""},{"name":"value4","nativeSrc":"7368:6:19","nodeType":"YulTypedName","src":"7368:6:19","type":""},{"name":"value5","nativeSrc":"7376:6:19","nodeType":"YulTypedName","src":"7376:6:19","type":""},{"name":"value6","nativeSrc":"7384:6:19","nodeType":"YulTypedName","src":"7384:6:19","type":""}],"src":"7215:736:19"},{"body":{"nativeSrc":"8121:500:19","nodeType":"YulBlock","src":"8121:500:19","statements":[{"body":{"nativeSrc":"8168:16:19","nodeType":"YulBlock","src":"8168:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8177:1:19","nodeType":"YulLiteral","src":"8177:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"8180:1:19","nodeType":"YulLiteral","src":"8180:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8170:6:19","nodeType":"YulIdentifier","src":"8170:6:19"},"nativeSrc":"8170:12:19","nodeType":"YulFunctionCall","src":"8170:12:19"},"nativeSrc":"8170:12:19","nodeType":"YulExpressionStatement","src":"8170:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8142:7:19","nodeType":"YulIdentifier","src":"8142:7:19"},{"name":"headStart","nativeSrc":"8151:9:19","nodeType":"YulIdentifier","src":"8151:9:19"}],"functionName":{"name":"sub","nativeSrc":"8138:3:19","nodeType":"YulIdentifier","src":"8138:3:19"},"nativeSrc":"8138:23:19","nodeType":"YulFunctionCall","src":"8138:23:19"},{"kind":"number","nativeSrc":"8163:3:19","nodeType":"YulLiteral","src":"8163:3:19","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"8134:3:19","nodeType":"YulIdentifier","src":"8134:3:19"},"nativeSrc":"8134:33:19","nodeType":"YulFunctionCall","src":"8134:33:19"},"nativeSrc":"8131:53:19","nodeType":"YulIf","src":"8131:53:19"},{"nativeSrc":"8193:33:19","nodeType":"YulAssignment","src":"8193:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"8216:9:19","nodeType":"YulIdentifier","src":"8216:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"8203:12:19","nodeType":"YulIdentifier","src":"8203:12:19"},"nativeSrc":"8203:23:19","nodeType":"YulFunctionCall","src":"8203:23:19"},"variableNames":[{"name":"value0","nativeSrc":"8193:6:19","nodeType":"YulIdentifier","src":"8193:6:19"}]},{"nativeSrc":"8235:42:19","nodeType":"YulAssignment","src":"8235:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8262:9:19","nodeType":"YulIdentifier","src":"8262:9:19"},{"kind":"number","nativeSrc":"8273:2:19","nodeType":"YulLiteral","src":"8273:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8258:3:19","nodeType":"YulIdentifier","src":"8258:3:19"},"nativeSrc":"8258:18:19","nodeType":"YulFunctionCall","src":"8258:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"8245:12:19","nodeType":"YulIdentifier","src":"8245:12:19"},"nativeSrc":"8245:32:19","nodeType":"YulFunctionCall","src":"8245:32:19"},"variableNames":[{"name":"value1","nativeSrc":"8235:6:19","nodeType":"YulIdentifier","src":"8235:6:19"}]},{"nativeSrc":"8286:46:19","nodeType":"YulVariableDeclaration","src":"8286:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8317:9:19","nodeType":"YulIdentifier","src":"8317:9:19"},{"kind":"number","nativeSrc":"8328:2:19","nodeType":"YulLiteral","src":"8328:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8313:3:19","nodeType":"YulIdentifier","src":"8313:3:19"},"nativeSrc":"8313:18:19","nodeType":"YulFunctionCall","src":"8313:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"8300:12:19","nodeType":"YulIdentifier","src":"8300:12:19"},"nativeSrc":"8300:32:19","nodeType":"YulFunctionCall","src":"8300:32:19"},"variables":[{"name":"offset","nativeSrc":"8290:6:19","nodeType":"YulTypedName","src":"8290:6:19","type":""}]},{"body":{"nativeSrc":"8375:16:19","nodeType":"YulBlock","src":"8375:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8384:1:19","nodeType":"YulLiteral","src":"8384:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"8387:1:19","nodeType":"YulLiteral","src":"8387:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8377:6:19","nodeType":"YulIdentifier","src":"8377:6:19"},"nativeSrc":"8377:12:19","nodeType":"YulFunctionCall","src":"8377:12:19"},"nativeSrc":"8377:12:19","nodeType":"YulExpressionStatement","src":"8377:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8347:6:19","nodeType":"YulIdentifier","src":"8347:6:19"},{"kind":"number","nativeSrc":"8355:18:19","nodeType":"YulLiteral","src":"8355:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8344:2:19","nodeType":"YulIdentifier","src":"8344:2:19"},"nativeSrc":"8344:30:19","nodeType":"YulFunctionCall","src":"8344:30:19"},"nativeSrc":"8341:50:19","nodeType":"YulIf","src":"8341:50:19"},{"nativeSrc":"8400:60:19","nodeType":"YulAssignment","src":"8400:60:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8432:9:19","nodeType":"YulIdentifier","src":"8432:9:19"},{"name":"offset","nativeSrc":"8443:6:19","nodeType":"YulIdentifier","src":"8443:6:19"}],"functionName":{"name":"add","nativeSrc":"8428:3:19","nodeType":"YulIdentifier","src":"8428:3:19"},"nativeSrc":"8428:22:19","nodeType":"YulFunctionCall","src":"8428:22:19"},{"name":"dataEnd","nativeSrc":"8452:7:19","nodeType":"YulIdentifier","src":"8452:7:19"}],"functionName":{"name":"abi_decode_string","nativeSrc":"8410:17:19","nodeType":"YulIdentifier","src":"8410:17:19"},"nativeSrc":"8410:50:19","nodeType":"YulFunctionCall","src":"8410:50:19"},"variableNames":[{"name":"value2","nativeSrc":"8400:6:19","nodeType":"YulIdentifier","src":"8400:6:19"}]},{"nativeSrc":"8469:42:19","nodeType":"YulAssignment","src":"8469:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8496:9:19","nodeType":"YulIdentifier","src":"8496:9:19"},{"kind":"number","nativeSrc":"8507:2:19","nodeType":"YulLiteral","src":"8507:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8492:3:19","nodeType":"YulIdentifier","src":"8492:3:19"},"nativeSrc":"8492:18:19","nodeType":"YulFunctionCall","src":"8492:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"8479:12:19","nodeType":"YulIdentifier","src":"8479:12:19"},"nativeSrc":"8479:32:19","nodeType":"YulFunctionCall","src":"8479:32:19"},"variableNames":[{"name":"value3","nativeSrc":"8469:6:19","nodeType":"YulIdentifier","src":"8469:6:19"}]},{"nativeSrc":"8520:43:19","nodeType":"YulAssignment","src":"8520:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8547:9:19","nodeType":"YulIdentifier","src":"8547:9:19"},{"kind":"number","nativeSrc":"8558:3:19","nodeType":"YulLiteral","src":"8558:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8543:3:19","nodeType":"YulIdentifier","src":"8543:3:19"},"nativeSrc":"8543:19:19","nodeType":"YulFunctionCall","src":"8543:19:19"}],"functionName":{"name":"calldataload","nativeSrc":"8530:12:19","nodeType":"YulIdentifier","src":"8530:12:19"},"nativeSrc":"8530:33:19","nodeType":"YulFunctionCall","src":"8530:33:19"},"variableNames":[{"name":"value4","nativeSrc":"8520:6:19","nodeType":"YulIdentifier","src":"8520:6:19"}]},{"nativeSrc":"8572:43:19","nodeType":"YulAssignment","src":"8572:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8599:9:19","nodeType":"YulIdentifier","src":"8599:9:19"},{"kind":"number","nativeSrc":"8610:3:19","nodeType":"YulLiteral","src":"8610:3:19","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"8595:3:19","nodeType":"YulIdentifier","src":"8595:3:19"},"nativeSrc":"8595:19:19","nodeType":"YulFunctionCall","src":"8595:19:19"}],"functionName":{"name":"calldataload","nativeSrc":"8582:12:19","nodeType":"YulIdentifier","src":"8582:12:19"},"nativeSrc":"8582:33:19","nodeType":"YulFunctionCall","src":"8582:33:19"},"variableNames":[{"name":"value5","nativeSrc":"8572:6:19","nodeType":"YulIdentifier","src":"8572:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_string_memory_ptrt_uint256t_uint256t_bytes32","nativeSrc":"7956:665:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8047:9:19","nodeType":"YulTypedName","src":"8047:9:19","type":""},{"name":"dataEnd","nativeSrc":"8058:7:19","nodeType":"YulTypedName","src":"8058:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8070:6:19","nodeType":"YulTypedName","src":"8070:6:19","type":""},{"name":"value1","nativeSrc":"8078:6:19","nodeType":"YulTypedName","src":"8078:6:19","type":""},{"name":"value2","nativeSrc":"8086:6:19","nodeType":"YulTypedName","src":"8086:6:19","type":""},{"name":"value3","nativeSrc":"8094:6:19","nodeType":"YulTypedName","src":"8094:6:19","type":""},{"name":"value4","nativeSrc":"8102:6:19","nodeType":"YulTypedName","src":"8102:6:19","type":""},{"name":"value5","nativeSrc":"8110:6:19","nodeType":"YulTypedName","src":"8110:6:19","type":""}],"src":"7956:665:19"},{"body":{"nativeSrc":"8713:161:19","nodeType":"YulBlock","src":"8713:161:19","statements":[{"body":{"nativeSrc":"8759:16:19","nodeType":"YulBlock","src":"8759:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8768:1:19","nodeType":"YulLiteral","src":"8768:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"8771:1:19","nodeType":"YulLiteral","src":"8771:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8761:6:19","nodeType":"YulIdentifier","src":"8761:6:19"},"nativeSrc":"8761:12:19","nodeType":"YulFunctionCall","src":"8761:12:19"},"nativeSrc":"8761:12:19","nodeType":"YulExpressionStatement","src":"8761:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8734:7:19","nodeType":"YulIdentifier","src":"8734:7:19"},{"name":"headStart","nativeSrc":"8743:9:19","nodeType":"YulIdentifier","src":"8743:9:19"}],"functionName":{"name":"sub","nativeSrc":"8730:3:19","nodeType":"YulIdentifier","src":"8730:3:19"},"nativeSrc":"8730:23:19","nodeType":"YulFunctionCall","src":"8730:23:19"},{"kind":"number","nativeSrc":"8755:2:19","nodeType":"YulLiteral","src":"8755:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8726:3:19","nodeType":"YulIdentifier","src":"8726:3:19"},"nativeSrc":"8726:32:19","nodeType":"YulFunctionCall","src":"8726:32:19"},"nativeSrc":"8723:52:19","nodeType":"YulIf","src":"8723:52:19"},{"nativeSrc":"8784:33:19","nodeType":"YulAssignment","src":"8784:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"8807:9:19","nodeType":"YulIdentifier","src":"8807:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"8794:12:19","nodeType":"YulIdentifier","src":"8794:12:19"},"nativeSrc":"8794:23:19","nodeType":"YulFunctionCall","src":"8794:23:19"},"variableNames":[{"name":"value0","nativeSrc":"8784:6:19","nodeType":"YulIdentifier","src":"8784:6:19"}]},{"nativeSrc":"8826:42:19","nodeType":"YulAssignment","src":"8826:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8853:9:19","nodeType":"YulIdentifier","src":"8853:9:19"},{"kind":"number","nativeSrc":"8864:2:19","nodeType":"YulLiteral","src":"8864:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8849:3:19","nodeType":"YulIdentifier","src":"8849:3:19"},"nativeSrc":"8849:18:19","nodeType":"YulFunctionCall","src":"8849:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"8836:12:19","nodeType":"YulIdentifier","src":"8836:12:19"},"nativeSrc":"8836:32:19","nodeType":"YulFunctionCall","src":"8836:32:19"},"variableNames":[{"name":"value1","nativeSrc":"8826:6:19","nodeType":"YulIdentifier","src":"8826:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nativeSrc":"8626:248:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8671:9:19","nodeType":"YulTypedName","src":"8671:9:19","type":""},{"name":"dataEnd","nativeSrc":"8682:7:19","nodeType":"YulTypedName","src":"8682:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8694:6:19","nodeType":"YulTypedName","src":"8694:6:19","type":""},{"name":"value1","nativeSrc":"8702:6:19","nodeType":"YulTypedName","src":"8702:6:19","type":""}],"src":"8626:248:19"},{"body":{"nativeSrc":"8983:212:19","nodeType":"YulBlock","src":"8983:212:19","statements":[{"body":{"nativeSrc":"9029:16:19","nodeType":"YulBlock","src":"9029:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9038:1:19","nodeType":"YulLiteral","src":"9038:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"9041:1:19","nodeType":"YulLiteral","src":"9041:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9031:6:19","nodeType":"YulIdentifier","src":"9031:6:19"},"nativeSrc":"9031:12:19","nodeType":"YulFunctionCall","src":"9031:12:19"},"nativeSrc":"9031:12:19","nodeType":"YulExpressionStatement","src":"9031:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9004:7:19","nodeType":"YulIdentifier","src":"9004:7:19"},{"name":"headStart","nativeSrc":"9013:9:19","nodeType":"YulIdentifier","src":"9013:9:19"}],"functionName":{"name":"sub","nativeSrc":"9000:3:19","nodeType":"YulIdentifier","src":"9000:3:19"},"nativeSrc":"9000:23:19","nodeType":"YulFunctionCall","src":"9000:23:19"},{"kind":"number","nativeSrc":"9025:2:19","nodeType":"YulLiteral","src":"9025:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"8996:3:19","nodeType":"YulIdentifier","src":"8996:3:19"},"nativeSrc":"8996:32:19","nodeType":"YulFunctionCall","src":"8996:32:19"},"nativeSrc":"8993:52:19","nodeType":"YulIf","src":"8993:52:19"},{"nativeSrc":"9054:33:19","nodeType":"YulAssignment","src":"9054:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"9077:9:19","nodeType":"YulIdentifier","src":"9077:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"9064:12:19","nodeType":"YulIdentifier","src":"9064:12:19"},"nativeSrc":"9064:23:19","nodeType":"YulFunctionCall","src":"9064:23:19"},"variableNames":[{"name":"value0","nativeSrc":"9054:6:19","nodeType":"YulIdentifier","src":"9054:6:19"}]},{"nativeSrc":"9096:42:19","nodeType":"YulAssignment","src":"9096:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9123:9:19","nodeType":"YulIdentifier","src":"9123:9:19"},{"kind":"number","nativeSrc":"9134:2:19","nodeType":"YulLiteral","src":"9134:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9119:3:19","nodeType":"YulIdentifier","src":"9119:3:19"},"nativeSrc":"9119:18:19","nodeType":"YulFunctionCall","src":"9119:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"9106:12:19","nodeType":"YulIdentifier","src":"9106:12:19"},"nativeSrc":"9106:32:19","nodeType":"YulFunctionCall","src":"9106:32:19"},"variableNames":[{"name":"value1","nativeSrc":"9096:6:19","nodeType":"YulIdentifier","src":"9096:6:19"}]},{"nativeSrc":"9147:42:19","nodeType":"YulAssignment","src":"9147:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9174:9:19","nodeType":"YulIdentifier","src":"9174:9:19"},{"kind":"number","nativeSrc":"9185:2:19","nodeType":"YulLiteral","src":"9185:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9170:3:19","nodeType":"YulIdentifier","src":"9170:3:19"},"nativeSrc":"9170:18:19","nodeType":"YulFunctionCall","src":"9170:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"9157:12:19","nodeType":"YulIdentifier","src":"9157:12:19"},"nativeSrc":"9157:32:19","nodeType":"YulFunctionCall","src":"9157:32:19"},"variableNames":[{"name":"value2","nativeSrc":"9147:6:19","nodeType":"YulIdentifier","src":"9147:6:19"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes32","nativeSrc":"8879:316:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8933:9:19","nodeType":"YulTypedName","src":"8933:9:19","type":""},{"name":"dataEnd","nativeSrc":"8944:7:19","nodeType":"YulTypedName","src":"8944:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8956:6:19","nodeType":"YulTypedName","src":"8956:6:19","type":""},{"name":"value1","nativeSrc":"8964:6:19","nodeType":"YulTypedName","src":"8964:6:19","type":""},{"name":"value2","nativeSrc":"8972:6:19","nodeType":"YulTypedName","src":"8972:6:19","type":""}],"src":"8879:316:19"},{"body":{"nativeSrc":"9353:372:19","nodeType":"YulBlock","src":"9353:372:19","statements":[{"body":{"nativeSrc":"9400:16:19","nodeType":"YulBlock","src":"9400:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9409:1:19","nodeType":"YulLiteral","src":"9409:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"9412:1:19","nodeType":"YulLiteral","src":"9412:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9402:6:19","nodeType":"YulIdentifier","src":"9402:6:19"},"nativeSrc":"9402:12:19","nodeType":"YulFunctionCall","src":"9402:12:19"},"nativeSrc":"9402:12:19","nodeType":"YulExpressionStatement","src":"9402:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9374:7:19","nodeType":"YulIdentifier","src":"9374:7:19"},{"name":"headStart","nativeSrc":"9383:9:19","nodeType":"YulIdentifier","src":"9383:9:19"}],"functionName":{"name":"sub","nativeSrc":"9370:3:19","nodeType":"YulIdentifier","src":"9370:3:19"},"nativeSrc":"9370:23:19","nodeType":"YulFunctionCall","src":"9370:23:19"},{"kind":"number","nativeSrc":"9395:3:19","nodeType":"YulLiteral","src":"9395:3:19","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"9366:3:19","nodeType":"YulIdentifier","src":"9366:3:19"},"nativeSrc":"9366:33:19","nodeType":"YulFunctionCall","src":"9366:33:19"},"nativeSrc":"9363:53:19","nodeType":"YulIf","src":"9363:53:19"},{"nativeSrc":"9425:33:19","nodeType":"YulAssignment","src":"9425:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"9448:9:19","nodeType":"YulIdentifier","src":"9448:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"9435:12:19","nodeType":"YulIdentifier","src":"9435:12:19"},"nativeSrc":"9435:23:19","nodeType":"YulFunctionCall","src":"9435:23:19"},"variableNames":[{"name":"value0","nativeSrc":"9425:6:19","nodeType":"YulIdentifier","src":"9425:6:19"}]},{"nativeSrc":"9467:42:19","nodeType":"YulAssignment","src":"9467:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9494:9:19","nodeType":"YulIdentifier","src":"9494:9:19"},{"kind":"number","nativeSrc":"9505:2:19","nodeType":"YulLiteral","src":"9505:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9490:3:19","nodeType":"YulIdentifier","src":"9490:3:19"},"nativeSrc":"9490:18:19","nodeType":"YulFunctionCall","src":"9490:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"9477:12:19","nodeType":"YulIdentifier","src":"9477:12:19"},"nativeSrc":"9477:32:19","nodeType":"YulFunctionCall","src":"9477:32:19"},"variableNames":[{"name":"value1","nativeSrc":"9467:6:19","nodeType":"YulIdentifier","src":"9467:6:19"}]},{"nativeSrc":"9518:42:19","nodeType":"YulAssignment","src":"9518:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9545:9:19","nodeType":"YulIdentifier","src":"9545:9:19"},{"kind":"number","nativeSrc":"9556:2:19","nodeType":"YulLiteral","src":"9556:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9541:3:19","nodeType":"YulIdentifier","src":"9541:3:19"},"nativeSrc":"9541:18:19","nodeType":"YulFunctionCall","src":"9541:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"9528:12:19","nodeType":"YulIdentifier","src":"9528:12:19"},"nativeSrc":"9528:32:19","nodeType":"YulFunctionCall","src":"9528:32:19"},"variableNames":[{"name":"value2","nativeSrc":"9518:6:19","nodeType":"YulIdentifier","src":"9518:6:19"}]},{"nativeSrc":"9569:46:19","nodeType":"YulAssignment","src":"9569:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9600:9:19","nodeType":"YulIdentifier","src":"9600:9:19"},{"kind":"number","nativeSrc":"9611:2:19","nodeType":"YulLiteral","src":"9611:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9596:3:19","nodeType":"YulIdentifier","src":"9596:3:19"},"nativeSrc":"9596:18:19","nodeType":"YulFunctionCall","src":"9596:18:19"}],"functionName":{"name":"abi_decode_uint8","nativeSrc":"9579:16:19","nodeType":"YulIdentifier","src":"9579:16:19"},"nativeSrc":"9579:36:19","nodeType":"YulFunctionCall","src":"9579:36:19"},"variableNames":[{"name":"value3","nativeSrc":"9569:6:19","nodeType":"YulIdentifier","src":"9569:6:19"}]},{"nativeSrc":"9624:43:19","nodeType":"YulAssignment","src":"9624:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9651:9:19","nodeType":"YulIdentifier","src":"9651:9:19"},{"kind":"number","nativeSrc":"9662:3:19","nodeType":"YulLiteral","src":"9662:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9647:3:19","nodeType":"YulIdentifier","src":"9647:3:19"},"nativeSrc":"9647:19:19","nodeType":"YulFunctionCall","src":"9647:19:19"}],"functionName":{"name":"calldataload","nativeSrc":"9634:12:19","nodeType":"YulIdentifier","src":"9634:12:19"},"nativeSrc":"9634:33:19","nodeType":"YulFunctionCall","src":"9634:33:19"},"variableNames":[{"name":"value4","nativeSrc":"9624:6:19","nodeType":"YulIdentifier","src":"9624:6:19"}]},{"nativeSrc":"9676:43:19","nodeType":"YulAssignment","src":"9676:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9703:9:19","nodeType":"YulIdentifier","src":"9703:9:19"},{"kind":"number","nativeSrc":"9714:3:19","nodeType":"YulLiteral","src":"9714:3:19","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"9699:3:19","nodeType":"YulIdentifier","src":"9699:3:19"},"nativeSrc":"9699:19:19","nodeType":"YulFunctionCall","src":"9699:19:19"}],"functionName":{"name":"calldataload","nativeSrc":"9686:12:19","nodeType":"YulIdentifier","src":"9686:12:19"},"nativeSrc":"9686:33:19","nodeType":"YulFunctionCall","src":"9686:33:19"},"variableNames":[{"name":"value5","nativeSrc":"9676:6:19","nodeType":"YulIdentifier","src":"9676:6:19"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32","nativeSrc":"9200:525:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9279:9:19","nodeType":"YulTypedName","src":"9279:9:19","type":""},{"name":"dataEnd","nativeSrc":"9290:7:19","nodeType":"YulTypedName","src":"9290:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9302:6:19","nodeType":"YulTypedName","src":"9302:6:19","type":""},{"name":"value1","nativeSrc":"9310:6:19","nodeType":"YulTypedName","src":"9310:6:19","type":""},{"name":"value2","nativeSrc":"9318:6:19","nodeType":"YulTypedName","src":"9318:6:19","type":""},{"name":"value3","nativeSrc":"9326:6:19","nodeType":"YulTypedName","src":"9326:6:19","type":""},{"name":"value4","nativeSrc":"9334:6:19","nodeType":"YulTypedName","src":"9334:6:19","type":""},{"name":"value5","nativeSrc":"9342:6:19","nodeType":"YulTypedName","src":"9342:6:19","type":""}],"src":"9200:525:19"},{"body":{"nativeSrc":"9861:396:19","nodeType":"YulBlock","src":"9861:396:19","statements":[{"body":{"nativeSrc":"9908:16:19","nodeType":"YulBlock","src":"9908:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9917:1:19","nodeType":"YulLiteral","src":"9917:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"9920:1:19","nodeType":"YulLiteral","src":"9920:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9910:6:19","nodeType":"YulIdentifier","src":"9910:6:19"},"nativeSrc":"9910:12:19","nodeType":"YulFunctionCall","src":"9910:12:19"},"nativeSrc":"9910:12:19","nodeType":"YulExpressionStatement","src":"9910:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9882:7:19","nodeType":"YulIdentifier","src":"9882:7:19"},{"name":"headStart","nativeSrc":"9891:9:19","nodeType":"YulIdentifier","src":"9891:9:19"}],"functionName":{"name":"sub","nativeSrc":"9878:3:19","nodeType":"YulIdentifier","src":"9878:3:19"},"nativeSrc":"9878:23:19","nodeType":"YulFunctionCall","src":"9878:23:19"},{"kind":"number","nativeSrc":"9903:3:19","nodeType":"YulLiteral","src":"9903:3:19","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9874:3:19","nodeType":"YulIdentifier","src":"9874:3:19"},"nativeSrc":"9874:33:19","nodeType":"YulFunctionCall","src":"9874:33:19"},"nativeSrc":"9871:53:19","nodeType":"YulIf","src":"9871:53:19"},{"nativeSrc":"9933:33:19","nodeType":"YulAssignment","src":"9933:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"9956:9:19","nodeType":"YulIdentifier","src":"9956:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"9943:12:19","nodeType":"YulIdentifier","src":"9943:12:19"},"nativeSrc":"9943:23:19","nodeType":"YulFunctionCall","src":"9943:23:19"},"variableNames":[{"name":"value0","nativeSrc":"9933:6:19","nodeType":"YulIdentifier","src":"9933:6:19"}]},{"nativeSrc":"9975:46:19","nodeType":"YulVariableDeclaration","src":"9975:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10006:9:19","nodeType":"YulIdentifier","src":"10006:9:19"},{"kind":"number","nativeSrc":"10017:2:19","nodeType":"YulLiteral","src":"10017:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10002:3:19","nodeType":"YulIdentifier","src":"10002:3:19"},"nativeSrc":"10002:18:19","nodeType":"YulFunctionCall","src":"10002:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"9989:12:19","nodeType":"YulIdentifier","src":"9989:12:19"},"nativeSrc":"9989:32:19","nodeType":"YulFunctionCall","src":"9989:32:19"},"variables":[{"name":"offset","nativeSrc":"9979:6:19","nodeType":"YulTypedName","src":"9979:6:19","type":""}]},{"body":{"nativeSrc":"10064:16:19","nodeType":"YulBlock","src":"10064:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10073:1:19","nodeType":"YulLiteral","src":"10073:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"10076:1:19","nodeType":"YulLiteral","src":"10076:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10066:6:19","nodeType":"YulIdentifier","src":"10066:6:19"},"nativeSrc":"10066:12:19","nodeType":"YulFunctionCall","src":"10066:12:19"},"nativeSrc":"10066:12:19","nodeType":"YulExpressionStatement","src":"10066:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"10036:6:19","nodeType":"YulIdentifier","src":"10036:6:19"},{"kind":"number","nativeSrc":"10044:18:19","nodeType":"YulLiteral","src":"10044:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10033:2:19","nodeType":"YulIdentifier","src":"10033:2:19"},"nativeSrc":"10033:30:19","nodeType":"YulFunctionCall","src":"10033:30:19"},"nativeSrc":"10030:50:19","nodeType":"YulIf","src":"10030:50:19"},{"nativeSrc":"10089:60:19","nodeType":"YulAssignment","src":"10089:60:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10121:9:19","nodeType":"YulIdentifier","src":"10121:9:19"},{"name":"offset","nativeSrc":"10132:6:19","nodeType":"YulIdentifier","src":"10132:6:19"}],"functionName":{"name":"add","nativeSrc":"10117:3:19","nodeType":"YulIdentifier","src":"10117:3:19"},"nativeSrc":"10117:22:19","nodeType":"YulFunctionCall","src":"10117:22:19"},{"name":"dataEnd","nativeSrc":"10141:7:19","nodeType":"YulIdentifier","src":"10141:7:19"}],"functionName":{"name":"abi_decode_string","nativeSrc":"10099:17:19","nodeType":"YulIdentifier","src":"10099:17:19"},"nativeSrc":"10099:50:19","nodeType":"YulFunctionCall","src":"10099:50:19"},"variableNames":[{"name":"value1","nativeSrc":"10089:6:19","nodeType":"YulIdentifier","src":"10089:6:19"}]},{"nativeSrc":"10158:42:19","nodeType":"YulAssignment","src":"10158:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10185:9:19","nodeType":"YulIdentifier","src":"10185:9:19"},{"kind":"number","nativeSrc":"10196:2:19","nodeType":"YulLiteral","src":"10196:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10181:3:19","nodeType":"YulIdentifier","src":"10181:3:19"},"nativeSrc":"10181:18:19","nodeType":"YulFunctionCall","src":"10181:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"10168:12:19","nodeType":"YulIdentifier","src":"10168:12:19"},"nativeSrc":"10168:32:19","nodeType":"YulFunctionCall","src":"10168:32:19"},"variableNames":[{"name":"value2","nativeSrc":"10158:6:19","nodeType":"YulIdentifier","src":"10158:6:19"}]},{"nativeSrc":"10209:42:19","nodeType":"YulAssignment","src":"10209:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10236:9:19","nodeType":"YulIdentifier","src":"10236:9:19"},{"kind":"number","nativeSrc":"10247:2:19","nodeType":"YulLiteral","src":"10247:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10232:3:19","nodeType":"YulIdentifier","src":"10232:3:19"},"nativeSrc":"10232:18:19","nodeType":"YulFunctionCall","src":"10232:18:19"}],"functionName":{"name":"calldataload","nativeSrc":"10219:12:19","nodeType":"YulIdentifier","src":"10219:12:19"},"nativeSrc":"10219:32:19","nodeType":"YulFunctionCall","src":"10219:32:19"},"variableNames":[{"name":"value3","nativeSrc":"10209:6:19","nodeType":"YulIdentifier","src":"10209:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_memory_ptrt_uint256t_bytes32","nativeSrc":"9730:527:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9803:9:19","nodeType":"YulTypedName","src":"9803:9:19","type":""},{"name":"dataEnd","nativeSrc":"9814:7:19","nodeType":"YulTypedName","src":"9814:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9826:6:19","nodeType":"YulTypedName","src":"9826:6:19","type":""},{"name":"value1","nativeSrc":"9834:6:19","nodeType":"YulTypedName","src":"9834:6:19","type":""},{"name":"value2","nativeSrc":"9842:6:19","nodeType":"YulTypedName","src":"9842:6:19","type":""},{"name":"value3","nativeSrc":"9850:6:19","nodeType":"YulTypedName","src":"9850:6:19","type":""}],"src":"9730:527:19"},{"body":{"nativeSrc":"10328:184:19","nodeType":"YulBlock","src":"10328:184:19","statements":[{"nativeSrc":"10338:10:19","nodeType":"YulVariableDeclaration","src":"10338:10:19","value":{"kind":"number","nativeSrc":"10347:1:19","nodeType":"YulLiteral","src":"10347:1:19","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"10342:1:19","nodeType":"YulTypedName","src":"10342:1:19","type":""}]},{"body":{"nativeSrc":"10407:63:19","nodeType":"YulBlock","src":"10407:63:19","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"10432:3:19","nodeType":"YulIdentifier","src":"10432:3:19"},{"name":"i","nativeSrc":"10437:1:19","nodeType":"YulIdentifier","src":"10437:1:19"}],"functionName":{"name":"add","nativeSrc":"10428:3:19","nodeType":"YulIdentifier","src":"10428:3:19"},"nativeSrc":"10428:11:19","nodeType":"YulFunctionCall","src":"10428:11:19"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"10451:3:19","nodeType":"YulIdentifier","src":"10451:3:19"},{"name":"i","nativeSrc":"10456:1:19","nodeType":"YulIdentifier","src":"10456:1:19"}],"functionName":{"name":"add","nativeSrc":"10447:3:19","nodeType":"YulIdentifier","src":"10447:3:19"},"nativeSrc":"10447:11:19","nodeType":"YulFunctionCall","src":"10447:11:19"}],"functionName":{"name":"mload","nativeSrc":"10441:5:19","nodeType":"YulIdentifier","src":"10441:5:19"},"nativeSrc":"10441:18:19","nodeType":"YulFunctionCall","src":"10441:18:19"}],"functionName":{"name":"mstore","nativeSrc":"10421:6:19","nodeType":"YulIdentifier","src":"10421:6:19"},"nativeSrc":"10421:39:19","nodeType":"YulFunctionCall","src":"10421:39:19"},"nativeSrc":"10421:39:19","nodeType":"YulExpressionStatement","src":"10421:39:19"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"10368:1:19","nodeType":"YulIdentifier","src":"10368:1:19"},{"name":"length","nativeSrc":"10371:6:19","nodeType":"YulIdentifier","src":"10371:6:19"}],"functionName":{"name":"lt","nativeSrc":"10365:2:19","nodeType":"YulIdentifier","src":"10365:2:19"},"nativeSrc":"10365:13:19","nodeType":"YulFunctionCall","src":"10365:13:19"},"nativeSrc":"10357:113:19","nodeType":"YulForLoop","post":{"nativeSrc":"10379:19:19","nodeType":"YulBlock","src":"10379:19:19","statements":[{"nativeSrc":"10381:15:19","nodeType":"YulAssignment","src":"10381:15:19","value":{"arguments":[{"name":"i","nativeSrc":"10390:1:19","nodeType":"YulIdentifier","src":"10390:1:19"},{"kind":"number","nativeSrc":"10393:2:19","nodeType":"YulLiteral","src":"10393:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10386:3:19","nodeType":"YulIdentifier","src":"10386:3:19"},"nativeSrc":"10386:10:19","nodeType":"YulFunctionCall","src":"10386:10:19"},"variableNames":[{"name":"i","nativeSrc":"10381:1:19","nodeType":"YulIdentifier","src":"10381:1:19"}]}]},"pre":{"nativeSrc":"10361:3:19","nodeType":"YulBlock","src":"10361:3:19","statements":[]},"src":"10357:113:19"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"10490:3:19","nodeType":"YulIdentifier","src":"10490:3:19"},{"name":"length","nativeSrc":"10495:6:19","nodeType":"YulIdentifier","src":"10495:6:19"}],"functionName":{"name":"add","nativeSrc":"10486:3:19","nodeType":"YulIdentifier","src":"10486:3:19"},"nativeSrc":"10486:16:19","nodeType":"YulFunctionCall","src":"10486:16:19"},{"kind":"number","nativeSrc":"10504:1:19","nodeType":"YulLiteral","src":"10504:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"10479:6:19","nodeType":"YulIdentifier","src":"10479:6:19"},"nativeSrc":"10479:27:19","nodeType":"YulFunctionCall","src":"10479:27:19"},"nativeSrc":"10479:27:19","nodeType":"YulExpressionStatement","src":"10479:27:19"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"10262:250:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"10306:3:19","nodeType":"YulTypedName","src":"10306:3:19","type":""},{"name":"dst","nativeSrc":"10311:3:19","nodeType":"YulTypedName","src":"10311:3:19","type":""},{"name":"length","nativeSrc":"10316:6:19","nodeType":"YulTypedName","src":"10316:6:19","type":""}],"src":"10262:250:19"},{"body":{"nativeSrc":"10567:280:19","nodeType":"YulBlock","src":"10567:280:19","statements":[{"nativeSrc":"10577:26:19","nodeType":"YulVariableDeclaration","src":"10577:26:19","value":{"arguments":[{"name":"value","nativeSrc":"10597:5:19","nodeType":"YulIdentifier","src":"10597:5:19"}],"functionName":{"name":"mload","nativeSrc":"10591:5:19","nodeType":"YulIdentifier","src":"10591:5:19"},"nativeSrc":"10591:12:19","nodeType":"YulFunctionCall","src":"10591:12:19"},"variables":[{"name":"length","nativeSrc":"10581:6:19","nodeType":"YulTypedName","src":"10581:6:19","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"10619:3:19","nodeType":"YulIdentifier","src":"10619:3:19"},{"name":"length","nativeSrc":"10624:6:19","nodeType":"YulIdentifier","src":"10624:6:19"}],"functionName":{"name":"mstore","nativeSrc":"10612:6:19","nodeType":"YulIdentifier","src":"10612:6:19"},"nativeSrc":"10612:19:19","nodeType":"YulFunctionCall","src":"10612:19:19"},"nativeSrc":"10612:19:19","nodeType":"YulExpressionStatement","src":"10612:19:19"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10679:5:19","nodeType":"YulIdentifier","src":"10679:5:19"},{"kind":"number","nativeSrc":"10686:4:19","nodeType":"YulLiteral","src":"10686:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10675:3:19","nodeType":"YulIdentifier","src":"10675:3:19"},"nativeSrc":"10675:16:19","nodeType":"YulFunctionCall","src":"10675:16:19"},{"arguments":[{"name":"pos","nativeSrc":"10697:3:19","nodeType":"YulIdentifier","src":"10697:3:19"},{"kind":"number","nativeSrc":"10702:4:19","nodeType":"YulLiteral","src":"10702:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10693:3:19","nodeType":"YulIdentifier","src":"10693:3:19"},"nativeSrc":"10693:14:19","nodeType":"YulFunctionCall","src":"10693:14:19"},{"name":"length","nativeSrc":"10709:6:19","nodeType":"YulIdentifier","src":"10709:6:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"10640:34:19","nodeType":"YulIdentifier","src":"10640:34:19"},"nativeSrc":"10640:76:19","nodeType":"YulFunctionCall","src":"10640:76:19"},"nativeSrc":"10640:76:19","nodeType":"YulExpressionStatement","src":"10640:76:19"},{"nativeSrc":"10725:116:19","nodeType":"YulAssignment","src":"10725:116:19","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10740:3:19","nodeType":"YulIdentifier","src":"10740:3:19"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"10753:6:19","nodeType":"YulIdentifier","src":"10753:6:19"},{"kind":"number","nativeSrc":"10761:2:19","nodeType":"YulLiteral","src":"10761:2:19","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"10749:3:19","nodeType":"YulIdentifier","src":"10749:3:19"},"nativeSrc":"10749:15:19","nodeType":"YulFunctionCall","src":"10749:15:19"},{"kind":"number","nativeSrc":"10766:66:19","nodeType":"YulLiteral","src":"10766:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"10745:3:19","nodeType":"YulIdentifier","src":"10745:3:19"},"nativeSrc":"10745:88:19","nodeType":"YulFunctionCall","src":"10745:88:19"}],"functionName":{"name":"add","nativeSrc":"10736:3:19","nodeType":"YulIdentifier","src":"10736:3:19"},"nativeSrc":"10736:98:19","nodeType":"YulFunctionCall","src":"10736:98:19"},{"kind":"number","nativeSrc":"10836:4:19","nodeType":"YulLiteral","src":"10836:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10732:3:19","nodeType":"YulIdentifier","src":"10732:3:19"},"nativeSrc":"10732:109:19","nodeType":"YulFunctionCall","src":"10732:109:19"},"variableNames":[{"name":"end","nativeSrc":"10725:3:19","nodeType":"YulIdentifier","src":"10725:3:19"}]}]},"name":"abi_encode_string","nativeSrc":"10517:330:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10544:5:19","nodeType":"YulTypedName","src":"10544:5:19","type":""},{"name":"pos","nativeSrc":"10551:3:19","nodeType":"YulTypedName","src":"10551:3:19","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10559:3:19","nodeType":"YulTypedName","src":"10559:3:19","type":""}],"src":"10517:330:19"},{"body":{"nativeSrc":"11001:142:19","nodeType":"YulBlock","src":"11001:142:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11018:9:19","nodeType":"YulIdentifier","src":"11018:9:19"},{"kind":"number","nativeSrc":"11029:2:19","nodeType":"YulLiteral","src":"11029:2:19","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"11011:6:19","nodeType":"YulIdentifier","src":"11011:6:19"},"nativeSrc":"11011:21:19","nodeType":"YulFunctionCall","src":"11011:21:19"},"nativeSrc":"11011:21:19","nodeType":"YulExpressionStatement","src":"11011:21:19"},{"nativeSrc":"11041:53:19","nodeType":"YulAssignment","src":"11041:53:19","value":{"arguments":[{"name":"value0","nativeSrc":"11067:6:19","nodeType":"YulIdentifier","src":"11067:6:19"},{"arguments":[{"name":"headStart","nativeSrc":"11079:9:19","nodeType":"YulIdentifier","src":"11079:9:19"},{"kind":"number","nativeSrc":"11090:2:19","nodeType":"YulLiteral","src":"11090:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11075:3:19","nodeType":"YulIdentifier","src":"11075:3:19"},"nativeSrc":"11075:18:19","nodeType":"YulFunctionCall","src":"11075:18:19"}],"functionName":{"name":"abi_encode_string","nativeSrc":"11049:17:19","nodeType":"YulIdentifier","src":"11049:17:19"},"nativeSrc":"11049:45:19","nodeType":"YulFunctionCall","src":"11049:45:19"},"variableNames":[{"name":"tail","nativeSrc":"11041:4:19","nodeType":"YulIdentifier","src":"11041:4:19"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11114:9:19","nodeType":"YulIdentifier","src":"11114:9:19"},{"kind":"number","nativeSrc":"11125:2:19","nodeType":"YulLiteral","src":"11125:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11110:3:19","nodeType":"YulIdentifier","src":"11110:3:19"},"nativeSrc":"11110:18:19","nodeType":"YulFunctionCall","src":"11110:18:19"},{"name":"value1","nativeSrc":"11130:6:19","nodeType":"YulIdentifier","src":"11130:6:19"}],"functionName":{"name":"mstore","nativeSrc":"11103:6:19","nodeType":"YulIdentifier","src":"11103:6:19"},"nativeSrc":"11103:34:19","nodeType":"YulFunctionCall","src":"11103:34:19"},"nativeSrc":"11103:34:19","nodeType":"YulExpressionStatement","src":"11103:34:19"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed","nativeSrc":"10852:291:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10962:9:19","nodeType":"YulTypedName","src":"10962:9:19","type":""},{"name":"value1","nativeSrc":"10973:6:19","nodeType":"YulTypedName","src":"10973:6:19","type":""},{"name":"value0","nativeSrc":"10981:6:19","nodeType":"YulTypedName","src":"10981:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10992:4:19","nodeType":"YulTypedName","src":"10992:4:19","type":""}],"src":"10852:291:19"},{"body":{"nativeSrc":"11229:103:19","nodeType":"YulBlock","src":"11229:103:19","statements":[{"body":{"nativeSrc":"11275:16:19","nodeType":"YulBlock","src":"11275:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11284:1:19","nodeType":"YulLiteral","src":"11284:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"11287:1:19","nodeType":"YulLiteral","src":"11287:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11277:6:19","nodeType":"YulIdentifier","src":"11277:6:19"},"nativeSrc":"11277:12:19","nodeType":"YulFunctionCall","src":"11277:12:19"},"nativeSrc":"11277:12:19","nodeType":"YulExpressionStatement","src":"11277:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11250:7:19","nodeType":"YulIdentifier","src":"11250:7:19"},{"name":"headStart","nativeSrc":"11259:9:19","nodeType":"YulIdentifier","src":"11259:9:19"}],"functionName":{"name":"sub","nativeSrc":"11246:3:19","nodeType":"YulIdentifier","src":"11246:3:19"},"nativeSrc":"11246:23:19","nodeType":"YulFunctionCall","src":"11246:23:19"},{"kind":"number","nativeSrc":"11271:2:19","nodeType":"YulLiteral","src":"11271:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11242:3:19","nodeType":"YulIdentifier","src":"11242:3:19"},"nativeSrc":"11242:32:19","nodeType":"YulFunctionCall","src":"11242:32:19"},"nativeSrc":"11239:52:19","nodeType":"YulIf","src":"11239:52:19"},{"nativeSrc":"11300:26:19","nodeType":"YulAssignment","src":"11300:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"11316:9:19","nodeType":"YulIdentifier","src":"11316:9:19"}],"functionName":{"name":"mload","nativeSrc":"11310:5:19","nodeType":"YulIdentifier","src":"11310:5:19"},"nativeSrc":"11310:16:19","nodeType":"YulFunctionCall","src":"11310:16:19"},"variableNames":[{"name":"value0","nativeSrc":"11300:6:19","nodeType":"YulIdentifier","src":"11300:6:19"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"11148:184:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11195:9:19","nodeType":"YulTypedName","src":"11195:9:19","type":""},{"name":"dataEnd","nativeSrc":"11206:7:19","nodeType":"YulTypedName","src":"11206:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11218:6:19","nodeType":"YulTypedName","src":"11218:6:19","type":""}],"src":"11148:184:19"},{"body":{"nativeSrc":"11511:165:19","nodeType":"YulBlock","src":"11511:165:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11528:9:19","nodeType":"YulIdentifier","src":"11528:9:19"},{"kind":"number","nativeSrc":"11539:2:19","nodeType":"YulLiteral","src":"11539:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11521:6:19","nodeType":"YulIdentifier","src":"11521:6:19"},"nativeSrc":"11521:21:19","nodeType":"YulFunctionCall","src":"11521:21:19"},"nativeSrc":"11521:21:19","nodeType":"YulExpressionStatement","src":"11521:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11562:9:19","nodeType":"YulIdentifier","src":"11562:9:19"},{"kind":"number","nativeSrc":"11573:2:19","nodeType":"YulLiteral","src":"11573:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11558:3:19","nodeType":"YulIdentifier","src":"11558:3:19"},"nativeSrc":"11558:18:19","nodeType":"YulFunctionCall","src":"11558:18:19"},{"kind":"number","nativeSrc":"11578:2:19","nodeType":"YulLiteral","src":"11578:2:19","type":"","value":"15"}],"functionName":{"name":"mstore","nativeSrc":"11551:6:19","nodeType":"YulIdentifier","src":"11551:6:19"},"nativeSrc":"11551:30:19","nodeType":"YulFunctionCall","src":"11551:30:19"},"nativeSrc":"11551:30:19","nodeType":"YulExpressionStatement","src":"11551:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11601:9:19","nodeType":"YulIdentifier","src":"11601:9:19"},{"kind":"number","nativeSrc":"11612:2:19","nodeType":"YulLiteral","src":"11612:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11597:3:19","nodeType":"YulIdentifier","src":"11597:3:19"},"nativeSrc":"11597:18:19","nodeType":"YulFunctionCall","src":"11597:18:19"},{"hexValue":"4e6f742061206465706f7369746f72","kind":"string","nativeSrc":"11617:17:19","nodeType":"YulLiteral","src":"11617:17:19","type":"","value":"Not a depositor"}],"functionName":{"name":"mstore","nativeSrc":"11590:6:19","nodeType":"YulIdentifier","src":"11590:6:19"},"nativeSrc":"11590:45:19","nodeType":"YulFunctionCall","src":"11590:45:19"},"nativeSrc":"11590:45:19","nodeType":"YulExpressionStatement","src":"11590:45:19"},{"nativeSrc":"11644:26:19","nodeType":"YulAssignment","src":"11644:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"11656:9:19","nodeType":"YulIdentifier","src":"11656:9:19"},{"kind":"number","nativeSrc":"11667:2:19","nodeType":"YulLiteral","src":"11667:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11652:3:19","nodeType":"YulIdentifier","src":"11652:3:19"},"nativeSrc":"11652:18:19","nodeType":"YulFunctionCall","src":"11652:18:19"},"variableNames":[{"name":"tail","nativeSrc":"11644:4:19","nodeType":"YulIdentifier","src":"11644:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_a187824b079404be555a1b9418b8031a46fa39c4a1a1c5cfe26b3286229770d1__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11337:339:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11488:9:19","nodeType":"YulTypedName","src":"11488:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11502:4:19","nodeType":"YulTypedName","src":"11502:4:19","type":""}],"src":"11337:339:19"},{"body":{"nativeSrc":"11713:152:19","nodeType":"YulBlock","src":"11713:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11730:1:19","nodeType":"YulLiteral","src":"11730:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"11733:77:19","nodeType":"YulLiteral","src":"11733:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11723:6:19","nodeType":"YulIdentifier","src":"11723:6:19"},"nativeSrc":"11723:88:19","nodeType":"YulFunctionCall","src":"11723:88:19"},"nativeSrc":"11723:88:19","nodeType":"YulExpressionStatement","src":"11723:88:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11827:1:19","nodeType":"YulLiteral","src":"11827:1:19","type":"","value":"4"},{"kind":"number","nativeSrc":"11830:4:19","nodeType":"YulLiteral","src":"11830:4:19","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"11820:6:19","nodeType":"YulIdentifier","src":"11820:6:19"},"nativeSrc":"11820:15:19","nodeType":"YulFunctionCall","src":"11820:15:19"},"nativeSrc":"11820:15:19","nodeType":"YulExpressionStatement","src":"11820:15:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11851:1:19","nodeType":"YulLiteral","src":"11851:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"11854:4:19","nodeType":"YulLiteral","src":"11854:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11844:6:19","nodeType":"YulIdentifier","src":"11844:6:19"},"nativeSrc":"11844:15:19","nodeType":"YulFunctionCall","src":"11844:15:19"},"nativeSrc":"11844:15:19","nodeType":"YulExpressionStatement","src":"11844:15:19"}]},"name":"panic_error_0x11","nativeSrc":"11681:184:19","nodeType":"YulFunctionDefinition","src":"11681:184:19"},{"body":{"nativeSrc":"11918:77:19","nodeType":"YulBlock","src":"11918:77:19","statements":[{"nativeSrc":"11928:16:19","nodeType":"YulAssignment","src":"11928:16:19","value":{"arguments":[{"name":"x","nativeSrc":"11939:1:19","nodeType":"YulIdentifier","src":"11939:1:19"},{"name":"y","nativeSrc":"11942:1:19","nodeType":"YulIdentifier","src":"11942:1:19"}],"functionName":{"name":"add","nativeSrc":"11935:3:19","nodeType":"YulIdentifier","src":"11935:3:19"},"nativeSrc":"11935:9:19","nodeType":"YulFunctionCall","src":"11935:9:19"},"variableNames":[{"name":"sum","nativeSrc":"11928:3:19","nodeType":"YulIdentifier","src":"11928:3:19"}]},{"body":{"nativeSrc":"11967:22:19","nodeType":"YulBlock","src":"11967:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11969:16:19","nodeType":"YulIdentifier","src":"11969:16:19"},"nativeSrc":"11969:18:19","nodeType":"YulFunctionCall","src":"11969:18:19"},"nativeSrc":"11969:18:19","nodeType":"YulExpressionStatement","src":"11969:18:19"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"11959:1:19","nodeType":"YulIdentifier","src":"11959:1:19"},{"name":"sum","nativeSrc":"11962:3:19","nodeType":"YulIdentifier","src":"11962:3:19"}],"functionName":{"name":"gt","nativeSrc":"11956:2:19","nodeType":"YulIdentifier","src":"11956:2:19"},"nativeSrc":"11956:10:19","nodeType":"YulFunctionCall","src":"11956:10:19"},"nativeSrc":"11953:36:19","nodeType":"YulIf","src":"11953:36:19"}]},"name":"checked_add_t_uint256","nativeSrc":"11870:125:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11901:1:19","nodeType":"YulTypedName","src":"11901:1:19","type":""},{"name":"y","nativeSrc":"11904:1:19","nodeType":"YulTypedName","src":"11904:1:19","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"11910:3:19","nodeType":"YulTypedName","src":"11910:3:19","type":""}],"src":"11870:125:19"},{"body":{"nativeSrc":"12157:162:19","nodeType":"YulBlock","src":"12157:162:19","statements":[{"nativeSrc":"12167:26:19","nodeType":"YulAssignment","src":"12167:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"12179:9:19","nodeType":"YulIdentifier","src":"12179:9:19"},{"kind":"number","nativeSrc":"12190:2:19","nodeType":"YulLiteral","src":"12190:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12175:3:19","nodeType":"YulIdentifier","src":"12175:3:19"},"nativeSrc":"12175:18:19","nodeType":"YulFunctionCall","src":"12175:18:19"},"variableNames":[{"name":"tail","nativeSrc":"12167:4:19","nodeType":"YulIdentifier","src":"12167:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12209:9:19","nodeType":"YulIdentifier","src":"12209:9:19"},{"name":"value0","nativeSrc":"12220:6:19","nodeType":"YulIdentifier","src":"12220:6:19"}],"functionName":{"name":"mstore","nativeSrc":"12202:6:19","nodeType":"YulIdentifier","src":"12202:6:19"},"nativeSrc":"12202:25:19","nodeType":"YulFunctionCall","src":"12202:25:19"},"nativeSrc":"12202:25:19","nodeType":"YulExpressionStatement","src":"12202:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12247:9:19","nodeType":"YulIdentifier","src":"12247:9:19"},{"kind":"number","nativeSrc":"12258:2:19","nodeType":"YulLiteral","src":"12258:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12243:3:19","nodeType":"YulIdentifier","src":"12243:3:19"},"nativeSrc":"12243:18:19","nodeType":"YulFunctionCall","src":"12243:18:19"},{"name":"value1","nativeSrc":"12263:6:19","nodeType":"YulIdentifier","src":"12263:6:19"}],"functionName":{"name":"mstore","nativeSrc":"12236:6:19","nodeType":"YulIdentifier","src":"12236:6:19"},"nativeSrc":"12236:34:19","nodeType":"YulFunctionCall","src":"12236:34:19"},"nativeSrc":"12236:34:19","nodeType":"YulExpressionStatement","src":"12236:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12290:9:19","nodeType":"YulIdentifier","src":"12290:9:19"},{"kind":"number","nativeSrc":"12301:2:19","nodeType":"YulLiteral","src":"12301:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12286:3:19","nodeType":"YulIdentifier","src":"12286:3:19"},"nativeSrc":"12286:18:19","nodeType":"YulFunctionCall","src":"12286:18:19"},{"name":"value2","nativeSrc":"12306:6:19","nodeType":"YulIdentifier","src":"12306:6:19"}],"functionName":{"name":"mstore","nativeSrc":"12279:6:19","nodeType":"YulIdentifier","src":"12279:6:19"},"nativeSrc":"12279:34:19","nodeType":"YulFunctionCall","src":"12279:34:19"},"nativeSrc":"12279:34:19","nodeType":"YulExpressionStatement","src":"12279:34:19"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"12000:319:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12110:9:19","nodeType":"YulTypedName","src":"12110:9:19","type":""},{"name":"value2","nativeSrc":"12121:6:19","nodeType":"YulTypedName","src":"12121:6:19","type":""},{"name":"value1","nativeSrc":"12129:6:19","nodeType":"YulTypedName","src":"12129:6:19","type":""},{"name":"value0","nativeSrc":"12137:6:19","nodeType":"YulTypedName","src":"12137:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12148:4:19","nodeType":"YulTypedName","src":"12148:4:19","type":""}],"src":"12000:319:19"},{"body":{"nativeSrc":"12498:237:19","nodeType":"YulBlock","src":"12498:237:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12515:9:19","nodeType":"YulIdentifier","src":"12515:9:19"},{"kind":"number","nativeSrc":"12526:2:19","nodeType":"YulLiteral","src":"12526:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12508:6:19","nodeType":"YulIdentifier","src":"12508:6:19"},"nativeSrc":"12508:21:19","nodeType":"YulFunctionCall","src":"12508:21:19"},"nativeSrc":"12508:21:19","nodeType":"YulExpressionStatement","src":"12508:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12549:9:19","nodeType":"YulIdentifier","src":"12549:9:19"},{"kind":"number","nativeSrc":"12560:2:19","nodeType":"YulLiteral","src":"12560:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12545:3:19","nodeType":"YulIdentifier","src":"12545:3:19"},"nativeSrc":"12545:18:19","nodeType":"YulFunctionCall","src":"12545:18:19"},{"kind":"number","nativeSrc":"12565:2:19","nodeType":"YulLiteral","src":"12565:2:19","type":"","value":"47"}],"functionName":{"name":"mstore","nativeSrc":"12538:6:19","nodeType":"YulIdentifier","src":"12538:6:19"},"nativeSrc":"12538:30:19","nodeType":"YulFunctionCall","src":"12538:30:19"},"nativeSrc":"12538:30:19","nodeType":"YulExpressionStatement","src":"12538:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12588:9:19","nodeType":"YulIdentifier","src":"12588:9:19"},{"kind":"number","nativeSrc":"12599:2:19","nodeType":"YulLiteral","src":"12599:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12584:3:19","nodeType":"YulIdentifier","src":"12584:3:19"},"nativeSrc":"12584:18:19","nodeType":"YulFunctionCall","src":"12584:18:19"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nativeSrc":"12604:34:19","nodeType":"YulLiteral","src":"12604:34:19","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nativeSrc":"12577:6:19","nodeType":"YulIdentifier","src":"12577:6:19"},"nativeSrc":"12577:62:19","nodeType":"YulFunctionCall","src":"12577:62:19"},"nativeSrc":"12577:62:19","nodeType":"YulExpressionStatement","src":"12577:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12659:9:19","nodeType":"YulIdentifier","src":"12659:9:19"},{"kind":"number","nativeSrc":"12670:2:19","nodeType":"YulLiteral","src":"12670:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12655:3:19","nodeType":"YulIdentifier","src":"12655:3:19"},"nativeSrc":"12655:18:19","nodeType":"YulFunctionCall","src":"12655:18:19"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nativeSrc":"12675:17:19","nodeType":"YulLiteral","src":"12675:17:19","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nativeSrc":"12648:6:19","nodeType":"YulIdentifier","src":"12648:6:19"},"nativeSrc":"12648:45:19","nodeType":"YulFunctionCall","src":"12648:45:19"},"nativeSrc":"12648:45:19","nodeType":"YulExpressionStatement","src":"12648:45:19"},{"nativeSrc":"12702:27:19","nodeType":"YulAssignment","src":"12702:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"12714:9:19","nodeType":"YulIdentifier","src":"12714:9:19"},{"kind":"number","nativeSrc":"12725:3:19","nodeType":"YulLiteral","src":"12725:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12710:3:19","nodeType":"YulIdentifier","src":"12710:3:19"},"nativeSrc":"12710:19:19","nodeType":"YulFunctionCall","src":"12710:19:19"},"variableNames":[{"name":"tail","nativeSrc":"12702:4:19","nodeType":"YulIdentifier","src":"12702:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12324:411:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12475:9:19","nodeType":"YulTypedName","src":"12475:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12489:4:19","nodeType":"YulTypedName","src":"12489:4:19","type":""}],"src":"12324:411:19"},{"body":{"nativeSrc":"12914:234:19","nodeType":"YulBlock","src":"12914:234:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12931:9:19","nodeType":"YulIdentifier","src":"12931:9:19"},{"kind":"number","nativeSrc":"12942:2:19","nodeType":"YulLiteral","src":"12942:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12924:6:19","nodeType":"YulIdentifier","src":"12924:6:19"},"nativeSrc":"12924:21:19","nodeType":"YulFunctionCall","src":"12924:21:19"},"nativeSrc":"12924:21:19","nodeType":"YulExpressionStatement","src":"12924:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12965:9:19","nodeType":"YulIdentifier","src":"12965:9:19"},{"kind":"number","nativeSrc":"12976:2:19","nodeType":"YulLiteral","src":"12976:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12961:3:19","nodeType":"YulIdentifier","src":"12961:3:19"},"nativeSrc":"12961:18:19","nodeType":"YulFunctionCall","src":"12961:18:19"},{"kind":"number","nativeSrc":"12981:2:19","nodeType":"YulLiteral","src":"12981:2:19","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"12954:6:19","nodeType":"YulIdentifier","src":"12954:6:19"},"nativeSrc":"12954:30:19","nodeType":"YulFunctionCall","src":"12954:30:19"},"nativeSrc":"12954:30:19","nodeType":"YulExpressionStatement","src":"12954:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13004:9:19","nodeType":"YulIdentifier","src":"13004:9:19"},{"kind":"number","nativeSrc":"13015:2:19","nodeType":"YulLiteral","src":"13015:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13000:3:19","nodeType":"YulIdentifier","src":"13000:3:19"},"nativeSrc":"13000:18:19","nodeType":"YulFunctionCall","src":"13000:18:19"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"13020:34:19","nodeType":"YulLiteral","src":"13020:34:19","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"12993:6:19","nodeType":"YulIdentifier","src":"12993:6:19"},"nativeSrc":"12993:62:19","nodeType":"YulFunctionCall","src":"12993:62:19"},"nativeSrc":"12993:62:19","nodeType":"YulExpressionStatement","src":"12993:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13075:9:19","nodeType":"YulIdentifier","src":"13075:9:19"},{"kind":"number","nativeSrc":"13086:2:19","nodeType":"YulLiteral","src":"13086:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13071:3:19","nodeType":"YulIdentifier","src":"13071:3:19"},"nativeSrc":"13071:18:19","nodeType":"YulFunctionCall","src":"13071:18:19"},{"hexValue":"64656c656761746563616c6c","kind":"string","nativeSrc":"13091:14:19","nodeType":"YulLiteral","src":"13091:14:19","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"13064:6:19","nodeType":"YulIdentifier","src":"13064:6:19"},"nativeSrc":"13064:42:19","nodeType":"YulFunctionCall","src":"13064:42:19"},"nativeSrc":"13064:42:19","nodeType":"YulExpressionStatement","src":"13064:42:19"},{"nativeSrc":"13115:27:19","nodeType":"YulAssignment","src":"13115:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"13127:9:19","nodeType":"YulIdentifier","src":"13127:9:19"},{"kind":"number","nativeSrc":"13138:3:19","nodeType":"YulLiteral","src":"13138:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13123:3:19","nodeType":"YulIdentifier","src":"13123:3:19"},"nativeSrc":"13123:19:19","nodeType":"YulFunctionCall","src":"13123:19:19"},"variableNames":[{"name":"tail","nativeSrc":"13115:4:19","nodeType":"YulIdentifier","src":"13115:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12740:408:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12891:9:19","nodeType":"YulTypedName","src":"12891:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12905:4:19","nodeType":"YulTypedName","src":"12905:4:19","type":""}],"src":"12740:408:19"},{"body":{"nativeSrc":"13327:234:19","nodeType":"YulBlock","src":"13327:234:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13344:9:19","nodeType":"YulIdentifier","src":"13344:9:19"},{"kind":"number","nativeSrc":"13355:2:19","nodeType":"YulLiteral","src":"13355:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13337:6:19","nodeType":"YulIdentifier","src":"13337:6:19"},"nativeSrc":"13337:21:19","nodeType":"YulFunctionCall","src":"13337:21:19"},"nativeSrc":"13337:21:19","nodeType":"YulExpressionStatement","src":"13337:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13378:9:19","nodeType":"YulIdentifier","src":"13378:9:19"},{"kind":"number","nativeSrc":"13389:2:19","nodeType":"YulLiteral","src":"13389:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13374:3:19","nodeType":"YulIdentifier","src":"13374:3:19"},"nativeSrc":"13374:18:19","nodeType":"YulFunctionCall","src":"13374:18:19"},{"kind":"number","nativeSrc":"13394:2:19","nodeType":"YulLiteral","src":"13394:2:19","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"13367:6:19","nodeType":"YulIdentifier","src":"13367:6:19"},"nativeSrc":"13367:30:19","nodeType":"YulFunctionCall","src":"13367:30:19"},"nativeSrc":"13367:30:19","nodeType":"YulExpressionStatement","src":"13367:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13417:9:19","nodeType":"YulIdentifier","src":"13417:9:19"},{"kind":"number","nativeSrc":"13428:2:19","nodeType":"YulLiteral","src":"13428:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13413:3:19","nodeType":"YulIdentifier","src":"13413:3:19"},"nativeSrc":"13413:18:19","nodeType":"YulFunctionCall","src":"13413:18:19"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"13433:34:19","nodeType":"YulLiteral","src":"13433:34:19","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"13406:6:19","nodeType":"YulIdentifier","src":"13406:6:19"},"nativeSrc":"13406:62:19","nodeType":"YulFunctionCall","src":"13406:62:19"},"nativeSrc":"13406:62:19","nodeType":"YulExpressionStatement","src":"13406:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13488:9:19","nodeType":"YulIdentifier","src":"13488:9:19"},{"kind":"number","nativeSrc":"13499:2:19","nodeType":"YulLiteral","src":"13499:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13484:3:19","nodeType":"YulIdentifier","src":"13484:3:19"},"nativeSrc":"13484:18:19","nodeType":"YulFunctionCall","src":"13484:18:19"},{"hexValue":"6163746976652070726f7879","kind":"string","nativeSrc":"13504:14:19","nodeType":"YulLiteral","src":"13504:14:19","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nativeSrc":"13477:6:19","nodeType":"YulIdentifier","src":"13477:6:19"},"nativeSrc":"13477:42:19","nodeType":"YulFunctionCall","src":"13477:42:19"},"nativeSrc":"13477:42:19","nodeType":"YulExpressionStatement","src":"13477:42:19"},{"nativeSrc":"13528:27:19","nodeType":"YulAssignment","src":"13528:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"13540:9:19","nodeType":"YulIdentifier","src":"13540:9:19"},{"kind":"number","nativeSrc":"13551:3:19","nodeType":"YulLiteral","src":"13551:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13536:3:19","nodeType":"YulIdentifier","src":"13536:3:19"},"nativeSrc":"13536:19:19","nodeType":"YulFunctionCall","src":"13536:19:19"},"variableNames":[{"name":"tail","nativeSrc":"13528:4:19","nodeType":"YulIdentifier","src":"13528:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13153:408:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13304:9:19","nodeType":"YulTypedName","src":"13304:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13318:4:19","nodeType":"YulTypedName","src":"13318:4:19","type":""}],"src":"13153:408:19"},{"body":{"nativeSrc":"13740:162:19","nodeType":"YulBlock","src":"13740:162:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13757:9:19","nodeType":"YulIdentifier","src":"13757:9:19"},{"kind":"number","nativeSrc":"13768:2:19","nodeType":"YulLiteral","src":"13768:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13750:6:19","nodeType":"YulIdentifier","src":"13750:6:19"},"nativeSrc":"13750:21:19","nodeType":"YulFunctionCall","src":"13750:21:19"},"nativeSrc":"13750:21:19","nodeType":"YulExpressionStatement","src":"13750:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13791:9:19","nodeType":"YulIdentifier","src":"13791:9:19"},{"kind":"number","nativeSrc":"13802:2:19","nodeType":"YulLiteral","src":"13802:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13787:3:19","nodeType":"YulIdentifier","src":"13787:3:19"},"nativeSrc":"13787:18:19","nodeType":"YulFunctionCall","src":"13787:18:19"},{"kind":"number","nativeSrc":"13807:2:19","nodeType":"YulLiteral","src":"13807:2:19","type":"","value":"12"}],"functionName":{"name":"mstore","nativeSrc":"13780:6:19","nodeType":"YulIdentifier","src":"13780:6:19"},"nativeSrc":"13780:30:19","nodeType":"YulFunctionCall","src":"13780:30:19"},"nativeSrc":"13780:30:19","nodeType":"YulExpressionStatement","src":"13780:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13830:9:19","nodeType":"YulIdentifier","src":"13830:9:19"},{"kind":"number","nativeSrc":"13841:2:19","nodeType":"YulLiteral","src":"13841:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13826:3:19","nodeType":"YulIdentifier","src":"13826:3:19"},"nativeSrc":"13826:18:19","nodeType":"YulFunctionCall","src":"13826:18:19"},{"hexValue":"4e6f7420616e2061646d696e","kind":"string","nativeSrc":"13846:14:19","nodeType":"YulLiteral","src":"13846:14:19","type":"","value":"Not an admin"}],"functionName":{"name":"mstore","nativeSrc":"13819:6:19","nodeType":"YulIdentifier","src":"13819:6:19"},"nativeSrc":"13819:42:19","nodeType":"YulFunctionCall","src":"13819:42:19"},"nativeSrc":"13819:42:19","nodeType":"YulExpressionStatement","src":"13819:42:19"},{"nativeSrc":"13870:26:19","nodeType":"YulAssignment","src":"13870:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"13882:9:19","nodeType":"YulIdentifier","src":"13882:9:19"},{"kind":"number","nativeSrc":"13893:2:19","nodeType":"YulLiteral","src":"13893:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13878:3:19","nodeType":"YulIdentifier","src":"13878:3:19"},"nativeSrc":"13878:18:19","nodeType":"YulFunctionCall","src":"13878:18:19"},"variableNames":[{"name":"tail","nativeSrc":"13870:4:19","nodeType":"YulIdentifier","src":"13870:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13566:336:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13717:9:19","nodeType":"YulTypedName","src":"13717:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13731:4:19","nodeType":"YulTypedName","src":"13731:4:19","type":""}],"src":"13566:336:19"},{"body":{"nativeSrc":"13939:152:19","nodeType":"YulBlock","src":"13939:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13956:1:19","nodeType":"YulLiteral","src":"13956:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"13959:77:19","nodeType":"YulLiteral","src":"13959:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"13949:6:19","nodeType":"YulIdentifier","src":"13949:6:19"},"nativeSrc":"13949:88:19","nodeType":"YulFunctionCall","src":"13949:88:19"},"nativeSrc":"13949:88:19","nodeType":"YulExpressionStatement","src":"13949:88:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14053:1:19","nodeType":"YulLiteral","src":"14053:1:19","type":"","value":"4"},{"kind":"number","nativeSrc":"14056:4:19","nodeType":"YulLiteral","src":"14056:4:19","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"14046:6:19","nodeType":"YulIdentifier","src":"14046:6:19"},"nativeSrc":"14046:15:19","nodeType":"YulFunctionCall","src":"14046:15:19"},"nativeSrc":"14046:15:19","nodeType":"YulExpressionStatement","src":"14046:15:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14077:1:19","nodeType":"YulLiteral","src":"14077:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"14080:4:19","nodeType":"YulLiteral","src":"14080:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14070:6:19","nodeType":"YulIdentifier","src":"14070:6:19"},"nativeSrc":"14070:15:19","nodeType":"YulFunctionCall","src":"14070:15:19"},"nativeSrc":"14070:15:19","nodeType":"YulExpressionStatement","src":"14070:15:19"}]},"name":"panic_error_0x32","nativeSrc":"13907:184:19","nodeType":"YulFunctionDefinition","src":"13907:184:19"},{"body":{"nativeSrc":"14270:176:19","nodeType":"YulBlock","src":"14270:176:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14287:9:19","nodeType":"YulIdentifier","src":"14287:9:19"},{"kind":"number","nativeSrc":"14298:2:19","nodeType":"YulLiteral","src":"14298:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14280:6:19","nodeType":"YulIdentifier","src":"14280:6:19"},"nativeSrc":"14280:21:19","nodeType":"YulFunctionCall","src":"14280:21:19"},"nativeSrc":"14280:21:19","nodeType":"YulExpressionStatement","src":"14280:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14321:9:19","nodeType":"YulIdentifier","src":"14321:9:19"},{"kind":"number","nativeSrc":"14332:2:19","nodeType":"YulLiteral","src":"14332:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14317:3:19","nodeType":"YulIdentifier","src":"14317:3:19"},"nativeSrc":"14317:18:19","nodeType":"YulFunctionCall","src":"14317:18:19"},{"kind":"number","nativeSrc":"14337:2:19","nodeType":"YulLiteral","src":"14337:2:19","type":"","value":"26"}],"functionName":{"name":"mstore","nativeSrc":"14310:6:19","nodeType":"YulIdentifier","src":"14310:6:19"},"nativeSrc":"14310:30:19","nodeType":"YulFunctionCall","src":"14310:30:19"},"nativeSrc":"14310:30:19","nodeType":"YulExpressionStatement","src":"14310:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14360:9:19","nodeType":"YulIdentifier","src":"14360:9:19"},{"kind":"number","nativeSrc":"14371:2:19","nodeType":"YulLiteral","src":"14371:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14356:3:19","nodeType":"YulIdentifier","src":"14356:3:19"},"nativeSrc":"14356:18:19","nodeType":"YulFunctionCall","src":"14356:18:19"},{"hexValue":"526561736f6e20636f646520616c726561647920657869737473","kind":"string","nativeSrc":"14376:28:19","nodeType":"YulLiteral","src":"14376:28:19","type":"","value":"Reason code already exists"}],"functionName":{"name":"mstore","nativeSrc":"14349:6:19","nodeType":"YulIdentifier","src":"14349:6:19"},"nativeSrc":"14349:56:19","nodeType":"YulFunctionCall","src":"14349:56:19"},"nativeSrc":"14349:56:19","nodeType":"YulExpressionStatement","src":"14349:56:19"},{"nativeSrc":"14414:26:19","nodeType":"YulAssignment","src":"14414:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"14426:9:19","nodeType":"YulIdentifier","src":"14426:9:19"},{"kind":"number","nativeSrc":"14437:2:19","nodeType":"YulLiteral","src":"14437:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14422:3:19","nodeType":"YulIdentifier","src":"14422:3:19"},"nativeSrc":"14422:18:19","nodeType":"YulFunctionCall","src":"14422:18:19"},"variableNames":[{"name":"tail","nativeSrc":"14414:4:19","nodeType":"YulIdentifier","src":"14414:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_549711b1ccfcfb6570cbeff13c1a55762b5fcc708885df874c421714530ed56a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14096:350:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14247:9:19","nodeType":"YulTypedName","src":"14247:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14261:4:19","nodeType":"YulTypedName","src":"14261:4:19","type":""}],"src":"14096:350:19"},{"body":{"nativeSrc":"14498:148:19","nodeType":"YulBlock","src":"14498:148:19","statements":[{"body":{"nativeSrc":"14589:22:19","nodeType":"YulBlock","src":"14589:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"14591:16:19","nodeType":"YulIdentifier","src":"14591:16:19"},"nativeSrc":"14591:18:19","nodeType":"YulFunctionCall","src":"14591:18:19"},"nativeSrc":"14591:18:19","nodeType":"YulExpressionStatement","src":"14591:18:19"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"14514:5:19","nodeType":"YulIdentifier","src":"14514:5:19"},{"kind":"number","nativeSrc":"14521:66:19","nodeType":"YulLiteral","src":"14521:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"14511:2:19","nodeType":"YulIdentifier","src":"14511:2:19"},"nativeSrc":"14511:77:19","nodeType":"YulFunctionCall","src":"14511:77:19"},"nativeSrc":"14508:103:19","nodeType":"YulIf","src":"14508:103:19"},{"nativeSrc":"14620:20:19","nodeType":"YulAssignment","src":"14620:20:19","value":{"arguments":[{"name":"value","nativeSrc":"14631:5:19","nodeType":"YulIdentifier","src":"14631:5:19"},{"kind":"number","nativeSrc":"14638:1:19","nodeType":"YulLiteral","src":"14638:1:19","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14627:3:19","nodeType":"YulIdentifier","src":"14627:3:19"},"nativeSrc":"14627:13:19","nodeType":"YulFunctionCall","src":"14627:13:19"},"variableNames":[{"name":"ret","nativeSrc":"14620:3:19","nodeType":"YulIdentifier","src":"14620:3:19"}]}]},"name":"increment_t_uint256","nativeSrc":"14451:195:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14480:5:19","nodeType":"YulTypedName","src":"14480:5:19","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"14490:3:19","nodeType":"YulTypedName","src":"14490:3:19","type":""}],"src":"14451:195:19"},{"body":{"nativeSrc":"14802:481:19","nodeType":"YulBlock","src":"14802:481:19","statements":[{"nativeSrc":"14812:12:19","nodeType":"YulVariableDeclaration","src":"14812:12:19","value":{"kind":"number","nativeSrc":"14822:2:19","nodeType":"YulLiteral","src":"14822:2:19","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"14816:2:19","nodeType":"YulTypedName","src":"14816:2:19","type":""}]},{"nativeSrc":"14833:32:19","nodeType":"YulVariableDeclaration","src":"14833:32:19","value":{"arguments":[{"name":"headStart","nativeSrc":"14851:9:19","nodeType":"YulIdentifier","src":"14851:9:19"},{"name":"_1","nativeSrc":"14862:2:19","nodeType":"YulIdentifier","src":"14862:2:19"}],"functionName":{"name":"add","nativeSrc":"14847:3:19","nodeType":"YulIdentifier","src":"14847:3:19"},"nativeSrc":"14847:18:19","nodeType":"YulFunctionCall","src":"14847:18:19"},"variables":[{"name":"tail_1","nativeSrc":"14837:6:19","nodeType":"YulTypedName","src":"14837:6:19","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14881:9:19","nodeType":"YulIdentifier","src":"14881:9:19"},{"name":"_1","nativeSrc":"14892:2:19","nodeType":"YulIdentifier","src":"14892:2:19"}],"functionName":{"name":"mstore","nativeSrc":"14874:6:19","nodeType":"YulIdentifier","src":"14874:6:19"},"nativeSrc":"14874:21:19","nodeType":"YulFunctionCall","src":"14874:21:19"},"nativeSrc":"14874:21:19","nodeType":"YulExpressionStatement","src":"14874:21:19"},{"nativeSrc":"14904:17:19","nodeType":"YulVariableDeclaration","src":"14904:17:19","value":{"name":"tail_1","nativeSrc":"14915:6:19","nodeType":"YulIdentifier","src":"14915:6:19"},"variables":[{"name":"pos","nativeSrc":"14908:3:19","nodeType":"YulTypedName","src":"14908:3:19","type":""}]},{"nativeSrc":"14930:27:19","nodeType":"YulVariableDeclaration","src":"14930:27:19","value":{"arguments":[{"name":"value0","nativeSrc":"14950:6:19","nodeType":"YulIdentifier","src":"14950:6:19"}],"functionName":{"name":"mload","nativeSrc":"14944:5:19","nodeType":"YulIdentifier","src":"14944:5:19"},"nativeSrc":"14944:13:19","nodeType":"YulFunctionCall","src":"14944:13:19"},"variables":[{"name":"length","nativeSrc":"14934:6:19","nodeType":"YulTypedName","src":"14934:6:19","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"14973:6:19","nodeType":"YulIdentifier","src":"14973:6:19"},{"name":"length","nativeSrc":"14981:6:19","nodeType":"YulIdentifier","src":"14981:6:19"}],"functionName":{"name":"mstore","nativeSrc":"14966:6:19","nodeType":"YulIdentifier","src":"14966:6:19"},"nativeSrc":"14966:22:19","nodeType":"YulFunctionCall","src":"14966:22:19"},"nativeSrc":"14966:22:19","nodeType":"YulExpressionStatement","src":"14966:22:19"},{"nativeSrc":"14997:25:19","nodeType":"YulAssignment","src":"14997:25:19","value":{"arguments":[{"name":"headStart","nativeSrc":"15008:9:19","nodeType":"YulIdentifier","src":"15008:9:19"},{"kind":"number","nativeSrc":"15019:2:19","nodeType":"YulLiteral","src":"15019:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15004:3:19","nodeType":"YulIdentifier","src":"15004:3:19"},"nativeSrc":"15004:18:19","nodeType":"YulFunctionCall","src":"15004:18:19"},"variableNames":[{"name":"pos","nativeSrc":"14997:3:19","nodeType":"YulIdentifier","src":"14997:3:19"}]},{"nativeSrc":"15031:29:19","nodeType":"YulVariableDeclaration","src":"15031:29:19","value":{"arguments":[{"name":"value0","nativeSrc":"15049:6:19","nodeType":"YulIdentifier","src":"15049:6:19"},{"name":"_1","nativeSrc":"15057:2:19","nodeType":"YulIdentifier","src":"15057:2:19"}],"functionName":{"name":"add","nativeSrc":"15045:3:19","nodeType":"YulIdentifier","src":"15045:3:19"},"nativeSrc":"15045:15:19","nodeType":"YulFunctionCall","src":"15045:15:19"},"variables":[{"name":"srcPtr","nativeSrc":"15035:6:19","nodeType":"YulTypedName","src":"15035:6:19","type":""}]},{"nativeSrc":"15069:10:19","nodeType":"YulVariableDeclaration","src":"15069:10:19","value":{"kind":"number","nativeSrc":"15078:1:19","nodeType":"YulLiteral","src":"15078:1:19","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"15073:1:19","nodeType":"YulTypedName","src":"15073:1:19","type":""}]},{"body":{"nativeSrc":"15137:120:19","nodeType":"YulBlock","src":"15137:120:19","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"15158:3:19","nodeType":"YulIdentifier","src":"15158:3:19"},{"arguments":[{"name":"srcPtr","nativeSrc":"15169:6:19","nodeType":"YulIdentifier","src":"15169:6:19"}],"functionName":{"name":"mload","nativeSrc":"15163:5:19","nodeType":"YulIdentifier","src":"15163:5:19"},"nativeSrc":"15163:13:19","nodeType":"YulFunctionCall","src":"15163:13:19"}],"functionName":{"name":"mstore","nativeSrc":"15151:6:19","nodeType":"YulIdentifier","src":"15151:6:19"},"nativeSrc":"15151:26:19","nodeType":"YulFunctionCall","src":"15151:26:19"},"nativeSrc":"15151:26:19","nodeType":"YulExpressionStatement","src":"15151:26:19"},{"nativeSrc":"15190:19:19","nodeType":"YulAssignment","src":"15190:19:19","value":{"arguments":[{"name":"pos","nativeSrc":"15201:3:19","nodeType":"YulIdentifier","src":"15201:3:19"},{"name":"_1","nativeSrc":"15206:2:19","nodeType":"YulIdentifier","src":"15206:2:19"}],"functionName":{"name":"add","nativeSrc":"15197:3:19","nodeType":"YulIdentifier","src":"15197:3:19"},"nativeSrc":"15197:12:19","nodeType":"YulFunctionCall","src":"15197:12:19"},"variableNames":[{"name":"pos","nativeSrc":"15190:3:19","nodeType":"YulIdentifier","src":"15190:3:19"}]},{"nativeSrc":"15222:25:19","nodeType":"YulAssignment","src":"15222:25:19","value":{"arguments":[{"name":"srcPtr","nativeSrc":"15236:6:19","nodeType":"YulIdentifier","src":"15236:6:19"},{"name":"_1","nativeSrc":"15244:2:19","nodeType":"YulIdentifier","src":"15244:2:19"}],"functionName":{"name":"add","nativeSrc":"15232:3:19","nodeType":"YulIdentifier","src":"15232:3:19"},"nativeSrc":"15232:15:19","nodeType":"YulFunctionCall","src":"15232:15:19"},"variableNames":[{"name":"srcPtr","nativeSrc":"15222:6:19","nodeType":"YulIdentifier","src":"15222:6:19"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"15099:1:19","nodeType":"YulIdentifier","src":"15099:1:19"},{"name":"length","nativeSrc":"15102:6:19","nodeType":"YulIdentifier","src":"15102:6:19"}],"functionName":{"name":"lt","nativeSrc":"15096:2:19","nodeType":"YulIdentifier","src":"15096:2:19"},"nativeSrc":"15096:13:19","nodeType":"YulFunctionCall","src":"15096:13:19"},"nativeSrc":"15088:169:19","nodeType":"YulForLoop","post":{"nativeSrc":"15110:18:19","nodeType":"YulBlock","src":"15110:18:19","statements":[{"nativeSrc":"15112:14:19","nodeType":"YulAssignment","src":"15112:14:19","value":{"arguments":[{"name":"i","nativeSrc":"15121:1:19","nodeType":"YulIdentifier","src":"15121:1:19"},{"kind":"number","nativeSrc":"15124:1:19","nodeType":"YulLiteral","src":"15124:1:19","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"15117:3:19","nodeType":"YulIdentifier","src":"15117:3:19"},"nativeSrc":"15117:9:19","nodeType":"YulFunctionCall","src":"15117:9:19"},"variableNames":[{"name":"i","nativeSrc":"15112:1:19","nodeType":"YulIdentifier","src":"15112:1:19"}]}]},"pre":{"nativeSrc":"15092:3:19","nodeType":"YulBlock","src":"15092:3:19","statements":[]},"src":"15088:169:19"},{"nativeSrc":"15266:11:19","nodeType":"YulAssignment","src":"15266:11:19","value":{"name":"pos","nativeSrc":"15274:3:19","nodeType":"YulIdentifier","src":"15274:3:19"},"variableNames":[{"name":"tail","nativeSrc":"15266:4:19","nodeType":"YulIdentifier","src":"15266:4:19"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"14651:632:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14771:9:19","nodeType":"YulTypedName","src":"14771:9:19","type":""},{"name":"value0","nativeSrc":"14782:6:19","nodeType":"YulTypedName","src":"14782:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14793:4:19","nodeType":"YulTypedName","src":"14793:4:19","type":""}],"src":"14651:632:19"},{"body":{"nativeSrc":"15462:236:19","nodeType":"YulBlock","src":"15462:236:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15479:9:19","nodeType":"YulIdentifier","src":"15479:9:19"},{"kind":"number","nativeSrc":"15490:2:19","nodeType":"YulLiteral","src":"15490:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15472:6:19","nodeType":"YulIdentifier","src":"15472:6:19"},"nativeSrc":"15472:21:19","nodeType":"YulFunctionCall","src":"15472:21:19"},"nativeSrc":"15472:21:19","nodeType":"YulExpressionStatement","src":"15472:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15513:9:19","nodeType":"YulIdentifier","src":"15513:9:19"},{"kind":"number","nativeSrc":"15524:2:19","nodeType":"YulLiteral","src":"15524:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15509:3:19","nodeType":"YulIdentifier","src":"15509:3:19"},"nativeSrc":"15509:18:19","nodeType":"YulFunctionCall","src":"15509:18:19"},{"kind":"number","nativeSrc":"15529:2:19","nodeType":"YulLiteral","src":"15529:2:19","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"15502:6:19","nodeType":"YulIdentifier","src":"15502:6:19"},"nativeSrc":"15502:30:19","nodeType":"YulFunctionCall","src":"15502:30:19"},"nativeSrc":"15502:30:19","nodeType":"YulExpressionStatement","src":"15502:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15552:9:19","nodeType":"YulIdentifier","src":"15552:9:19"},{"kind":"number","nativeSrc":"15563:2:19","nodeType":"YulLiteral","src":"15563:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15548:3:19","nodeType":"YulIdentifier","src":"15548:3:19"},"nativeSrc":"15548:18:19","nodeType":"YulFunctionCall","src":"15548:18:19"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nativeSrc":"15568:34:19","nodeType":"YulLiteral","src":"15568:34:19","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nativeSrc":"15541:6:19","nodeType":"YulIdentifier","src":"15541:6:19"},"nativeSrc":"15541:62:19","nodeType":"YulFunctionCall","src":"15541:62:19"},"nativeSrc":"15541:62:19","nodeType":"YulExpressionStatement","src":"15541:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15623:9:19","nodeType":"YulIdentifier","src":"15623:9:19"},{"kind":"number","nativeSrc":"15634:2:19","nodeType":"YulLiteral","src":"15634:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15619:3:19","nodeType":"YulIdentifier","src":"15619:3:19"},"nativeSrc":"15619:18:19","nodeType":"YulFunctionCall","src":"15619:18:19"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nativeSrc":"15639:16:19","nodeType":"YulLiteral","src":"15639:16:19","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nativeSrc":"15612:6:19","nodeType":"YulIdentifier","src":"15612:6:19"},"nativeSrc":"15612:44:19","nodeType":"YulFunctionCall","src":"15612:44:19"},"nativeSrc":"15612:44:19","nodeType":"YulExpressionStatement","src":"15612:44:19"},{"nativeSrc":"15665:27:19","nodeType":"YulAssignment","src":"15665:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"15677:9:19","nodeType":"YulIdentifier","src":"15677:9:19"},{"kind":"number","nativeSrc":"15688:3:19","nodeType":"YulLiteral","src":"15688:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"15673:3:19","nodeType":"YulIdentifier","src":"15673:3:19"},"nativeSrc":"15673:19:19","nodeType":"YulFunctionCall","src":"15673:19:19"},"variableNames":[{"name":"tail","nativeSrc":"15665:4:19","nodeType":"YulIdentifier","src":"15665:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15288:410:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15439:9:19","nodeType":"YulTypedName","src":"15439:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15453:4:19","nodeType":"YulTypedName","src":"15453:4:19","type":""}],"src":"15288:410:19"},{"body":{"nativeSrc":"15877:178:19","nodeType":"YulBlock","src":"15877:178:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15894:9:19","nodeType":"YulIdentifier","src":"15894:9:19"},{"kind":"number","nativeSrc":"15905:2:19","nodeType":"YulLiteral","src":"15905:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15887:6:19","nodeType":"YulIdentifier","src":"15887:6:19"},"nativeSrc":"15887:21:19","nodeType":"YulFunctionCall","src":"15887:21:19"},"nativeSrc":"15887:21:19","nodeType":"YulExpressionStatement","src":"15887:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15928:9:19","nodeType":"YulIdentifier","src":"15928:9:19"},{"kind":"number","nativeSrc":"15939:2:19","nodeType":"YulLiteral","src":"15939:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15924:3:19","nodeType":"YulIdentifier","src":"15924:3:19"},"nativeSrc":"15924:18:19","nodeType":"YulFunctionCall","src":"15924:18:19"},{"kind":"number","nativeSrc":"15944:2:19","nodeType":"YulLiteral","src":"15944:2:19","type":"","value":"28"}],"functionName":{"name":"mstore","nativeSrc":"15917:6:19","nodeType":"YulIdentifier","src":"15917:6:19"},"nativeSrc":"15917:30:19","nodeType":"YulFunctionCall","src":"15917:30:19"},"nativeSrc":"15917:30:19","nodeType":"YulExpressionStatement","src":"15917:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15967:9:19","nodeType":"YulIdentifier","src":"15967:9:19"},{"kind":"number","nativeSrc":"15978:2:19","nodeType":"YulLiteral","src":"15978:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15963:3:19","nodeType":"YulIdentifier","src":"15963:3:19"},"nativeSrc":"15963:18:19","nodeType":"YulFunctionCall","src":"15963:18:19"},{"hexValue":"4e6f7420612076616c696420436f6e74726163742041646472657373","kind":"string","nativeSrc":"15983:30:19","nodeType":"YulLiteral","src":"15983:30:19","type":"","value":"Not a valid Contract Address"}],"functionName":{"name":"mstore","nativeSrc":"15956:6:19","nodeType":"YulIdentifier","src":"15956:6:19"},"nativeSrc":"15956:58:19","nodeType":"YulFunctionCall","src":"15956:58:19"},"nativeSrc":"15956:58:19","nodeType":"YulExpressionStatement","src":"15956:58:19"},{"nativeSrc":"16023:26:19","nodeType":"YulAssignment","src":"16023:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"16035:9:19","nodeType":"YulIdentifier","src":"16035:9:19"},{"kind":"number","nativeSrc":"16046:2:19","nodeType":"YulLiteral","src":"16046:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16031:3:19","nodeType":"YulIdentifier","src":"16031:3:19"},"nativeSrc":"16031:18:19","nodeType":"YulFunctionCall","src":"16031:18:19"},"variableNames":[{"name":"tail","nativeSrc":"16023:4:19","nodeType":"YulIdentifier","src":"16023:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_8df5911bab3053dea66a043ac5ac0de5a7f7e7f620bbba7bd30bfd675316ef3f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15703:352:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15854:9:19","nodeType":"YulTypedName","src":"15854:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15868:4:19","nodeType":"YulTypedName","src":"15868:4:19","type":""}],"src":"15703:352:19"},{"body":{"nativeSrc":"16234:175:19","nodeType":"YulBlock","src":"16234:175:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16251:9:19","nodeType":"YulIdentifier","src":"16251:9:19"},{"kind":"number","nativeSrc":"16262:2:19","nodeType":"YulLiteral","src":"16262:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16244:6:19","nodeType":"YulIdentifier","src":"16244:6:19"},"nativeSrc":"16244:21:19","nodeType":"YulFunctionCall","src":"16244:21:19"},"nativeSrc":"16244:21:19","nodeType":"YulExpressionStatement","src":"16244:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16285:9:19","nodeType":"YulIdentifier","src":"16285:9:19"},{"kind":"number","nativeSrc":"16296:2:19","nodeType":"YulLiteral","src":"16296:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16281:3:19","nodeType":"YulIdentifier","src":"16281:3:19"},"nativeSrc":"16281:18:19","nodeType":"YulFunctionCall","src":"16281:18:19"},{"kind":"number","nativeSrc":"16301:2:19","nodeType":"YulLiteral","src":"16301:2:19","type":"","value":"25"}],"functionName":{"name":"mstore","nativeSrc":"16274:6:19","nodeType":"YulIdentifier","src":"16274:6:19"},"nativeSrc":"16274:30:19","nodeType":"YulFunctionCall","src":"16274:30:19"},"nativeSrc":"16274:30:19","nodeType":"YulExpressionStatement","src":"16274:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16324:9:19","nodeType":"YulIdentifier","src":"16324:9:19"},{"kind":"number","nativeSrc":"16335:2:19","nodeType":"YulLiteral","src":"16335:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16320:3:19","nodeType":"YulIdentifier","src":"16320:3:19"},"nativeSrc":"16320:18:19","nodeType":"YulFunctionCall","src":"16320:18:19"},{"hexValue":"4e6f7420612076616c69642041646d696e2041646472657373","kind":"string","nativeSrc":"16340:27:19","nodeType":"YulLiteral","src":"16340:27:19","type":"","value":"Not a valid Admin Address"}],"functionName":{"name":"mstore","nativeSrc":"16313:6:19","nodeType":"YulIdentifier","src":"16313:6:19"},"nativeSrc":"16313:55:19","nodeType":"YulFunctionCall","src":"16313:55:19"},"nativeSrc":"16313:55:19","nodeType":"YulExpressionStatement","src":"16313:55:19"},{"nativeSrc":"16377:26:19","nodeType":"YulAssignment","src":"16377:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"16389:9:19","nodeType":"YulIdentifier","src":"16389:9:19"},{"kind":"number","nativeSrc":"16400:2:19","nodeType":"YulLiteral","src":"16400:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16385:3:19","nodeType":"YulIdentifier","src":"16385:3:19"},"nativeSrc":"16385:18:19","nodeType":"YulFunctionCall","src":"16385:18:19"},"variableNames":[{"name":"tail","nativeSrc":"16377:4:19","nodeType":"YulIdentifier","src":"16377:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_43f75645c653e44028cb8fda54db27b2d2fd1861c70f450be62ca0f614688f4f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16060:349:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16211:9:19","nodeType":"YulTypedName","src":"16211:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16225:4:19","nodeType":"YulTypedName","src":"16225:4:19","type":""}],"src":"16060:349:19"},{"body":{"nativeSrc":"16521:87:19","nodeType":"YulBlock","src":"16521:87:19","statements":[{"nativeSrc":"16531:26:19","nodeType":"YulAssignment","src":"16531:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"16543:9:19","nodeType":"YulIdentifier","src":"16543:9:19"},{"kind":"number","nativeSrc":"16554:2:19","nodeType":"YulLiteral","src":"16554:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16539:3:19","nodeType":"YulIdentifier","src":"16539:3:19"},"nativeSrc":"16539:18:19","nodeType":"YulFunctionCall","src":"16539:18:19"},"variableNames":[{"name":"tail","nativeSrc":"16531:4:19","nodeType":"YulIdentifier","src":"16531:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16573:9:19","nodeType":"YulIdentifier","src":"16573:9:19"},{"arguments":[{"name":"value0","nativeSrc":"16588:6:19","nodeType":"YulIdentifier","src":"16588:6:19"},{"kind":"number","nativeSrc":"16596:4:19","nodeType":"YulLiteral","src":"16596:4:19","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"16584:3:19","nodeType":"YulIdentifier","src":"16584:3:19"},"nativeSrc":"16584:17:19","nodeType":"YulFunctionCall","src":"16584:17:19"}],"functionName":{"name":"mstore","nativeSrc":"16566:6:19","nodeType":"YulIdentifier","src":"16566:6:19"},"nativeSrc":"16566:36:19","nodeType":"YulFunctionCall","src":"16566:36:19"},"nativeSrc":"16566:36:19","nodeType":"YulExpressionStatement","src":"16566:36:19"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nativeSrc":"16414:194:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16490:9:19","nodeType":"YulTypedName","src":"16490:9:19","type":""},{"name":"value0","nativeSrc":"16501:6:19","nodeType":"YulTypedName","src":"16501:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16512:4:19","nodeType":"YulTypedName","src":"16512:4:19","type":""}],"src":"16414:194:19"},{"body":{"nativeSrc":"16787:246:19","nodeType":"YulBlock","src":"16787:246:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16804:9:19","nodeType":"YulIdentifier","src":"16804:9:19"},{"kind":"number","nativeSrc":"16815:2:19","nodeType":"YulLiteral","src":"16815:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16797:6:19","nodeType":"YulIdentifier","src":"16797:6:19"},"nativeSrc":"16797:21:19","nodeType":"YulFunctionCall","src":"16797:21:19"},"nativeSrc":"16797:21:19","nodeType":"YulExpressionStatement","src":"16797:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16838:9:19","nodeType":"YulIdentifier","src":"16838:9:19"},{"kind":"number","nativeSrc":"16849:2:19","nodeType":"YulLiteral","src":"16849:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16834:3:19","nodeType":"YulIdentifier","src":"16834:3:19"},"nativeSrc":"16834:18:19","nodeType":"YulFunctionCall","src":"16834:18:19"},{"kind":"number","nativeSrc":"16854:2:19","nodeType":"YulLiteral","src":"16854:2:19","type":"","value":"56"}],"functionName":{"name":"mstore","nativeSrc":"16827:6:19","nodeType":"YulIdentifier","src":"16827:6:19"},"nativeSrc":"16827:30:19","nodeType":"YulFunctionCall","src":"16827:30:19"},"nativeSrc":"16827:30:19","nodeType":"YulExpressionStatement","src":"16827:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16877:9:19","nodeType":"YulIdentifier","src":"16877:9:19"},{"kind":"number","nativeSrc":"16888:2:19","nodeType":"YulLiteral","src":"16888:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16873:3:19","nodeType":"YulIdentifier","src":"16873:3:19"},"nativeSrc":"16873:18:19","nodeType":"YulFunctionCall","src":"16873:18:19"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nativeSrc":"16893:34:19","nodeType":"YulLiteral","src":"16893:34:19","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nativeSrc":"16866:6:19","nodeType":"YulIdentifier","src":"16866:6:19"},"nativeSrc":"16866:62:19","nodeType":"YulFunctionCall","src":"16866:62:19"},"nativeSrc":"16866:62:19","nodeType":"YulExpressionStatement","src":"16866:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16948:9:19","nodeType":"YulIdentifier","src":"16948:9:19"},{"kind":"number","nativeSrc":"16959:2:19","nodeType":"YulLiteral","src":"16959:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16944:3:19","nodeType":"YulIdentifier","src":"16944:3:19"},"nativeSrc":"16944:18:19","nodeType":"YulFunctionCall","src":"16944:18:19"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nativeSrc":"16964:26:19","nodeType":"YulLiteral","src":"16964:26:19","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"16937:6:19","nodeType":"YulIdentifier","src":"16937:6:19"},"nativeSrc":"16937:54:19","nodeType":"YulFunctionCall","src":"16937:54:19"},"nativeSrc":"16937:54:19","nodeType":"YulExpressionStatement","src":"16937:54:19"},{"nativeSrc":"17000:27:19","nodeType":"YulAssignment","src":"17000:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"17012:9:19","nodeType":"YulIdentifier","src":"17012:9:19"},{"kind":"number","nativeSrc":"17023:3:19","nodeType":"YulLiteral","src":"17023:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17008:3:19","nodeType":"YulIdentifier","src":"17008:3:19"},"nativeSrc":"17008:19:19","nodeType":"YulFunctionCall","src":"17008:19:19"},"variableNames":[{"name":"tail","nativeSrc":"17000:4:19","nodeType":"YulIdentifier","src":"17000:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16613:420:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16764:9:19","nodeType":"YulTypedName","src":"16764:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16778:4:19","nodeType":"YulTypedName","src":"16778:4:19","type":""}],"src":"16613:420:19"},{"body":{"nativeSrc":"17212:168:19","nodeType":"YulBlock","src":"17212:168:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17229:9:19","nodeType":"YulIdentifier","src":"17229:9:19"},{"kind":"number","nativeSrc":"17240:2:19","nodeType":"YulLiteral","src":"17240:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17222:6:19","nodeType":"YulIdentifier","src":"17222:6:19"},"nativeSrc":"17222:21:19","nodeType":"YulFunctionCall","src":"17222:21:19"},"nativeSrc":"17222:21:19","nodeType":"YulExpressionStatement","src":"17222:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17263:9:19","nodeType":"YulIdentifier","src":"17263:9:19"},{"kind":"number","nativeSrc":"17274:2:19","nodeType":"YulLiteral","src":"17274:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17259:3:19","nodeType":"YulIdentifier","src":"17259:3:19"},"nativeSrc":"17259:18:19","nodeType":"YulFunctionCall","src":"17259:18:19"},{"kind":"number","nativeSrc":"17279:2:19","nodeType":"YulLiteral","src":"17279:2:19","type":"","value":"18"}],"functionName":{"name":"mstore","nativeSrc":"17252:6:19","nodeType":"YulIdentifier","src":"17252:6:19"},"nativeSrc":"17252:30:19","nodeType":"YulFunctionCall","src":"17252:30:19"},"nativeSrc":"17252:30:19","nodeType":"YulExpressionStatement","src":"17252:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17302:9:19","nodeType":"YulIdentifier","src":"17302:9:19"},{"kind":"number","nativeSrc":"17313:2:19","nodeType":"YulLiteral","src":"17313:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17298:3:19","nodeType":"YulIdentifier","src":"17298:3:19"},"nativeSrc":"17298:18:19","nodeType":"YulFunctionCall","src":"17298:18:19"},{"hexValue":"536561736f6e20616c726561647920736574","kind":"string","nativeSrc":"17318:20:19","nodeType":"YulLiteral","src":"17318:20:19","type":"","value":"Season already set"}],"functionName":{"name":"mstore","nativeSrc":"17291:6:19","nodeType":"YulIdentifier","src":"17291:6:19"},"nativeSrc":"17291:48:19","nodeType":"YulFunctionCall","src":"17291:48:19"},"nativeSrc":"17291:48:19","nodeType":"YulExpressionStatement","src":"17291:48:19"},{"nativeSrc":"17348:26:19","nodeType":"YulAssignment","src":"17348:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"17360:9:19","nodeType":"YulIdentifier","src":"17360:9:19"},{"kind":"number","nativeSrc":"17371:2:19","nodeType":"YulLiteral","src":"17371:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17356:3:19","nodeType":"YulIdentifier","src":"17356:3:19"},"nativeSrc":"17356:18:19","nodeType":"YulFunctionCall","src":"17356:18:19"},"variableNames":[{"name":"tail","nativeSrc":"17348:4:19","nodeType":"YulIdentifier","src":"17348:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_907c90511d11a47c16170b9c7277878fac4c767ef53260ccef12b8a0b94ac892__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17038:342:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17189:9:19","nodeType":"YulTypedName","src":"17189:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17203:4:19","nodeType":"YulTypedName","src":"17203:4:19","type":""}],"src":"17038:342:19"},{"body":{"nativeSrc":"17559:176:19","nodeType":"YulBlock","src":"17559:176:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17576:9:19","nodeType":"YulIdentifier","src":"17576:9:19"},{"kind":"number","nativeSrc":"17587:2:19","nodeType":"YulLiteral","src":"17587:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17569:6:19","nodeType":"YulIdentifier","src":"17569:6:19"},"nativeSrc":"17569:21:19","nodeType":"YulFunctionCall","src":"17569:21:19"},"nativeSrc":"17569:21:19","nodeType":"YulExpressionStatement","src":"17569:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17610:9:19","nodeType":"YulIdentifier","src":"17610:9:19"},{"kind":"number","nativeSrc":"17621:2:19","nodeType":"YulLiteral","src":"17621:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17606:3:19","nodeType":"YulIdentifier","src":"17606:3:19"},"nativeSrc":"17606:18:19","nodeType":"YulFunctionCall","src":"17606:18:19"},{"kind":"number","nativeSrc":"17626:2:19","nodeType":"YulLiteral","src":"17626:2:19","type":"","value":"26"}],"functionName":{"name":"mstore","nativeSrc":"17599:6:19","nodeType":"YulIdentifier","src":"17599:6:19"},"nativeSrc":"17599:30:19","nodeType":"YulFunctionCall","src":"17599:30:19"},"nativeSrc":"17599:30:19","nodeType":"YulExpressionStatement","src":"17599:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17649:9:19","nodeType":"YulIdentifier","src":"17649:9:19"},{"kind":"number","nativeSrc":"17660:2:19","nodeType":"YulLiteral","src":"17660:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17645:3:19","nodeType":"YulIdentifier","src":"17645:3:19"},"nativeSrc":"17645:18:19","nodeType":"YulFunctionCall","src":"17645:18:19"},{"hexValue":"526561736f6e20636f646520646f6573206e6f74206578697374","kind":"string","nativeSrc":"17665:28:19","nodeType":"YulLiteral","src":"17665:28:19","type":"","value":"Reason code does not exist"}],"functionName":{"name":"mstore","nativeSrc":"17638:6:19","nodeType":"YulIdentifier","src":"17638:6:19"},"nativeSrc":"17638:56:19","nodeType":"YulFunctionCall","src":"17638:56:19"},"nativeSrc":"17638:56:19","nodeType":"YulExpressionStatement","src":"17638:56:19"},{"nativeSrc":"17703:26:19","nodeType":"YulAssignment","src":"17703:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"17715:9:19","nodeType":"YulIdentifier","src":"17715:9:19"},{"kind":"number","nativeSrc":"17726:2:19","nodeType":"YulLiteral","src":"17726:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17711:3:19","nodeType":"YulIdentifier","src":"17711:3:19"},"nativeSrc":"17711:18:19","nodeType":"YulFunctionCall","src":"17711:18:19"},"variableNames":[{"name":"tail","nativeSrc":"17703:4:19","nodeType":"YulIdentifier","src":"17703:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_ad26fe53f2fca31247987ef6a4af0496ee097218b3387432e3c6fed944f205a4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17385:350:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17536:9:19","nodeType":"YulTypedName","src":"17536:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17550:4:19","nodeType":"YulTypedName","src":"17550:4:19","type":""}],"src":"17385:350:19"},{"body":{"nativeSrc":"17821:170:19","nodeType":"YulBlock","src":"17821:170:19","statements":[{"body":{"nativeSrc":"17867:16:19","nodeType":"YulBlock","src":"17867:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17876:1:19","nodeType":"YulLiteral","src":"17876:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"17879:1:19","nodeType":"YulLiteral","src":"17879:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17869:6:19","nodeType":"YulIdentifier","src":"17869:6:19"},"nativeSrc":"17869:12:19","nodeType":"YulFunctionCall","src":"17869:12:19"},"nativeSrc":"17869:12:19","nodeType":"YulExpressionStatement","src":"17869:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17842:7:19","nodeType":"YulIdentifier","src":"17842:7:19"},{"name":"headStart","nativeSrc":"17851:9:19","nodeType":"YulIdentifier","src":"17851:9:19"}],"functionName":{"name":"sub","nativeSrc":"17838:3:19","nodeType":"YulIdentifier","src":"17838:3:19"},"nativeSrc":"17838:23:19","nodeType":"YulFunctionCall","src":"17838:23:19"},{"kind":"number","nativeSrc":"17863:2:19","nodeType":"YulLiteral","src":"17863:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"17834:3:19","nodeType":"YulIdentifier","src":"17834:3:19"},"nativeSrc":"17834:32:19","nodeType":"YulFunctionCall","src":"17834:32:19"},"nativeSrc":"17831:52:19","nodeType":"YulIf","src":"17831:52:19"},{"nativeSrc":"17892:29:19","nodeType":"YulVariableDeclaration","src":"17892:29:19","value":{"arguments":[{"name":"headStart","nativeSrc":"17911:9:19","nodeType":"YulIdentifier","src":"17911:9:19"}],"functionName":{"name":"mload","nativeSrc":"17905:5:19","nodeType":"YulIdentifier","src":"17905:5:19"},"nativeSrc":"17905:16:19","nodeType":"YulFunctionCall","src":"17905:16:19"},"variables":[{"name":"value","nativeSrc":"17896:5:19","nodeType":"YulTypedName","src":"17896:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"17955:5:19","nodeType":"YulIdentifier","src":"17955:5:19"}],"functionName":{"name":"validator_revert_address","nativeSrc":"17930:24:19","nodeType":"YulIdentifier","src":"17930:24:19"},"nativeSrc":"17930:31:19","nodeType":"YulFunctionCall","src":"17930:31:19"},"nativeSrc":"17930:31:19","nodeType":"YulExpressionStatement","src":"17930:31:19"},{"nativeSrc":"17970:15:19","nodeType":"YulAssignment","src":"17970:15:19","value":{"name":"value","nativeSrc":"17980:5:19","nodeType":"YulIdentifier","src":"17980:5:19"},"variableNames":[{"name":"value0","nativeSrc":"17970:6:19","nodeType":"YulIdentifier","src":"17970:6:19"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"17740:251:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17787:9:19","nodeType":"YulTypedName","src":"17787:9:19","type":""},{"name":"dataEnd","nativeSrc":"17798:7:19","nodeType":"YulTypedName","src":"17798:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17810:6:19","nodeType":"YulTypedName","src":"17810:6:19","type":""}],"src":"17740:251:19"},{"body":{"nativeSrc":"18170:177:19","nodeType":"YulBlock","src":"18170:177:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18187:9:19","nodeType":"YulIdentifier","src":"18187:9:19"},{"kind":"number","nativeSrc":"18198:2:19","nodeType":"YulLiteral","src":"18198:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18180:6:19","nodeType":"YulIdentifier","src":"18180:6:19"},"nativeSrc":"18180:21:19","nodeType":"YulFunctionCall","src":"18180:21:19"},"nativeSrc":"18180:21:19","nodeType":"YulExpressionStatement","src":"18180:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18221:9:19","nodeType":"YulIdentifier","src":"18221:9:19"},{"kind":"number","nativeSrc":"18232:2:19","nodeType":"YulLiteral","src":"18232:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18217:3:19","nodeType":"YulIdentifier","src":"18217:3:19"},"nativeSrc":"18217:18:19","nodeType":"YulFunctionCall","src":"18217:18:19"},{"kind":"number","nativeSrc":"18237:2:19","nodeType":"YulLiteral","src":"18237:2:19","type":"","value":"27"}],"functionName":{"name":"mstore","nativeSrc":"18210:6:19","nodeType":"YulIdentifier","src":"18210:6:19"},"nativeSrc":"18210:30:19","nodeType":"YulFunctionCall","src":"18210:30:19"},"nativeSrc":"18210:30:19","nodeType":"YulExpressionStatement","src":"18210:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18260:9:19","nodeType":"YulIdentifier","src":"18260:9:19"},{"kind":"number","nativeSrc":"18271:2:19","nodeType":"YulLiteral","src":"18271:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18256:3:19","nodeType":"YulIdentifier","src":"18256:3:19"},"nativeSrc":"18256:18:19","nodeType":"YulFunctionCall","src":"18256:18:19"},{"hexValue":"53656e646572206e6f74206f776e6572206f66207265616c6d4964","kind":"string","nativeSrc":"18276:29:19","nodeType":"YulLiteral","src":"18276:29:19","type":"","value":"Sender not owner of realmId"}],"functionName":{"name":"mstore","nativeSrc":"18249:6:19","nodeType":"YulIdentifier","src":"18249:6:19"},"nativeSrc":"18249:57:19","nodeType":"YulFunctionCall","src":"18249:57:19"},"nativeSrc":"18249:57:19","nodeType":"YulExpressionStatement","src":"18249:57:19"},{"nativeSrc":"18315:26:19","nodeType":"YulAssignment","src":"18315:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"18327:9:19","nodeType":"YulIdentifier","src":"18327:9:19"},{"kind":"number","nativeSrc":"18338:2:19","nodeType":"YulLiteral","src":"18338:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18323:3:19","nodeType":"YulIdentifier","src":"18323:3:19"},"nativeSrc":"18323:18:19","nodeType":"YulFunctionCall","src":"18323:18:19"},"variableNames":[{"name":"tail","nativeSrc":"18315:4:19","nodeType":"YulIdentifier","src":"18315:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_ea2a70fe2e8a1ed3ee633ddb0061dffa9a3291682c0f893cb32f8645c9bdf74b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17996:351:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18147:9:19","nodeType":"YulTypedName","src":"18147:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18161:4:19","nodeType":"YulTypedName","src":"18161:4:19","type":""}],"src":"17996:351:19"},{"body":{"nativeSrc":"18526:177:19","nodeType":"YulBlock","src":"18526:177:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18543:9:19","nodeType":"YulIdentifier","src":"18543:9:19"},{"kind":"number","nativeSrc":"18554:2:19","nodeType":"YulLiteral","src":"18554:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18536:6:19","nodeType":"YulIdentifier","src":"18536:6:19"},"nativeSrc":"18536:21:19","nodeType":"YulFunctionCall","src":"18536:21:19"},"nativeSrc":"18536:21:19","nodeType":"YulExpressionStatement","src":"18536:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18577:9:19","nodeType":"YulIdentifier","src":"18577:9:19"},{"kind":"number","nativeSrc":"18588:2:19","nodeType":"YulLiteral","src":"18588:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18573:3:19","nodeType":"YulIdentifier","src":"18573:3:19"},"nativeSrc":"18573:18:19","nodeType":"YulFunctionCall","src":"18573:18:19"},{"kind":"number","nativeSrc":"18593:2:19","nodeType":"YulLiteral","src":"18593:2:19","type":"","value":"27"}],"functionName":{"name":"mstore","nativeSrc":"18566:6:19","nodeType":"YulIdentifier","src":"18566:6:19"},"nativeSrc":"18566:30:19","nodeType":"YulFunctionCall","src":"18566:30:19"},"nativeSrc":"18566:30:19","nodeType":"YulExpressionStatement","src":"18566:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18616:9:19","nodeType":"YulIdentifier","src":"18616:9:19"},{"kind":"number","nativeSrc":"18627:2:19","nodeType":"YulLiteral","src":"18627:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18612:3:19","nodeType":"YulIdentifier","src":"18612:3:19"},"nativeSrc":"18612:18:19","nodeType":"YulFunctionCall","src":"18612:18:19"},{"hexValue":"5369676e6572206e6f74206f776e6572206f66207265616c6d4964","kind":"string","nativeSrc":"18632:29:19","nodeType":"YulLiteral","src":"18632:29:19","type":"","value":"Signer not owner of realmId"}],"functionName":{"name":"mstore","nativeSrc":"18605:6:19","nodeType":"YulIdentifier","src":"18605:6:19"},"nativeSrc":"18605:57:19","nodeType":"YulFunctionCall","src":"18605:57:19"},"nativeSrc":"18605:57:19","nodeType":"YulExpressionStatement","src":"18605:57:19"},{"nativeSrc":"18671:26:19","nodeType":"YulAssignment","src":"18671:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"18683:9:19","nodeType":"YulIdentifier","src":"18683:9:19"},{"kind":"number","nativeSrc":"18694:2:19","nodeType":"YulLiteral","src":"18694:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18679:3:19","nodeType":"YulIdentifier","src":"18679:3:19"},"nativeSrc":"18679:18:19","nodeType":"YulFunctionCall","src":"18679:18:19"},"variableNames":[{"name":"tail","nativeSrc":"18671:4:19","nodeType":"YulIdentifier","src":"18671:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_22a5118d0663dcf9667a9c0b2238f19c1ed6e9f7598968af96eea021ee61c19e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18352:351:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18503:9:19","nodeType":"YulTypedName","src":"18503:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18517:4:19","nodeType":"YulTypedName","src":"18517:4:19","type":""}],"src":"18352:351:19"},{"body":{"nativeSrc":"18789:103:19","nodeType":"YulBlock","src":"18789:103:19","statements":[{"body":{"nativeSrc":"18835:16:19","nodeType":"YulBlock","src":"18835:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18844:1:19","nodeType":"YulLiteral","src":"18844:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"18847:1:19","nodeType":"YulLiteral","src":"18847:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"18837:6:19","nodeType":"YulIdentifier","src":"18837:6:19"},"nativeSrc":"18837:12:19","nodeType":"YulFunctionCall","src":"18837:12:19"},"nativeSrc":"18837:12:19","nodeType":"YulExpressionStatement","src":"18837:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"18810:7:19","nodeType":"YulIdentifier","src":"18810:7:19"},{"name":"headStart","nativeSrc":"18819:9:19","nodeType":"YulIdentifier","src":"18819:9:19"}],"functionName":{"name":"sub","nativeSrc":"18806:3:19","nodeType":"YulIdentifier","src":"18806:3:19"},"nativeSrc":"18806:23:19","nodeType":"YulFunctionCall","src":"18806:23:19"},{"kind":"number","nativeSrc":"18831:2:19","nodeType":"YulLiteral","src":"18831:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"18802:3:19","nodeType":"YulIdentifier","src":"18802:3:19"},"nativeSrc":"18802:32:19","nodeType":"YulFunctionCall","src":"18802:32:19"},"nativeSrc":"18799:52:19","nodeType":"YulIf","src":"18799:52:19"},{"nativeSrc":"18860:26:19","nodeType":"YulAssignment","src":"18860:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"18876:9:19","nodeType":"YulIdentifier","src":"18876:9:19"}],"functionName":{"name":"mload","nativeSrc":"18870:5:19","nodeType":"YulIdentifier","src":"18870:5:19"},"nativeSrc":"18870:16:19","nodeType":"YulFunctionCall","src":"18870:16:19"},"variableNames":[{"name":"value0","nativeSrc":"18860:6:19","nodeType":"YulIdentifier","src":"18860:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nativeSrc":"18708:184:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18755:9:19","nodeType":"YulTypedName","src":"18755:9:19","type":""},{"name":"dataEnd","nativeSrc":"18766:7:19","nodeType":"YulTypedName","src":"18766:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"18778:6:19","nodeType":"YulTypedName","src":"18778:6:19","type":""}],"src":"18708:184:19"},{"body":{"nativeSrc":"19071:236:19","nodeType":"YulBlock","src":"19071:236:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19088:9:19","nodeType":"YulIdentifier","src":"19088:9:19"},{"kind":"number","nativeSrc":"19099:2:19","nodeType":"YulLiteral","src":"19099:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19081:6:19","nodeType":"YulIdentifier","src":"19081:6:19"},"nativeSrc":"19081:21:19","nodeType":"YulFunctionCall","src":"19081:21:19"},"nativeSrc":"19081:21:19","nodeType":"YulExpressionStatement","src":"19081:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19122:9:19","nodeType":"YulIdentifier","src":"19122:9:19"},{"kind":"number","nativeSrc":"19133:2:19","nodeType":"YulLiteral","src":"19133:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19118:3:19","nodeType":"YulIdentifier","src":"19118:3:19"},"nativeSrc":"19118:18:19","nodeType":"YulFunctionCall","src":"19118:18:19"},{"kind":"number","nativeSrc":"19138:2:19","nodeType":"YulLiteral","src":"19138:2:19","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"19111:6:19","nodeType":"YulIdentifier","src":"19111:6:19"},"nativeSrc":"19111:30:19","nodeType":"YulFunctionCall","src":"19111:30:19"},"nativeSrc":"19111:30:19","nodeType":"YulExpressionStatement","src":"19111:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19161:9:19","nodeType":"YulIdentifier","src":"19161:9:19"},{"kind":"number","nativeSrc":"19172:2:19","nodeType":"YulLiteral","src":"19172:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19157:3:19","nodeType":"YulIdentifier","src":"19157:3:19"},"nativeSrc":"19157:18:19","nodeType":"YulFunctionCall","src":"19157:18:19"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nativeSrc":"19177:34:19","nodeType":"YulLiteral","src":"19177:34:19","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nativeSrc":"19150:6:19","nodeType":"YulIdentifier","src":"19150:6:19"},"nativeSrc":"19150:62:19","nodeType":"YulFunctionCall","src":"19150:62:19"},"nativeSrc":"19150:62:19","nodeType":"YulExpressionStatement","src":"19150:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19232:9:19","nodeType":"YulIdentifier","src":"19232:9:19"},{"kind":"number","nativeSrc":"19243:2:19","nodeType":"YulLiteral","src":"19243:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19228:3:19","nodeType":"YulIdentifier","src":"19228:3:19"},"nativeSrc":"19228:18:19","nodeType":"YulFunctionCall","src":"19228:18:19"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nativeSrc":"19248:16:19","nodeType":"YulLiteral","src":"19248:16:19","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nativeSrc":"19221:6:19","nodeType":"YulIdentifier","src":"19221:6:19"},"nativeSrc":"19221:44:19","nodeType":"YulFunctionCall","src":"19221:44:19"},"nativeSrc":"19221:44:19","nodeType":"YulExpressionStatement","src":"19221:44:19"},{"nativeSrc":"19274:27:19","nodeType":"YulAssignment","src":"19274:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"19286:9:19","nodeType":"YulIdentifier","src":"19286:9:19"},{"kind":"number","nativeSrc":"19297:3:19","nodeType":"YulLiteral","src":"19297:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19282:3:19","nodeType":"YulIdentifier","src":"19282:3:19"},"nativeSrc":"19282:19:19","nodeType":"YulFunctionCall","src":"19282:19:19"},"variableNames":[{"name":"tail","nativeSrc":"19274:4:19","nodeType":"YulIdentifier","src":"19274:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18897:410:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19048:9:19","nodeType":"YulTypedName","src":"19048:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19062:4:19","nodeType":"YulTypedName","src":"19062:4:19","type":""}],"src":"18897:410:19"},{"body":{"nativeSrc":"19486:231:19","nodeType":"YulBlock","src":"19486:231:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19503:9:19","nodeType":"YulIdentifier","src":"19503:9:19"},{"kind":"number","nativeSrc":"19514:2:19","nodeType":"YulLiteral","src":"19514:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19496:6:19","nodeType":"YulIdentifier","src":"19496:6:19"},"nativeSrc":"19496:21:19","nodeType":"YulFunctionCall","src":"19496:21:19"},"nativeSrc":"19496:21:19","nodeType":"YulExpressionStatement","src":"19496:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19537:9:19","nodeType":"YulIdentifier","src":"19537:9:19"},{"kind":"number","nativeSrc":"19548:2:19","nodeType":"YulLiteral","src":"19548:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19533:3:19","nodeType":"YulIdentifier","src":"19533:3:19"},"nativeSrc":"19533:18:19","nodeType":"YulFunctionCall","src":"19533:18:19"},{"kind":"number","nativeSrc":"19553:2:19","nodeType":"YulLiteral","src":"19553:2:19","type":"","value":"41"}],"functionName":{"name":"mstore","nativeSrc":"19526:6:19","nodeType":"YulIdentifier","src":"19526:6:19"},"nativeSrc":"19526:30:19","nodeType":"YulFunctionCall","src":"19526:30:19"},"nativeSrc":"19526:30:19","nodeType":"YulExpressionStatement","src":"19526:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19576:9:19","nodeType":"YulIdentifier","src":"19576:9:19"},{"kind":"number","nativeSrc":"19587:2:19","nodeType":"YulLiteral","src":"19587:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19572:3:19","nodeType":"YulIdentifier","src":"19572:3:19"},"nativeSrc":"19572:18:19","nodeType":"YulFunctionCall","src":"19572:18:19"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nativeSrc":"19592:34:19","nodeType":"YulLiteral","src":"19592:34:19","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nativeSrc":"19565:6:19","nodeType":"YulIdentifier","src":"19565:6:19"},"nativeSrc":"19565:62:19","nodeType":"YulFunctionCall","src":"19565:62:19"},"nativeSrc":"19565:62:19","nodeType":"YulExpressionStatement","src":"19565:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19647:9:19","nodeType":"YulIdentifier","src":"19647:9:19"},{"kind":"number","nativeSrc":"19658:2:19","nodeType":"YulLiteral","src":"19658:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19643:3:19","nodeType":"YulIdentifier","src":"19643:3:19"},"nativeSrc":"19643:18:19","nodeType":"YulFunctionCall","src":"19643:18:19"},{"hexValue":"6961626c6555554944","kind":"string","nativeSrc":"19663:11:19","nodeType":"YulLiteral","src":"19663:11:19","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nativeSrc":"19636:6:19","nodeType":"YulIdentifier","src":"19636:6:19"},"nativeSrc":"19636:39:19","nodeType":"YulFunctionCall","src":"19636:39:19"},"nativeSrc":"19636:39:19","nodeType":"YulExpressionStatement","src":"19636:39:19"},{"nativeSrc":"19684:27:19","nodeType":"YulAssignment","src":"19684:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"19696:9:19","nodeType":"YulIdentifier","src":"19696:9:19"},{"kind":"number","nativeSrc":"19707:3:19","nodeType":"YulLiteral","src":"19707:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19692:3:19","nodeType":"YulIdentifier","src":"19692:3:19"},"nativeSrc":"19692:19:19","nodeType":"YulFunctionCall","src":"19692:19:19"},"variableNames":[{"name":"tail","nativeSrc":"19684:4:19","nodeType":"YulIdentifier","src":"19684:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19312:405:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19463:9:19","nodeType":"YulTypedName","src":"19463:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19477:4:19","nodeType":"YulTypedName","src":"19477:4:19","type":""}],"src":"19312:405:19"},{"body":{"nativeSrc":"19896:233:19","nodeType":"YulBlock","src":"19896:233:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19913:9:19","nodeType":"YulIdentifier","src":"19913:9:19"},{"kind":"number","nativeSrc":"19924:2:19","nodeType":"YulLiteral","src":"19924:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19906:6:19","nodeType":"YulIdentifier","src":"19906:6:19"},"nativeSrc":"19906:21:19","nodeType":"YulFunctionCall","src":"19906:21:19"},"nativeSrc":"19906:21:19","nodeType":"YulExpressionStatement","src":"19906:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19947:9:19","nodeType":"YulIdentifier","src":"19947:9:19"},{"kind":"number","nativeSrc":"19958:2:19","nodeType":"YulLiteral","src":"19958:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19943:3:19","nodeType":"YulIdentifier","src":"19943:3:19"},"nativeSrc":"19943:18:19","nodeType":"YulFunctionCall","src":"19943:18:19"},{"kind":"number","nativeSrc":"19963:2:19","nodeType":"YulLiteral","src":"19963:2:19","type":"","value":"43"}],"functionName":{"name":"mstore","nativeSrc":"19936:6:19","nodeType":"YulIdentifier","src":"19936:6:19"},"nativeSrc":"19936:30:19","nodeType":"YulFunctionCall","src":"19936:30:19"},"nativeSrc":"19936:30:19","nodeType":"YulExpressionStatement","src":"19936:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19986:9:19","nodeType":"YulIdentifier","src":"19986:9:19"},{"kind":"number","nativeSrc":"19997:2:19","nodeType":"YulLiteral","src":"19997:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19982:3:19","nodeType":"YulIdentifier","src":"19982:3:19"},"nativeSrc":"19982:18:19","nodeType":"YulFunctionCall","src":"19982:18:19"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nativeSrc":"20002:34:19","nodeType":"YulLiteral","src":"20002:34:19","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nativeSrc":"19975:6:19","nodeType":"YulIdentifier","src":"19975:6:19"},"nativeSrc":"19975:62:19","nodeType":"YulFunctionCall","src":"19975:62:19"},"nativeSrc":"19975:62:19","nodeType":"YulExpressionStatement","src":"19975:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20057:9:19","nodeType":"YulIdentifier","src":"20057:9:19"},{"kind":"number","nativeSrc":"20068:2:19","nodeType":"YulLiteral","src":"20068:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20053:3:19","nodeType":"YulIdentifier","src":"20053:3:19"},"nativeSrc":"20053:18:19","nodeType":"YulFunctionCall","src":"20053:18:19"},{"hexValue":"6e697469616c697a696e67","kind":"string","nativeSrc":"20073:13:19","nodeType":"YulLiteral","src":"20073:13:19","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nativeSrc":"20046:6:19","nodeType":"YulIdentifier","src":"20046:6:19"},"nativeSrc":"20046:41:19","nodeType":"YulFunctionCall","src":"20046:41:19"},"nativeSrc":"20046:41:19","nodeType":"YulExpressionStatement","src":"20046:41:19"},{"nativeSrc":"20096:27:19","nodeType":"YulAssignment","src":"20096:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"20108:9:19","nodeType":"YulIdentifier","src":"20108:9:19"},{"kind":"number","nativeSrc":"20119:3:19","nodeType":"YulLiteral","src":"20119:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20104:3:19","nodeType":"YulIdentifier","src":"20104:3:19"},"nativeSrc":"20104:19:19","nodeType":"YulFunctionCall","src":"20104:19:19"},"variableNames":[{"name":"tail","nativeSrc":"20096:4:19","nodeType":"YulIdentifier","src":"20096:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19722:407:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19873:9:19","nodeType":"YulTypedName","src":"19873:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19887:4:19","nodeType":"YulTypedName","src":"19887:4:19","type":""}],"src":"19722:407:19"},{"body":{"nativeSrc":"20308:170:19","nodeType":"YulBlock","src":"20308:170:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20325:9:19","nodeType":"YulIdentifier","src":"20325:9:19"},{"kind":"number","nativeSrc":"20336:2:19","nodeType":"YulLiteral","src":"20336:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20318:6:19","nodeType":"YulIdentifier","src":"20318:6:19"},"nativeSrc":"20318:21:19","nodeType":"YulFunctionCall","src":"20318:21:19"},"nativeSrc":"20318:21:19","nodeType":"YulExpressionStatement","src":"20318:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20359:9:19","nodeType":"YulIdentifier","src":"20359:9:19"},{"kind":"number","nativeSrc":"20370:2:19","nodeType":"YulLiteral","src":"20370:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20355:3:19","nodeType":"YulIdentifier","src":"20355:3:19"},"nativeSrc":"20355:18:19","nodeType":"YulFunctionCall","src":"20355:18:19"},{"kind":"number","nativeSrc":"20375:2:19","nodeType":"YulLiteral","src":"20375:2:19","type":"","value":"20"}],"functionName":{"name":"mstore","nativeSrc":"20348:6:19","nodeType":"YulIdentifier","src":"20348:6:19"},"nativeSrc":"20348:30:19","nodeType":"YulFunctionCall","src":"20348:30:19"},"nativeSrc":"20348:30:19","nodeType":"YulExpressionStatement","src":"20348:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20398:9:19","nodeType":"YulIdentifier","src":"20398:9:19"},{"kind":"number","nativeSrc":"20409:2:19","nodeType":"YulLiteral","src":"20409:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20394:3:19","nodeType":"YulIdentifier","src":"20394:3:19"},"nativeSrc":"20394:18:19","nodeType":"YulFunctionCall","src":"20394:18:19"},{"hexValue":"496e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"20414:22:19","nodeType":"YulLiteral","src":"20414:22:19","type":"","value":"Insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"20387:6:19","nodeType":"YulIdentifier","src":"20387:6:19"},"nativeSrc":"20387:50:19","nodeType":"YulFunctionCall","src":"20387:50:19"},"nativeSrc":"20387:50:19","nodeType":"YulExpressionStatement","src":"20387:50:19"},{"nativeSrc":"20446:26:19","nodeType":"YulAssignment","src":"20446:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"20458:9:19","nodeType":"YulIdentifier","src":"20458:9:19"},{"kind":"number","nativeSrc":"20469:2:19","nodeType":"YulLiteral","src":"20469:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20454:3:19","nodeType":"YulIdentifier","src":"20454:3:19"},"nativeSrc":"20454:18:19","nodeType":"YulFunctionCall","src":"20454:18:19"},"variableNames":[{"name":"tail","nativeSrc":"20446:4:19","nodeType":"YulIdentifier","src":"20446:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20134:344:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20285:9:19","nodeType":"YulTypedName","src":"20285:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20299:4:19","nodeType":"YulTypedName","src":"20299:4:19","type":""}],"src":"20134:344:19"},{"body":{"nativeSrc":"20657:177:19","nodeType":"YulBlock","src":"20657:177:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20674:9:19","nodeType":"YulIdentifier","src":"20674:9:19"},{"kind":"number","nativeSrc":"20685:2:19","nodeType":"YulLiteral","src":"20685:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20667:6:19","nodeType":"YulIdentifier","src":"20667:6:19"},"nativeSrc":"20667:21:19","nodeType":"YulFunctionCall","src":"20667:21:19"},"nativeSrc":"20667:21:19","nodeType":"YulExpressionStatement","src":"20667:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20708:9:19","nodeType":"YulIdentifier","src":"20708:9:19"},{"kind":"number","nativeSrc":"20719:2:19","nodeType":"YulLiteral","src":"20719:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20704:3:19","nodeType":"YulIdentifier","src":"20704:3:19"},"nativeSrc":"20704:18:19","nodeType":"YulFunctionCall","src":"20704:18:19"},{"kind":"number","nativeSrc":"20724:2:19","nodeType":"YulLiteral","src":"20724:2:19","type":"","value":"27"}],"functionName":{"name":"mstore","nativeSrc":"20697:6:19","nodeType":"YulIdentifier","src":"20697:6:19"},"nativeSrc":"20697:30:19","nodeType":"YulFunctionCall","src":"20697:30:19"},"nativeSrc":"20697:30:19","nodeType":"YulExpressionStatement","src":"20697:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20747:9:19","nodeType":"YulIdentifier","src":"20747:9:19"},{"kind":"number","nativeSrc":"20758:2:19","nodeType":"YulLiteral","src":"20758:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20743:3:19","nodeType":"YulIdentifier","src":"20743:3:19"},"nativeSrc":"20743:18:19","nodeType":"YulFunctionCall","src":"20743:18:19"},{"hexValue":"496e76616c696420636f6e73756d6520726561736f6e20636f6465","kind":"string","nativeSrc":"20763:29:19","nodeType":"YulLiteral","src":"20763:29:19","type":"","value":"Invalid consume reason code"}],"functionName":{"name":"mstore","nativeSrc":"20736:6:19","nodeType":"YulIdentifier","src":"20736:6:19"},"nativeSrc":"20736:57:19","nodeType":"YulFunctionCall","src":"20736:57:19"},"nativeSrc":"20736:57:19","nodeType":"YulExpressionStatement","src":"20736:57:19"},{"nativeSrc":"20802:26:19","nodeType":"YulAssignment","src":"20802:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"20814:9:19","nodeType":"YulIdentifier","src":"20814:9:19"},{"kind":"number","nativeSrc":"20825:2:19","nodeType":"YulLiteral","src":"20825:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20810:3:19","nodeType":"YulIdentifier","src":"20810:3:19"},"nativeSrc":"20810:18:19","nodeType":"YulFunctionCall","src":"20810:18:19"},"variableNames":[{"name":"tail","nativeSrc":"20802:4:19","nodeType":"YulIdentifier","src":"20802:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_56252a6247989a0782d1ad52265d2b3540f4fc7db600e892a3420904180ee89b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20483:351:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20634:9:19","nodeType":"YulTypedName","src":"20634:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20648:4:19","nodeType":"YulTypedName","src":"20648:4:19","type":""}],"src":"20483:351:19"},{"body":{"nativeSrc":"20888:79:19","nodeType":"YulBlock","src":"20888:79:19","statements":[{"nativeSrc":"20898:17:19","nodeType":"YulAssignment","src":"20898:17:19","value":{"arguments":[{"name":"x","nativeSrc":"20910:1:19","nodeType":"YulIdentifier","src":"20910:1:19"},{"name":"y","nativeSrc":"20913:1:19","nodeType":"YulIdentifier","src":"20913:1:19"}],"functionName":{"name":"sub","nativeSrc":"20906:3:19","nodeType":"YulIdentifier","src":"20906:3:19"},"nativeSrc":"20906:9:19","nodeType":"YulFunctionCall","src":"20906:9:19"},"variableNames":[{"name":"diff","nativeSrc":"20898:4:19","nodeType":"YulIdentifier","src":"20898:4:19"}]},{"body":{"nativeSrc":"20939:22:19","nodeType":"YulBlock","src":"20939:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"20941:16:19","nodeType":"YulIdentifier","src":"20941:16:19"},"nativeSrc":"20941:18:19","nodeType":"YulFunctionCall","src":"20941:18:19"},"nativeSrc":"20941:18:19","nodeType":"YulExpressionStatement","src":"20941:18:19"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"20930:4:19","nodeType":"YulIdentifier","src":"20930:4:19"},{"name":"x","nativeSrc":"20936:1:19","nodeType":"YulIdentifier","src":"20936:1:19"}],"functionName":{"name":"gt","nativeSrc":"20927:2:19","nodeType":"YulIdentifier","src":"20927:2:19"},"nativeSrc":"20927:11:19","nodeType":"YulFunctionCall","src":"20927:11:19"},"nativeSrc":"20924:37:19","nodeType":"YulIf","src":"20924:37:19"}]},"name":"checked_sub_t_uint256","nativeSrc":"20839:128:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"20870:1:19","nodeType":"YulTypedName","src":"20870:1:19","type":""},{"name":"y","nativeSrc":"20873:1:19","nodeType":"YulTypedName","src":"20873:1:19","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"20879:4:19","nodeType":"YulTypedName","src":"20879:4:19","type":""}],"src":"20839:128:19"},{"body":{"nativeSrc":"21185:329:19","nodeType":"YulBlock","src":"21185:329:19","statements":[{"nativeSrc":"21195:27:19","nodeType":"YulAssignment","src":"21195:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"21207:9:19","nodeType":"YulIdentifier","src":"21207:9:19"},{"kind":"number","nativeSrc":"21218:3:19","nodeType":"YulLiteral","src":"21218:3:19","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"21203:3:19","nodeType":"YulIdentifier","src":"21203:3:19"},"nativeSrc":"21203:19:19","nodeType":"YulFunctionCall","src":"21203:19:19"},"variableNames":[{"name":"tail","nativeSrc":"21195:4:19","nodeType":"YulIdentifier","src":"21195:4:19"}]},{"nativeSrc":"21231:52:19","nodeType":"YulVariableDeclaration","src":"21231:52:19","value":{"kind":"number","nativeSrc":"21241:42:19","nodeType":"YulLiteral","src":"21241:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"21235:2:19","nodeType":"YulTypedName","src":"21235:2:19","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21299:9:19","nodeType":"YulIdentifier","src":"21299:9:19"},{"arguments":[{"name":"value0","nativeSrc":"21314:6:19","nodeType":"YulIdentifier","src":"21314:6:19"},{"name":"_1","nativeSrc":"21322:2:19","nodeType":"YulIdentifier","src":"21322:2:19"}],"functionName":{"name":"and","nativeSrc":"21310:3:19","nodeType":"YulIdentifier","src":"21310:3:19"},"nativeSrc":"21310:15:19","nodeType":"YulFunctionCall","src":"21310:15:19"}],"functionName":{"name":"mstore","nativeSrc":"21292:6:19","nodeType":"YulIdentifier","src":"21292:6:19"},"nativeSrc":"21292:34:19","nodeType":"YulFunctionCall","src":"21292:34:19"},"nativeSrc":"21292:34:19","nodeType":"YulExpressionStatement","src":"21292:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21346:9:19","nodeType":"YulIdentifier","src":"21346:9:19"},{"kind":"number","nativeSrc":"21357:2:19","nodeType":"YulLiteral","src":"21357:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21342:3:19","nodeType":"YulIdentifier","src":"21342:3:19"},"nativeSrc":"21342:18:19","nodeType":"YulFunctionCall","src":"21342:18:19"},{"name":"value1","nativeSrc":"21362:6:19","nodeType":"YulIdentifier","src":"21362:6:19"}],"functionName":{"name":"mstore","nativeSrc":"21335:6:19","nodeType":"YulIdentifier","src":"21335:6:19"},"nativeSrc":"21335:34:19","nodeType":"YulFunctionCall","src":"21335:34:19"},"nativeSrc":"21335:34:19","nodeType":"YulExpressionStatement","src":"21335:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21389:9:19","nodeType":"YulIdentifier","src":"21389:9:19"},{"kind":"number","nativeSrc":"21400:2:19","nodeType":"YulLiteral","src":"21400:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21385:3:19","nodeType":"YulIdentifier","src":"21385:3:19"},"nativeSrc":"21385:18:19","nodeType":"YulFunctionCall","src":"21385:18:19"},{"name":"value2","nativeSrc":"21405:6:19","nodeType":"YulIdentifier","src":"21405:6:19"}],"functionName":{"name":"mstore","nativeSrc":"21378:6:19","nodeType":"YulIdentifier","src":"21378:6:19"},"nativeSrc":"21378:34:19","nodeType":"YulFunctionCall","src":"21378:34:19"},"nativeSrc":"21378:34:19","nodeType":"YulExpressionStatement","src":"21378:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21432:9:19","nodeType":"YulIdentifier","src":"21432:9:19"},{"kind":"number","nativeSrc":"21443:2:19","nodeType":"YulLiteral","src":"21443:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21428:3:19","nodeType":"YulIdentifier","src":"21428:3:19"},"nativeSrc":"21428:18:19","nodeType":"YulFunctionCall","src":"21428:18:19"},{"arguments":[{"name":"value3","nativeSrc":"21452:6:19","nodeType":"YulIdentifier","src":"21452:6:19"},{"name":"_1","nativeSrc":"21460:2:19","nodeType":"YulIdentifier","src":"21460:2:19"}],"functionName":{"name":"and","nativeSrc":"21448:3:19","nodeType":"YulIdentifier","src":"21448:3:19"},"nativeSrc":"21448:15:19","nodeType":"YulFunctionCall","src":"21448:15:19"}],"functionName":{"name":"mstore","nativeSrc":"21421:6:19","nodeType":"YulIdentifier","src":"21421:6:19"},"nativeSrc":"21421:43:19","nodeType":"YulFunctionCall","src":"21421:43:19"},"nativeSrc":"21421:43:19","nodeType":"YulExpressionStatement","src":"21421:43:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21484:9:19","nodeType":"YulIdentifier","src":"21484:9:19"},{"kind":"number","nativeSrc":"21495:3:19","nodeType":"YulLiteral","src":"21495:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"21480:3:19","nodeType":"YulIdentifier","src":"21480:3:19"},"nativeSrc":"21480:19:19","nodeType":"YulFunctionCall","src":"21480:19:19"},{"name":"value4","nativeSrc":"21501:6:19","nodeType":"YulIdentifier","src":"21501:6:19"}],"functionName":{"name":"mstore","nativeSrc":"21473:6:19","nodeType":"YulIdentifier","src":"21473:6:19"},"nativeSrc":"21473:35:19","nodeType":"YulFunctionCall","src":"21473:35:19"},"nativeSrc":"21473:35:19","nodeType":"YulExpressionStatement","src":"21473:35:19"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed","nativeSrc":"20972:542:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21122:9:19","nodeType":"YulTypedName","src":"21122:9:19","type":""},{"name":"value4","nativeSrc":"21133:6:19","nodeType":"YulTypedName","src":"21133:6:19","type":""},{"name":"value3","nativeSrc":"21141:6:19","nodeType":"YulTypedName","src":"21141:6:19","type":""},{"name":"value2","nativeSrc":"21149:6:19","nodeType":"YulTypedName","src":"21149:6:19","type":""},{"name":"value1","nativeSrc":"21157:6:19","nodeType":"YulTypedName","src":"21157:6:19","type":""},{"name":"value0","nativeSrc":"21165:6:19","nodeType":"YulTypedName","src":"21165:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21176:4:19","nodeType":"YulTypedName","src":"21176:4:19","type":""}],"src":"20972:542:19"},{"body":{"nativeSrc":"21739:160:19","nodeType":"YulBlock","src":"21739:160:19","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"21756:3:19","nodeType":"YulIdentifier","src":"21756:3:19"},{"kind":"number","nativeSrc":"21761:66:19","nodeType":"YulLiteral","src":"21761:66:19","type":"","value":"0x19457468657265756d205369676e6564204d6573736167653a0a333200000000"}],"functionName":{"name":"mstore","nativeSrc":"21749:6:19","nodeType":"YulIdentifier","src":"21749:6:19"},"nativeSrc":"21749:79:19","nodeType":"YulFunctionCall","src":"21749:79:19"},"nativeSrc":"21749:79:19","nodeType":"YulExpressionStatement","src":"21749:79:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"21848:3:19","nodeType":"YulIdentifier","src":"21848:3:19"},{"kind":"number","nativeSrc":"21853:2:19","nodeType":"YulLiteral","src":"21853:2:19","type":"","value":"28"}],"functionName":{"name":"add","nativeSrc":"21844:3:19","nodeType":"YulIdentifier","src":"21844:3:19"},"nativeSrc":"21844:12:19","nodeType":"YulFunctionCall","src":"21844:12:19"},{"name":"value0","nativeSrc":"21858:6:19","nodeType":"YulIdentifier","src":"21858:6:19"}],"functionName":{"name":"mstore","nativeSrc":"21837:6:19","nodeType":"YulIdentifier","src":"21837:6:19"},"nativeSrc":"21837:28:19","nodeType":"YulFunctionCall","src":"21837:28:19"},"nativeSrc":"21837:28:19","nodeType":"YulExpressionStatement","src":"21837:28:19"},{"nativeSrc":"21874:19:19","nodeType":"YulAssignment","src":"21874:19:19","value":{"arguments":[{"name":"pos","nativeSrc":"21885:3:19","nodeType":"YulIdentifier","src":"21885:3:19"},{"kind":"number","nativeSrc":"21890:2:19","nodeType":"YulLiteral","src":"21890:2:19","type":"","value":"60"}],"functionName":{"name":"add","nativeSrc":"21881:3:19","nodeType":"YulIdentifier","src":"21881:3:19"},"nativeSrc":"21881:12:19","nodeType":"YulFunctionCall","src":"21881:12:19"},"variableNames":[{"name":"end","nativeSrc":"21874:3:19","nodeType":"YulIdentifier","src":"21874:3:19"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"21519:380:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21715:3:19","nodeType":"YulTypedName","src":"21715:3:19","type":""},{"name":"value0","nativeSrc":"21720:6:19","nodeType":"YulTypedName","src":"21720:6:19","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21731:3:19","nodeType":"YulTypedName","src":"21731:3:19","type":""}],"src":"21519:380:19"},{"body":{"nativeSrc":"22085:217:19","nodeType":"YulBlock","src":"22085:217:19","statements":[{"nativeSrc":"22095:27:19","nodeType":"YulAssignment","src":"22095:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"22107:9:19","nodeType":"YulIdentifier","src":"22107:9:19"},{"kind":"number","nativeSrc":"22118:3:19","nodeType":"YulLiteral","src":"22118:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22103:3:19","nodeType":"YulIdentifier","src":"22103:3:19"},"nativeSrc":"22103:19:19","nodeType":"YulFunctionCall","src":"22103:19:19"},"variableNames":[{"name":"tail","nativeSrc":"22095:4:19","nodeType":"YulIdentifier","src":"22095:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"22138:9:19","nodeType":"YulIdentifier","src":"22138:9:19"},{"name":"value0","nativeSrc":"22149:6:19","nodeType":"YulIdentifier","src":"22149:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22131:6:19","nodeType":"YulIdentifier","src":"22131:6:19"},"nativeSrc":"22131:25:19","nodeType":"YulFunctionCall","src":"22131:25:19"},"nativeSrc":"22131:25:19","nodeType":"YulExpressionStatement","src":"22131:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22176:9:19","nodeType":"YulIdentifier","src":"22176:9:19"},{"kind":"number","nativeSrc":"22187:2:19","nodeType":"YulLiteral","src":"22187:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22172:3:19","nodeType":"YulIdentifier","src":"22172:3:19"},"nativeSrc":"22172:18:19","nodeType":"YulFunctionCall","src":"22172:18:19"},{"arguments":[{"name":"value1","nativeSrc":"22196:6:19","nodeType":"YulIdentifier","src":"22196:6:19"},{"kind":"number","nativeSrc":"22204:4:19","nodeType":"YulLiteral","src":"22204:4:19","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"22192:3:19","nodeType":"YulIdentifier","src":"22192:3:19"},"nativeSrc":"22192:17:19","nodeType":"YulFunctionCall","src":"22192:17:19"}],"functionName":{"name":"mstore","nativeSrc":"22165:6:19","nodeType":"YulIdentifier","src":"22165:6:19"},"nativeSrc":"22165:45:19","nodeType":"YulFunctionCall","src":"22165:45:19"},"nativeSrc":"22165:45:19","nodeType":"YulExpressionStatement","src":"22165:45:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22230:9:19","nodeType":"YulIdentifier","src":"22230:9:19"},{"kind":"number","nativeSrc":"22241:2:19","nodeType":"YulLiteral","src":"22241:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22226:3:19","nodeType":"YulIdentifier","src":"22226:3:19"},"nativeSrc":"22226:18:19","nodeType":"YulFunctionCall","src":"22226:18:19"},{"name":"value2","nativeSrc":"22246:6:19","nodeType":"YulIdentifier","src":"22246:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22219:6:19","nodeType":"YulIdentifier","src":"22219:6:19"},"nativeSrc":"22219:34:19","nodeType":"YulFunctionCall","src":"22219:34:19"},"nativeSrc":"22219:34:19","nodeType":"YulExpressionStatement","src":"22219:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22273:9:19","nodeType":"YulIdentifier","src":"22273:9:19"},{"kind":"number","nativeSrc":"22284:2:19","nodeType":"YulLiteral","src":"22284:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22269:3:19","nodeType":"YulIdentifier","src":"22269:3:19"},"nativeSrc":"22269:18:19","nodeType":"YulFunctionCall","src":"22269:18:19"},{"name":"value3","nativeSrc":"22289:6:19","nodeType":"YulIdentifier","src":"22289:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22262:6:19","nodeType":"YulIdentifier","src":"22262:6:19"},"nativeSrc":"22262:34:19","nodeType":"YulFunctionCall","src":"22262:34:19"},"nativeSrc":"22262:34:19","nodeType":"YulExpressionStatement","src":"22262:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"21904:398:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22030:9:19","nodeType":"YulTypedName","src":"22030:9:19","type":""},{"name":"value3","nativeSrc":"22041:6:19","nodeType":"YulTypedName","src":"22041:6:19","type":""},{"name":"value2","nativeSrc":"22049:6:19","nodeType":"YulTypedName","src":"22049:6:19","type":""},{"name":"value1","nativeSrc":"22057:6:19","nodeType":"YulTypedName","src":"22057:6:19","type":""},{"name":"value0","nativeSrc":"22065:6:19","nodeType":"YulTypedName","src":"22065:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22076:4:19","nodeType":"YulTypedName","src":"22076:4:19","type":""}],"src":"21904:398:19"},{"body":{"nativeSrc":"22566:251:19","nodeType":"YulBlock","src":"22566:251:19","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"22583:3:19","nodeType":"YulIdentifier","src":"22583:3:19"},{"name":"value0","nativeSrc":"22588:6:19","nodeType":"YulIdentifier","src":"22588:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22576:6:19","nodeType":"YulIdentifier","src":"22576:6:19"},"nativeSrc":"22576:19:19","nodeType":"YulFunctionCall","src":"22576:19:19"},"nativeSrc":"22576:19:19","nodeType":"YulExpressionStatement","src":"22576:19:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"22615:3:19","nodeType":"YulIdentifier","src":"22615:3:19"},{"kind":"number","nativeSrc":"22620:2:19","nodeType":"YulLiteral","src":"22620:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22611:3:19","nodeType":"YulIdentifier","src":"22611:3:19"},"nativeSrc":"22611:12:19","nodeType":"YulFunctionCall","src":"22611:12:19"},{"name":"value1","nativeSrc":"22625:6:19","nodeType":"YulIdentifier","src":"22625:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22604:6:19","nodeType":"YulIdentifier","src":"22604:6:19"},"nativeSrc":"22604:28:19","nodeType":"YulFunctionCall","src":"22604:28:19"},"nativeSrc":"22604:28:19","nodeType":"YulExpressionStatement","src":"22604:28:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"22652:3:19","nodeType":"YulIdentifier","src":"22652:3:19"},{"kind":"number","nativeSrc":"22657:2:19","nodeType":"YulLiteral","src":"22657:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22648:3:19","nodeType":"YulIdentifier","src":"22648:3:19"},"nativeSrc":"22648:12:19","nodeType":"YulFunctionCall","src":"22648:12:19"},{"name":"value2","nativeSrc":"22662:6:19","nodeType":"YulIdentifier","src":"22662:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22641:6:19","nodeType":"YulIdentifier","src":"22641:6:19"},"nativeSrc":"22641:28:19","nodeType":"YulFunctionCall","src":"22641:28:19"},"nativeSrc":"22641:28:19","nodeType":"YulExpressionStatement","src":"22641:28:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"22689:3:19","nodeType":"YulIdentifier","src":"22689:3:19"},{"kind":"number","nativeSrc":"22694:2:19","nodeType":"YulLiteral","src":"22694:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22685:3:19","nodeType":"YulIdentifier","src":"22685:3:19"},"nativeSrc":"22685:12:19","nodeType":"YulFunctionCall","src":"22685:12:19"},{"name":"value3","nativeSrc":"22699:6:19","nodeType":"YulIdentifier","src":"22699:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22678:6:19","nodeType":"YulIdentifier","src":"22678:6:19"},"nativeSrc":"22678:28:19","nodeType":"YulFunctionCall","src":"22678:28:19"},"nativeSrc":"22678:28:19","nodeType":"YulExpressionStatement","src":"22678:28:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"22726:3:19","nodeType":"YulIdentifier","src":"22726:3:19"},{"kind":"number","nativeSrc":"22731:3:19","nodeType":"YulLiteral","src":"22731:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22722:3:19","nodeType":"YulIdentifier","src":"22722:3:19"},"nativeSrc":"22722:13:19","nodeType":"YulFunctionCall","src":"22722:13:19"},{"name":"value4","nativeSrc":"22737:6:19","nodeType":"YulIdentifier","src":"22737:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22715:6:19","nodeType":"YulIdentifier","src":"22715:6:19"},"nativeSrc":"22715:29:19","nodeType":"YulFunctionCall","src":"22715:29:19"},"nativeSrc":"22715:29:19","nodeType":"YulExpressionStatement","src":"22715:29:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"22764:3:19","nodeType":"YulIdentifier","src":"22764:3:19"},{"kind":"number","nativeSrc":"22769:3:19","nodeType":"YulLiteral","src":"22769:3:19","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"22760:3:19","nodeType":"YulIdentifier","src":"22760:3:19"},"nativeSrc":"22760:13:19","nodeType":"YulFunctionCall","src":"22760:13:19"},{"name":"value5","nativeSrc":"22775:6:19","nodeType":"YulIdentifier","src":"22775:6:19"}],"functionName":{"name":"mstore","nativeSrc":"22753:6:19","nodeType":"YulIdentifier","src":"22753:6:19"},"nativeSrc":"22753:29:19","nodeType":"YulFunctionCall","src":"22753:29:19"},"nativeSrc":"22753:29:19","nodeType":"YulExpressionStatement","src":"22753:29:19"},{"nativeSrc":"22791:20:19","nodeType":"YulAssignment","src":"22791:20:19","value":{"arguments":[{"name":"pos","nativeSrc":"22802:3:19","nodeType":"YulIdentifier","src":"22802:3:19"},{"kind":"number","nativeSrc":"22807:3:19","nodeType":"YulLiteral","src":"22807:3:19","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"22798:3:19","nodeType":"YulIdentifier","src":"22798:3:19"},"nativeSrc":"22798:13:19","nodeType":"YulFunctionCall","src":"22798:13:19"},"variableNames":[{"name":"end","nativeSrc":"22791:3:19","nodeType":"YulIdentifier","src":"22791:3:19"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_uint256_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"22307:510:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"22502:3:19","nodeType":"YulTypedName","src":"22502:3:19","type":""},{"name":"value5","nativeSrc":"22507:6:19","nodeType":"YulTypedName","src":"22507:6:19","type":""},{"name":"value4","nativeSrc":"22515:6:19","nodeType":"YulTypedName","src":"22515:6:19","type":""},{"name":"value3","nativeSrc":"22523:6:19","nodeType":"YulTypedName","src":"22523:6:19","type":""},{"name":"value2","nativeSrc":"22531:6:19","nodeType":"YulTypedName","src":"22531:6:19","type":""},{"name":"value1","nativeSrc":"22539:6:19","nodeType":"YulTypedName","src":"22539:6:19","type":""},{"name":"value0","nativeSrc":"22547:6:19","nodeType":"YulTypedName","src":"22547:6:19","type":""}],"returnVariables":[{"name":"end","nativeSrc":"22558:3:19","nodeType":"YulTypedName","src":"22558:3:19","type":""}],"src":"22307:510:19"},{"body":{"nativeSrc":"23211:423:19","nodeType":"YulBlock","src":"23211:423:19","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"23228:3:19","nodeType":"YulIdentifier","src":"23228:3:19"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nativeSrc":"23233:25:19","nodeType":"YulLiteral","src":"23233:25:19","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nativeSrc":"23221:6:19","nodeType":"YulIdentifier","src":"23221:6:19"},"nativeSrc":"23221:38:19","nodeType":"YulFunctionCall","src":"23221:38:19"},"nativeSrc":"23221:38:19","nodeType":"YulExpressionStatement","src":"23221:38:19"},{"nativeSrc":"23268:27:19","nodeType":"YulVariableDeclaration","src":"23268:27:19","value":{"arguments":[{"name":"value0","nativeSrc":"23288:6:19","nodeType":"YulIdentifier","src":"23288:6:19"}],"functionName":{"name":"mload","nativeSrc":"23282:5:19","nodeType":"YulIdentifier","src":"23282:5:19"},"nativeSrc":"23282:13:19","nodeType":"YulFunctionCall","src":"23282:13:19"},"variables":[{"name":"length","nativeSrc":"23272:6:19","nodeType":"YulTypedName","src":"23272:6:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"23343:6:19","nodeType":"YulIdentifier","src":"23343:6:19"},{"kind":"number","nativeSrc":"23351:4:19","nodeType":"YulLiteral","src":"23351:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"23339:3:19","nodeType":"YulIdentifier","src":"23339:3:19"},"nativeSrc":"23339:17:19","nodeType":"YulFunctionCall","src":"23339:17:19"},{"arguments":[{"name":"pos","nativeSrc":"23362:3:19","nodeType":"YulIdentifier","src":"23362:3:19"},{"kind":"number","nativeSrc":"23367:2:19","nodeType":"YulLiteral","src":"23367:2:19","type":"","value":"23"}],"functionName":{"name":"add","nativeSrc":"23358:3:19","nodeType":"YulIdentifier","src":"23358:3:19"},"nativeSrc":"23358:12:19","nodeType":"YulFunctionCall","src":"23358:12:19"},{"name":"length","nativeSrc":"23372:6:19","nodeType":"YulIdentifier","src":"23372:6:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"23304:34:19","nodeType":"YulIdentifier","src":"23304:34:19"},"nativeSrc":"23304:75:19","nodeType":"YulFunctionCall","src":"23304:75:19"},"nativeSrc":"23304:75:19","nodeType":"YulExpressionStatement","src":"23304:75:19"},{"nativeSrc":"23388:26:19","nodeType":"YulVariableDeclaration","src":"23388:26:19","value":{"arguments":[{"name":"pos","nativeSrc":"23402:3:19","nodeType":"YulIdentifier","src":"23402:3:19"},{"name":"length","nativeSrc":"23407:6:19","nodeType":"YulIdentifier","src":"23407:6:19"}],"functionName":{"name":"add","nativeSrc":"23398:3:19","nodeType":"YulIdentifier","src":"23398:3:19"},"nativeSrc":"23398:16:19","nodeType":"YulFunctionCall","src":"23398:16:19"},"variables":[{"name":"_1","nativeSrc":"23392:2:19","nodeType":"YulTypedName","src":"23392:2:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23434:2:19","nodeType":"YulIdentifier","src":"23434:2:19"},{"kind":"number","nativeSrc":"23438:2:19","nodeType":"YulLiteral","src":"23438:2:19","type":"","value":"23"}],"functionName":{"name":"add","nativeSrc":"23430:3:19","nodeType":"YulIdentifier","src":"23430:3:19"},"nativeSrc":"23430:11:19","nodeType":"YulFunctionCall","src":"23430:11:19"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nativeSrc":"23443:19:19","nodeType":"YulLiteral","src":"23443:19:19","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nativeSrc":"23423:6:19","nodeType":"YulIdentifier","src":"23423:6:19"},"nativeSrc":"23423:40:19","nodeType":"YulFunctionCall","src":"23423:40:19"},"nativeSrc":"23423:40:19","nodeType":"YulExpressionStatement","src":"23423:40:19"},{"nativeSrc":"23472:29:19","nodeType":"YulVariableDeclaration","src":"23472:29:19","value":{"arguments":[{"name":"value1","nativeSrc":"23494:6:19","nodeType":"YulIdentifier","src":"23494:6:19"}],"functionName":{"name":"mload","nativeSrc":"23488:5:19","nodeType":"YulIdentifier","src":"23488:5:19"},"nativeSrc":"23488:13:19","nodeType":"YulFunctionCall","src":"23488:13:19"},"variables":[{"name":"length_1","nativeSrc":"23476:8:19","nodeType":"YulTypedName","src":"23476:8:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"23549:6:19","nodeType":"YulIdentifier","src":"23549:6:19"},{"kind":"number","nativeSrc":"23557:4:19","nodeType":"YulLiteral","src":"23557:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"23545:3:19","nodeType":"YulIdentifier","src":"23545:3:19"},"nativeSrc":"23545:17:19","nodeType":"YulFunctionCall","src":"23545:17:19"},{"arguments":[{"name":"_1","nativeSrc":"23568:2:19","nodeType":"YulIdentifier","src":"23568:2:19"},{"kind":"number","nativeSrc":"23572:2:19","nodeType":"YulLiteral","src":"23572:2:19","type":"","value":"40"}],"functionName":{"name":"add","nativeSrc":"23564:3:19","nodeType":"YulIdentifier","src":"23564:3:19"},"nativeSrc":"23564:11:19","nodeType":"YulFunctionCall","src":"23564:11:19"},{"name":"length_1","nativeSrc":"23577:8:19","nodeType":"YulIdentifier","src":"23577:8:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"23510:34:19","nodeType":"YulIdentifier","src":"23510:34:19"},"nativeSrc":"23510:76:19","nodeType":"YulFunctionCall","src":"23510:76:19"},"nativeSrc":"23510:76:19","nodeType":"YulExpressionStatement","src":"23510:76:19"},{"nativeSrc":"23595:33:19","nodeType":"YulAssignment","src":"23595:33:19","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"23610:2:19","nodeType":"YulIdentifier","src":"23610:2:19"},{"name":"length_1","nativeSrc":"23614:8:19","nodeType":"YulIdentifier","src":"23614:8:19"}],"functionName":{"name":"add","nativeSrc":"23606:3:19","nodeType":"YulIdentifier","src":"23606:3:19"},"nativeSrc":"23606:17:19","nodeType":"YulFunctionCall","src":"23606:17:19"},{"kind":"number","nativeSrc":"23625:2:19","nodeType":"YulLiteral","src":"23625:2:19","type":"","value":"40"}],"functionName":{"name":"add","nativeSrc":"23602:3:19","nodeType":"YulIdentifier","src":"23602:3:19"},"nativeSrc":"23602:26:19","nodeType":"YulFunctionCall","src":"23602:26:19"},"variableNames":[{"name":"end","nativeSrc":"23595:3:19","nodeType":"YulIdentifier","src":"23595:3:19"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"22822:812:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"23179:3:19","nodeType":"YulTypedName","src":"23179:3:19","type":""},{"name":"value1","nativeSrc":"23184:6:19","nodeType":"YulTypedName","src":"23184:6:19","type":""},{"name":"value0","nativeSrc":"23192:6:19","nodeType":"YulTypedName","src":"23192:6:19","type":""}],"returnVariables":[{"name":"end","nativeSrc":"23203:3:19","nodeType":"YulTypedName","src":"23203:3:19","type":""}],"src":"22822:812:19"},{"body":{"nativeSrc":"23760:99:19","nodeType":"YulBlock","src":"23760:99:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23777:9:19","nodeType":"YulIdentifier","src":"23777:9:19"},{"kind":"number","nativeSrc":"23788:2:19","nodeType":"YulLiteral","src":"23788:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"23770:6:19","nodeType":"YulIdentifier","src":"23770:6:19"},"nativeSrc":"23770:21:19","nodeType":"YulFunctionCall","src":"23770:21:19"},"nativeSrc":"23770:21:19","nodeType":"YulExpressionStatement","src":"23770:21:19"},{"nativeSrc":"23800:53:19","nodeType":"YulAssignment","src":"23800:53:19","value":{"arguments":[{"name":"value0","nativeSrc":"23826:6:19","nodeType":"YulIdentifier","src":"23826:6:19"},{"arguments":[{"name":"headStart","nativeSrc":"23838:9:19","nodeType":"YulIdentifier","src":"23838:9:19"},{"kind":"number","nativeSrc":"23849:2:19","nodeType":"YulLiteral","src":"23849:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23834:3:19","nodeType":"YulIdentifier","src":"23834:3:19"},"nativeSrc":"23834:18:19","nodeType":"YulFunctionCall","src":"23834:18:19"}],"functionName":{"name":"abi_encode_string","nativeSrc":"23808:17:19","nodeType":"YulIdentifier","src":"23808:17:19"},"nativeSrc":"23808:45:19","nodeType":"YulFunctionCall","src":"23808:45:19"},"variableNames":[{"name":"tail","nativeSrc":"23800:4:19","nodeType":"YulIdentifier","src":"23800:4:19"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"23639:220:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23729:9:19","nodeType":"YulTypedName","src":"23729:9:19","type":""},{"name":"value0","nativeSrc":"23740:6:19","nodeType":"YulTypedName","src":"23740:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23751:4:19","nodeType":"YulTypedName","src":"23751:4:19","type":""}],"src":"23639:220:19"},{"body":{"nativeSrc":"24038:235:19","nodeType":"YulBlock","src":"24038:235:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24055:9:19","nodeType":"YulIdentifier","src":"24055:9:19"},{"kind":"number","nativeSrc":"24066:2:19","nodeType":"YulLiteral","src":"24066:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"24048:6:19","nodeType":"YulIdentifier","src":"24048:6:19"},"nativeSrc":"24048:21:19","nodeType":"YulFunctionCall","src":"24048:21:19"},"nativeSrc":"24048:21:19","nodeType":"YulExpressionStatement","src":"24048:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24089:9:19","nodeType":"YulIdentifier","src":"24089:9:19"},{"kind":"number","nativeSrc":"24100:2:19","nodeType":"YulLiteral","src":"24100:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24085:3:19","nodeType":"YulIdentifier","src":"24085:3:19"},"nativeSrc":"24085:18:19","nodeType":"YulFunctionCall","src":"24085:18:19"},{"kind":"number","nativeSrc":"24105:2:19","nodeType":"YulLiteral","src":"24105:2:19","type":"","value":"45"}],"functionName":{"name":"mstore","nativeSrc":"24078:6:19","nodeType":"YulIdentifier","src":"24078:6:19"},"nativeSrc":"24078:30:19","nodeType":"YulFunctionCall","src":"24078:30:19"},"nativeSrc":"24078:30:19","nodeType":"YulExpressionStatement","src":"24078:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24128:9:19","nodeType":"YulIdentifier","src":"24128:9:19"},{"kind":"number","nativeSrc":"24139:2:19","nodeType":"YulLiteral","src":"24139:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24124:3:19","nodeType":"YulIdentifier","src":"24124:3:19"},"nativeSrc":"24124:18:19","nodeType":"YulFunctionCall","src":"24124:18:19"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nativeSrc":"24144:34:19","nodeType":"YulLiteral","src":"24144:34:19","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nativeSrc":"24117:6:19","nodeType":"YulIdentifier","src":"24117:6:19"},"nativeSrc":"24117:62:19","nodeType":"YulFunctionCall","src":"24117:62:19"},"nativeSrc":"24117:62:19","nodeType":"YulExpressionStatement","src":"24117:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24199:9:19","nodeType":"YulIdentifier","src":"24199:9:19"},{"kind":"number","nativeSrc":"24210:2:19","nodeType":"YulLiteral","src":"24210:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"24195:3:19","nodeType":"YulIdentifier","src":"24195:3:19"},"nativeSrc":"24195:18:19","nodeType":"YulFunctionCall","src":"24195:18:19"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nativeSrc":"24215:15:19","nodeType":"YulLiteral","src":"24215:15:19","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nativeSrc":"24188:6:19","nodeType":"YulIdentifier","src":"24188:6:19"},"nativeSrc":"24188:43:19","nodeType":"YulFunctionCall","src":"24188:43:19"},"nativeSrc":"24188:43:19","nodeType":"YulExpressionStatement","src":"24188:43:19"},{"nativeSrc":"24240:27:19","nodeType":"YulAssignment","src":"24240:27:19","value":{"arguments":[{"name":"headStart","nativeSrc":"24252:9:19","nodeType":"YulIdentifier","src":"24252:9:19"},{"kind":"number","nativeSrc":"24263:3:19","nodeType":"YulLiteral","src":"24263:3:19","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"24248:3:19","nodeType":"YulIdentifier","src":"24248:3:19"},"nativeSrc":"24248:19:19","nodeType":"YulFunctionCall","src":"24248:19:19"},"variableNames":[{"name":"tail","nativeSrc":"24240:4:19","nodeType":"YulIdentifier","src":"24240:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"23864:409:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24015:9:19","nodeType":"YulTypedName","src":"24015:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24029:4:19","nodeType":"YulTypedName","src":"24029:4:19","type":""}],"src":"23864:409:19"},{"body":{"nativeSrc":"24330:116:19","nodeType":"YulBlock","src":"24330:116:19","statements":[{"nativeSrc":"24340:20:19","nodeType":"YulAssignment","src":"24340:20:19","value":{"arguments":[{"name":"x","nativeSrc":"24355:1:19","nodeType":"YulIdentifier","src":"24355:1:19"},{"name":"y","nativeSrc":"24358:1:19","nodeType":"YulIdentifier","src":"24358:1:19"}],"functionName":{"name":"mul","nativeSrc":"24351:3:19","nodeType":"YulIdentifier","src":"24351:3:19"},"nativeSrc":"24351:9:19","nodeType":"YulFunctionCall","src":"24351:9:19"},"variableNames":[{"name":"product","nativeSrc":"24340:7:19","nodeType":"YulIdentifier","src":"24340:7:19"}]},{"body":{"nativeSrc":"24418:22:19","nodeType":"YulBlock","src":"24418:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"24420:16:19","nodeType":"YulIdentifier","src":"24420:16:19"},"nativeSrc":"24420:18:19","nodeType":"YulFunctionCall","src":"24420:18:19"},"nativeSrc":"24420:18:19","nodeType":"YulExpressionStatement","src":"24420:18:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"24389:1:19","nodeType":"YulIdentifier","src":"24389:1:19"}],"functionName":{"name":"iszero","nativeSrc":"24382:6:19","nodeType":"YulIdentifier","src":"24382:6:19"},"nativeSrc":"24382:9:19","nodeType":"YulFunctionCall","src":"24382:9:19"},{"arguments":[{"name":"y","nativeSrc":"24396:1:19","nodeType":"YulIdentifier","src":"24396:1:19"},{"arguments":[{"name":"product","nativeSrc":"24403:7:19","nodeType":"YulIdentifier","src":"24403:7:19"},{"name":"x","nativeSrc":"24412:1:19","nodeType":"YulIdentifier","src":"24412:1:19"}],"functionName":{"name":"div","nativeSrc":"24399:3:19","nodeType":"YulIdentifier","src":"24399:3:19"},"nativeSrc":"24399:15:19","nodeType":"YulFunctionCall","src":"24399:15:19"}],"functionName":{"name":"eq","nativeSrc":"24393:2:19","nodeType":"YulIdentifier","src":"24393:2:19"},"nativeSrc":"24393:22:19","nodeType":"YulFunctionCall","src":"24393:22:19"}],"functionName":{"name":"or","nativeSrc":"24379:2:19","nodeType":"YulIdentifier","src":"24379:2:19"},"nativeSrc":"24379:37:19","nodeType":"YulFunctionCall","src":"24379:37:19"}],"functionName":{"name":"iszero","nativeSrc":"24372:6:19","nodeType":"YulIdentifier","src":"24372:6:19"},"nativeSrc":"24372:45:19","nodeType":"YulFunctionCall","src":"24372:45:19"},"nativeSrc":"24369:71:19","nodeType":"YulIf","src":"24369:71:19"}]},"name":"checked_mul_t_uint256","nativeSrc":"24278:168:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"24309:1:19","nodeType":"YulTypedName","src":"24309:1:19","type":""},{"name":"y","nativeSrc":"24312:1:19","nodeType":"YulTypedName","src":"24312:1:19","type":""}],"returnVariables":[{"name":"product","nativeSrc":"24318:7:19","nodeType":"YulTypedName","src":"24318:7:19","type":""}],"src":"24278:168:19"},{"body":{"nativeSrc":"24498:149:19","nodeType":"YulBlock","src":"24498:149:19","statements":[{"body":{"nativeSrc":"24525:22:19","nodeType":"YulBlock","src":"24525:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"24527:16:19","nodeType":"YulIdentifier","src":"24527:16:19"},"nativeSrc":"24527:18:19","nodeType":"YulFunctionCall","src":"24527:18:19"},"nativeSrc":"24527:18:19","nodeType":"YulExpressionStatement","src":"24527:18:19"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"24518:5:19","nodeType":"YulIdentifier","src":"24518:5:19"}],"functionName":{"name":"iszero","nativeSrc":"24511:6:19","nodeType":"YulIdentifier","src":"24511:6:19"},"nativeSrc":"24511:13:19","nodeType":"YulFunctionCall","src":"24511:13:19"},"nativeSrc":"24508:39:19","nodeType":"YulIf","src":"24508:39:19"},{"nativeSrc":"24556:85:19","nodeType":"YulAssignment","src":"24556:85:19","value":{"arguments":[{"name":"value","nativeSrc":"24567:5:19","nodeType":"YulIdentifier","src":"24567:5:19"},{"kind":"number","nativeSrc":"24574:66:19","nodeType":"YulLiteral","src":"24574:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"add","nativeSrc":"24563:3:19","nodeType":"YulIdentifier","src":"24563:3:19"},"nativeSrc":"24563:78:19","nodeType":"YulFunctionCall","src":"24563:78:19"},"variableNames":[{"name":"ret","nativeSrc":"24556:3:19","nodeType":"YulIdentifier","src":"24556:3:19"}]}]},"name":"decrement_t_uint256","nativeSrc":"24451:196:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"24480:5:19","nodeType":"YulTypedName","src":"24480:5:19","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"24490:3:19","nodeType":"YulTypedName","src":"24490:3:19","type":""}],"src":"24451:196:19"},{"body":{"nativeSrc":"24826:182:19","nodeType":"YulBlock","src":"24826:182:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24843:9:19","nodeType":"YulIdentifier","src":"24843:9:19"},{"kind":"number","nativeSrc":"24854:2:19","nodeType":"YulLiteral","src":"24854:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"24836:6:19","nodeType":"YulIdentifier","src":"24836:6:19"},"nativeSrc":"24836:21:19","nodeType":"YulFunctionCall","src":"24836:21:19"},"nativeSrc":"24836:21:19","nodeType":"YulExpressionStatement","src":"24836:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24877:9:19","nodeType":"YulIdentifier","src":"24877:9:19"},{"kind":"number","nativeSrc":"24888:2:19","nodeType":"YulLiteral","src":"24888:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24873:3:19","nodeType":"YulIdentifier","src":"24873:3:19"},"nativeSrc":"24873:18:19","nodeType":"YulFunctionCall","src":"24873:18:19"},{"kind":"number","nativeSrc":"24893:2:19","nodeType":"YulLiteral","src":"24893:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"24866:6:19","nodeType":"YulIdentifier","src":"24866:6:19"},"nativeSrc":"24866:30:19","nodeType":"YulFunctionCall","src":"24866:30:19"},"nativeSrc":"24866:30:19","nodeType":"YulExpressionStatement","src":"24866:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24916:9:19","nodeType":"YulIdentifier","src":"24916:9:19"},{"kind":"number","nativeSrc":"24927:2:19","nodeType":"YulLiteral","src":"24927:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24912:3:19","nodeType":"YulIdentifier","src":"24912:3:19"},"nativeSrc":"24912:18:19","nodeType":"YulFunctionCall","src":"24912:18:19"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nativeSrc":"24932:34:19","nodeType":"YulLiteral","src":"24932:34:19","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nativeSrc":"24905:6:19","nodeType":"YulIdentifier","src":"24905:6:19"},"nativeSrc":"24905:62:19","nodeType":"YulFunctionCall","src":"24905:62:19"},"nativeSrc":"24905:62:19","nodeType":"YulExpressionStatement","src":"24905:62:19"},{"nativeSrc":"24976:26:19","nodeType":"YulAssignment","src":"24976:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"24988:9:19","nodeType":"YulIdentifier","src":"24988:9:19"},{"kind":"number","nativeSrc":"24999:2:19","nodeType":"YulLiteral","src":"24999:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"24984:3:19","nodeType":"YulIdentifier","src":"24984:3:19"},"nativeSrc":"24984:18:19","nodeType":"YulFunctionCall","src":"24984:18:19"},"variableNames":[{"name":"tail","nativeSrc":"24976:4:19","nodeType":"YulIdentifier","src":"24976:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"24652:356:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24803:9:19","nodeType":"YulTypedName","src":"24803:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24817:4:19","nodeType":"YulTypedName","src":"24817:4:19","type":""}],"src":"24652:356:19"},{"body":{"nativeSrc":"25150:150:19","nodeType":"YulBlock","src":"25150:150:19","statements":[{"nativeSrc":"25160:27:19","nodeType":"YulVariableDeclaration","src":"25160:27:19","value":{"arguments":[{"name":"value0","nativeSrc":"25180:6:19","nodeType":"YulIdentifier","src":"25180:6:19"}],"functionName":{"name":"mload","nativeSrc":"25174:5:19","nodeType":"YulIdentifier","src":"25174:5:19"},"nativeSrc":"25174:13:19","nodeType":"YulFunctionCall","src":"25174:13:19"},"variables":[{"name":"length","nativeSrc":"25164:6:19","nodeType":"YulTypedName","src":"25164:6:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"25235:6:19","nodeType":"YulIdentifier","src":"25235:6:19"},{"kind":"number","nativeSrc":"25243:4:19","nodeType":"YulLiteral","src":"25243:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"25231:3:19","nodeType":"YulIdentifier","src":"25231:3:19"},"nativeSrc":"25231:17:19","nodeType":"YulFunctionCall","src":"25231:17:19"},{"name":"pos","nativeSrc":"25250:3:19","nodeType":"YulIdentifier","src":"25250:3:19"},{"name":"length","nativeSrc":"25255:6:19","nodeType":"YulIdentifier","src":"25255:6:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"25196:34:19","nodeType":"YulIdentifier","src":"25196:34:19"},"nativeSrc":"25196:66:19","nodeType":"YulFunctionCall","src":"25196:66:19"},"nativeSrc":"25196:66:19","nodeType":"YulExpressionStatement","src":"25196:66:19"},{"nativeSrc":"25271:23:19","nodeType":"YulAssignment","src":"25271:23:19","value":{"arguments":[{"name":"pos","nativeSrc":"25282:3:19","nodeType":"YulIdentifier","src":"25282:3:19"},{"name":"length","nativeSrc":"25287:6:19","nodeType":"YulIdentifier","src":"25287:6:19"}],"functionName":{"name":"add","nativeSrc":"25278:3:19","nodeType":"YulIdentifier","src":"25278:3:19"},"nativeSrc":"25278:16:19","nodeType":"YulFunctionCall","src":"25278:16:19"},"variableNames":[{"name":"end","nativeSrc":"25271:3:19","nodeType":"YulIdentifier","src":"25271:3:19"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"25013:287:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"25126:3:19","nodeType":"YulTypedName","src":"25126:3:19","type":""},{"name":"value0","nativeSrc":"25131:6:19","nodeType":"YulTypedName","src":"25131:6:19","type":""}],"returnVariables":[{"name":"end","nativeSrc":"25142:3:19","nodeType":"YulTypedName","src":"25142:3:19","type":""}],"src":"25013:287:19"},{"body":{"nativeSrc":"25479:179:19","nodeType":"YulBlock","src":"25479:179:19","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25496:9:19","nodeType":"YulIdentifier","src":"25496:9:19"},{"kind":"number","nativeSrc":"25507:2:19","nodeType":"YulLiteral","src":"25507:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"25489:6:19","nodeType":"YulIdentifier","src":"25489:6:19"},"nativeSrc":"25489:21:19","nodeType":"YulFunctionCall","src":"25489:21:19"},"nativeSrc":"25489:21:19","nodeType":"YulExpressionStatement","src":"25489:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25530:9:19","nodeType":"YulIdentifier","src":"25530:9:19"},{"kind":"number","nativeSrc":"25541:2:19","nodeType":"YulLiteral","src":"25541:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25526:3:19","nodeType":"YulIdentifier","src":"25526:3:19"},"nativeSrc":"25526:18:19","nodeType":"YulFunctionCall","src":"25526:18:19"},{"kind":"number","nativeSrc":"25546:2:19","nodeType":"YulLiteral","src":"25546:2:19","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"25519:6:19","nodeType":"YulIdentifier","src":"25519:6:19"},"nativeSrc":"25519:30:19","nodeType":"YulFunctionCall","src":"25519:30:19"},"nativeSrc":"25519:30:19","nodeType":"YulExpressionStatement","src":"25519:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25569:9:19","nodeType":"YulIdentifier","src":"25569:9:19"},{"kind":"number","nativeSrc":"25580:2:19","nodeType":"YulLiteral","src":"25580:2:19","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25565:3:19","nodeType":"YulIdentifier","src":"25565:3:19"},"nativeSrc":"25565:18:19","nodeType":"YulFunctionCall","src":"25565:18:19"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"25585:31:19","nodeType":"YulLiteral","src":"25585:31:19","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"25558:6:19","nodeType":"YulIdentifier","src":"25558:6:19"},"nativeSrc":"25558:59:19","nodeType":"YulFunctionCall","src":"25558:59:19"},"nativeSrc":"25558:59:19","nodeType":"YulExpressionStatement","src":"25558:59:19"},{"nativeSrc":"25626:26:19","nodeType":"YulAssignment","src":"25626:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"25638:9:19","nodeType":"YulIdentifier","src":"25638:9:19"},{"kind":"number","nativeSrc":"25649:2:19","nodeType":"YulLiteral","src":"25649:2:19","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25634:3:19","nodeType":"YulIdentifier","src":"25634:3:19"},"nativeSrc":"25634:18:19","nodeType":"YulFunctionCall","src":"25634:18:19"},"variableNames":[{"name":"tail","nativeSrc":"25626:4:19","nodeType":"YulIdentifier","src":"25626:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25305:353:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25456:9:19","nodeType":"YulTypedName","src":"25456:9:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25470:4:19","nodeType":"YulTypedName","src":"25470:4:19","type":""}],"src":"25305:353:19"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        array := allocate_memory(add(and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IRealmId_$3680__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let dst := allocate_memory(add(_5, _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value1 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_string_memory_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_string_memory_ptrt_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset), dataEnd)\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32t_string_memory_ptrt_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_a187824b079404be555a1b9418b8031a46fa39c4a1a1c5cfe26b3286229770d1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Not a depositor\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5f53099e044b88c99cc014ede5713cfdba96d95b088c34d5fa4406866af6c250__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Not an admin\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_549711b1ccfcfb6570cbeff13c1a55762b5fcc708885df874c421714530ed56a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Reason code already exists\")\n        tail := add(headStart, 96)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8df5911bab3053dea66a043ac5ac0de5a7f7e7f620bbba7bd30bfd675316ef3f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Not a valid Contract Address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_43f75645c653e44028cb8fda54db27b2d2fd1861c70f450be62ca0f614688f4f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Not a valid Admin Address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_907c90511d11a47c16170b9c7277878fac4c767ef53260ccef12b8a0b94ac892__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Season already set\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ad26fe53f2fca31247987ef6a4af0496ee097218b3387432e3c6fed944f205a4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Reason code does not exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_ea2a70fe2e8a1ed3ee633ddb0061dffa9a3291682c0f893cb32f8645c9bdf74b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Sender not owner of realmId\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_22a5118d0663dcf9667a9c0b2238f19c1ed6e9f7598968af96eea021ee61c19e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Signer not owner of realmId\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_56252a6247989a0782d1ad52265d2b3540f4fc7db600e892a3420904180ee89b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Invalid consume reason code\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000)\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_packed_t_uint256_t_uint256_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value5, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), value2)\n        mstore(add(pos, 96), value3)\n        mstore(add(pos, 128), value4)\n        mstore(add(pos, 160), value5)\n        end := add(pos, 192)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"973":[{"length":32,"start":2914},{"length":32,"start":3090},{"length":32,"start":4635},{"length":32,"start":4811},{"length":32,"start":5136}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x219 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x906405A3 GT PUSH2 0x11D JUMPI DUP1 PUSH4 0xBCB39621 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xDF00BB24 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE63AB1E9 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x6BA JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x6EE JUMPI DUP1 PUSH4 0xF9515962 EQ PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDF00BB24 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0xE564A0E2 EQ PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBCB39621 EQ PUSH2 0x604 JUMPI DUP1 PUSH4 0xD14A5C71 EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xDC893CE4 EQ PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9D70B005 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x9D70B005 EQ PUSH2 0x57B JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0xA3B0B5A3 EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0xAD3B1D48 EQ PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x906405A3 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0x99D342AC EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0x9CC7F708 EQ PUSH2 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x4F1EF286 GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0x794459BE EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x86A8E98A EQ PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x51955DFC EQ PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x3F30B00F EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x4529CC1B EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x2B48DC72 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x98B6419 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x141A468C EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x18EE89F0 EQ PUSH2 0x2AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FEB JUMP JUMPDEST PUSH2 0x753 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0x3141 JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x29C CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x31AA JUMP JUMPDEST PUSH2 0x94D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFD SLOAD PUSH2 0x32D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xA6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xA98 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xB4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x3CD CALLDATASIZE PUSH1 0x4 PUSH2 0x3254 JUMP JUMPDEST PUSH2 0xD50 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x3ED CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x32FA JUMP JUMPDEST PUSH2 0xF24 JUMP JUMPDEST PUSH2 0x2CE PUSH2 0x430 CALLDATASIZE PUSH1 0x4 PUSH2 0x3328 JUMP JUMPDEST PUSH2 0x1204 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x338C JUMP JUMPDEST PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x13F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x33B8 JUMP JUMPDEST PUSH2 0x14E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH2 0x164A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3254 JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x556 CALLDATASIZE PUSH1 0x4 PUSH2 0x340B JUMP JUMPDEST PUSH2 0x19A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x576 CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH2 0x1A55 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x596 CALLDATASIZE PUSH1 0x4 PUSH2 0x3489 JUMP JUMPDEST PUSH2 0x1B1C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x5FF CALLDATASIZE PUSH1 0x4 PUSH2 0x34F5 JUMP JUMPDEST PUSH2 0x1BCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH1 0xFB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x635 CALLDATASIZE PUSH1 0x4 PUSH2 0x338C JUMP JUMPDEST PUSH2 0x1C8C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x655 CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0x1E4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x675 CALLDATASIZE PUSH1 0x4 PUSH2 0x3517 JUMP JUMPDEST PUSH2 0x1E70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x695 CALLDATASIZE PUSH1 0x4 PUSH2 0x338C JUMP JUMPDEST PUSH2 0x2073 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE PUSH2 0x6B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3568 JUMP JUMPDEST PUSH2 0x216E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x73D CALLDATASIZE PUSH1 0x4 PUSH2 0x3191 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x7E6 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x849 SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x866 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x88A SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x923 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x0 SWAP7 DUP8 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP10 KECCAK256 SWAP5 DUP10 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP9 KECCAK256 SWAP2 DUP9 MSTORE MSTORE POP SWAP1 SWAP4 KECCAK256 SLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x85C17057E64B90C0253930284E1A55B6799192F06EFD0CF6B55DDE7BDC2502B4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742061206465706F7369746F720000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xA1B SWAP1 DUP5 SWAP1 PUSH2 0x3697 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 SWAP1 DUP7 SWAP1 CALLER SWAP1 PUSH32 0x9092BF6BD1CF7DB4FCF41AEDC7C0333B51C57F5B80B429BC3D9CAA5587C6AD82 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA89 DUP2 PUSH2 0x2215 JUMP JUMPDEST PUSH2 0xA93 DUP4 DUP4 PUSH2 0x221F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0xB3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0xB47 DUP3 DUP3 PUSH2 0x2313 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xC10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC85 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0xD31 DUP2 PUSH2 0x23CE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD4D SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x23F8 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xFFDFC1249C027F9191656349FEB0761381BB32C9F557E01F419FD08754BF5A1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E2061646D696E0000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xEE9 JUMPI PUSH2 0x100 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE90 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526561736F6E20636F646520616C726561647920657869737473000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x100 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEA9 JUMPI PUSH2 0xEA9 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xEE1 SWAP1 PUSH2 0x36D9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xDEB JUMP JUMPDEST POP PUSH32 0xD8C56A8918EC09C2FE3C4D9FCC00ECE66DF217A1AB3AD768DD0A71620DA5B4E DUP2 PUSH1 0x40 MLOAD PUSH2 0xF19 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xF44 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xF5E JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF5E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xFEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1048 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1050 PUSH2 0x25F7 JUMP JUMPDEST PUSH2 0x1058 PUSH2 0x25F7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x10D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420612076616C696420436F6E7472616374204164647265737300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420612076616C69642041646D696E204164647265737300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x115D PUSH1 0x0 DUP4 PUSH2 0x221F JUMP JUMPDEST PUSH1 0xFD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x12C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x133E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x13EA DUP3 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0xB47 DUP3 DUP3 PUSH1 0x1 PUSH2 0x23F8 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x14BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x153F SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x155C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1580 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1619 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xFFDFC1249C027F9191656349FEB0761381BB32C9F557E01F419FD08754BF5A1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x16E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E2061646D696E0000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x175B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536561736F6E20616C7265616479207365740000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0xFB DUP2 SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x61228C895F8BA06548597D3E34A23BC0ECB6D1E62A1EB3FA30BE04883A17EF31 SWAP1 PUSH2 0xF19 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xFFDFC1249C027F9191656349FEB0761381BB32C9F557E01F419FD08754BF5A1B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1861 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E2061646D696E0000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1971 JUMPI PUSH2 0x100 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1884 JUMPI PUSH2 0x1884 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1908 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526561736F6E20636F646520646F6573206E6F74206578697374000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x191F JUMPI PUSH2 0x191F PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 PUSH2 0x1969 DUP2 PUSH2 0x36D9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1864 JUMP JUMPDEST POP PUSH32 0x5B2C9FCBB27D48BDBFC59F0564B5BA81539309EBF09A940FAD64D171BCFB9FF9 DUP2 PUSH1 0x40 MLOAD PUSH2 0xF19 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x19FA SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A3B SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1A4B DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1E70 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AED SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 DUP2 MSTORE DUP6 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1B75 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB6 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1BC5 DUP8 DUP3 DUP7 DUP7 DUP7 PUSH2 0x94D JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C66 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP7 KECCAK256 SWAP2 DUP7 MSTORE MSTORE POP POP SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D20 SWAP2 SWAP1 PUSH2 0x3755 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x1DA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656E646572206E6F74206F776E6572206F66207265616C6D49640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E35 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1E44 DUP6 DUP3 DUP7 DUP7 CALLER PUSH2 0x2690 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1E66 DUP2 PUSH2 0x2215 JUMP JUMPDEST PUSH2 0xA93 DUP4 DUP4 PUSH2 0x2313 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F04 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F2B DUP9 DUP4 DUP10 PUSH1 0xFF PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP11 DUP11 DUP11 DUP11 PUSH2 0x286F JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FC4 SWAP2 SWAP1 PUSH2 0x3755 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x205B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E6572206E6F74206F776E6572206F66207265616C6D49640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x2068 DUP10 DUP5 DUP11 DUP11 DUP6 PUSH2 0x2690 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x210B SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xFF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD PUSH1 0xFB SLOAD DUP4 MLOAD DUP1 DUP5 ADD SWAP11 SWAP1 SWAP11 MSTORE DUP10 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x80 DUP9 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xC0 DUP1 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE DUP4 MLOAD DUP1 DUP8 SUB SWAP1 SWAP6 ADD DUP6 MSTORE PUSH1 0xE0 SWAP1 SWAP6 ADD SWAP1 SWAP3 MSTORE POP POP DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0xFD SLOAD PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x21C7 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x362D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2208 SWAP2 SWAP1 PUSH2 0x364F JUMP JUMPDEST SWAP1 POP PUSH2 0x1E44 DUP2 DUP5 DUP5 PUSH2 0x1C8C JUMP JUMPDEST PUSH2 0xD4D DUP2 CALLER PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB47 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x22B5 CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB47 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 PUSH2 0xB47 DUP2 PUSH2 0x2215 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x242B JUMPI PUSH2 0xA93 DUP4 PUSH2 0x2A6F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24B0 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24AD SWAP2 DUP2 ADD SWAP1 PUSH2 0x364F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x253C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x25EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH2 0xA93 DUP4 DUP4 DUP4 PUSH2 0x2B79 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x268E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 GT ISZERO PUSH2 0x271E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH2 0x100 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2797 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6E73756D6520726561736F6E20636F64650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x27CB SWAP1 DUP5 SWAP1 PUSH2 0x3772 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xFB SLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xFF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD CALLER DUP2 MSTORE SWAP2 DUP3 ADD DUP9 SWAP1 MSTORE DUP2 DUP4 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD DUP5 SWAP3 SWAP2 DUP9 SWAP2 PUSH32 0x42D4212EAEF22A85F07461AD57D262E7C780323E1ED2AF838B92D5BCF85138C1 SWAP2 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP1 LOG4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xFF PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x2863 DUP4 PUSH2 0x36D9 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP13 SWAP1 MSTORE DUP2 DUP4 ADD DUP12 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xA0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xC0 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 POP PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x297D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB47 JUMPI PUSH2 0x29F5 DUP2 PUSH2 0x2BA4 JUMP JUMPDEST PUSH2 0x2A00 DUP4 PUSH1 0x20 PUSH2 0x2BC3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A11 SWAP3 SWAP2 SWAP1 PUSH2 0x3785 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH2 0x9E1 SWAP2 PUSH1 0x4 ADD PUSH2 0x3806 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x2B13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2B82 DUP4 PUSH2 0x2E0D JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2B8F JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xA93 JUMPI PUSH2 0x2B9E DUP4 DUP4 PUSH2 0x2E5A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7E6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2BD2 DUP4 PUSH1 0x2 PUSH2 0x3819 JUMP JUMPDEST PUSH2 0x2BDD SWAP1 PUSH1 0x2 PUSH2 0x3697 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF5 JUMPI PUSH2 0x2BF5 PUSH2 0x302D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C1F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2C56 JUMPI PUSH2 0x2C56 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2CB9 JUMPI PUSH2 0x2CB9 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2CF5 DUP5 PUSH1 0x2 PUSH2 0x3819 JUMP JUMPDEST PUSH2 0x2D00 SWAP1 PUSH1 0x1 PUSH2 0x3697 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2D9D JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2D41 JUMPI PUSH2 0x2D41 PUSH2 0x36AA JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D57 JUMPI PUSH2 0x2D57 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2D96 DUP2 PUSH2 0x3830 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D03 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x2E06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2E16 DUP2 PUSH2 0x2A6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E06 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3882 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x2EA4 SWAP2 SWAP1 PUSH2 0x3865 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EDF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EE4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2EF5 DUP7 DUP4 DUP4 DUP8 PUSH2 0x2EFF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2F95 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x2F8E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x2F8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST POP DUP2 PUSH2 0x2F9F JUMP JUMPDEST PUSH2 0x2F9F DUP4 DUP4 PUSH2 0x2FA7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x2FB7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 SWAP1 PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x2E06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x30A3 JUMPI PUSH2 0x30A3 PUSH2 0x302D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x30C5 JUMPI PUSH2 0x30C5 PUSH2 0x302D JUMP JUMPDEST PUSH2 0x30F6 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD PUSH2 0x305C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x310A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E06 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x30AB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x317B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3187 DUP7 DUP3 DUP8 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x31C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x321A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x322C DUP2 PUSH2 0x31E5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E06 DUP2 PUSH2 0x31E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x327F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x32A5 JUMPI PUSH2 0x32A5 PUSH2 0x302D JUMP JUMPDEST DUP1 PUSH1 0x5 SHL SWAP2 POP PUSH2 0x32B6 DUP5 DUP4 ADD PUSH2 0x305C JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 DUP4 ADD DUP5 ADD SWAP2 DUP5 DUP2 ADD SWAP1 DUP9 DUP5 GT ISZERO PUSH2 0x32D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x32EE JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x32D5 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x330D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3318 DUP2 PUSH2 0x31E5 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x322C DUP2 PUSH2 0x31E5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x333B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3346 DUP2 PUSH2 0x31E5 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x3373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3382 DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x30AB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x33A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3382 DUP6 DUP3 DUP7 ADD PUSH2 0x3121 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3444 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3450 DUP11 DUP3 DUP12 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x346D PUSH1 0x80 DUP10 ADD PUSH2 0x33F5 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x34A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34D3 DUP10 DUP3 DUP11 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x354E PUSH1 0x60 DUP9 ADD PUSH2 0x33F5 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x357E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x359C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35A8 DUP8 DUP3 DUP9 ADD PUSH2 0x3121 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35DA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x35C2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x35FB DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x35BF JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3640 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3661 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x3668 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x370A JUMPI PUSH2 0x370A PUSH2 0x3668 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3749 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x372D JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E06 DUP2 PUSH2 0x31E5 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x3668 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x37BD DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x35BF JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x37FA DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x35BF JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2E06 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35E3 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x3668 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x383F JUMPI PUSH2 0x383F PUSH2 0x3668 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3877 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x35BF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212208FA1B7 SWAP10 SHL 0xBA PUSH18 0xB13B5260964A301BD4A4E43A882E89C0E1A4 LOG2 PUSH18 0xEFAAF875DE64736F6C634300081500330000 ","sourceMap":"426:10300:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3029:213:0;;;;;;;;;;-1:-1:-1;3029:213:0;;;;;:::i;:::-;;:::i;:::-;;;516:14:19;;509:22;491:41;;479:2;464:18;3029:213:0;;;;;;;;8400:514:16;;;;;;;;;;-1:-1:-1;8400:514:16;;;;;:::i;:::-;;:::i;:::-;;;2378:25:19;;;2366:2;2351:18;8400:514:16;2232:177:19;1108:41:16;;;;;;;;;;-1:-1:-1;1108:41:16;;;;;:::i;:::-;;;;;;;;;;;;;;4077:531;;;;;;;;;;-1:-1:-1;4077:531:16;;;;;:::i;:::-;;:::i;:::-;;4834:129:0;;;;;;;;;;-1:-1:-1;4834:129:0;;;;;:::i;:::-;4908:7;4934:12;;;:6;:12;;;;;:22;;;;4834:129;885:31:16;;;;;;;;;;-1:-1:-1;885:31:16;;;;;;;;;;;3618:42:19;3606:55;;;3588:74;;3576:2;3561:18;885:31:16;3425:243:19;5259:145:0;;;;;;;;;;-1:-1:-1;5259:145:0;;;;;:::i;:::-;;:::i;6368:214::-;;;;;;;;;;-1:-1:-1;6368:214:0;;;;;:::i;:::-;;:::i;3387:195:7:-;;;;;;;;;;-1:-1:-1;3387:195:7;;;;;:::i;:::-;;:::i;2897:586:16:-;;;;;;;;;;-1:-1:-1;2897:586:16;;;;;:::i;:::-;;:::i;800:39::-;;;;;;;;;;-1:-1:-1;800:39:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;2038:446;;;;;;;;;;-1:-1:-1;2038:446:16;;;;;:::i;:::-;;:::i;3901:220:7:-;;;;;;:::i;:::-;;:::i;947:83:16:-;;;;;;;;;;-1:-1:-1;947:83:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3006:131:7;;;;;;;;;;;;;:::i;9280:522:16:-;;;;;;;;;;-1:-1:-1;9280:522:16;;;;;:::i;:::-;;:::i;2594:297::-;;;;;;;;;;-1:-1:-1;2594:297:16;;;;;:::i;:::-;;:::i;3489:582::-;;;;;;;;;;-1:-1:-1;3489:582:16;;;;;:::i;:::-;;:::i;3329:145:0:-;;;;;;;;;;-1:-1:-1;3329:145:0;;;;;:::i;:::-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;;;;3329:145;6456:335:16;;;;;;;;;;-1:-1:-1;6456:335:16;;;;;:::i;:::-;;:::i;8920:354::-;;;;;;;;;;-1:-1:-1;8920:354:16;;;;;:::i;:::-;;:::i;4614:494::-;;;;;;;;;;-1:-1:-1;4614:494:16;;;;;:::i;:::-;;:::i;2450:49:0:-;;;;;;;;;;-1:-1:-1;2450:49:0;2495:4;2450:49;;665:68:16;;;;;;;;;;;;706:27;665:68;;8118:276;;;;;;;;;;-1:-1:-1;8118:276:16;;;;;:::i;:::-;;:::i;766:28::-;;;;;;;;;;;;;;;;7663:449;;;;;;;;;;-1:-1:-1;7663:449:16;;;;;:::i;:::-;;:::i;5684:147:0:-;;;;;;;;;;-1:-1:-1;5684:147:0;;;;;:::i;:::-;;:::i;6797:510:16:-;;;;;;;;;;-1:-1:-1;6797:510:16;;;;;:::i;:::-;;:::i;10387:337::-;;;;;;;;;;-1:-1:-1;10387:337:16;;;;;:::i;:::-;;:::i;7313:344::-;;;;;;;;;;-1:-1:-1;7313:344:16;;;;;:::i;:::-;;:::i;525:62::-;;;;;;;;;;;;563:24;525:62;;593:66;;;;;;;;;;;;633:26;593:66;;1220:57;;;;;;;;;;-1:-1:-1;1220:57:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;3029:213:0;3114:4;3137:58;;;3152:43;3137:58;;:98;;-1:-1:-1;1183:36:12;1168:51;;;;3199:36:0;3130:105;3029:213;-1:-1:-1;;3029:213:0:o;8400:514:16:-;8606:15;;:45;;;;;8499:7;;;;8606:15;;;;;:26;;:45;;8633:5;;8640:10;;8606:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8743:15;;:35;;;;;;;;2378:25:19;;;8588:63:16;;-1:-1:-1;8718:22:16;;8743:15;;;;;:26;;2351:18:19;;8743:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8866:16;;;;:8;:16;;;;;;;;:25;;;;;;;;;:41;;;;-1:-1:-1;8866:41:16;;;;;8400:514;-1:-1:-1;;;8400:514:16:o;4077:531::-;4297:10;3415:4:0;3438:29;;;:12;;:29;:12;:29;;;;;4265:63:16;;;;;;;11539:2:19;4265:63:16;;;11521:21:19;11578:2;11558:18;;;11551:30;11617:17;11597:18;;;11590:45;11652:18;;4265:63:16;;;;;;;;;4419:16;;;;:8;:16;;;;;;;;:25;;;;;;;;:41;;;;;;;;:51;;4464:6;;4419:16;:51;;4464:6;;4419:51;:::i;:::-;;;;-1:-1:-1;;4520:81:16;;;12202:25:19;;;12258:2;12243:18;;12236:34;;;12286:18;;;12279:34;;;4550:17:16;;4542:6;;4530:10;;4520:81;;12190:2:19;12175:18;4520:81:16;;;;;;;4077:531;;;;;:::o;5259:145:0:-;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5372:25:::1;5383:4;5389:7;5372:10;:25::i;:::-;5259:145:::0;;;:::o;6368:214::-;6463:23;;;929:10:9;6463:23:0;6455:83;;;;;;;12526:2:19;6455:83:0;;;12508:21:19;12565:2;12545:18;;;12538:30;12604:34;12584:18;;;12577:62;12675:17;12655:18;;;12648:45;12710:19;;6455:83:0;12324:411:19;6455:83:0;6549:26;6561:4;6567:7;6549:11;:26::i;:::-;6368:214;;:::o;3387:195:7:-;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;;;;12942:2:19;1873:80:7;;;12924:21:19;12981:2;12961:18;;;12954:30;13020:34;13000:18;;;12993:62;13091:14;13071:18;;;13064:42;13123:19;;1873:80:7;12740:408:19;1873:80:7;1995:6;1971:30;;:20;1312:66:4;1536:65;;;;1457:151;1971:20:7;:30;;;1963:87;;;;;;;13355:2:19;1963:87:7;;;13337:21:19;13394:2;13374:18;;;13367:30;13433:34;13413:18;;;13406:62;13504:14;13484:18;;;13477:42;13536:19;;1963:87:7;13153:408:19;1963:87:7;3468:36:::1;3486:17;3468;:36::i;:::-;3555:12;::::0;;3565:1:::1;3555:12:::0;;;::::1;::::0;::::1;::::0;;;3514:61:::1;::::0;3536:17;;3555:12;3514:21:::1;:61::i;:::-;3387:195:::0;:::o;2897:586:16:-;3017:10;2495:4:0;3438:29;;;:12;;:29;:12;:29;;;;;2981:64:16;;;;;;;13768:2:19;2981:64:16;;;13750:21:19;13807:2;13787:18;;;13780:30;13846:14;13826:18;;;13819:42;13878:18;;2981:64:16;13566:336:19;2981:64:16;3134:9;3129:220;3153:12;:19;3149:1;:23;3129:220;;;3202:25;:42;3228:12;3241:1;3228:15;;;;;;;;:::i;:::-;;;;;;;;;;;;3202:42;;;;;;;;;;-1:-1:-1;3202:42:16;;;;3201:43;3193:82;;;;;;;14298:2:19;3193:82:16;;;14280:21:19;14337:2;14317:18;;;14310:30;14376:28;14356:18;;;14349:56;14422:18;;3193:82:16;14096:350:19;3193:82:16;3334:4;3289:25;:42;3315:12;3328:1;3315:15;;;;;;;;:::i;:::-;;;;;;;3289:42;;;;;;;;;;;;:49;;;;;;;;;;;;;;;;;;3174:3;;;;;:::i;:::-;;;;3129:220;;;;3435:41;3463:12;3435:41;;;;;;:::i;:::-;;;;;;;;2897:586;:::o;2038:446::-;3279:19:6;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:6;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:6;1713:19:8;:23;;;3387:66:6;;-1:-1:-1;3436:12:6;;;;;:17;3387:66;3325:201;;;;;;;15490:2:19;3325:201:6;;;15472:21:19;15529:2;15509:18;;;15502:30;15568:34;15548:18;;;15541:62;15639:16;15619:18;;;15612:44;15673:19;;3325:201:6;15288:410:19;3325:201:6;3536:12;:16;;;;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;;;;;;;3562:65;2136:22:16::1;:20;:22::i;:::-;2168:24;:22;:24::i;:::-;2211:39;::::0;::::1;2203:80;;;::::0;::::1;::::0;;15905:2:19;2203:80:16::1;::::0;::::1;15887:21:19::0;15944:2;15924:18;;;15917:30;15983;15963:18;;;15956:58;16031:18;;2203:80:16::1;15703:352:19::0;2203:80:16::1;2301:36;::::0;::::1;2293:74;;;::::0;::::1;::::0;;16262:2:19;2293:74:16::1;::::0;::::1;16244:21:19::0;16301:2;16281:18;;;16274:30;16340:27;16320:18;;;16313:55;16385:18;;2293:74:16::1;16060:349:19::0;2293:74:16::1;2378:45;2495:4:0;2409:13:16::0;2378:10:::1;:45::i;:::-;2433:15;:44:::0;;;::::1;;::::0;::::1;;::::0;;3647:99:6;;;;3697:5;3681:21;;;;;;3721:14;;-1:-1:-1;16566:36:19;;3721:14:6;;16554:2:19;16539:18;3721:14:6;;;;;;;3269:483;2038:446:16;;:::o;3901:220:7:-;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;;;;12942:2:19;1873:80:7;;;12924:21:19;12981:2;12961:18;;;12954:30;13020:34;13000:18;;;12993:62;13091:14;13071:18;;;13064:42;13123:19;;1873:80:7;12740:408:19;1873:80:7;1995:6;1971:30;;:20;1312:66:4;1536:65;;;;1457:151;1971:20:7;:30;;;1963:87;;;;;;;13355:2:19;1963:87:7;;;13337:21:19;13394:2;13374:18;;;13367:30;13433:34;13413:18;;;13406:62;13504:14;13484:18;;;13477:42;13536:19;;1963:87:7;13153:408:19;1963:87:7;4016:36:::1;4034:17;4016;:36::i;:::-;4062:52;4084:17;4103:4;4109;4062:21;:52::i;3006:131::-:0;3084:7;2324:4;2316:23;2333:6;2316:23;;2308:92;;;;;;;16815:2:19;2308:92:7;;;16797:21:19;16854:2;16834:18;;;16827:30;16893:34;16873:18;;;16866:62;16964:26;16944:18;;;16937:54;17008:19;;2308:92:7;16613:420:19;2308:92:7;-1:-1:-1;1312:66:4::1;3006:131:7::0;:::o;9280:522:16:-;9470:15;;:45;;;;;9363:7;;;;9470:15;;;;;:26;;:45;;9497:5;;9504:10;;9470:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9607:15;;:35;;;;;;;;2378:25:19;;;9452:63:16;;-1:-1:-1;9582:22:16;;9607:15;;;;;:26;;2351:18:19;;9607:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9756:13;;9747:23;;;;:8;:23;;;;;;;;:32;;;;;;;;;:48;;;;;;;;;;;;;9280:522;-1:-1:-1;;;;9280:522:16:o;2594:297::-;2692:10;2495:4:0;3438:29;;;:12;;:29;:12;:29;;;;;2656:64:16;;;;;;;13768:2:19;2656:64:16;;;13750:21:19;13807:2;13787:18;;;13780:30;13846:14;13826:18;;;13819:42;13878:18;;2656:64:16;13566:336:19;2656:64:16;2739:16;;;;:7;:16;;;;;;;;2738:17;2730:48;;;;;;;17240:2:19;2730:48:16;;;17222:21:19;17279:2;17259:18;;;17252:30;17318:20;17298:18;;;17291:48;17356:18;;2730:48:16;17038:342:19;2730:48:16;2788:13;:23;;;2821:16;;;;:7;:16;;;;;;;:23;;;;2840:4;2821:23;;;2859:25;;;;;2804:7;2378:25:19;;2366:2;2351:18;;2232:177;3489:582:16;3612:10;2495:4:0;3438:29;;;:12;;:29;:12;:29;;;;;3576:64:16;;;;;;;13768:2:19;3576:64:16;;;13750:21:19;13807:2;13787:18;;;13780:30;13846:14;13826:18;;;13819:42;13878:18;;3576:64:16;13566:336:19;3576:64:16;3719:9;3714:219;3738:12;:19;3734:1;:23;3714:219;;;3786:25;:42;3812:12;3825:1;3812:15;;;;;;;;:::i;:::-;;;;;;;;;;;;3786:42;;;;;;;;;;-1:-1:-1;3786:42:16;;;;3778:81;;;;;;;17587:2:19;3778:81:16;;;17569:21:19;17626:2;17606:18;;;17599:30;17665:28;17645:18;;;17638:56;17711:18;;3778:81:16;17385:350:19;3778:81:16;3880:25;:42;3906:12;3919:1;3906:15;;;;;;;;:::i;:::-;;;;;;;;;;;;3880:42;;;;;;;;;;-1:-1:-1;3880:42:16;3873:49;;;;;;3759:3;;;;:::i;:::-;;;;3714:219;;;;4021:43;4051:12;4021:43;;;;;;:::i;6456:335::-;6676:15;;:45;;;;;6658:15;;6676;;;:26;;:45;;6703:5;;6710:10;;6676:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6658:63;;6732:52;6740:7;6749:6;6757:17;6776:1;6779;6782;6732:7;:52::i;:::-;6595:196;6456:335;;;;;;;:::o;8920:354::-;9079:15;;:35;;;;;;;;2378:25:19;;;8979:7:16;;;;9079:15;;;;;:26;;2351:18:19;;9079:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9228:13;;9219:23;;;;:8;:23;;;;;;;;:32;;;;;;;;;:48;;;;;;;;;;;;;8920:354;-1:-1:-1;;8920:354:16:o;4614:494::-;4899:15;;:44;;;;;4881:15;;4899;;;:26;;:44;;4926:4;;4932:10;;4899:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4881:62;;5034:67;5042:6;5050:7;5059:14;5075:6;5083:17;5034:7;:67::i;:::-;4815:293;4614:494;;;;;;:::o;8118:276::-;8293:15;;:35;;;;;;;;2378:25:19;;;8193:7:16;;;;8293:15;;;;;:26;;2351:18:19;;8293:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8346:16;;;;:8;:16;;;;;;;;:25;;;;;;;;;:41;;;;-1:-1:-1;;8346:41:16;;;;8118:276::o;7663:449::-;7774:15;;:32;;;;;;;;2378:25:19;;;7757:14:16;;7774:15;;;:23;;2351:18:19;;7774:32:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7757:49;-1:-1:-1;7824:10:16;:20;;;;7816:60;;;;;;;18198:2:19;7816:60:16;;;18180:21:19;18237:2;18217:18;;;18210:30;18276:29;18256:18;;;18249:57;18323:18;;7816:60:16;17996:351:19;7816:60:16;7988:15;;:35;;;;;;;;2378:25:19;;;7963:22:16;;7988:15;;;:26;;2351:18:19;;7988:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7963:60;;8033:72;8042:7;8051:14;8067:6;8075:17;8094:10;8033:8;:72::i;:::-;7747:365;;7663:449;;;:::o;5684:147:0:-;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5798:26:::1;5810:4;5816:7;5798:11;:26::i;6797:510:16:-:0;6947:15;;:35;;;;;;;;2378:25:19;;;6922:22:16;;6947:15;;;:26;;2351:18:19;;6947:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6922:60;;6992:14;7009:88;7020:7;7029:14;7045:6;7053;:15;7060:7;7053:15;;;;;;;;;;;;7070:17;7089:1;7092;7095;7009:10;:88::i;:::-;7124:15;;:32;;;;;;;;2378:25:19;;;6992:105:16;;-1:-1:-1;7107:14:16;;7124:15;;;;;:23;;2351:18:19;;7124:32:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7107:49;;7184:6;7174:16;;:6;:16;;;7166:56;;;;;;;18554:2:19;7166:56:16;;;18536:21:19;18593:2;18573:18;;;18566:30;18632:29;18612:18;;;18605:57;18679:18;;7166:56:16;18352:351:19;7166:56:16;7232:68;7241:7;7250:14;7266:6;7274:17;7293:6;7232:8;:68::i;:::-;6912:395;;;6797:510;;;;;;:::o;10387:337::-;10585:15;;:35;;;;;;;;2378:25:19;;;10485:7:16;;;;10585:15;;;;;:26;;2351:18:19;;10585:35:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10700:15;;;;:6;:15;;;;;;;;;;10195:13;;10145:83;;;;;22576:19:19;;;;22611:12;;;22604:28;;;;22648:12;;;22641:28;;;;22685:12;;;22678:28;;;;22722:13;;;22715:29;;;;22760:13;;;;22753:29;;;;10145:83:16;;;;;;;;;;22798:13:19;;;;10145:83:16;;;-1:-1:-1;;10135:94:16;;;;;;10387:337::o;7313:344::-;7519:15;;:45;;;;;7501:15;;7519;;;:26;;:45;;7546:5;;7553:10;;7519:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7501:63;;7607:43;7615:7;7624:6;7632:17;7607:7;:43::i;3768:103:0:-;3834:30;3845:4;929:10:9;3834::0;:30::i;7917:233::-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;7995:149;;8038:12;;;;:6;:12;;;;;;;;:29;;;;;;;;;;:36;;;;8070:4;8038:36;;;8120:12;929:10:9;;850:96;8120:12:0;8093:40;;8111:7;8093:40;;8105:4;8093:40;;;;;;;;;;7917:233;;:::o;8321:234::-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;8400:149;;;8474:5;8442:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;:37;;;;;;8498:40;929:10:9;;8442:12:0;;8498:40;;8474:5;8498:40;8321:234;;:::o;2490:98:16:-;633:26;2928:16:0;2939:4;2928:10;:16::i;2820:944:4:-;971:66;3236:59;;;3232:526;;;3311:37;3330:17;3311:18;:37::i;3232:526::-;3412:17;3383:61;;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3383:63:4;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3379:302;;3610:56;;;;;19099:2:19;3610:56:4;;;19081:21:19;19138:2;19118:18;;;19111:30;19177:34;19157:18;;;19150:62;19248:16;19228:18;;;19221:44;19282:19;;3610:56:4;18897:410:19;3379:302:4;1312:66;3496:28;;3488:82;;;;;;;19514:2:19;3488:82:4;;;19496:21:19;19553:2;19533:18;;;19526:30;19592:34;19572:18;;;19565:62;19663:11;19643:18;;;19636:39;19692:19;;3488:82:4;19312:405:19;3488:82:4;3447:138;3694:53;3712:17;3731:4;3737:9;3694:17;:53::i;2151:65:0:-;5374:13:6;;;;;;;5366:69;;;;;;;19924:2:19;5366:69:6;;;19906:21:19;19963:2;19943:18;;;19936:30;20002:34;19982:18;;;19975:62;20073:13;20053:18;;;20046:41;20104:19;;5366:69:6;19722:407:19;5366:69:6;2151:65:0:o;5647:803:16:-;5851:13;;5842:23;;;;:8;:23;;;;;;;;:32;;;;;;;;:48;;;;;;;;;:58;-1:-1:-1;5842:58:16;5834:91;;;;;;;20336:2:19;5834:91:16;;;20318:21:19;20375:2;20355:18;;;20348:30;20414:22;20394:18;;;20387:50;20454:18;;5834:91:16;20134:344:19;5834:91:16;6020:44;;;;:25;:44;;;;;;;;6012:84;;;;;;;20685:2:19;6012:84:16;;;20667:21:19;20724:2;20704:18;;;20697:30;20763:29;20743:18;;;20736:57;20810:18;;6012:84:16;20483:351:19;6012:84:16;6157:13;;6148:23;;;;:8;:23;;;;;;;;:32;;;;;;;;:48;;;;;;;;:58;;6200:6;;6148:23;:58;;6200:6;;6148:58;:::i;:::-;;;;-1:-1:-1;;6275:13:16;;6353:15;;;;:6;:15;;;;;;;;;;6257:112;;6309:10;21292:34:19;;21342:18;;;21335:34;;;21385:18;;;21378:34;;;21241:42;21448:15;;21443:2;21428:18;;21421:43;21495:3;21480:19;;21473:35;6257:112:16;;6290:17;;6275:13;6353:15;;6257:112;;;;;21218:3:19;6257:112:16;;;6426:15;;;;:6;:15;;;;;:17;;;;;;:::i;:::-;;;;;;5647:803;;;;;:::o;5114:527::-;10195:13;;10145:83;;;;;;;22576:19:19;;;22611:12;;;22604:28;;;22648:12;;;22641:28;;;22685:12;;;22678:28;;;;22722:13;;;22715:29;;;22760:13;;;;22753:29;;;10145:83:16;;;;;;;;;;22798:13:19;;;;10145:83:16;;;10135:94;;;;;5357:7;;;;5517:66;;21761::19;5517::16;;;21749:79:19;21844:12;;;21837:28;;;5376:97:16;;-1:-1:-1;5483:21:16;;21881:12:19;;5517:66:16;;;;;;;;;;;;;5507:77;;5517:66;5507:77;;;;5601:33;;;;;;;;;22131:25:19;;;22204:4;22192:17;;22172:18;;;22165:45;;;;22226:18;;;22219:34;;;22269:18;;;22262:34;;;5507:77:16;-1:-1:-1;5601:33:16;;22103:19:19;;5601:33:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5601:33:16;;;;;;5114:527;-1:-1:-1;;;;;;;;;;;;5114:527:16:o;4152:501:0:-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;4235:412;;4423:39;4454:7;4423:30;:39::i;:::-;4533:49;4572:4;4579:2;4533:30;:49::i;:::-;4330:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;4278:358;;;;;;;;:::i;1699:281:4:-;1713:19:8;;;;1772:106:4;;;;;;;24066:2:19;1772:106:4;;;24048:21:19;24105:2;24085:18;;;24078:30;24144:34;24124:18;;;24117:62;24215:15;24195:18;;;24188:43;24248:19;;1772:106:4;23864:409:19;1772:106:4;1312:66;1888:85;;;;;;;;;;;;;;;1699:281::o;2372:276::-;2480:29;2491:17;2480:10;:29::i;:::-;2537:1;2523:4;:11;:15;:28;;;;2542:9;2523:28;2519:123;;;2567:64;2607:17;2626:4;2567:39;:64::i;:::-;;2372:276;;;:::o;2473:149:11:-;2531:13;2563:52;2575:22;;;376:2;1884:437;1959:13;1984:19;2016:10;2020:6;2016:1;:10;:::i;:::-;:14;;2029:1;2016:14;:::i;:::-;2006:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2006:25:11;;1984:47;;2041:15;:6;2048:1;2041:9;;;;;;;;:::i;:::-;;;;:15;;;;;;;;;;;2066;:6;2073:1;2066:9;;;;;;;;:::i;:::-;;;;:15;;;;;;;;;;-1:-1:-1;2096:9:11;2108:10;2112:6;2108:1;:10;:::i;:::-;:14;;2121:1;2108:14;:::i;:::-;2096:26;;2091:128;2128:1;2124;:5;2091:128;;;2162:8;2171:5;2179:3;2171:11;2162:21;;;;;;;:::i;:::-;;;;2150:6;2157:1;2150:9;;;;;;;;:::i;:::-;;;;:33;;;;;;;;;;-1:-1:-1;2207:1:11;2197:11;;;;;2131:3;;;:::i;:::-;;;2091:128;;;-1:-1:-1;2236:10:11;;2228:55;;;;;;;24854:2:19;2228:55:11;;;24836:21:19;;;24873:18;;;24866:30;24932:34;24912:18;;;24905:62;24984:18;;2228:55:11;24652:356:19;2228:55:11;2307:6;1884:437;-1:-1:-1;;;1884:437:11:o;2086:152:4:-;2152:37;2171:17;2152:18;:37::i;:::-;2204:27;;;;;;;;;;;2086:152;:::o;6685:198:8:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;7210:12;7235;7249:23;7276:6;:19;;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:8:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;1713:19;;;;8124:60;;;;;;;25507:2:19;8124:60:8;;;25489:21:19;25546:2;25526:18;;;25519:30;25585:31;25565:18;;;25558:59;25634:18;;8124:60:8;25305:353:19;8124:60:8;-1:-1:-1;8219:10:8;8212:17;;7886:418;8260:33;8268:10;8280:12;8260:7;:33::i;:::-;7682:628;;;;;;:::o;8832:540::-;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;;;;;;;;;;:::i;14:332:19:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:184;595:77;592:1;585:88;692:4;689:1;682:15;716:4;713:1;706:15;732:334;803:2;797:9;859:2;849:13;;864:66;845:86;833:99;;962:18;947:34;;983:22;;;944:62;941:88;;;1009:18;;:::i;:::-;1045:2;1038:22;732:334;;-1:-1:-1;732:334:19:o;1071:466::-;1136:5;1170:18;1162:6;1159:30;1156:56;;;1192:18;;:::i;:::-;1230:116;1340:4;1271:66;1266:2;1258:6;1254:15;1250:88;1246:99;1230:116;:::i;:::-;1221:125;;1369:6;1362:5;1355:21;1409:3;1400:6;1395:3;1391:16;1388:25;1385:45;;;1426:1;1423;1416:12;1385:45;1475:6;1470:3;1463:4;1456:5;1452:16;1439:43;1529:1;1522:4;1513:6;1506:5;1502:18;1498:29;1491:40;1071:466;;;;;:::o;1542:222::-;1585:5;1638:3;1631:4;1623:6;1619:17;1615:27;1605:55;;1656:1;1653;1646:12;1605:55;1678:80;1754:3;1745:6;1732:20;1725:4;1717:6;1713:17;1678:80;:::i;1769:458::-;1856:6;1864;1872;1925:2;1913:9;1904:7;1900:23;1896:32;1893:52;;;1941:1;1938;1931:12;1893:52;1977:9;1964:23;1954:33;;2034:2;2023:9;2019:18;2006:32;1996:42;;2089:2;2078:9;2074:18;2061:32;2116:18;2108:6;2105:30;2102:50;;;2148:1;2145;2138:12;2102:50;2171;2213:7;2204:6;2193:9;2189:22;2171:50;:::i;:::-;2161:60;;;1769:458;;;;;:::o;2414:180::-;2473:6;2526:2;2514:9;2505:7;2501:23;2497:32;2494:52;;;2542:1;2539;2532:12;2494:52;-1:-1:-1;2565:23:19;;2414:180;-1:-1:-1;2414:180:19:o;2599:454::-;2694:6;2702;2710;2718;2726;2779:3;2767:9;2758:7;2754:23;2750:33;2747:53;;;2796:1;2793;2786:12;2747:53;-1:-1:-1;;2819:23:19;;;2889:2;2874:18;;2861:32;;-1:-1:-1;2940:2:19;2925:18;;2912:32;;2991:2;2976:18;;2963:32;;-1:-1:-1;3042:3:19;3027:19;3014:33;;-1:-1:-1;2599:454:19;-1:-1:-1;2599:454:19:o;3673:154::-;3759:42;3752:5;3748:54;3741:5;3738:65;3728:93;;3817:1;3814;3807:12;3832:315;3900:6;3908;3961:2;3949:9;3940:7;3936:23;3932:32;3929:52;;;3977:1;3974;3967:12;3929:52;4013:9;4000:23;3990:33;;4073:2;4062:9;4058:18;4045:32;4086:31;4111:5;4086:31;:::i;:::-;4136:5;4126:15;;;3832:315;;;;;:::o;4152:247::-;4211:6;4264:2;4252:9;4243:7;4239:23;4235:32;4232:52;;;4280:1;4277;4270:12;4232:52;4319:9;4306:23;4338:31;4363:5;4338:31;:::i;4404:946::-;4488:6;4519:2;4562;4550:9;4541:7;4537:23;4533:32;4530:52;;;4578:1;4575;4568:12;4530:52;4618:9;4605:23;4647:18;4688:2;4680:6;4677:14;4674:34;;;4704:1;4701;4694:12;4674:34;4742:6;4731:9;4727:22;4717:32;;4787:7;4780:4;4776:2;4772:13;4768:27;4758:55;;4809:1;4806;4799:12;4758:55;4845:2;4832:16;4867:2;4863;4860:10;4857:36;;;4873:18;;:::i;:::-;4919:2;4916:1;4912:10;4902:20;;4942:28;4966:2;4962;4958:11;4942:28;:::i;:::-;5004:15;;;5074:11;;;5070:20;;;5035:12;;;;5102:19;;;5099:39;;;5134:1;5131;5124:12;5099:39;5158:11;;;;5178:142;5194:6;5189:3;5186:15;5178:142;;;5260:17;;5248:30;;5211:12;;;;5298;;;;5178:142;;;5339:5;4404:946;-1:-1:-1;;;;;;;;4404:946:19:o;5355:388::-;5423:6;5431;5484:2;5472:9;5463:7;5459:23;5455:32;5452:52;;;5500:1;5497;5490:12;5452:52;5539:9;5526:23;5558:31;5583:5;5558:31;:::i;:::-;5608:5;-1:-1:-1;5665:2:19;5650:18;;5637:32;5678:33;5637:32;5678:33;:::i;5748:585::-;5825:6;5833;5886:2;5874:9;5865:7;5861:23;5857:32;5854:52;;;5902:1;5899;5892:12;5854:52;5941:9;5928:23;5960:31;5985:5;5960:31;:::i;:::-;6010:5;-1:-1:-1;6066:2:19;6051:18;;6038:32;6093:18;6082:30;;6079:50;;;6125:1;6122;6115:12;6079:50;6148:22;;6201:4;6193:13;;6189:27;-1:-1:-1;6179:55:19;;6230:1;6227;6220:12;6179:55;6253:74;6319:7;6314:2;6301:16;6296:2;6292;6288:11;6253:74;:::i;:::-;6243:84;;;5748:585;;;;;:::o;6338:316::-;6415:6;6423;6431;6484:2;6472:9;6463:7;6459:23;6455:32;6452:52;;;6500:1;6497;6490:12;6452:52;-1:-1:-1;;6523:23:19;;;6593:2;6578:18;;6565:32;;-1:-1:-1;6644:2:19;6629:18;;;6616:32;;6338:316;-1:-1:-1;6338:316:19:o;6659:390::-;6737:6;6745;6798:2;6786:9;6777:7;6773:23;6769:32;6766:52;;;6814:1;6811;6804:12;6766:52;6850:9;6837:23;6827:33;;6911:2;6900:9;6896:18;6883:32;6938:18;6930:6;6927:30;6924:50;;;6970:1;6967;6960:12;6924:50;6993;7035:7;7026:6;7015:9;7011:22;6993:50;:::i;7054:156::-;7120:20;;7180:4;7169:16;;7159:27;;7149:55;;7200:1;7197;7190:12;7149:55;7054:156;;;:::o;7215:736::-;7336:6;7344;7352;7360;7368;7376;7384;7437:3;7425:9;7416:7;7412:23;7408:33;7405:53;;;7454:1;7451;7444:12;7405:53;7490:9;7477:23;7467:33;;7551:2;7540:9;7536:18;7523:32;7578:18;7570:6;7567:30;7564:50;;;7610:1;7607;7600:12;7564:50;7633;7675:7;7666:6;7655:9;7651:22;7633:50;:::i;:::-;7623:60;;;7730:2;7719:9;7715:18;7702:32;7692:42;;7781:2;7770:9;7766:18;7753:32;7743:42;;7804:37;7836:3;7825:9;7821:19;7804:37;:::i;:::-;7794:47;;7888:3;7877:9;7873:19;7860:33;7850:43;;7940:3;7929:9;7925:19;7912:33;7902:43;;7215:736;;;;;;;;;;:::o;7956:665::-;8070:6;8078;8086;8094;8102;8110;8163:3;8151:9;8142:7;8138:23;8134:33;8131:53;;;8180:1;8177;8170:12;8131:53;8216:9;8203:23;8193:33;;8273:2;8262:9;8258:18;8245:32;8235:42;;8328:2;8317:9;8313:18;8300:32;8355:18;8347:6;8344:30;8341:50;;;8387:1;8384;8377:12;8341:50;8410;8452:7;8443:6;8432:9;8428:22;8410:50;:::i;:::-;8400:60;;;8507:2;8496:9;8492:18;8479:32;8469:42;;8558:3;8547:9;8543:19;8530:33;8520:43;;8610:3;8599:9;8595:19;8582:33;8572:43;;7956:665;;;;;;;;:::o;8626:248::-;8694:6;8702;8755:2;8743:9;8734:7;8730:23;8726:32;8723:52;;;8771:1;8768;8761:12;8723:52;-1:-1:-1;;8794:23:19;;;8864:2;8849:18;;;8836:32;;-1:-1:-1;8626:248:19:o;9200:525::-;9302:6;9310;9318;9326;9334;9342;9395:3;9383:9;9374:7;9370:23;9366:33;9363:53;;;9412:1;9409;9402:12;9363:53;9448:9;9435:23;9425:33;;9505:2;9494:9;9490:18;9477:32;9467:42;;9556:2;9545:9;9541:18;9528:32;9518:42;;9579:36;9611:2;9600:9;9596:18;9579:36;:::i;:::-;9569:46;;9662:3;9651:9;9647:19;9634:33;9624:43;;9714:3;9703:9;9699:19;9686:33;9676:43;;9200:525;;;;;;;;:::o;9730:527::-;9826:6;9834;9842;9850;9903:3;9891:9;9882:7;9878:23;9874:33;9871:53;;;9920:1;9917;9910:12;9871:53;9956:9;9943:23;9933:33;;10017:2;10006:9;10002:18;9989:32;10044:18;10036:6;10033:30;10030:50;;;10076:1;10073;10066:12;10030:50;10099;10141:7;10132:6;10121:9;10117:22;10099:50;:::i;:::-;9730:527;;10089:60;;-1:-1:-1;;;;10196:2:19;10181:18;;10168:32;;10247:2;10232:18;10219:32;;9730:527;-1:-1:-1;9730:527:19:o;10262:250::-;10347:1;10357:113;10371:6;10368:1;10365:13;10357:113;;;10447:11;;;10441:18;10428:11;;;10421:39;10393:2;10386:10;10357:113;;;-1:-1:-1;;10504:1:19;10486:16;;10479:27;10262:250::o;10517:330::-;10559:3;10597:5;10591:12;10624:6;10619:3;10612:19;10640:76;10709:6;10702:4;10697:3;10693:14;10686:4;10679:5;10675:16;10640:76;:::i;:::-;10761:2;10749:15;10766:66;10745:88;10736:98;;;;10836:4;10732:109;;10517:330;-1:-1:-1;;10517:330:19:o;10852:291::-;11029:2;11018:9;11011:21;10992:4;11049:45;11090:2;11079:9;11075:18;11067:6;11049:45;:::i;:::-;11041:53;;11130:6;11125:2;11114:9;11110:18;11103:34;10852:291;;;;;:::o;11148:184::-;11218:6;11271:2;11259:9;11250:7;11246:23;11242:32;11239:52;;;11287:1;11284;11277:12;11239:52;-1:-1:-1;11310:16:19;;11148:184;-1:-1:-1;11148:184:19:o;11681:::-;11733:77;11730:1;11723:88;11830:4;11827:1;11820:15;11854:4;11851:1;11844:15;11870:125;11935:9;;;11956:10;;;11953:36;;;11969:18;;:::i;13907:184::-;13959:77;13956:1;13949:88;14056:4;14053:1;14046:15;14080:4;14077:1;14070:15;14451:195;14490:3;14521:66;14514:5;14511:77;14508:103;;14591:18;;:::i;:::-;-1:-1:-1;14638:1:19;14627:13;;14451:195::o;14651:632::-;14822:2;14874:21;;;14944:13;;14847:18;;;14966:22;;;14793:4;;14822:2;15045:15;;;;15019:2;15004:18;;;14793:4;15088:169;15102:6;15099:1;15096:13;15088:169;;;15163:13;;15151:26;;15232:15;;;;15197:12;;;;15124:1;15117:9;15088:169;;;-1:-1:-1;15274:3:19;;14651:632;-1:-1:-1;;;;;;14651:632:19:o;17740:251::-;17810:6;17863:2;17851:9;17842:7;17838:23;17834:32;17831:52;;;17879:1;17876;17869:12;17831:52;17911:9;17905:16;17930:31;17955:5;17930:31;:::i;20839:128::-;20906:9;;;20927:11;;;20924:37;;;20941:18;;:::i;22822:812::-;23233:25;23228:3;23221:38;23203:3;23288:6;23282:13;23304:75;23372:6;23367:2;23362:3;23358:12;23351:4;23343:6;23339:17;23304:75;:::i;:::-;23443:19;23438:2;23398:16;;;23430:11;;;23423:40;23488:13;;23510:76;23488:13;23572:2;23564:11;;23557:4;23545:17;;23510:76;:::i;:::-;23606:17;23625:2;23602:26;;22822:812;-1:-1:-1;;;;22822:812:19:o;23639:220::-;23788:2;23777:9;23770:21;23751:4;23808:45;23849:2;23838:9;23834:18;23826:6;23808:45;:::i;24278:168::-;24351:9;;;24382;;24399:15;;;24393:22;;24379:37;24369:71;;24420:18;;:::i;24451:196::-;24490:3;24518:5;24508:39;;24527:18;;:::i;:::-;-1:-1:-1;24574:66:19;24563:78;;24451:196::o;25013:287::-;25142:3;25180:6;25174:13;25196:66;25255:6;25250:3;25243:4;25235:6;25231:17;25196:66;:::i;:::-;25278:16;;;;;25013:287;-1:-1:-1;;25013:287:19:o"},"gasEstimates":{"creation":{"codeDepositCost":"2911600","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"262","DEPOSITOR_ROLE()":"284","PAUSER_ROLE()":"261","UPGRADER_ROLE()":"283","allowedConsumeReasonCodes(bytes32)":"2549","balanceOf(bytes32,bytes32,string)":"infinite","balanceOf(bytes32,string)":"infinite","balanceOf(bytes32,uint256)":"infinite","balanceOf(uint256)":"infinite","balances(bytes32,uint256,uint256)":"2703","batchAddConsumeReasonCodes(bytes32[])":"infinite","batchRemoveConsumeReasonCodes(bytes32[])":"infinite","consume(bytes32,string,uint256,bytes32)":"infinite","consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":"infinite","consume(uint256,uint256,bytes32)":"infinite","consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":"infinite","currentSeason()":"2340","deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":"infinite","deposit(bytes32,uint256,uint256,uint256,bytes32)":"29875","getRoleAdmin(bytes32)":"2490","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2685","initialize(address,address)":"infinite","nonces(uint256)":"2529","preparePayload(uint256,uint256,bytes32)":"infinite","proxiableUUID()":"infinite","realmIdContract()":"2381","renounceRole(bytes32,address)":"29022","revokeRole(bytes32,address)":"infinite","seasons(bytes32)":"2529","setCurrentSeason(bytes32)":"52191","supportsInterface(bytes4)":"416","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_consume(uint256,uint256,uint256,bytes32,address)":"infinite","_getSigner(uint256,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)":"infinite","_preparePayload(uint256,uint256,uint256,bytes32,uint256)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","DEPOSITOR_ROLE()":"a3b0b5a3","PAUSER_ROLE()":"e63ab1e9","UPGRADER_ROLE()":"f72c0d8b","allowedConsumeReasonCodes(bytes32)":"f9515962","balanceOf(bytes32,bytes32,string)":"098b6419","balanceOf(bytes32,string)":"794459be","balanceOf(bytes32,uint256)":"ad3b1d48","balanceOf(uint256)":"9cc7f708","balances(bytes32,uint256,uint256)":"51955dfc","batchAddConsumeReasonCodes(bytes32[])":"3f30b00f","batchRemoveConsumeReasonCodes(bytes32[])":"906405a3","consume(bytes32,string,uint256,bytes32)":"e564a0e2","consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":"99d342ac","consume(uint256,uint256,bytes32)":"d14a5c71","consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":"dc893ce4","currentSeason()":"bcb39621","deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":"9d70b005","deposit(bytes32,uint256,uint256,uint256,bytes32)":"18ee89f0","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address,address)":"485cc955","nonces(uint256)":"141a468c","preparePayload(uint256,uint256,bytes32)":"df00bb24","proxiableUUID()":"52d1902d","realmIdContract()":"2b48dc72","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","seasons(bytes32)":"4529cc1b","setCurrentSeason(bytes32)":"86a8e98a","supportsInterface(bytes4)":"01ffc9a7","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"BatchAddedConsumeReasonCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"BatchRemovedConsumeReasonCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realmIdOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Consumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"SetCurrentSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allowedConsumeReasonCodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"batchAddConsumeReasonCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"batchRemoveConsumeReasonCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_realmIdContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"}],\"name\":\"preparePayload\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realmIdContract\",\"outputs\":[{\"internalType\":\"contract IRealmId\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seasons\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_season\",\"type\":\"bytes32\"}],\"name\":\"setCurrentSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MocaPoints/MocaPoints.sol\":\"MocaPoints\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"contracts/MocaPoints/MocaPoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IRealmId} from \\\"./interface/mock/IRealmId.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract MocaPoints is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    // Roles\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    // Seasonal variables\\n    bytes32 public currentSeason;\\n    mapping(bytes32 => bool) public seasons;\\n\\n    // Address of the RealmId contract\\n    IRealmId public realmIdContract;\\n\\n    // Balances mapping\\n    mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256))) public balances; // season => realmId => realmIdVersion => balance\\n\\n    // Nonce mapping\\n    mapping(uint256 => uint256) public nonces; // realmId => nonce\\n\\n    // Allowed consume reason codes mapping\\n    mapping(bytes32 => bool) public allowedConsumeReasonCodes;\\n\\n    event SetCurrentSeason(bytes32 season);\\n    event BatchAddedConsumeReasonCode(bytes32[] reasonCodes);\\n    event BatchRemovedConsumeReasonCode(bytes32[] reasonCodes);\\n    event Deposited(\\n        address indexed sender,\\n        bytes32 indexed season,\\n        bytes32 indexed reasonCode,\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        uint256 amount\\n    );\\n\\n    event Consumed(\\n        uint256 indexed realmId,\\n        bytes32 indexed season,\\n        bytes32 indexed reasonCode,\\n        address operator,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        address realmIdOwner,\\n        uint256 nonce\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _realmIdContract, address _adminAddress) public initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        require(address(_realmIdContract) != address(0), \\\"Not a valid Contract Address\\\");\\n        require(address(_adminAddress) != address(0), \\\"Not a valid Admin Address\\\");\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _adminAddress);\\n        realmIdContract = IRealmId(_realmIdContract);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}\\n\\n    function setCurrentSeason(bytes32 _season) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Not an admin\\\");\\n        require(!seasons[_season], \\\"Season already set\\\");\\n        currentSeason = _season;\\n        seasons[_season] = true;\\n        emit SetCurrentSeason(_season);\\n    }\\n\\n    function batchAddConsumeReasonCodes(bytes32[] memory _reasonCodes) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Not an admin\\\");\\n        // Check if each reason code is unique and does not already exist\\n        for (uint256 i = 0; i < _reasonCodes.length; i++) {\\n            require(!allowedConsumeReasonCodes[_reasonCodes[i]], \\\"Reason code already exists\\\");\\n            allowedConsumeReasonCodes[_reasonCodes[i]] = true;\\n        }\\n\\n        // Emit the event to indicate that all reason codes were added\\n        emit BatchAddedConsumeReasonCode(_reasonCodes);\\n    }\\n\\n    function batchRemoveConsumeReasonCodes(bytes32[] memory _reasonCodes) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Not an admin\\\");\\n\\n        // Check if each reason code exists and can be removed\\n        for (uint256 i = 0; i < _reasonCodes.length; i++) {\\n            require(allowedConsumeReasonCodes[_reasonCodes[i]], \\\"Reason code does not exist\\\");\\n            delete allowedConsumeReasonCodes[_reasonCodes[i]];\\n        }\\n\\n        // Emit the event to indicate that all reason codes were removed\\n        emit BatchRemovedConsumeReasonCode(_reasonCodes);\\n    }\\n\\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) public {\\n        // Check if the sender has the Depositor role\\n        require(hasRole(DEPOSITOR_ROLE, msg.sender), \\\"Not a depositor\\\");\\n\\n        // Call the internal _deposit function to perform the deposit operation\\n        balances[season][realmId][realmIdVersion] += amount;\\n\\n        // Emit the Deposit event\\n        emit Deposited(msg.sender, season, depositReasonCode, realmId, realmIdVersion, amount);\\n    }\\n\\n    function deposit(\\n        bytes32 season,\\n        bytes32 parentNode,\\n        string memory name,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        bytes32 depositReasonCode\\n    ) public {\\n        // Create the realmId using parentNode and name\\n        uint256 realmId = realmIdContract.getTokenId(name, parentNode);\\n\\n        // Call the internal _deposit function to perform the deposit operation\\n        deposit(season, realmId, realmIdVersion, amount, depositReasonCode);\\n    }\\n\\n    function _getSigner(\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes32 consumeReasonCode,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address) {\\n        bytes32 _messageHash = _preparePayload(realmId, realmIdVersion, amount, consumeReasonCode, nonce);\\n        bytes32 messageDigest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n        return ecrecover(messageDigest, v, r, s);\\n    }\\n\\n    function _consume(uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 consumeReasonCode, address owner_) internal {\\n        // Check if the sender has enough balance\\n        require(balances[currentSeason][realmId][realmIdVersion] >= amount, \\\"Insufficient balance\\\");\\n\\n        // Check if the consumeReasonCode exists and is true in the mapping\\n        require(allowedConsumeReasonCodes[consumeReasonCode], \\\"Invalid consume reason code\\\");\\n\\n        // Perform the consume operation\\n        balances[currentSeason][realmId][realmIdVersion] -= amount;\\n\\n        // Emit the Consumed event\\n        emit Consumed(realmId, currentSeason, consumeReasonCode, msg.sender, realmIdVersion, amount, owner_, nonces[realmId]);\\n        // Increment the nonce for the realmId\\n        nonces[realmId]++;\\n    }\\n\\n    function consume(bytes32 parentNode, string memory _name, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) public {\\n        // get the realmId using parentNode and name\\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\\n\\n        consume(realmId, amount, consumeReasonCode, v, r, s);\\n    }\\n\\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) public {\\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\\n        address signer = _getSigner(realmId, realmIdVersion, amount, nonces[realmId], consumeReasonCode, v, r, s);\\n        address owner_ = realmIdContract.ownerOf(realmId);\\n        require(signer == owner_, \\\"Signer not owner of realmId\\\");\\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner_);\\n    }\\n\\n    function consume(bytes32 parentNode, string memory _name, uint256 amount, bytes32 consumeReasonCode) public {\\n        // Compute the realmId using the provided parentNode and name\\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\\n        // consumWithrealId call\\n        consume(realmId, amount, consumeReasonCode);\\n    }\\n\\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode) public {\\n        address owner_ = realmIdContract.ownerOf(realmId);\\n        require(msg.sender == owner_, \\\"Sender not owner of realmId\\\");\\n\\n        // Call the common _consume function for the core consume operation\\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, msg.sender);\\n    }\\n\\n    function balanceOf(bytes32 season, uint256 realmId) external view returns (uint256) {\\n        // get realmIdVersion from the realmId contract\\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\\n\\n        return balances[season][realmId][realmIdVersion];\\n    }\\n\\n    function balanceOf(bytes32 season, bytes32 parentNode, string memory _name) external view returns (uint256) {\\n        // Compute the realmId using the provided parentNode and name\\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\\n\\n        // get realmIdVersion from the realmId contract\\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\\n\\n        // Retrieve and return the balance for the calculated realmId\\n        return balances[season][realmId][realmIdVersion];\\n    }\\n\\n    function balanceOf(uint256 realmId) external view returns (uint256) {\\n        // get realmIdVersion from the realmId contract\\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\\n\\n        // Retrieve and return the balance for the given realmId at the current season\\n        return balances[currentSeason][realmId][realmIdVersion];\\n    }\\n\\n    function balanceOf(bytes32 parentNode, string memory _name) external view returns (uint256) {\\n        // Compute the realmId using the provided parentNode and name\\n        uint256 realmId = realmIdContract.getTokenId(_name, parentNode);\\n\\n        // get realmIdVersion from the realmId contract\\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\\n\\n        // Retrieve and return the balance for the given realmId at the current season\\n        return balances[currentSeason][realmId][realmIdVersion];\\n    }\\n\\n    // Return the payload which is generated using the arguments, current season and the realmIdversion\\n    function _preparePayload(\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        bytes32 reasonCode,\\n        uint256 nonce\\n    ) internal view returns (bytes32) {\\n        bytes32 payload = keccak256(abi.encodePacked(realmId, realmIdVersion, amount, currentSeason, reasonCode, nonce));\\n        return payload;\\n    }\\n\\n    // Return the payload which is generated using the arguments, current nonce, current season, and the realmId version\\n    function preparePayload(uint256 realmId, uint256 amount, bytes32 reasonCode) public view returns (bytes32) {\\n        // get realmIdVersion from the realmId contract\\n        uint256 realmIdVersion = realmIdContract.burnCounts(realmId);\\n\\n        return (_preparePayload(realmId, realmIdVersion, amount, reasonCode, nonces[realmId]));\\n    }\\n}\\n\",\"keccak256\":\"0xf5ceaadbf50a16da9d4bcf037083400e85015ea6ef3e8b08d5deb31d1d35e296\",\"license\":\"MIT\"},\"contracts/MocaPoints/interface/mock/IRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// import {RealmId} from \\\"../realmIdContract/RealmId.sol\\\";\\n\\ninterface IRealmId {\\n\\n    function burnCounts(uint256 realmId) external view returns (uint256);\\n\\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\\n\\n    function ownerOf(uint256 realmId) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x35ec0025a2feb33b1480b057388fe8168b267a62fd0913bba22da4aea0fba672\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":780,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":783,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1449,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1832,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":762,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":1077,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":2849,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"currentSeason","offset":0,"slot":"251","type":"t_bytes32"},{"astId":2853,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"seasons","offset":0,"slot":"252","type":"t_mapping(t_bytes32,t_bool)"},{"astId":2856,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"realmIdContract","offset":0,"slot":"253","type":"t_contract(IRealmId)3680"},{"astId":2864,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"balances","offset":0,"slot":"254","type":"t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"},{"astId":2868,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"nonces","offset":0,"slot":"255","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2872,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"allowedConsumeReasonCodes","offset":0,"slot":"256","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IRealmId)3680":{"encoding":"inplace","label":"contract IRealmId","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/MocaPoints/MocaPoints.sol:MocaPoints","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MocaPoints/interface/mock/IRealmId.sol":{"IRealmId":{"abi":[{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"burnCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burnCounts(uint256)":"a9735f94","getTokenId(string,bytes32)":"cad6b901","ownerOf(uint256)":"6352211e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"burnCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MocaPoints/interface/mock/IRealmId.sol\":\"IRealmId\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/MocaPoints/interface/mock/IRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// import {RealmId} from \\\"../realmIdContract/RealmId.sol\\\";\\n\\ninterface IRealmId {\\n\\n    function burnCounts(uint256 realmId) external view returns (uint256);\\n\\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\\n\\n    function ownerOf(uint256 realmId) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x35ec0025a2feb33b1480b057388fe8168b267a62fd0913bba22da4aea0fba672\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MocaPoints/mock/realmIdContract/MockRealmId.sol":{"MockRealmId":{"abi":[{"inputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610178806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636352211e1461003b578063cad6b9011461008c575b600080fd5b6100626100493660046100b1565b507390f79bf6eb2c4f870365e785982e1f101e93b90690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a361009a3660046100ca565b600a9392505050565b604051908152602001610083565b6000602082840312156100c357600080fd5b5035919050565b6000806000604084860312156100df57600080fd5b833567ffffffffffffffff808211156100f757600080fd5b818601915086601f83011261010b57600080fd5b81358181111561011a57600080fd5b87602082850101111561012c57600080fd5b602092830198909750959091013594935050505056fea2646970667358221220ff09c8b17e2d4d073f084bdacfb4cf0a0763d9a7c7daf56c7c6eb164d48deb6164736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x178 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xCAD6B901 EQ PUSH2 0x8C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1 JUMP JUMPDEST POP PUSH20 0x90F79BF6EB2C4F870365E785982E1F101E93B906 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xCA JUMP JUMPDEST PUSH1 0xA SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT MULMOD 0xC8 0xB1 PUSH31 0x2D4D073F084BDACFB4CF0A0763D9A7C7DAF56C7C6EB164D48DEB6164736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"100:268:18:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@getTokenId_3694":{"entryPoint":null,"id":3694,"parameterSlots":3,"returnSlots":1},"@ownerOf_3707":{"entryPoint":null,"id":3707,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptrt_bytes32":{"entryPoint":202,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256":{"entryPoint":177,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1280:19","nodeType":"YulBlock","src":"0:1280:19","statements":[{"nativeSrc":"6:3:19","nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nativeSrc":"84:110:19","nodeType":"YulBlock","src":"84:110:19","statements":[{"body":{"nativeSrc":"130:16:19","nodeType":"YulBlock","src":"130:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"139:1:19","nodeType":"YulLiteral","src":"139:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"142:1:19","nodeType":"YulLiteral","src":"142:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"132:6:19","nodeType":"YulIdentifier","src":"132:6:19"},"nativeSrc":"132:12:19","nodeType":"YulFunctionCall","src":"132:12:19"},"nativeSrc":"132:12:19","nodeType":"YulExpressionStatement","src":"132:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"105:7:19","nodeType":"YulIdentifier","src":"105:7:19"},{"name":"headStart","nativeSrc":"114:9:19","nodeType":"YulIdentifier","src":"114:9:19"}],"functionName":{"name":"sub","nativeSrc":"101:3:19","nodeType":"YulIdentifier","src":"101:3:19"},"nativeSrc":"101:23:19","nodeType":"YulFunctionCall","src":"101:23:19"},{"kind":"number","nativeSrc":"126:2:19","nodeType":"YulLiteral","src":"126:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"97:3:19","nodeType":"YulIdentifier","src":"97:3:19"},"nativeSrc":"97:32:19","nodeType":"YulFunctionCall","src":"97:32:19"},"nativeSrc":"94:52:19","nodeType":"YulIf","src":"94:52:19"},{"nativeSrc":"155:33:19","nodeType":"YulAssignment","src":"155:33:19","value":{"arguments":[{"name":"headStart","nativeSrc":"178:9:19","nodeType":"YulIdentifier","src":"178:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"165:12:19","nodeType":"YulIdentifier","src":"165:12:19"},"nativeSrc":"165:23:19","nodeType":"YulFunctionCall","src":"165:23:19"},"variableNames":[{"name":"value0","nativeSrc":"155:6:19","nodeType":"YulIdentifier","src":"155:6:19"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"14:180:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"50:9:19","nodeType":"YulTypedName","src":"50:9:19","type":""},{"name":"dataEnd","nativeSrc":"61:7:19","nodeType":"YulTypedName","src":"61:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"73:6:19","nodeType":"YulTypedName","src":"73:6:19","type":""}],"src":"14:180:19"},{"body":{"nativeSrc":"300:125:19","nodeType":"YulBlock","src":"300:125:19","statements":[{"nativeSrc":"310:26:19","nodeType":"YulAssignment","src":"310:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"322:9:19","nodeType":"YulIdentifier","src":"322:9:19"},{"kind":"number","nativeSrc":"333:2:19","nodeType":"YulLiteral","src":"333:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"318:3:19","nodeType":"YulIdentifier","src":"318:3:19"},"nativeSrc":"318:18:19","nodeType":"YulFunctionCall","src":"318:18:19"},"variableNames":[{"name":"tail","nativeSrc":"310:4:19","nodeType":"YulIdentifier","src":"310:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"352:9:19","nodeType":"YulIdentifier","src":"352:9:19"},{"arguments":[{"name":"value0","nativeSrc":"367:6:19","nodeType":"YulIdentifier","src":"367:6:19"},{"kind":"number","nativeSrc":"375:42:19","nodeType":"YulLiteral","src":"375:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"363:3:19","nodeType":"YulIdentifier","src":"363:3:19"},"nativeSrc":"363:55:19","nodeType":"YulFunctionCall","src":"363:55:19"}],"functionName":{"name":"mstore","nativeSrc":"345:6:19","nodeType":"YulIdentifier","src":"345:6:19"},"nativeSrc":"345:74:19","nodeType":"YulFunctionCall","src":"345:74:19"},"nativeSrc":"345:74:19","nodeType":"YulExpressionStatement","src":"345:74:19"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"199:226:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"269:9:19","nodeType":"YulTypedName","src":"269:9:19","type":""},{"name":"value0","nativeSrc":"280:6:19","nodeType":"YulTypedName","src":"280:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"291:4:19","nodeType":"YulTypedName","src":"291:4:19","type":""}],"src":"199:226:19"},{"body":{"nativeSrc":"537:559:19","nodeType":"YulBlock","src":"537:559:19","statements":[{"body":{"nativeSrc":"583:16:19","nodeType":"YulBlock","src":"583:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"592:1:19","nodeType":"YulLiteral","src":"592:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"595:1:19","nodeType":"YulLiteral","src":"595:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"585:6:19","nodeType":"YulIdentifier","src":"585:6:19"},"nativeSrc":"585:12:19","nodeType":"YulFunctionCall","src":"585:12:19"},"nativeSrc":"585:12:19","nodeType":"YulExpressionStatement","src":"585:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"558:7:19","nodeType":"YulIdentifier","src":"558:7:19"},{"name":"headStart","nativeSrc":"567:9:19","nodeType":"YulIdentifier","src":"567:9:19"}],"functionName":{"name":"sub","nativeSrc":"554:3:19","nodeType":"YulIdentifier","src":"554:3:19"},"nativeSrc":"554:23:19","nodeType":"YulFunctionCall","src":"554:23:19"},{"kind":"number","nativeSrc":"579:2:19","nodeType":"YulLiteral","src":"579:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"550:3:19","nodeType":"YulIdentifier","src":"550:3:19"},"nativeSrc":"550:32:19","nodeType":"YulFunctionCall","src":"550:32:19"},"nativeSrc":"547:52:19","nodeType":"YulIf","src":"547:52:19"},{"nativeSrc":"608:37:19","nodeType":"YulVariableDeclaration","src":"608:37:19","value":{"arguments":[{"name":"headStart","nativeSrc":"635:9:19","nodeType":"YulIdentifier","src":"635:9:19"}],"functionName":{"name":"calldataload","nativeSrc":"622:12:19","nodeType":"YulIdentifier","src":"622:12:19"},"nativeSrc":"622:23:19","nodeType":"YulFunctionCall","src":"622:23:19"},"variables":[{"name":"offset","nativeSrc":"612:6:19","nodeType":"YulTypedName","src":"612:6:19","type":""}]},{"nativeSrc":"654:28:19","nodeType":"YulVariableDeclaration","src":"654:28:19","value":{"kind":"number","nativeSrc":"664:18:19","nodeType":"YulLiteral","src":"664:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"658:2:19","nodeType":"YulTypedName","src":"658:2:19","type":""}]},{"body":{"nativeSrc":"709:16:19","nodeType":"YulBlock","src":"709:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"718:1:19","nodeType":"YulLiteral","src":"718:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"721:1:19","nodeType":"YulLiteral","src":"721:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"711:6:19","nodeType":"YulIdentifier","src":"711:6:19"},"nativeSrc":"711:12:19","nodeType":"YulFunctionCall","src":"711:12:19"},"nativeSrc":"711:12:19","nodeType":"YulExpressionStatement","src":"711:12:19"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"697:6:19","nodeType":"YulIdentifier","src":"697:6:19"},{"name":"_1","nativeSrc":"705:2:19","nodeType":"YulIdentifier","src":"705:2:19"}],"functionName":{"name":"gt","nativeSrc":"694:2:19","nodeType":"YulIdentifier","src":"694:2:19"},"nativeSrc":"694:14:19","nodeType":"YulFunctionCall","src":"694:14:19"},"nativeSrc":"691:34:19","nodeType":"YulIf","src":"691:34:19"},{"nativeSrc":"734:32:19","nodeType":"YulVariableDeclaration","src":"734:32:19","value":{"arguments":[{"name":"headStart","nativeSrc":"748:9:19","nodeType":"YulIdentifier","src":"748:9:19"},{"name":"offset","nativeSrc":"759:6:19","nodeType":"YulIdentifier","src":"759:6:19"}],"functionName":{"name":"add","nativeSrc":"744:3:19","nodeType":"YulIdentifier","src":"744:3:19"},"nativeSrc":"744:22:19","nodeType":"YulFunctionCall","src":"744:22:19"},"variables":[{"name":"_2","nativeSrc":"738:2:19","nodeType":"YulTypedName","src":"738:2:19","type":""}]},{"body":{"nativeSrc":"814:16:19","nodeType":"YulBlock","src":"814:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"823:1:19","nodeType":"YulLiteral","src":"823:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"826:1:19","nodeType":"YulLiteral","src":"826:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"816:6:19","nodeType":"YulIdentifier","src":"816:6:19"},"nativeSrc":"816:12:19","nodeType":"YulFunctionCall","src":"816:12:19"},"nativeSrc":"816:12:19","nodeType":"YulExpressionStatement","src":"816:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"793:2:19","nodeType":"YulIdentifier","src":"793:2:19"},{"kind":"number","nativeSrc":"797:4:19","nodeType":"YulLiteral","src":"797:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"789:3:19","nodeType":"YulIdentifier","src":"789:3:19"},"nativeSrc":"789:13:19","nodeType":"YulFunctionCall","src":"789:13:19"},{"name":"dataEnd","nativeSrc":"804:7:19","nodeType":"YulIdentifier","src":"804:7:19"}],"functionName":{"name":"slt","nativeSrc":"785:3:19","nodeType":"YulIdentifier","src":"785:3:19"},"nativeSrc":"785:27:19","nodeType":"YulFunctionCall","src":"785:27:19"}],"functionName":{"name":"iszero","nativeSrc":"778:6:19","nodeType":"YulIdentifier","src":"778:6:19"},"nativeSrc":"778:35:19","nodeType":"YulFunctionCall","src":"778:35:19"},"nativeSrc":"775:55:19","nodeType":"YulIf","src":"775:55:19"},{"nativeSrc":"839:30:19","nodeType":"YulVariableDeclaration","src":"839:30:19","value":{"arguments":[{"name":"_2","nativeSrc":"866:2:19","nodeType":"YulIdentifier","src":"866:2:19"}],"functionName":{"name":"calldataload","nativeSrc":"853:12:19","nodeType":"YulIdentifier","src":"853:12:19"},"nativeSrc":"853:16:19","nodeType":"YulFunctionCall","src":"853:16:19"},"variables":[{"name":"length","nativeSrc":"843:6:19","nodeType":"YulTypedName","src":"843:6:19","type":""}]},{"body":{"nativeSrc":"896:16:19","nodeType":"YulBlock","src":"896:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"905:1:19","nodeType":"YulLiteral","src":"905:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"908:1:19","nodeType":"YulLiteral","src":"908:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"898:6:19","nodeType":"YulIdentifier","src":"898:6:19"},"nativeSrc":"898:12:19","nodeType":"YulFunctionCall","src":"898:12:19"},"nativeSrc":"898:12:19","nodeType":"YulExpressionStatement","src":"898:12:19"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"884:6:19","nodeType":"YulIdentifier","src":"884:6:19"},{"name":"_1","nativeSrc":"892:2:19","nodeType":"YulIdentifier","src":"892:2:19"}],"functionName":{"name":"gt","nativeSrc":"881:2:19","nodeType":"YulIdentifier","src":"881:2:19"},"nativeSrc":"881:14:19","nodeType":"YulFunctionCall","src":"881:14:19"},"nativeSrc":"878:34:19","nodeType":"YulIf","src":"878:34:19"},{"body":{"nativeSrc":"964:16:19","nodeType":"YulBlock","src":"964:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"973:1:19","nodeType":"YulLiteral","src":"973:1:19","type":"","value":"0"},{"kind":"number","nativeSrc":"976:1:19","nodeType":"YulLiteral","src":"976:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"966:6:19","nodeType":"YulIdentifier","src":"966:6:19"},"nativeSrc":"966:12:19","nodeType":"YulFunctionCall","src":"966:12:19"},"nativeSrc":"966:12:19","nodeType":"YulExpressionStatement","src":"966:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"935:2:19","nodeType":"YulIdentifier","src":"935:2:19"},{"name":"length","nativeSrc":"939:6:19","nodeType":"YulIdentifier","src":"939:6:19"}],"functionName":{"name":"add","nativeSrc":"931:3:19","nodeType":"YulIdentifier","src":"931:3:19"},"nativeSrc":"931:15:19","nodeType":"YulFunctionCall","src":"931:15:19"},{"kind":"number","nativeSrc":"948:4:19","nodeType":"YulLiteral","src":"948:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"927:3:19","nodeType":"YulIdentifier","src":"927:3:19"},"nativeSrc":"927:26:19","nodeType":"YulFunctionCall","src":"927:26:19"},{"name":"dataEnd","nativeSrc":"955:7:19","nodeType":"YulIdentifier","src":"955:7:19"}],"functionName":{"name":"gt","nativeSrc":"924:2:19","nodeType":"YulIdentifier","src":"924:2:19"},"nativeSrc":"924:39:19","nodeType":"YulFunctionCall","src":"924:39:19"},"nativeSrc":"921:59:19","nodeType":"YulIf","src":"921:59:19"},{"nativeSrc":"989:23:19","nodeType":"YulAssignment","src":"989:23:19","value":{"arguments":[{"name":"_2","nativeSrc":"1003:2:19","nodeType":"YulIdentifier","src":"1003:2:19"},{"kind":"number","nativeSrc":"1007:4:19","nodeType":"YulLiteral","src":"1007:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"999:3:19","nodeType":"YulIdentifier","src":"999:3:19"},"nativeSrc":"999:13:19","nodeType":"YulFunctionCall","src":"999:13:19"},"variableNames":[{"name":"value0","nativeSrc":"989:6:19","nodeType":"YulIdentifier","src":"989:6:19"}]},{"nativeSrc":"1021:16:19","nodeType":"YulAssignment","src":"1021:16:19","value":{"name":"length","nativeSrc":"1031:6:19","nodeType":"YulIdentifier","src":"1031:6:19"},"variableNames":[{"name":"value1","nativeSrc":"1021:6:19","nodeType":"YulIdentifier","src":"1021:6:19"}]},{"nativeSrc":"1046:44:19","nodeType":"YulAssignment","src":"1046:44:19","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1073:9:19","nodeType":"YulIdentifier","src":"1073:9:19"},{"kind":"number","nativeSrc":"1084:4:19","nodeType":"YulLiteral","src":"1084:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1069:3:19","nodeType":"YulIdentifier","src":"1069:3:19"},"nativeSrc":"1069:20:19","nodeType":"YulFunctionCall","src":"1069:20:19"}],"functionName":{"name":"calldataload","nativeSrc":"1056:12:19","nodeType":"YulIdentifier","src":"1056:12:19"},"nativeSrc":"1056:34:19","nodeType":"YulFunctionCall","src":"1056:34:19"},"variableNames":[{"name":"value2","nativeSrc":"1046:6:19","nodeType":"YulIdentifier","src":"1046:6:19"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_bytes32","nativeSrc":"430:666:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"487:9:19","nodeType":"YulTypedName","src":"487:9:19","type":""},{"name":"dataEnd","nativeSrc":"498:7:19","nodeType":"YulTypedName","src":"498:7:19","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"510:6:19","nodeType":"YulTypedName","src":"510:6:19","type":""},{"name":"value1","nativeSrc":"518:6:19","nodeType":"YulTypedName","src":"518:6:19","type":""},{"name":"value2","nativeSrc":"526:6:19","nodeType":"YulTypedName","src":"526:6:19","type":""}],"src":"430:666:19"},{"body":{"nativeSrc":"1202:76:19","nodeType":"YulBlock","src":"1202:76:19","statements":[{"nativeSrc":"1212:26:19","nodeType":"YulAssignment","src":"1212:26:19","value":{"arguments":[{"name":"headStart","nativeSrc":"1224:9:19","nodeType":"YulIdentifier","src":"1224:9:19"},{"kind":"number","nativeSrc":"1235:2:19","nodeType":"YulLiteral","src":"1235:2:19","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1220:3:19","nodeType":"YulIdentifier","src":"1220:3:19"},"nativeSrc":"1220:18:19","nodeType":"YulFunctionCall","src":"1220:18:19"},"variableNames":[{"name":"tail","nativeSrc":"1212:4:19","nodeType":"YulIdentifier","src":"1212:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1254:9:19","nodeType":"YulIdentifier","src":"1254:9:19"},{"name":"value0","nativeSrc":"1265:6:19","nodeType":"YulIdentifier","src":"1265:6:19"}],"functionName":{"name":"mstore","nativeSrc":"1247:6:19","nodeType":"YulIdentifier","src":"1247:6:19"},"nativeSrc":"1247:25:19","nodeType":"YulFunctionCall","src":"1247:25:19"},"nativeSrc":"1247:25:19","nodeType":"YulExpressionStatement","src":"1247:25:19"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"1101:177:19","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1171:9:19","nodeType":"YulTypedName","src":"1171:9:19","type":""},{"name":"value0","nativeSrc":"1182:6:19","nodeType":"YulTypedName","src":"1182:6:19","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1193:4:19","nodeType":"YulTypedName","src":"1193:4:19","type":""}],"src":"1101:177:19"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := calldataload(add(headStart, 0x20))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c80636352211e1461003b578063cad6b9011461008c575b600080fd5b6100626100493660046100b1565b507390f79bf6eb2c4f870365e785982e1f101e93b90690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a361009a3660046100ca565b600a9392505050565b604051908152602001610083565b6000602082840312156100c357600080fd5b5035919050565b6000806000604084860312156100df57600080fd5b833567ffffffffffffffff808211156100f757600080fd5b818601915086601f83011261010b57600080fd5b81358181111561011a57600080fd5b87602082850101111561012c57600080fd5b602092830198909750959091013594935050505056fea2646970667358221220ff09c8b17e2d4d073f084bdacfb4cf0a0763d9a7c7daf56c7c6eb164d48deb6164736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xCAD6B901 EQ PUSH2 0x8C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1 JUMP JUMPDEST POP PUSH20 0x90F79BF6EB2C4F870365E785982E1F101E93B906 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xCA JUMP JUMPDEST PUSH1 0xA SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT MULMOD 0xC8 0xB1 PUSH31 0x2D4D073F084BDACFB4CF0A0763D9A7C7DAF56C7C6EB164D48DEB6164736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"100:268:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;235:131;;;;;;:::i;:::-;-1:-1:-1;316:42:18;;235:131;;;;375:42:19;363:55;;;345:74;;333:2;318:18;235:131:18;;;;;;;;127:102;;;;;;:::i;:::-;220:2;127:102;;;;;;;;;1247:25:19;;;1235:2;1220:18;127:102:18;1101:177:19;14:180;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:19;;14:180;-1:-1:-1;14:180:19:o;430:666::-;510:6;518;526;579:2;567:9;558:7;554:23;550:32;547:52;;;595:1;592;585:12;547:52;635:9;622:23;664:18;705:2;697:6;694:14;691:34;;;721:1;718;711:12;691:34;759:6;748:9;744:22;734:32;;804:7;797:4;793:2;789:13;785:27;775:55;;826:1;823;816:12;775:55;866:2;853:16;892:2;884:6;881:14;878:34;;;908:1;905;898:12;878:34;955:7;948:4;939:6;935:2;931:15;927:26;924:39;921:59;;;976:1;973;966:12;921:59;1007:4;999:13;;;;1031:6;;-1:-1:-1;1069:20:19;;;;1056:34;;430:666;-1:-1:-1;;;;430:666:19:o"},"gasEstimates":{"creation":{"codeDepositCost":"75200","executionCost":"123","totalCost":"75323"},"external":{"getTokenId(string,bytes32)":"474","ownerOf(uint256)":"250"}},"methodIdentifiers":{"getTokenId(string,bytes32)":"cad6b901","ownerOf(uint256)":"6352211e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MocaPoints/mock/realmIdContract/MockRealmId.sol\":\"MockRealmId\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/MocaPoints/mock/realmIdContract/MockRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// import {RealmId} from \\\"./RealmId.sol\\\";\\n\\ncontract MockRealmId {\\n    function getTokenId(string calldata, bytes32) public pure returns (uint256) {\\n        return 10;\\n    }\\n\\n    function ownerOf(uint256) public pure returns (address) {\\n        return address(0x90F79bf6EB2c4f870365E785982E1f101E93b906);\\n    }\\n}\\n\",\"keccak256\":\"0x36245eeda8a5140693eee120e4799cbb3a07c18e09e7d108ef3d6d1b1a2c5bf6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}