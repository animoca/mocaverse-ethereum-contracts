{"id":"7e01a38ccb00ff2b1d8ec3e410ff7bff","_format":"hh-sol-build-info-1","solcVersion":"0.8.21","solcLongVersion":"0.8.21+commit.d9974bed","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC-173 Contract Ownership Standard (events)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173Events {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 is IERC173Events {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/MocaPoints/interface/IRealmId.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\n// import {RealmId} from \"../realmIdContract/RealmId.sol\";\n\ninterface IRealmId {\n    function burnCounts(uint256 realmId) external view returns (uint256);\n\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\n\n    function ownerOf(uint256 realmId) external view returns (address);\n}\n"},"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\ninterface IMocaPoints {\n\n    function seasons(bytes32) external view returns (bool);\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) external;\n}"},"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport {IRealmId} from \"../MocaPoints/interface/IRealmId.sol\";\nimport {IMocaPoints} from \"./interface/IMocaPoints.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\n\ncontract SeasonalCumulativeMerkleClaim is ContractOwnership {\n    using MerkleProof for bytes32[];\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    IMocaPoints public immutable MOCA_POINTS_CONTRACT;\n\n    mapping(bytes32 => bool) public paused;\n    mapping(bytes32 => bytes32) public roots;\n    mapping(bytes32 => uint256) public nonces;\n    mapping(bytes32 => bool) public claimed;\n\n    event Paused(bytes32 season);\n    event Unpaused(bytes32 season);\n\n    /// @notice Emitted when a new merkle root is set.\n    /// @param season The season that the merkle root would be set.\n    /// @param root The new merkle root.\n    event MerkleRootSet(bytes32 season, bytes32 root);\n\n    /// @notice Emitted when a payout is claimed.\n    /// @param season The season of the claim.\n    /// @param root The merkle root on which the claim was made.\n    /// @param realmId The realmId of the claim.\n    /// @param realmIdVersion The version of the realmId.\n    /// @param amount The amount of points is claimed.\n    /// @param depositReasonCode The deposit reason of the claim.\n    /// @param nonce The nonce as when the claim was made.\n    event PayoutClaimed(\n        bytes32 indexed season,\n        bytes32 indexed root,\n        uint256 indexed realmId,\n        uint256 realmIdVersion,\n        uint256 amount,\n        bytes32 depositReasonCode,\n        uint256 nonce\n    );\n\n    /// @notice Thrown when trying to claim the same leaf more than once.\n    /// @param season The season of the claim.\n    /// @param realmId The realmId of the claim.\n    /// @param realmIdVersion The version of the realmId.\n    /// @param amount The amount of points is claimed.\n    /// @param depositReasonCode The deposit reason of the claim.\n    /// @param nonce The nonce as when the claim was made.\n    error AlreadyClaimed(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode, uint256 nonce);\n\n    /// @notice Thrown when a proof cannot be verified.\n    /// @param season The season of the claim.\n    /// @param realmId The realmId of the claim.\n    /// @param realmIdVersion The version of the realmId.\n    /// @param amount The amount of points is claimed.\n    /// @param depositReasonCode The deposit reason of the claim.\n    /// @param nonce The nonce as when the claim was made.\n    error InvalidProof(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode, uint256 nonce);\n\n    /// @notice Throws when the season does not exists.\n    /// @param season The season of the claim.\n    error InvalidSeason(bytes32 season);\n\n    /// @notice Throws when the merkle root does not exist.\n    /// @param season The season of the claim.\n    error MerkleRootNotExists(bytes32 season);\n\n    /// @notice Throws when the claim amount is zero.\n    /// @param amount The amount of the claim.\n    error InvalidClaimAmount(uint256 amount);\n\n    /// @notice Throws when the season is paused.\n    /// @param season The season that is paused\n    error SeasonIsPaused(bytes32 season);\n\n    /// @notice Throws when the season is not paused.\n    /// @param season The season that is not paused.\n    error SeasonNotPaused(bytes32 season);\n\n    constructor(address mocaPointsContractAddress) ContractOwnership(msg.sender) {\n        MOCA_POINTS_CONTRACT = IMocaPoints(mocaPointsContractAddress);\n    }\n\n    /// @notice Sets the merkle root for a new claiming period and unpauses the season.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {SeasonNotPaused} if the season is not paused while applying an update to the root.\n    /// @dev Reverts with {InvalidSeason} if the season does not exist.\n    /// @dev Emits an {Unpaused} event.\n    /// @dev Emits a {MerkleRootSet} event.\n    /// @param season The season to be set for th merkle root.\n    /// @param merkleRoot The merkle root to set.\n    function setMerkleRoot(bytes32 season, bytes32 merkleRoot) public {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(msg.sender);\n\n        if (roots[season] != 0 && !paused[season]) {\n            revert SeasonNotPaused(season);\n        }\n        if (!MOCA_POINTS_CONTRACT.seasons(season)) {\n            revert InvalidSeason(season);\n        }\n\n        roots[season] = merkleRoot;\n        unchecked {\n            ++nonces[season];\n        }\n        emit MerkleRootSet(season, merkleRoot);\n\n        paused[season] = false;\n        emit Unpaused(season);\n    }\n\n    /// @notice Executes the payout for a given realmId (anyone can call this function).\n    /// @dev Reverts with {MerkleRootNotExists} if the merkle root does not exist.\n    /// @dev Reverts with {SeasonIsPaused} if the contract is paused for that season.\n    /// @dev Reverts with {InvalidClaimAmount} if the merkle leaf is storing a zero amount.\n    /// @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\n    /// @dev Reverts with {InvalidProof} if the merkle proof cannot be verified.\n    /// @dev Emits a {PayoutClaimed} event.\n    /// @param season The season to be claimed.\n    /// @param realmId The realmId for this claim.\n    /// @param realmIdVersion The version of the realmId for this claim.\n    /// @param amount The amount of points to be claimed.\n    /// @param depositReasonCode The deposit reason code for this claim.\n    /// @param proof The Merkle proof of the user based on the merkle root\n    function claimPayout(\n        bytes32 season,\n        uint256 realmId,\n        uint256 realmIdVersion,\n        uint256 amount,\n        bytes32 depositReasonCode,\n        bytes32[] calldata proof\n    ) external {\n        if (amount == 0) {\n            revert InvalidClaimAmount(amount);\n        }\n        if (paused[season]) {\n            revert SeasonIsPaused(season);\n        }\n        bytes32 currentRoot = roots[season];\n        if (currentRoot == 0) {\n            revert MerkleRootNotExists(season);\n        }\n\n        uint256 currentNonce = nonces[season];\n\n        bytes32 leaf = keccak256(abi.encodePacked(season, realmId, realmIdVersion, amount, depositReasonCode, currentNonce));\n\n        if (claimed[leaf]) {\n            revert AlreadyClaimed(season, realmId, realmIdVersion, amount, depositReasonCode, currentNonce);\n        }\n        if (!proof.verifyCalldata(currentRoot, leaf)) {\n            revert InvalidProof(season, realmId, realmIdVersion, amount, depositReasonCode, currentNonce);\n        }\n\n        claimed[leaf] = true;\n\n        MOCA_POINTS_CONTRACT.deposit(season, realmId, realmIdVersion, amount, depositReasonCode);\n\n        emit PayoutClaimed(season, currentRoot, realmId, realmIdVersion, amount, depositReasonCode, currentNonce);\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[394],"InterfaceDetection":[424]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":395,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":425,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":424,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,424,441,80,950,132,112],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"632:31:0"},"referencedDeclaration":163,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":235,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$163_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,429],"usedEvents":[111]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[950],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[394],"IERC173":[132]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":133,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":395,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":951,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":132,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":950,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,950,132,112],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"644:31:1"},"referencedDeclaration":163,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[131],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":314,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$163_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[125],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":301,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$163_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[111]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotTargetContractOwner":[101]},"id":102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":101,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":101,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":101,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","exportedSymbols":{"IERC173Events":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":103,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173Events","contractDependencies":[],"contractKind":"interface","documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"58:179:4","text":"@title ERC-173 Contract Ownership Standard (events)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112],"name":"IERC173Events","nameLocation":"247:13:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":105,"nodeType":"StructuredDocumentation","src":"267:162:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":111,"name":"OwnershipTransferred","nameLocation":"440:20:4","nodeType":"EventDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"477:13:4","nodeType":"VariableDeclaration","scope":111,"src":"461:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":106,"name":"address","nodeType":"ElementaryTypeName","src":"461:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":109,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"508:8:4","nodeType":"VariableDeclaration","scope":111,"src":"492:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"492:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"460:57:4"},"src":"434:84:4"}],"scope":113,"src":"237:283:4","usedErrors":[],"usedEvents":[111]}],"src":"32:489:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[132],"IERC173Events":[112]},"id":133,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":133,"sourceUnit":113,"src":"58:60:5","symbolAliases":[{"foreign":{"id":115,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"66:13:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":118,"name":"IERC173Events","nameLocations":["323:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"323:13:5"},"id":119,"nodeType":"InheritanceSpecifier","src":"323:13:5"}],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":117,"nodeType":"StructuredDocumentation","src":"120:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":132,"linearizedBaseContracts":[132,112],"name":"IERC173","nameLocation":"312:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"343:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"699:17:5","nodeType":"FunctionDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":122,"mutability":"mutable","name":"newOwner","nameLocation":"725:8:5","nodeType":"VariableDeclaration","scope":125,"src":"717:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"716:18:5"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[],"src":"743:0:5"},"scope":132,"src":"690:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"750:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":131,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"880:5:5","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"885:2:5"},"returnParameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"contractOwner","nameLocation":"919:13:5","nodeType":"VariableDeclaration","scope":131,"src":"911:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"910:23:5"},"scope":132,"src":"871:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":133,"src":"302:634:5","usedErrors":[],"usedEvents":[111]}],"src":"32:905:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[928],"ContractOwnershipStorage":[394],"IERC173":[132],"IERC173Events":[112],"InterfaceDetectionStorage":[542],"NotContractOwner":[94],"NotTargetContractOwner":[101],"ProxyInitialization":[598],"TargetIsNotAContract":[87]},"id":395,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":134,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":102,"src":"58:97:6","symbolAliases":[{"foreign":{"id":135,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":136,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":138,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":113,"src":"217:60:6","symbolAliases":[{"foreign":{"id":140,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"225:13:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":133,"src":"278:52:6","symbolAliases":[{"foreign":{"id":142,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"286:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":929,"src":"331:66:6","symbolAliases":[{"foreign":{"id":144,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"339:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":599,"src":"398:84:6","symbolAliases":[{"foreign":{"id":146,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"406:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":149,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":543,"src":"483:104:6","symbolAliases":[{"foreign":{"id":148,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"491:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":394,"linearizedBaseContracts":[394],"name":"ContractOwnershipStorage","nameLocation":"597:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":152,"libraryName":{"id":150,"name":"Address","nameLocations":["634:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":928,"src":"634:7:6"},"nodeType":"UsingForDirective","src":"628:26:6","typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"646:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":156,"libraryName":{"id":153,"name":"ContractOwnershipStorage","nameLocations":["665:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"665:24:6"},"nodeType":"UsingForDirective","src":"659:67:6","typeName":{"id":155,"nodeType":"UserDefinedTypeName","pathNode":{"id":154,"name":"ContractOwnershipStorage.Layout","nameLocations":["694:24:6","719:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"694:31:6"},"referencedDeclaration":163,"src":"694:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":160,"libraryName":{"id":157,"name":"InterfaceDetectionStorage","nameLocations":["737:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"737:25:6"},"nodeType":"UsingForDirective","src":"731:69:6","typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"InterfaceDetectionStorage.Layout","nameLocations":["767:25:6","793:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"767:32:6"},"referencedDeclaration":452,"src":"767:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":163,"members":[{"constant":false,"id":162,"mutability":"mutable","name":"contractOwner","nameLocation":"838:13:6","nodeType":"VariableDeclaration","scope":163,"src":"830:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"813:6:6","nodeType":"StructDefinition","scope":394,"src":"806:52:6","visibility":"public"},{"constant":true,"id":176,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"890:19:6","nodeType":"VariableDeclaration","scope":394,"src":"864:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"938:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":169,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"928:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"928:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"920:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"920:7:6","typeDescriptions":{}}},"id":172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"920:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"912:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:6","typeDescriptions":{}}},"id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":189,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1024:21:6","nodeType":"VariableDeclaration","scope":394,"src":"998:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1074:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":182,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1064:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1056:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":180,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:6","typeDescriptions":{}}},"id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1124:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1056:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1048:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:6","typeDescriptions":{}}},"id":188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1048:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"1635:281:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":198,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"1649:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1673:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:6","typeDescriptions":{}}},"id":202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":221,"nodeType":"IfStatement","src":"1645:166:6","trueBody":{"id":220,"nodeType":"Block","src":"1677:134:6","statements":[{"expression":{"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":204,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"1691:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1693:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":162,"src":"1691:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":207,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"1709:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1691:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":209,"nodeType":"ExpressionStatement","src":"1691:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1775:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"1775:7:6","typeDescriptions":{}}},"id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1775:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":217,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"1787:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":210,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"1740:13:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$112_$","typeString":"type(contract IERC173Events)"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1754:20:6","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":111,"src":"1740:34:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":219,"nodeType":"EmitStatement","src":"1735:65:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":228,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"1882:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$132_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$132_$","typeString":"type(contract IERC173)"}],"id":227,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1877:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1877:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$132","typeString":"type(contract IERC173)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1891:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1877:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1904:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":222,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"1820:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$542_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1846:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":541,"src":"1820:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1820:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1855:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":495,"src":"1820:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$452_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1820:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":233,"nodeType":"ExpressionStatement","src":"1820:89:6"}]},"documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"1133:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":235,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1570:15:6","nodeType":"FunctionDefinition","parameters":{"id":196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"s","nameLocation":"1601:1:6","nodeType":"VariableDeclaration","scope":235,"src":"1586:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":192,"nodeType":"UserDefinedTypeName","pathNode":{"id":191,"name":"Layout","nameLocations":["1586:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"1586:6:6"},"referencedDeclaration":163,"src":"1586:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"initialOwner","nameLocation":"1612:12:6","nodeType":"VariableDeclaration","scope":235,"src":"1604:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":194,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1585:40:6"},"returnParameters":{"id":197,"nodeType":"ParameterList","parameters":[],"src":"1635:0:6"},"scope":394,"src":"1561:355:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":257,"nodeType":"Block","src":"2581:112:6","statements":[{"expression":{"arguments":[{"id":247,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"2620:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2643:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":244,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"2591:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$598_$","typeString":"type(library ProxyInitialization)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2611:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":597,"src":"2591:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2591:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":250,"nodeType":"ExpressionStatement","src":"2591:54:6"},{"expression":{"arguments":[{"id":254,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"2673:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":251,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"2655:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2657:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":235,"src":"2655:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$163_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2655:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":256,"nodeType":"ExpressionStatement","src":"2655:31:6"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"1922:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":258,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2522:9:6","nodeType":"FunctionDefinition","parameters":{"id":242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"s","nameLocation":"2547:1:6","nodeType":"VariableDeclaration","scope":258,"src":"2532:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"Layout","nameLocations":["2532:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"2532:6:6"},"referencedDeclaration":163,"src":"2532:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"initialOwner","nameLocation":"2558:12:6","nodeType":"VariableDeclaration","scope":258,"src":"2550:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":240,"name":"address","nodeType":"ElementaryTypeName","src":"2550:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2531:40:6"},"returnParameters":{"id":243,"nodeType":"ParameterList","parameters":[],"src":"2581:0:6"},"scope":394,"src":"2513:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":300,"nodeType":"Block","src":"3156:295:6","statements":[{"assignments":[270],"declarations":[{"constant":false,"id":270,"mutability":"mutable","name":"previousOwner","nameLocation":"3174:13:6","nodeType":"VariableDeclaration","scope":300,"src":"3166:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"3166:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":273,"initialValue":{"expression":{"id":271,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3190:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3192:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":162,"src":"3190:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3166:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3219:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":275,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"3229:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3219:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":281,"nodeType":"IfStatement","src":"3215:60:6","trueBody":{"errorCall":{"arguments":[{"id":278,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3268:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":277,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3251:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":280,"nodeType":"RevertStatement","src":"3244:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":282,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"3289:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":283,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"3306:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3289:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":299,"nodeType":"IfStatement","src":"3285:160:6","trueBody":{"id":298,"nodeType":"Block","src":"3316:129:6","statements":[{"expression":{"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":285,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3330:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":287,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3332:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":162,"src":"3330:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":288,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"3348:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3330:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":290,"nodeType":"ExpressionStatement","src":"3330:26:6"},{"eventCall":{"arguments":[{"id":294,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"3410:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":295,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"3425:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":291,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"3375:13:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$112_$","typeString":"type(contract IERC173Events)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3389:20:6","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":111,"src":"3375:34:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3375:59:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":297,"nodeType":"EmitStatement","src":"3370:64:6"}]}}]},"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"2699:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":301,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3077:17:6","nodeType":"FunctionDefinition","parameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"s","nameLocation":"3110:1:6","nodeType":"VariableDeclaration","scope":301,"src":"3095:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":261,"nodeType":"UserDefinedTypeName","pathNode":{"id":260,"name":"Layout","nameLocations":["3095:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"3095:6:6"},"referencedDeclaration":163,"src":"3095:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"sender","nameLocation":"3121:6:6","nodeType":"VariableDeclaration","scope":301,"src":"3113:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"3113:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":266,"mutability":"mutable","name":"newOwner","nameLocation":"3137:8:6","nodeType":"VariableDeclaration","scope":301,"src":"3129:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"3129:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3094:52:6"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[],"src":"3156:0:6"},"scope":394,"src":"3068:383:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":313,"nodeType":"Block","src":"3657:39:6","statements":[{"expression":{"expression":{"id":310,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3674:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3676:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":162,"src":"3674:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":309,"id":312,"nodeType":"Return","src":"3667:22:6"}]},"documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"3457:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":314,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3587:5:6","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"s","nameLocation":"3608:1:6","nodeType":"VariableDeclaration","scope":314,"src":"3593:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":304,"nodeType":"UserDefinedTypeName","pathNode":{"id":303,"name":"Layout","nameLocations":["3593:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"3593:6:6"},"referencedDeclaration":163,"src":"3593:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3592:18:6"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"contractOwner","nameLocation":"3642:13:6","nodeType":"VariableDeclaration","scope":314,"src":"3634:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":307,"name":"address","nodeType":"ElementaryTypeName","src":"3634:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3633:23:6"},"scope":394,"src":"3578:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":341,"nodeType":"Block","src":"4092:153:6","statements":[{"condition":{"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4106:28:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4107:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4122:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":616,"src":"4107:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4107:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":332,"nodeType":"IfStatement","src":"4102:77:6","trueBody":{"errorCall":{"arguments":[{"id":329,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4164:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":328,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4143:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4143:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":331,"nodeType":"RevertStatement","src":"4136:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":334,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4204:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":333,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"4196:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$132_$","typeString":"type(contract IERC173)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4196:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$132","typeString":"contract IERC173"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4220:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":131,"src":"4196:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4196:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":338,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4231:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4196:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":323,"id":340,"nodeType":"Return","src":"4189:49:6"}]},"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"3702:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":342,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3977:21:6","nodeType":"FunctionDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"targetContract","nameLocation":"4007:14:6","nodeType":"VariableDeclaration","scope":342,"src":"3999:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"3999:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"account","nameLocation":"4031:7:6","nodeType":"VariableDeclaration","scope":342,"src":"4023:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"4023:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3998:41:6"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4068:22:6","nodeType":"VariableDeclaration","scope":342,"src":"4063:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":321,"name":"bool","nodeType":"ElementaryTypeName","src":"4063:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4062:29:6"},"scope":394,"src":"3968:277:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":360,"nodeType":"Block","src":"4516:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":351,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"4530:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":352,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"4541:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4543:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":162,"src":"4541:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4530:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":359,"nodeType":"IfStatement","src":"4526:64:6","trueBody":{"errorCall":{"arguments":[{"id":356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"4582:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":355,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4565:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4565:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":358,"nodeType":"RevertStatement","src":"4558:32:6"}}]},"documentation":{"id":343,"nodeType":"StructuredDocumentation","src":"4251:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":361,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4444:22:6","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"s","nameLocation":"4482:1:6","nodeType":"VariableDeclaration","scope":361,"src":"4467:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":345,"nodeType":"UserDefinedTypeName","pathNode":{"id":344,"name":"Layout","nameLocations":["4467:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"4467:6:6"},"referencedDeclaration":163,"src":"4467:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"account","nameLocation":"4493:7:6","nodeType":"VariableDeclaration","scope":361,"src":"4485:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"4485:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4466:35:6"},"returnParameters":{"id":350,"nodeType":"ParameterList","parameters":[],"src":"4516:0:6"},"scope":394,"src":"4435:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":380,"nodeType":"Block","src":"4957:124:6","statements":[{"condition":{"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4971:47:6","subExpression":{"arguments":[{"id":370,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"4994:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":371,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5010:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":369,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"4972:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4972:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":379,"nodeType":"IfStatement","src":"4967:107:6","trueBody":{"errorCall":{"arguments":[{"id":375,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5050:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":376,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5066:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":374,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"5027:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5027:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":378,"nodeType":"RevertStatement","src":"5020:54:6"}}]},"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"4603:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":381,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4873:28:6","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"targetContract","nameLocation":"4910:14:6","nodeType":"VariableDeclaration","scope":381,"src":"4902:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":363,"name":"address","nodeType":"ElementaryTypeName","src":"4902:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"account","nameLocation":"4934:7:6","nodeType":"VariableDeclaration","scope":381,"src":"4926:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4901:41:6"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"4957:0:6"},"scope":394,"src":"4864:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":392,"nodeType":"Block","src":"5146:115:6","statements":[{"assignments":[388],"declarations":[{"constant":false,"id":388,"mutability":"mutable","name":"position","nameLocation":"5164:8:6","nodeType":"VariableDeclaration","scope":392,"src":"5156:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":390,"initialValue":{"id":389,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"5175:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5156:38:6"},{"AST":{"nativeSrc":"5213:42:6","nodeType":"YulBlock","src":"5213:42:6","statements":[{"nativeSrc":"5227:18:6","nodeType":"YulAssignment","src":"5227:18:6","value":{"name":"position","nativeSrc":"5237:8:6","nodeType":"YulIdentifier","src":"5237:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5227:6:6","nodeType":"YulIdentifier","src":"5227:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":388,"isOffset":false,"isSlot":false,"src":"5237:8:6","valueSize":1},{"declaration":385,"isOffset":false,"isSlot":true,"src":"5227:6:6","suffix":"slot","valueSize":1}],"id":391,"nodeType":"InlineAssembly","src":"5204:51:6"}]},"id":393,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5096:6:6","nodeType":"FunctionDefinition","parameters":{"id":382,"nodeType":"ParameterList","parameters":[],"src":"5102:2:6"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"s","nameLocation":"5143:1:6","nodeType":"VariableDeclaration","scope":393,"src":"5128:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":384,"nodeType":"UserDefinedTypeName","pathNode":{"id":383,"name":"Layout","nameLocations":["5128:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"5128:6:6"},"referencedDeclaration":163,"src":"5128:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5127:18:6"},"scope":394,"src":"5087:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":395,"src":"589:4674:6","usedErrors":[],"usedEvents":[]}],"src":"32:5232:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[441],"InterfaceDetection":[424],"InterfaceDetectionStorage":[542]},"id":425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":396,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":398,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":425,"sourceUnit":442,"src":"58:49:7","symbolAliases":[{"foreign":{"id":397,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":400,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":425,"sourceUnit":543,"src":"108:84:7","symbolAliases":[{"foreign":{"id":399,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":402,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":441,"src":"425:7:7"},"id":403,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":401,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":424,"linearizedBaseContracts":[424,441],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":407,"libraryName":{"id":404,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":406,"nodeType":"UserDefinedTypeName","pathNode":{"id":405,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"475:32:7"},"referencedDeclaration":452,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[440],"body":{"id":422,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":419,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":415,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$542_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":541,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":529,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$452_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":414,"id":421,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":423,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":423,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":409,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":423,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":424,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":425,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[429]},"id":430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":426,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":429,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[441]},"id":442,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":431,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":441,"linearizedBaseContracts":[441],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":440,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":440,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":434,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":440,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":437,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":441,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":442,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[441],"IllegalInterfaceId":[429],"InterfaceDetectionStorage":[542]},"id":543,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":443,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":543,"sourceUnit":430,"src":"58:76:10","symbolAliases":[{"foreign":{"id":444,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":543,"sourceUnit":442,"src":"135:52:10","symbolAliases":[{"foreign":{"id":446,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":542,"linearizedBaseContracts":[542],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":452,"members":[{"constant":false,"id":451,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":452,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":450,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":448,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":449,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":542,"src":"229:74:10","visibility":"public"},{"constant":true,"id":465,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":542,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":458,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":456,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":468,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":542,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":466,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":494,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":479,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":480,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":485,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":482,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":484,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":486,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":489,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":451,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":490,"indexExpression":{"id":488,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":491,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":493,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":495,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":472,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":495,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":471,"nodeType":"UserDefinedTypeName","pathNode":{"id":470,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"804:6:10"},"referencedDeclaration":452,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":474,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":495,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":473,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":495,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":475,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":542,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":528,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":506,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":507,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":511,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":505,"id":510,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":513,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":515,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$441_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$441_$","typeString":"type(contract IERC165)"}],"id":514,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$441","typeString":"type(contract IERC165)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":522,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":521,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":505,"id":520,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":523,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":524,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":451,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":526,"indexExpression":{"id":525,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":505,"id":527,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":496,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":529,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":529,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":498,"nodeType":"UserDefinedTypeName","pathNode":{"id":497,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"1386:6:10"},"referencedDeclaration":452,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":529,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":500,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":529,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":503,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":542,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":540,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[536],"declarations":[{"constant":false,"id":536,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":540,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":538,"initialValue":{"id":537,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":536,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":533,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":539,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":541,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":541,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":532,"nodeType":"UserDefinedTypeName","pathNode":{"id":531,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"1746:6:10"},"referencedDeclaration":452,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":542,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":543,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[551]},"id":552,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":544,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:11"},{"documentation":{"id":545,"nodeType":"StructuredDocumentation","src":"58:179:11","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":551,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:11","nodeType":"ErrorDefinition","parameters":{"id":550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":547,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:11","nodeType":"VariableDeclaration","scope":551,"src":"277:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":546,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":549,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:11","nodeType":"VariableDeclaration","scope":551,"src":"299:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":548,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:11"},"src":"237:80:11"}],"src":"32:286:11"},"id":11},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[551],"ProxyInitialization":[598],"StorageSlot":[1010]},"id":599,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":553,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":555,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":599,"sourceUnit":552,"src":"58:92:12","symbolAliases":[{"foreign":{"id":554,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"66:33:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":599,"sourceUnit":1011,"src":"151:74:12","symbolAliases":[{"foreign":{"id":556,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"159:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":558,"nodeType":"StructuredDocumentation","src":"227:92:12","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":598,"linearizedBaseContracts":[598],"name":"ProxyInitialization","nameLocation":"327:19:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":596,"nodeType":"Block","src":"735:294:12","statements":[{"assignments":[570],"declarations":[{"constant":false,"id":570,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:12","nodeType":"VariableDeclaration","scope":596,"src":"745:46:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$965_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":569,"nodeType":"UserDefinedTypeName","pathNode":{"id":568,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:12","757:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":965,"src":"745:23:12"},"referencedDeclaration":965,"src":"745:23:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$965_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":575,"initialValue":{"arguments":[{"id":573,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"821:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":571,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"794:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1010_$","typeString":"type(library StorageSlot)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:12","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"794:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$965_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$965_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:12"},{"assignments":[577],"declarations":[{"constant":false,"id":577,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:12","nodeType":"VariableDeclaration","scope":596,"src":"843:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":576,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":580,"initialValue":{"expression":{"id":578,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"866:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$965_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":579,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":964,"src":"866:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":581,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"900:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":582,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"916:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":589,"nodeType":"IfStatement","src":"896:88:12","trueBody":{"errorCall":{"arguments":[{"id":585,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"964:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":586,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"978:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":584,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"930:33:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"RevertStatement","src":"923:61:12"}},{"expression":{"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":590,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"994:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$965_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":592,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":964,"src":"994:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":593,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"1017:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":595,"nodeType":"ExpressionStatement","src":"994:28:12"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"353:314:12","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":597,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:12","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:12","nodeType":"VariableDeclaration","scope":597,"src":"690:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"phase","nameLocation":"719:5:12","nodeType":"VariableDeclaration","scope":597,"src":"711:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:12"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"735:0:12"},"scope":598,"src":"672:357:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":599,"src":"319:712:12","usedErrors":[],"usedEvents":[]}],"src":"32:1000:12"},"id":12},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[928]},"id":929,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":600,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"126:67:13","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":928,"linearizedBaseContracts":[928],"name":"Address","nameLocation":"202:7:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":615,"nodeType":"Block","src":"1241:254:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":609,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1465:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:13","memberName":"code","nodeType":"MemberAccess","src":"1465:12:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:13","memberName":"length","nodeType":"MemberAccess","src":"1465:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":608,"id":614,"nodeType":"Return","src":"1458:30:13"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"216:954:13","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":616,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:13","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"account","nameLocation":"1203:7:13","nodeType":"VariableDeclaration","scope":616,"src":"1195:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":603,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:13"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":616,"src":"1235:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":606,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:13"},"scope":928,"src":"1175:320:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":649,"nodeType":"Block","src":"2483:241:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":627,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$928","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$928","typeString":"library Address"}],"id":626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":625,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:13","typeDescriptions":{}}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:13","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":630,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"2526:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"2493:73:13"},{"assignments":[636,null],"declarations":[{"constant":false,"id":636,"mutability":"mutable","name":"success","nameLocation":"2583:7:13","nodeType":"VariableDeclaration","scope":649,"src":"2578:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":635,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":643,"initialValue":{"arguments":[{"hexValue":"","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":637,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"2596:9:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:13","memberName":"call","nodeType":"MemberAccess","src":"2596:14:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":639,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"2618:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:13"},{"expression":{"arguments":[{"id":645,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"2647:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":648,"nodeType":"ExpressionStatement","src":"2639:78:13"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"1501:906:13","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":650,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:13","nodeType":"FunctionDefinition","parameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:13","nodeType":"VariableDeclaration","scope":650,"src":"2431:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":621,"mutability":"mutable","name":"amount","nameLocation":"2466:6:13","nodeType":"VariableDeclaration","scope":650,"src":"2458:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":620,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:13"},"returnParameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"2483:0:13"},"scope":928,"src":"2412:312:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":667,"nodeType":"Block","src":"3555:96:13","statements":[{"expression":{"arguments":[{"id":661,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"3594:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":662,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"3602:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":660,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[708,752],"referencedDeclaration":752,"src":"3572:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":659,"id":666,"nodeType":"Return","src":"3565:79:13"}]},"documentation":{"id":651,"nodeType":"StructuredDocumentation","src":"2730:731:13","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":668,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:13","nodeType":"FunctionDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"target","nameLocation":"3496:6:13","nodeType":"VariableDeclaration","scope":668,"src":"3488:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"data","nameLocation":"3517:4:13","nodeType":"VariableDeclaration","scope":668,"src":"3504:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":654,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:13"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":668,"src":"3541:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":657,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:13"},"scope":928,"src":"3466:185:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":687,"nodeType":"Block","src":"4020:76:13","statements":[{"expression":{"arguments":[{"id":681,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"4059:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":682,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"4067:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":684,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"4076:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":680,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[708,752],"referencedDeclaration":752,"src":"4037:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":679,"id":686,"nodeType":"Return","src":"4030:59:13"}]},"documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"3657:211:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":688,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:13","nodeType":"FunctionDefinition","parameters":{"id":676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":671,"mutability":"mutable","name":"target","nameLocation":"3912:6:13","nodeType":"VariableDeclaration","scope":688,"src":"3904:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":670,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":673,"mutability":"mutable","name":"data","nameLocation":"3941:4:13","nodeType":"VariableDeclaration","scope":688,"src":"3928:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":672,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":675,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:13","nodeType":"VariableDeclaration","scope":688,"src":"3955:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":674,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:13"},"returnParameters":{"id":679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":688,"src":"4006:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":677,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:13"},"scope":928,"src":"3873:223:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":707,"nodeType":"Block","src":"4601:111:13","statements":[{"expression":{"arguments":[{"id":701,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"4640:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":702,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"4648:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"4654:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":700,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[708,752],"referencedDeclaration":752,"src":"4618:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":699,"id":706,"nodeType":"Return","src":"4611:94:13"}]},"documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"4102:351:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":708,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:13","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"mutability":"mutable","name":"target","nameLocation":"4506:6:13","nodeType":"VariableDeclaration","scope":708,"src":"4498:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":690,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":693,"mutability":"mutable","name":"data","nameLocation":"4535:4:13","nodeType":"VariableDeclaration","scope":708,"src":"4522:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":692,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"value","nameLocation":"4557:5:13","nodeType":"VariableDeclaration","scope":708,"src":"4549:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:13"},"returnParameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":708,"src":"4587:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":697,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:13"},"scope":928,"src":"4458:254:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":751,"nodeType":"Block","src":"5139:267:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":725,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$928","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$928","typeString":"library Address"}],"id":724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":723,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:13","typeDescriptions":{}}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:13","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"5182:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":722,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":732,"nodeType":"ExpressionStatement","src":"5149:81:13"},{"assignments":[734,736],"declarations":[{"constant":false,"id":734,"mutability":"mutable","name":"success","nameLocation":"5246:7:13","nodeType":"VariableDeclaration","scope":751,"src":"5241:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":733,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:13","nodeType":"VariableDeclaration","scope":751,"src":"5255:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":735,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":743,"initialValue":{"arguments":[{"id":741,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"5308:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":737,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"5282:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:13","memberName":"call","nodeType":"MemberAccess","src":"5282:11:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"5301:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:13"},{"expression":{"arguments":[{"id":745,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"5357:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":746,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"5365:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":747,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5374:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":748,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"5386:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":744,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"5330:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":721,"id":750,"nodeType":"Return","src":"5323:76:13"}]},"documentation":{"id":709,"nodeType":"StructuredDocumentation","src":"4718:237:13","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":752,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:13","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"target","nameLocation":"5008:6:13","nodeType":"VariableDeclaration","scope":752,"src":"5000:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":710,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"data","nameLocation":"5037:4:13","nodeType":"VariableDeclaration","scope":752,"src":"5024:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":712,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":715,"mutability":"mutable","name":"value","nameLocation":"5059:5:13","nodeType":"VariableDeclaration","scope":752,"src":"5051:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":717,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:13","nodeType":"VariableDeclaration","scope":752,"src":"5074:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":716,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:13"},"returnParameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":752,"src":"5125:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":719,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:13"},"scope":928,"src":"4960:446:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":768,"nodeType":"Block","src":"5683:97:13","statements":[{"expression":{"arguments":[{"id":763,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"5719:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":764,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"5727:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":762,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[769,798],"referencedDeclaration":798,"src":"5700:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":761,"id":767,"nodeType":"Return","src":"5693:80:13"}]},"documentation":{"id":753,"nodeType":"StructuredDocumentation","src":"5412:166:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":769,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:13","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":755,"mutability":"mutable","name":"target","nameLocation":"5619:6:13","nodeType":"VariableDeclaration","scope":769,"src":"5611:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":754,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":757,"mutability":"mutable","name":"data","nameLocation":"5640:4:13","nodeType":"VariableDeclaration","scope":769,"src":"5627:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":756,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:13"},"returnParameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":769,"src":"5669:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":759,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:13"},"scope":928,"src":"5583:197:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":797,"nodeType":"Block","src":"6122:168:13","statements":[{"assignments":[782,784],"declarations":[{"constant":false,"id":782,"mutability":"mutable","name":"success","nameLocation":"6138:7:13","nodeType":"VariableDeclaration","scope":797,"src":"6133:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":781,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:13","nodeType":"VariableDeclaration","scope":797,"src":"6147:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":783,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":789,"initialValue":{"arguments":[{"id":787,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"6192:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":785,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"6174:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:13","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:13","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:13"},{"expression":{"arguments":[{"id":791,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"6241:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":792,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"6249:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":793,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"6258:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":794,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"6270:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":790,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"6214:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":780,"id":796,"nodeType":"Return","src":"6207:76:13"}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"5786:173:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":798,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:13","nodeType":"FunctionDefinition","parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":772,"mutability":"mutable","name":"target","nameLocation":"6009:6:13","nodeType":"VariableDeclaration","scope":798,"src":"6001:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"data","nameLocation":"6038:4:13","nodeType":"VariableDeclaration","scope":798,"src":"6025:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":773,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:13","nodeType":"VariableDeclaration","scope":798,"src":"6052:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":775,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:13"},"returnParameters":{"id":780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":798,"src":"6108:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":778,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:13"},"scope":928,"src":"5964:326:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":814,"nodeType":"Block","src":"6566:101:13","statements":[{"expression":{"arguments":[{"id":809,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"6604:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":810,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"6612:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":808,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[815,844],"referencedDeclaration":844,"src":"6583:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":807,"id":813,"nodeType":"Return","src":"6576:84:13"}]},"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"6296:168:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":815,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:13","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"target","nameLocation":"6507:6:13","nodeType":"VariableDeclaration","scope":815,"src":"6499:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"data","nameLocation":"6528:4:13","nodeType":"VariableDeclaration","scope":815,"src":"6515:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":802,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:13"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":815,"src":"6552:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":805,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:13"},"scope":928,"src":"6469:198:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":843,"nodeType":"Block","src":"7008:170:13","statements":[{"assignments":[828,830],"declarations":[{"constant":false,"id":828,"mutability":"mutable","name":"success","nameLocation":"7024:7:13","nodeType":"VariableDeclaration","scope":843,"src":"7019:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":827,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:13","nodeType":"VariableDeclaration","scope":843,"src":"7033:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":829,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":835,"initialValue":{"arguments":[{"id":833,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"7080:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":831,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"7060:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:13","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:13","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:13"},{"expression":{"arguments":[{"id":837,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"7129:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":838,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"7137:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":839,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"7146:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":840,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"7158:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":836,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"7102:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":826,"id":842,"nodeType":"Return","src":"7095:76:13"}]},"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"6673:175:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":844,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:13","nodeType":"FunctionDefinition","parameters":{"id":823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"target","nameLocation":"6900:6:13","nodeType":"VariableDeclaration","scope":844,"src":"6892:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"data","nameLocation":"6929:4:13","nodeType":"VariableDeclaration","scope":844,"src":"6916:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":819,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":822,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:13","nodeType":"VariableDeclaration","scope":844,"src":"6943:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":821,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:13"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":844,"src":"6994:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":824,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:13"},"scope":928,"src":"6853:325:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":882,"nodeType":"Block","src":"7660:434:13","statements":[{"condition":{"id":858,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"7674:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":880,"nodeType":"Block","src":"8030:58:13","statements":[{"expression":{"arguments":[{"id":876,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"8052:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":877,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"8064:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":875,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"8044:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":879,"nodeType":"ExpressionStatement","src":"8044:33:13"}]},"id":881,"nodeType":"IfStatement","src":"7670:418:13","trueBody":{"id":874,"nodeType":"Block","src":"7683:341:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":859,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"7701:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:13","memberName":"length","nodeType":"MemberAccess","src":"7701:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":871,"nodeType":"IfStatement","src":"7697:286:13","trueBody":{"id":870,"nodeType":"Block","src":"7725:258:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":865,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"7927:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":864,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"7916:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":863,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":869,"nodeType":"ExpressionStatement","src":"7908:60:13"}]}},{"expression":{"id":872,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"8003:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":857,"id":873,"nodeType":"Return","src":"7996:17:13"}]}}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"7184:277:13","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":883,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:13","nodeType":"FunctionDefinition","parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"target","nameLocation":"7519:6:13","nodeType":"VariableDeclaration","scope":883,"src":"7511:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":846,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":849,"mutability":"mutable","name":"success","nameLocation":"7540:7:13","nodeType":"VariableDeclaration","scope":883,"src":"7535:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":848,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":851,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:13","nodeType":"VariableDeclaration","scope":883,"src":"7557:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":850,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:13","nodeType":"VariableDeclaration","scope":883,"src":"7590:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":852,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:13"},"returnParameters":{"id":857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":883,"src":"7646:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":855,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:13"},"scope":928,"src":"7466:628:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":906,"nodeType":"Block","src":"8475:135:13","statements":[{"condition":{"id":895,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"8489:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":904,"nodeType":"Block","src":"8546:58:13","statements":[{"expression":{"arguments":[{"id":900,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"8568:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":901,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"8580:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":899,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"8560:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":903,"nodeType":"ExpressionStatement","src":"8560:33:13"}]},"id":905,"nodeType":"IfStatement","src":"8485:119:13","trueBody":{"id":898,"nodeType":"Block","src":"8498:42:13","statements":[{"expression":{"id":896,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"8519:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":894,"id":897,"nodeType":"Return","src":"8512:17:13"}]}}]},"documentation":{"id":884,"nodeType":"StructuredDocumentation","src":"8100:210:13","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":907,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:13","nodeType":"FunctionDefinition","parameters":{"id":891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"mutability":"mutable","name":"success","nameLocation":"8355:7:13","nodeType":"VariableDeclaration","scope":907,"src":"8350:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":885,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":888,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:13","nodeType":"VariableDeclaration","scope":907,"src":"8372:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":887,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:13","nodeType":"VariableDeclaration","scope":907,"src":"8405:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":889,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:13"},"returnParameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":907,"src":"8461:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":892,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:13"},"scope":928,"src":"8315:295:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":926,"nodeType":"Block","src":"8699:457:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":914,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"8775:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:13","memberName":"length","nodeType":"MemberAccess","src":"8775:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":924,"nodeType":"Block","src":"9105:45:13","statements":[{"expression":{"arguments":[{"id":921,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"9126:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":920,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:13","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":923,"nodeType":"ExpressionStatement","src":"9119:20:13"}]},"id":925,"nodeType":"IfStatement","src":"8771:379:13","trueBody":{"id":919,"nodeType":"Block","src":"8798:301:13","statements":[{"AST":{"nativeSrc":"8956:133:13","nodeType":"YulBlock","src":"8956:133:13","statements":[{"nativeSrc":"8974:40:13","nodeType":"YulVariableDeclaration","src":"8974:40:13","value":{"arguments":[{"name":"returndata","nativeSrc":"9003:10:13","nodeType":"YulIdentifier","src":"9003:10:13"}],"functionName":{"name":"mload","nativeSrc":"8997:5:13","nodeType":"YulIdentifier","src":"8997:5:13"},"nativeSrc":"8997:17:13","nodeType":"YulFunctionCall","src":"8997:17:13"},"variables":[{"name":"returndata_size","nativeSrc":"8978:15:13","nodeType":"YulTypedName","src":"8978:15:13","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9042:2:13","nodeType":"YulLiteral","src":"9042:2:13","type":"","value":"32"},{"name":"returndata","nativeSrc":"9046:10:13","nodeType":"YulIdentifier","src":"9046:10:13"}],"functionName":{"name":"add","nativeSrc":"9038:3:13","nodeType":"YulIdentifier","src":"9038:3:13"},"nativeSrc":"9038:19:13","nodeType":"YulFunctionCall","src":"9038:19:13"},{"name":"returndata_size","nativeSrc":"9059:15:13","nodeType":"YulIdentifier","src":"9059:15:13"}],"functionName":{"name":"revert","nativeSrc":"9031:6:13","nodeType":"YulIdentifier","src":"9031:6:13"},"nativeSrc":"9031:44:13","nodeType":"YulFunctionCall","src":"9031:44:13"},"nativeSrc":"9031:44:13","nodeType":"YulExpressionStatement","src":"9031:44:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":909,"isOffset":false,"isSlot":false,"src":"9003:10:13","valueSize":1},{"declaration":909,"isOffset":false,"isSlot":false,"src":"9046:10:13","valueSize":1}],"id":918,"nodeType":"InlineAssembly","src":"8947:142:13"}]}}]},"id":927,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:13","nodeType":"FunctionDefinition","parameters":{"id":912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:13","nodeType":"VariableDeclaration","scope":927,"src":"8633:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":908,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:13","nodeType":"VariableDeclaration","scope":927,"src":"8658:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":910,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:13"},"returnParameters":{"id":913,"nodeType":"ParameterList","parameters":[],"src":"8699:0:13"},"scope":928,"src":"8616:540:13","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":929,"src":"194:8964:13","usedErrors":[],"usedEvents":[]}],"src":"101:9058:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[950]},"id":951,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":930,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"111:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":950,"linearizedBaseContracts":[950],"name":"Context","nameLocation":"626:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":939,"nodeType":"Block","src":"702:34:14","statements":[{"expression":{"expression":{"id":936,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:14","memberName":"sender","nodeType":"MemberAccess","src":"719:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":935,"id":938,"nodeType":"Return","src":"712:17:14"}]},"id":940,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:14","nodeType":"FunctionDefinition","parameters":{"id":932,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":940,"src":"693:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":933,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:14"},"scope":950,"src":"640:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":948,"nodeType":"Block","src":"809:32:14","statements":[{"expression":{"expression":{"id":945,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:14","memberName":"data","nodeType":"MemberAccess","src":"826:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":944,"id":947,"nodeType":"Return","src":"819:15:14"}]},"id":949,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:14","nodeType":"FunctionDefinition","parameters":{"id":941,"nodeType":"ParameterList","parameters":[],"src":"759:2:14"},"returnParameters":{"id":944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":949,"src":"793:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":942,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:14"},"scope":950,"src":"742:99:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":951,"src":"608:235:14","usedErrors":[],"usedEvents":[]}],"src":"86:758:14"},"id":14},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1010]},"id":1011,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":952,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":953,"nodeType":"StructuredDocumentation","src":"130:1148:15","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":1010,"linearizedBaseContracts":[1010],"name":"StorageSlot","nameLocation":"1287:11:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":956,"members":[{"constant":false,"id":955,"mutability":"mutable","name":"value","nameLocation":"1342:5:15","nodeType":"VariableDeclaration","scope":956,"src":"1334:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":954,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:15","nodeType":"StructDefinition","scope":1010,"src":"1305:49:15","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":959,"members":[{"constant":false,"id":958,"mutability":"mutable","name":"value","nameLocation":"1394:5:15","nodeType":"VariableDeclaration","scope":959,"src":"1389:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":957,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:15","nodeType":"StructDefinition","scope":1010,"src":"1360:46:15","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":962,"members":[{"constant":false,"id":961,"mutability":"mutable","name":"value","nameLocation":"1449:5:15","nodeType":"VariableDeclaration","scope":962,"src":"1441:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:15","nodeType":"StructDefinition","scope":1010,"src":"1412:49:15","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":965,"members":[{"constant":false,"id":964,"mutability":"mutable","name":"value","nameLocation":"1504:5:15","nodeType":"VariableDeclaration","scope":965,"src":"1496:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:15","nodeType":"StructDefinition","scope":1010,"src":"1467:49:15","visibility":"public"},{"body":{"id":975,"nodeType":"Block","src":"1698:106:15","statements":[{"AST":{"nativeSrc":"1760:38:15","nodeType":"YulBlock","src":"1760:38:15","statements":[{"nativeSrc":"1774:14:15","nodeType":"YulAssignment","src":"1774:14:15","value":{"name":"slot","nativeSrc":"1784:4:15","nodeType":"YulIdentifier","src":"1784:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"1774:6:15","nodeType":"YulIdentifier","src":"1774:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":972,"isOffset":false,"isSlot":true,"src":"1774:6:15","suffix":"slot","valueSize":1},{"declaration":968,"isOffset":false,"isSlot":false,"src":"1784:4:15","valueSize":1}],"id":974,"nodeType":"InlineAssembly","src":"1751:47:15"}]},"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"1522:87:15","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":976,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:15","nodeType":"FunctionDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"slot","nameLocation":"1646:4:15","nodeType":"VariableDeclaration","scope":976,"src":"1638:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:15"},"returnParameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"r","nameLocation":"1695:1:15","nodeType":"VariableDeclaration","scope":976,"src":"1675:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$956_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":971,"nodeType":"UserDefinedTypeName","pathNode":{"id":970,"name":"AddressSlot","nameLocations":["1675:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":956,"src":"1675:11:15"},"referencedDeclaration":956,"src":"1675:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$956_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:15"},"scope":1010,"src":"1614:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"1986:106:15","statements":[{"AST":{"nativeSrc":"2048:38:15","nodeType":"YulBlock","src":"2048:38:15","statements":[{"nativeSrc":"2062:14:15","nodeType":"YulAssignment","src":"2062:14:15","value":{"name":"slot","nativeSrc":"2072:4:15","nodeType":"YulIdentifier","src":"2072:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2062:6:15","nodeType":"YulIdentifier","src":"2062:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":983,"isOffset":false,"isSlot":true,"src":"2062:6:15","suffix":"slot","valueSize":1},{"declaration":979,"isOffset":false,"isSlot":false,"src":"2072:4:15","valueSize":1}],"id":985,"nodeType":"InlineAssembly","src":"2039:47:15"}]},"documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"1810:87:15","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:15","nodeType":"FunctionDefinition","parameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"slot","nameLocation":"1934:4:15","nodeType":"VariableDeclaration","scope":987,"src":"1926:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:15"},"returnParameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"r","nameLocation":"1983:1:15","nodeType":"VariableDeclaration","scope":987,"src":"1963:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$959_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":982,"nodeType":"UserDefinedTypeName","pathNode":{"id":981,"name":"BooleanSlot","nameLocations":["1963:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":959,"src":"1963:11:15"},"referencedDeclaration":959,"src":"1963:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$959_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:15"},"scope":1010,"src":"1902:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":997,"nodeType":"Block","src":"2274:106:15","statements":[{"AST":{"nativeSrc":"2336:38:15","nodeType":"YulBlock","src":"2336:38:15","statements":[{"nativeSrc":"2350:14:15","nodeType":"YulAssignment","src":"2350:14:15","value":{"name":"slot","nativeSrc":"2360:4:15","nodeType":"YulIdentifier","src":"2360:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2350:6:15","nodeType":"YulIdentifier","src":"2350:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":994,"isOffset":false,"isSlot":true,"src":"2350:6:15","suffix":"slot","valueSize":1},{"declaration":990,"isOffset":false,"isSlot":false,"src":"2360:4:15","valueSize":1}],"id":996,"nodeType":"InlineAssembly","src":"2327:47:15"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"2098:87:15","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":998,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:15","nodeType":"FunctionDefinition","parameters":{"id":991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"slot","nameLocation":"2222:4:15","nodeType":"VariableDeclaration","scope":998,"src":"2214:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":989,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:15"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"r","nameLocation":"2271:1:15","nodeType":"VariableDeclaration","scope":998,"src":"2251:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$962_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":993,"nodeType":"UserDefinedTypeName","pathNode":{"id":992,"name":"Bytes32Slot","nameLocations":["2251:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":962,"src":"2251:11:15"},"referencedDeclaration":962,"src":"2251:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$962_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:15"},"scope":1010,"src":"2190:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1008,"nodeType":"Block","src":"2562:106:15","statements":[{"AST":{"nativeSrc":"2624:38:15","nodeType":"YulBlock","src":"2624:38:15","statements":[{"nativeSrc":"2638:14:15","nodeType":"YulAssignment","src":"2638:14:15","value":{"name":"slot","nativeSrc":"2648:4:15","nodeType":"YulIdentifier","src":"2648:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2638:6:15","nodeType":"YulIdentifier","src":"2638:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1005,"isOffset":false,"isSlot":true,"src":"2638:6:15","suffix":"slot","valueSize":1},{"declaration":1001,"isOffset":false,"isSlot":false,"src":"2648:4:15","valueSize":1}],"id":1007,"nodeType":"InlineAssembly","src":"2615:47:15"}]},"documentation":{"id":999,"nodeType":"StructuredDocumentation","src":"2386:87:15","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1009,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:15","nodeType":"FunctionDefinition","parameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"slot","nameLocation":"2510:4:15","nodeType":"VariableDeclaration","scope":1009,"src":"2502:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1000,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:15"},"returnParameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"r","nameLocation":"2559:1:15","nodeType":"VariableDeclaration","scope":1009,"src":"2539:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$965_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1004,"nodeType":"UserDefinedTypeName","pathNode":{"id":1003,"name":"Uint256Slot","nameLocations":["2539:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":965,"src":"2539:11:15"},"referencedDeclaration":965,"src":"2539:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$965_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:15"},"scope":1010,"src":"2478:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1011,"src":"1279:1391:15","usedErrors":[],"usedEvents":[]}],"src":"105:2566:15"},"id":15},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[1512]},"id":1513,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1012,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":1013,"nodeType":"StructuredDocumentation","src":"143:658:16","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":1512,"linearizedBaseContracts":[1512],"name":"MerkleProof","nameLocation":"810:11:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":1033,"nodeType":"Block","src":"1283:57:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1027,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"1313:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1028,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"1320:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1026,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"1300:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1030,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"1329:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1025,"id":1032,"nodeType":"Return","src":"1293:40:16"}]},"documentation":{"id":1014,"nodeType":"StructuredDocumentation","src":"828:323:16","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":1034,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:16","nodeType":"FunctionDefinition","parameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"proof","nameLocation":"1198:5:16","nodeType":"VariableDeclaration","scope":1034,"src":"1181:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1016,"nodeType":"ArrayTypeName","src":"1181:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1019,"mutability":"mutable","name":"root","nameLocation":"1221:4:16","nodeType":"VariableDeclaration","scope":1034,"src":"1213:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1021,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:16","nodeType":"VariableDeclaration","scope":1034,"src":"1235:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:16"},"returnParameters":{"id":1025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1034,"src":"1277:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1023,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:16"},"scope":1512,"src":"1156:184:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1054,"nodeType":"Block","src":"1578:65:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1048,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"1616:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1049,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"1623:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1047,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"1595:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1051,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"1632:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1046,"id":1053,"nodeType":"Return","src":"1588:48:16"}]},"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"1346:90:16","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":1055,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:16","nodeType":"FunctionDefinition","parameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1038,"mutability":"mutable","name":"proof","nameLocation":"1493:5:16","nodeType":"VariableDeclaration","scope":1055,"src":"1474:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1037,"nodeType":"ArrayTypeName","src":"1474:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1040,"mutability":"mutable","name":"root","nameLocation":"1516:4:16","nodeType":"VariableDeclaration","scope":1055,"src":"1508:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1039,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:16","nodeType":"VariableDeclaration","scope":1055,"src":"1530:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:16"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1055,"src":"1572:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1044,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:16"},"scope":1512,"src":"1441:202:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1094,"nodeType":"Block","src":"2086:198:16","statements":[{"assignments":[1067],"declarations":[{"constant":false,"id":1067,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:16","nodeType":"VariableDeclaration","scope":1094,"src":"2096:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1066,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1069,"initialValue":{"id":1068,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"2119:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:16"},{"body":{"id":1090,"nodeType":"Block","src":"2176:73:16","statements":[{"expression":{"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1081,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"2190:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1083,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"2215:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1084,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"2229:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1086,"indexExpression":{"id":1085,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"2235:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1082,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"2205:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1089,"nodeType":"ExpressionStatement","src":"2190:48:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1074,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"2153:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1075,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"2157:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:16","memberName":"length","nodeType":"MemberAccess","src":"2157:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1091,"initializationExpression":{"assignments":[1071],"declarations":[{"constant":false,"id":1071,"mutability":"mutable","name":"i","nameLocation":"2146:1:16","nodeType":"VariableDeclaration","scope":1091,"src":"2138:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1070,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1073,"initialValue":{"hexValue":"30","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:16"},"loopExpression":{"expression":{"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:16","subExpression":{"id":1078,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"2171:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1080,"nodeType":"ExpressionStatement","src":"2171:3:16"},"nodeType":"ForStatement","src":"2133:116:16"},{"expression":{"id":1092,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"2265:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1065,"id":1093,"nodeType":"Return","src":"2258:19:16"}]},"documentation":{"id":1056,"nodeType":"StructuredDocumentation","src":"1649:340:16","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":1095,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:16","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"proof","nameLocation":"2033:5:16","nodeType":"VariableDeclaration","scope":1095,"src":"2016:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1057,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1058,"nodeType":"ArrayTypeName","src":"2016:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:16","nodeType":"VariableDeclaration","scope":1095,"src":"2040:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:16"},"returnParameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1095,"src":"2077:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:16"},"scope":1512,"src":"1994:290:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1134,"nodeType":"Block","src":"2493:198:16","statements":[{"assignments":[1107],"declarations":[{"constant":false,"id":1107,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:16","nodeType":"VariableDeclaration","scope":1134,"src":"2503:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1109,"initialValue":{"id":1108,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2526:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:16"},{"body":{"id":1130,"nodeType":"Block","src":"2583:73:16","statements":[{"expression":{"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1121,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"2597:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1123,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"2622:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1124,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"2636:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1126,"indexExpression":{"id":1125,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2642:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1122,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"2612:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1129,"nodeType":"ExpressionStatement","src":"2597:48:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1114,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2560:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1115,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"2564:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:16","memberName":"length","nodeType":"MemberAccess","src":"2564:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1131,"initializationExpression":{"assignments":[1111],"declarations":[{"constant":false,"id":1111,"mutability":"mutable","name":"i","nameLocation":"2553:1:16","nodeType":"VariableDeclaration","scope":1131,"src":"2545:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1113,"initialValue":{"hexValue":"30","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:16"},"loopExpression":{"expression":{"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:16","subExpression":{"id":1118,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2578:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1120,"nodeType":"ExpressionStatement","src":"2578:3:16"},"nodeType":"ForStatement","src":"2540:116:16"},{"expression":{"id":1132,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"2672:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1105,"id":1133,"nodeType":"Return","src":"2665:19:16"}]},"documentation":{"id":1096,"nodeType":"StructuredDocumentation","src":"2290:96:16","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:16","nodeType":"FunctionDefinition","parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"proof","nameLocation":"2440:5:16","nodeType":"VariableDeclaration","scope":1135,"src":"2421:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1097,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1098,"nodeType":"ArrayTypeName","src":"2421:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:16","nodeType":"VariableDeclaration","scope":1135,"src":"2447:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:16"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1135,"src":"2484:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:16"},"scope":1512,"src":"2391:300:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1160,"nodeType":"Block","src":"3234:76:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1153,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"3269:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1154,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"3276:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1155,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"3288:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1152,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"3251:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1157,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"3299:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1151,"id":1159,"nodeType":"Return","src":"3244:59:16"}]},"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"2697:350:16","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1161,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:16","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"proof","nameLocation":"3104:5:16","nodeType":"VariableDeclaration","scope":1161,"src":"3087:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1138,"nodeType":"ArrayTypeName","src":"3087:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:16","nodeType":"VariableDeclaration","scope":1161,"src":"3119:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1140,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1141,"nodeType":"ArrayTypeName","src":"3119:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"root","nameLocation":"3161:4:16","nodeType":"VariableDeclaration","scope":1161,"src":"3153:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1143,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:16","nodeType":"VariableDeclaration","scope":1161,"src":"3175:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1146,"nodeType":"ArrayTypeName","src":"3175:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:16"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1161,"src":"3228:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1149,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:16"},"scope":1512,"src":"3052:258:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1186,"nodeType":"Block","src":"3715:84:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1179,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"3758:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1180,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"3765:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1181,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"3777:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1178,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"3732:25:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1183,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"3788:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1177,"id":1185,"nodeType":"Return","src":"3725:67:16"}]},"documentation":{"id":1162,"nodeType":"StructuredDocumentation","src":"3316:200:16","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1187,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:16","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"proof","nameLocation":"3583:5:16","nodeType":"VariableDeclaration","scope":1187,"src":"3564:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1164,"nodeType":"ArrayTypeName","src":"3564:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:16","nodeType":"VariableDeclaration","scope":1187,"src":"3598:26:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1166,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1167,"nodeType":"ArrayTypeName","src":"3598:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"root","nameLocation":"3642:4:16","nodeType":"VariableDeclaration","scope":1187,"src":"3634:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:16","nodeType":"VariableDeclaration","scope":1187,"src":"3656:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1172,"nodeType":"ArrayTypeName","src":"3656:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:16"},"returnParameters":{"id":1177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1176,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1187,"src":"3709:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1175,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:16"},"scope":1512,"src":"3521:278:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1331,"nodeType":"Block","src":"4753:1860:16","statements":[{"assignments":[1203],"declarations":[{"constant":false,"id":1203,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:16","nodeType":"VariableDeclaration","scope":1331,"src":"5136:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1202,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1206,"initialValue":{"expression":{"id":1204,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"5156:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:16","memberName":"length","nodeType":"MemberAccess","src":"5156:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:16"},{"assignments":[1208],"declarations":[{"constant":false,"id":1208,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:16","nodeType":"VariableDeclaration","scope":1331,"src":"5179:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1211,"initialValue":{"expression":{"id":1209,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"5201:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:16","memberName":"length","nodeType":"MemberAccess","src":"5201:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1213,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"5270:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1214,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"5282:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:16","memberName":"length","nodeType":"MemberAccess","src":"5282:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1219,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"5302:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1212,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1223,"nodeType":"ExpressionStatement","src":"5262:87:16"},{"assignments":[1228],"declarations":[{"constant":false,"id":1228,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:16","nodeType":"VariableDeclaration","scope":1331,"src":"5594:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1227,"nodeType":"ArrayTypeName","src":"5594:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1234,"initialValue":{"arguments":[{"id":1232,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"5634:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1229,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1230,"nodeType":"ArrayTypeName","src":"5624:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:16"},{"assignments":[1236],"declarations":[{"constant":false,"id":1236,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:16","nodeType":"VariableDeclaration","scope":1331,"src":"5656:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1235,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1238,"initialValue":{"hexValue":"30","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:16"},{"assignments":[1240],"declarations":[{"constant":false,"id":1240,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:16","nodeType":"VariableDeclaration","scope":1331,"src":"5685:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1242,"initialValue":{"hexValue":"30","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:16"},{"assignments":[1244],"declarations":[{"constant":false,"id":1244,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:16","nodeType":"VariableDeclaration","scope":1331,"src":"5714:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1246,"initialValue":{"hexValue":"30","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:16"},{"body":{"id":1304,"nodeType":"Block","src":"6151:258:16","statements":[{"assignments":[1258],"declarations":[{"constant":false,"id":1258,"mutability":"mutable","name":"a","nameLocation":"6173:1:16","nodeType":"VariableDeclaration","scope":1304,"src":"6165:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1271,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1259,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6177:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1260,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"6187:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1266,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"6219:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1269,"indexExpression":{"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:16","subExpression":{"id":1267,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"6226:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:16","trueExpression":{"baseExpression":{"id":1262,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"6199:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1265,"indexExpression":{"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:16","subExpression":{"id":1263,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6206:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:16"},{"assignments":[1273],"declarations":[{"constant":false,"id":1273,"mutability":"mutable","name":"b","nameLocation":"6258:1:16","nodeType":"VariableDeclaration","scope":1304,"src":"6250:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1294,"initialValue":{"condition":{"baseExpression":{"id":1274,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"6262:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1276,"indexExpression":{"id":1275,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"6273:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1289,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"6340:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1292,"indexExpression":{"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:16","subExpression":{"id":1290,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"6346:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:16","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1277,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6278:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1278,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"6288:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1284,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"6320:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1287,"indexExpression":{"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:16","subExpression":{"id":1285,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"6327:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:16","trueExpression":{"baseExpression":{"id":1280,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"6300:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1283,"indexExpression":{"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:16","subExpression":{"id":1281,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"6307:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:16"},{"expression":{"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1295,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"6371:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1297,"indexExpression":{"id":1296,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"6378:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1299,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"6393:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1300,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"6396:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1298,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"6383:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1303,"nodeType":"ExpressionStatement","src":"6371:27:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1251,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"6129:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1252,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"6133:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1305,"initializationExpression":{"assignments":[1248],"declarations":[{"constant":false,"id":1248,"mutability":"mutable","name":"i","nameLocation":"6122:1:16","nodeType":"VariableDeclaration","scope":1305,"src":"6114:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1247,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1250,"initialValue":{"hexValue":"30","id":1249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:16"},"loopExpression":{"expression":{"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:16","subExpression":{"id":1254,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"6146:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1256,"nodeType":"ExpressionStatement","src":"6146:3:16"},"nodeType":"ForStatement","src":"6109:300:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1306,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"6423:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1316,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"6505:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1328,"nodeType":"Block","src":"6567:40:16","statements":[{"expression":{"baseExpression":{"id":1324,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"6588:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1326,"indexExpression":{"hexValue":"30","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1201,"id":1327,"nodeType":"Return","src":"6581:15:16"}]},"id":1329,"nodeType":"IfStatement","src":"6501:106:16","trueBody":{"id":1323,"nodeType":"Block","src":"6520:41:16","statements":[{"expression":{"baseExpression":{"id":1319,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"6541:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1321,"indexExpression":{"hexValue":"30","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1201,"id":1322,"nodeType":"Return","src":"6534:16:16"}]}},"id":1330,"nodeType":"IfStatement","src":"6419:188:16","trueBody":{"id":1315,"nodeType":"Block","src":"6440:55:16","statements":[{"expression":{"baseExpression":{"id":1309,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"6461:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1313,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1310,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"6468:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1201,"id":1314,"nodeType":"Return","src":"6454:30:16"}]}}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"3805:768:16","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":1332,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:16","nodeType":"FunctionDefinition","parameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"proof","nameLocation":"4631:5:16","nodeType":"VariableDeclaration","scope":1332,"src":"4614:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1189,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1190,"nodeType":"ArrayTypeName","src":"4614:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:16","nodeType":"VariableDeclaration","scope":1332,"src":"4646:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1192,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1193,"nodeType":"ArrayTypeName","src":"4646:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1197,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:16","nodeType":"VariableDeclaration","scope":1332,"src":"4680:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1195,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1196,"nodeType":"ArrayTypeName","src":"4680:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:16"},"returnParameters":{"id":1201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1200,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:16","nodeType":"VariableDeclaration","scope":1332,"src":"4733:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:16"},"scope":1512,"src":"4578:2035:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1476,"nodeType":"Block","src":"7013:1860:16","statements":[{"assignments":[1348],"declarations":[{"constant":false,"id":1348,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:16","nodeType":"VariableDeclaration","scope":1476,"src":"7396:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1351,"initialValue":{"expression":{"id":1349,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"7416:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:16","memberName":"length","nodeType":"MemberAccess","src":"7416:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:16"},{"assignments":[1353],"declarations":[{"constant":false,"id":1353,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:16","nodeType":"VariableDeclaration","scope":1476,"src":"7439:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1356,"initialValue":{"expression":{"id":1354,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"7461:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:16","memberName":"length","nodeType":"MemberAccess","src":"7461:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1358,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"7530:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1359,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"7542:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:16","memberName":"length","nodeType":"MemberAccess","src":"7542:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1364,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"7562:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1357,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1368,"nodeType":"ExpressionStatement","src":"7522:87:16"},{"assignments":[1373],"declarations":[{"constant":false,"id":1373,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:16","nodeType":"VariableDeclaration","scope":1476,"src":"7854:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1372,"nodeType":"ArrayTypeName","src":"7854:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1379,"initialValue":{"arguments":[{"id":1377,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"7894:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1375,"nodeType":"ArrayTypeName","src":"7884:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:16"},{"assignments":[1381],"declarations":[{"constant":false,"id":1381,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:16","nodeType":"VariableDeclaration","scope":1476,"src":"7916:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1383,"initialValue":{"hexValue":"30","id":1382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:16"},{"assignments":[1385],"declarations":[{"constant":false,"id":1385,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:16","nodeType":"VariableDeclaration","scope":1476,"src":"7945:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1387,"initialValue":{"hexValue":"30","id":1386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:16"},{"assignments":[1389],"declarations":[{"constant":false,"id":1389,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:16","nodeType":"VariableDeclaration","scope":1476,"src":"7974:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1391,"initialValue":{"hexValue":"30","id":1390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:16"},{"body":{"id":1449,"nodeType":"Block","src":"8411:258:16","statements":[{"assignments":[1403],"declarations":[{"constant":false,"id":1403,"mutability":"mutable","name":"a","nameLocation":"8433:1:16","nodeType":"VariableDeclaration","scope":1449,"src":"8425:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1416,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1404,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"8437:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1405,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"8447:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1411,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8479:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1414,"indexExpression":{"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:16","subExpression":{"id":1412,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"8486:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:16","trueExpression":{"baseExpression":{"id":1407,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"8459:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1410,"indexExpression":{"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:16","subExpression":{"id":1408,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"8466:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:16"},{"assignments":[1418],"declarations":[{"constant":false,"id":1418,"mutability":"mutable","name":"b","nameLocation":"8518:1:16","nodeType":"VariableDeclaration","scope":1449,"src":"8510:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1439,"initialValue":{"condition":{"baseExpression":{"id":1419,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"8522:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1421,"indexExpression":{"id":1420,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"8533:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1434,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"8600:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1437,"indexExpression":{"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:16","subExpression":{"id":1435,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"8606:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:16","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1422,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"8538:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1423,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"8548:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1429,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8580:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1432,"indexExpression":{"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:16","subExpression":{"id":1430,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"8587:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:16","trueExpression":{"baseExpression":{"id":1425,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"8560:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1428,"indexExpression":{"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:16","subExpression":{"id":1426,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"8567:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:16"},{"expression":{"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1440,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8631:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1442,"indexExpression":{"id":1441,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"8638:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1444,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"8653:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1445,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"8656:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1443,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"8643:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1448,"nodeType":"ExpressionStatement","src":"8631:27:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1396,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"8389:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1397,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"8393:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1450,"initializationExpression":{"assignments":[1393],"declarations":[{"constant":false,"id":1393,"mutability":"mutable","name":"i","nameLocation":"8382:1:16","nodeType":"VariableDeclaration","scope":1450,"src":"8374:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1395,"initialValue":{"hexValue":"30","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:16"},"loopExpression":{"expression":{"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:16","subExpression":{"id":1399,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"8406:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1401,"nodeType":"ExpressionStatement","src":"8406:3:16"},"nodeType":"ForStatement","src":"8369:300:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1451,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"8683:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1461,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"8765:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1473,"nodeType":"Block","src":"8827:40:16","statements":[{"expression":{"baseExpression":{"id":1469,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"8848:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1471,"indexExpression":{"hexValue":"30","id":1470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1346,"id":1472,"nodeType":"Return","src":"8841:15:16"}]},"id":1474,"nodeType":"IfStatement","src":"8761:106:16","trueBody":{"id":1468,"nodeType":"Block","src":"8780:41:16","statements":[{"expression":{"baseExpression":{"id":1464,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"8801:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1466,"indexExpression":{"hexValue":"30","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1346,"id":1467,"nodeType":"Return","src":"8794:16:16"}]}},"id":1475,"nodeType":"IfStatement","src":"8679:188:16","trueBody":{"id":1460,"nodeType":"Block","src":"8700:55:16","statements":[{"expression":{"baseExpression":{"id":1454,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8721:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1458,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1455,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"8728:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1346,"id":1459,"nodeType":"Return","src":"8714:30:16"}]}}]},"documentation":{"id":1333,"nodeType":"StructuredDocumentation","src":"6619:202:16","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1477,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:16","nodeType":"FunctionDefinition","parameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"proof","nameLocation":"6889:5:16","nodeType":"VariableDeclaration","scope":1477,"src":"6870:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1335,"nodeType":"ArrayTypeName","src":"6870:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1339,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:16","nodeType":"VariableDeclaration","scope":1477,"src":"6904:26:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1337,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1338,"nodeType":"ArrayTypeName","src":"6904:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1342,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:16","nodeType":"VariableDeclaration","scope":1477,"src":"6940:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1341,"nodeType":"ArrayTypeName","src":"6940:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:16"},"returnParameters":{"id":1346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1345,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:16","nodeType":"VariableDeclaration","scope":1477,"src":"6993:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:16"},"scope":1512,"src":"6826:2047:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1499,"nodeType":"Block","src":"8951:75:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1486,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"8968:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1487,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"8972:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1494,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"9014:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1495,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"9017:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1493,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"8999:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:16","trueExpression":{"arguments":[{"id":1490,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"8991:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1491,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"8994:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1489,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"8976:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1485,"id":1498,"nodeType":"Return","src":"8961:58:16"}]},"id":1500,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:16","nodeType":"FunctionDefinition","parameters":{"id":1482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1479,"mutability":"mutable","name":"a","nameLocation":"8906:1:16","nodeType":"VariableDeclaration","scope":1500,"src":"8898:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1478,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"b","nameLocation":"8917:1:16","nodeType":"VariableDeclaration","scope":1500,"src":"8909:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:16"},"returnParameters":{"id":1485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1500,"src":"8942:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:16"},"scope":1512,"src":"8879:147:16","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1510,"nodeType":"Block","src":"9115:178:16","statements":[{"AST":{"nativeSrc":"9177:110:16","nodeType":"YulBlock","src":"9177:110:16","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:16","nodeType":"YulLiteral","src":"9198:4:16","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:16","nodeType":"YulIdentifier","src":"9204:1:16"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:16","nodeType":"YulIdentifier","src":"9191:6:16"},"nativeSrc":"9191:15:16","nodeType":"YulFunctionCall","src":"9191:15:16"},"nativeSrc":"9191:15:16","nodeType":"YulExpressionStatement","src":"9191:15:16"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:16","nodeType":"YulLiteral","src":"9226:4:16","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:16","nodeType":"YulIdentifier","src":"9232:1:16"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:16","nodeType":"YulIdentifier","src":"9219:6:16"},"nativeSrc":"9219:15:16","nodeType":"YulFunctionCall","src":"9219:15:16"},"nativeSrc":"9219:15:16","nodeType":"YulExpressionStatement","src":"9219:15:16"},{"nativeSrc":"9247:30:16","nodeType":"YulAssignment","src":"9247:30:16","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:16","nodeType":"YulLiteral","src":"9266:4:16","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:16","nodeType":"YulLiteral","src":"9272:4:16","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:16","nodeType":"YulIdentifier","src":"9256:9:16"},"nativeSrc":"9256:21:16","nodeType":"YulFunctionCall","src":"9256:21:16"},"variableNames":[{"name":"value","nativeSrc":"9247:5:16","nodeType":"YulIdentifier","src":"9247:5:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1502,"isOffset":false,"isSlot":false,"src":"9204:1:16","valueSize":1},{"declaration":1504,"isOffset":false,"isSlot":false,"src":"9232:1:16","valueSize":1},{"declaration":1507,"isOffset":false,"isSlot":false,"src":"9247:5:16","valueSize":1}],"id":1509,"nodeType":"InlineAssembly","src":"9168:119:16"}]},"id":1511,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:16","nodeType":"FunctionDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1502,"mutability":"mutable","name":"a","nameLocation":"9064:1:16","nodeType":"VariableDeclaration","scope":1511,"src":"9056:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1504,"mutability":"mutable","name":"b","nameLocation":"9075:1:16","nodeType":"VariableDeclaration","scope":1511,"src":"9067:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:16"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"value","nameLocation":"9108:5:16","nodeType":"VariableDeclaration","scope":1511,"src":"9100:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:16"},"scope":1512,"src":"9032:261:16","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1513,"src":"802:8493:16","usedErrors":[],"usedEvents":[]}],"src":"118:9178:16"},"id":16},"contracts/MocaPoints/interface/IRealmId.sol":{"ast":{"absolutePath":"contracts/MocaPoints/interface/IRealmId.sol","exportedSymbols":{"IRealmId":[1538]},"id":1539,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1514,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"45:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IRealmId","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1538,"linearizedBaseContracts":[1538],"name":"IRealmId","nameLocation":"140:8:17","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a9735f94","id":1521,"implemented":false,"kind":"function","modifiers":[],"name":"burnCounts","nameLocation":"164:10:17","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"realmId","nameLocation":"183:7:17","nodeType":"VariableDeclaration","scope":1521,"src":"175:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1515,"name":"uint256","nodeType":"ElementaryTypeName","src":"175:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"174:17:17"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1521,"src":"215:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1518,"name":"uint256","nodeType":"ElementaryTypeName","src":"215:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"214:9:17"},"scope":1538,"src":"155:69:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cad6b901","id":1530,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"239:10:17","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1523,"mutability":"mutable","name":"name","nameLocation":"266:4:17","nodeType":"VariableDeclaration","scope":1530,"src":"250:20:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1522,"name":"string","nodeType":"ElementaryTypeName","src":"250:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"parentNode","nameLocation":"280:10:17","nodeType":"VariableDeclaration","scope":1530,"src":"272:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"272:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"249:42:17"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1530,"src":"315:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"315:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"314:9:17"},"scope":1538,"src":"230:94:17","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"6352211e","id":1537,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"339:7:17","nodeType":"FunctionDefinition","parameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"realmId","nameLocation":"355:7:17","nodeType":"VariableDeclaration","scope":1537,"src":"347:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"347:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"346:17:17"},"returnParameters":{"id":1536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1537,"src":"387:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1534,"name":"address","nodeType":"ElementaryTypeName","src":"387:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"386:9:17"},"scope":1538,"src":"330:66:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1539,"src":"130:268:17","usedErrors":[],"usedEvents":[]}],"src":"45:354:17"},"id":17},"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol":{"ast":{"absolutePath":"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipStorage":[394],"IMocaPoints":[1906],"IRealmId":[1538],"MerkleProof":[1512],"SeasonalCumulativeMerkleClaim":[1883]},"id":1884,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1540,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:18"},{"absolutePath":"contracts/MocaPoints/interface/IRealmId.sol","file":"../MocaPoints/interface/IRealmId.sol","id":1542,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1884,"sourceUnit":1539,"src":"56:62:18","symbolAliases":[{"foreign":{"id":1541,"name":"IRealmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"64:8:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol","file":"./interface/IMocaPoints.sol","id":1544,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1884,"sourceUnit":1907,"src":"119:56:18","symbolAliases":[{"foreign":{"id":1543,"name":"IMocaPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"127:11:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1546,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1884,"sourceUnit":1513,"src":"176:87:18","symbolAliases":[{"foreign":{"id":1545,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"184:11:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":1548,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1884,"sourceUnit":33,"src":"264:101:18","symbolAliases":[{"foreign":{"id":1547,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"272:17:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":1550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1884,"sourceUnit":395,"src":"366:125:18","symbolAliases":[{"foreign":{"id":1549,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"374:24:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1551,"name":"ContractOwnership","nameLocations":["535:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"535:17:18"},"id":1552,"nodeType":"InheritanceSpecifier","src":"535:17:18"}],"canonicalName":"SeasonalCumulativeMerkleClaim","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1883,"linearizedBaseContracts":[1883,32,424,441,80,950,132,112],"name":"SeasonalCumulativeMerkleClaim","nameLocation":"502:29:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1556,"libraryName":{"id":1553,"name":"MerkleProof","nameLocations":["565:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":1512,"src":"565:11:18"},"nodeType":"UsingForDirective","src":"559:32:18","typeName":{"baseType":{"id":1554,"name":"bytes32","nodeType":"ElementaryTypeName","src":"581:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1555,"nodeType":"ArrayTypeName","src":"581:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"global":false,"id":1560,"libraryName":{"id":1557,"name":"ContractOwnershipStorage","nameLocations":["602:24:18"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"602:24:18"},"nodeType":"UsingForDirective","src":"596:67:18","typeName":{"id":1559,"nodeType":"UserDefinedTypeName","pathNode":{"id":1558,"name":"ContractOwnershipStorage.Layout","nameLocations":["631:24:18","656:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":163,"src":"631:31:18"},"referencedDeclaration":163,"src":"631:31:18","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"functionSelector":"2727aae8","id":1563,"mutability":"immutable","name":"MOCA_POINTS_CONTRACT","nameLocation":"698:20:18","nodeType":"VariableDeclaration","scope":1883,"src":"669:49:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMocaPoints_$1906","typeString":"contract IMocaPoints"},"typeName":{"id":1562,"nodeType":"UserDefinedTypeName","pathNode":{"id":1561,"name":"IMocaPoints","nameLocations":["669:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":1906,"src":"669:11:18"},"referencedDeclaration":1906,"src":"669:11:18","typeDescriptions":{"typeIdentifier":"t_contract$_IMocaPoints_$1906","typeString":"contract IMocaPoints"}},"visibility":"public"},{"constant":false,"functionSelector":"9e9e4666","id":1567,"mutability":"mutable","name":"paused","nameLocation":"757:6:18","nodeType":"VariableDeclaration","scope":1883,"src":"725:38:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":1566,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"733:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"725:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1565,"name":"bool","nodeType":"ElementaryTypeName","src":"744:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"ae6dead7","id":1571,"mutability":"mutable","name":"roots","nameLocation":"804:5:18","nodeType":"VariableDeclaration","scope":1883,"src":"769:40:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"typeName":{"id":1570,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"777:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"769:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"788:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"public"},{"constant":false,"functionSelector":"9e317f12","id":1575,"mutability":"mutable","name":"nonces","nameLocation":"850:6:18","nodeType":"VariableDeclaration","scope":1883,"src":"815:41:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":1574,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1572,"name":"bytes32","nodeType":"ElementaryTypeName","src":"823:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"815:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"cc3c0f06","id":1579,"mutability":"mutable","name":"claimed","nameLocation":"894:7:18","nodeType":"VariableDeclaration","scope":1883,"src":"862:39:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":1578,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"862:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1577,"name":"bool","nodeType":"ElementaryTypeName","src":"881:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"0cb09dc71d57eeec2046f6854976717e4874a3cf2d6ddeddde337e5b6de6ba31","id":1583,"name":"Paused","nameLocation":"914:6:18","nodeType":"EventDefinition","parameters":{"id":1582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"indexed":false,"mutability":"mutable","name":"season","nameLocation":"929:6:18","nodeType":"VariableDeclaration","scope":1583,"src":"921:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"921:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"920:16:18"},"src":"908:29:18"},{"anonymous":false,"eventSelector":"d05bfc2250abb0f8fd265a54c53a24359c5484af63cad2e4ce87c78ab751395a","id":1587,"name":"Unpaused","nameLocation":"948:8:18","nodeType":"EventDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"indexed":false,"mutability":"mutable","name":"season","nameLocation":"965:6:18","nodeType":"VariableDeclaration","scope":1587,"src":"957:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1584,"name":"bytes32","nodeType":"ElementaryTypeName","src":"957:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"956:16:18"},"src":"942:31:18"},{"anonymous":false,"documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"979:159:18","text":"@notice Emitted when a new merkle root is set.\n @param season The season that the merkle root would be set.\n @param root The new merkle root."},"eventSelector":"4983a335d43faab715b8e7c23f104092b464c1b553f3f4aa3fc33c473b45dd49","id":1594,"name":"MerkleRootSet","nameLocation":"1149:13:18","nodeType":"EventDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"indexed":false,"mutability":"mutable","name":"season","nameLocation":"1171:6:18","nodeType":"VariableDeclaration","scope":1594,"src":"1163:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1163:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1592,"indexed":false,"mutability":"mutable","name":"root","nameLocation":"1187:4:18","nodeType":"VariableDeclaration","scope":1594,"src":"1179:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1179:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1162:30:18"},"src":"1143:50:18"},{"anonymous":false,"documentation":{"id":1595,"nodeType":"StructuredDocumentation","src":"1199:444:18","text":"@notice Emitted when a payout is claimed.\n @param season The season of the claim.\n @param root The merkle root on which the claim was made.\n @param realmId The realmId of the claim.\n @param realmIdVersion The version of the realmId.\n @param amount The amount of points is claimed.\n @param depositReasonCode The deposit reason of the claim.\n @param nonce The nonce as when the claim was made."},"eventSelector":"6e125d7bd8f9609ca71a5f3e816580b0eb4a45663664eb21343914c5db5aeae9","id":1611,"name":"PayoutClaimed","nameLocation":"1654:13:18","nodeType":"EventDefinition","parameters":{"id":1610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"indexed":true,"mutability":"mutable","name":"season","nameLocation":"1693:6:18","nodeType":"VariableDeclaration","scope":1611,"src":"1677:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1677:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1599,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1725:4:18","nodeType":"VariableDeclaration","scope":1611,"src":"1709:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1709:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1601,"indexed":true,"mutability":"mutable","name":"realmId","nameLocation":"1755:7:18","nodeType":"VariableDeclaration","scope":1611,"src":"1739:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1600,"name":"uint256","nodeType":"ElementaryTypeName","src":"1739:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1603,"indexed":false,"mutability":"mutable","name":"realmIdVersion","nameLocation":"1780:14:18","nodeType":"VariableDeclaration","scope":1611,"src":"1772:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1602,"name":"uint256","nodeType":"ElementaryTypeName","src":"1772:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1605,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1812:6:18","nodeType":"VariableDeclaration","scope":1611,"src":"1804:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"1804:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1607,"indexed":false,"mutability":"mutable","name":"depositReasonCode","nameLocation":"1836:17:18","nodeType":"VariableDeclaration","scope":1611,"src":"1828:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1828:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1609,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"1871:5:18","nodeType":"VariableDeclaration","scope":1611,"src":"1863:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1863:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1667:215:18"},"src":"1648:235:18"},{"documentation":{"id":1612,"nodeType":"StructuredDocumentation","src":"1889:403:18","text":"@notice Thrown when trying to claim the same leaf more than once.\n @param season The season of the claim.\n @param realmId The realmId of the claim.\n @param realmIdVersion The version of the realmId.\n @param amount The amount of points is claimed.\n @param depositReasonCode The deposit reason of the claim.\n @param nonce The nonce as when the claim was made."},"errorSelector":"57793e5c","id":1626,"name":"AlreadyClaimed","nameLocation":"2303:14:18","nodeType":"ErrorDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"season","nameLocation":"2326:6:18","nodeType":"VariableDeclaration","scope":1626,"src":"2318:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2318:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"realmId","nameLocation":"2342:7:18","nodeType":"VariableDeclaration","scope":1626,"src":"2334:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1615,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1618,"mutability":"mutable","name":"realmIdVersion","nameLocation":"2359:14:18","nodeType":"VariableDeclaration","scope":1626,"src":"2351:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1617,"name":"uint256","nodeType":"ElementaryTypeName","src":"2351:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"amount","nameLocation":"2383:6:18","nodeType":"VariableDeclaration","scope":1626,"src":"2375:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"2375:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1622,"mutability":"mutable","name":"depositReasonCode","nameLocation":"2399:17:18","nodeType":"VariableDeclaration","scope":1626,"src":"2391:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1621,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2391:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1624,"mutability":"mutable","name":"nonce","nameLocation":"2426:5:18","nodeType":"VariableDeclaration","scope":1626,"src":"2418:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"2418:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2317:115:18"},"src":"2297:136:18"},{"documentation":{"id":1627,"nodeType":"StructuredDocumentation","src":"2439:385:18","text":"@notice Thrown when a proof cannot be verified.\n @param season The season of the claim.\n @param realmId The realmId of the claim.\n @param realmIdVersion The version of the realmId.\n @param amount The amount of points is claimed.\n @param depositReasonCode The deposit reason of the claim.\n @param nonce The nonce as when the claim was made."},"errorSelector":"50d53cc8","id":1641,"name":"InvalidProof","nameLocation":"2835:12:18","nodeType":"ErrorDefinition","parameters":{"id":1640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1629,"mutability":"mutable","name":"season","nameLocation":"2856:6:18","nodeType":"VariableDeclaration","scope":1641,"src":"2848:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2848:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1631,"mutability":"mutable","name":"realmId","nameLocation":"2872:7:18","nodeType":"VariableDeclaration","scope":1641,"src":"2864:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1630,"name":"uint256","nodeType":"ElementaryTypeName","src":"2864:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"realmIdVersion","nameLocation":"2889:14:18","nodeType":"VariableDeclaration","scope":1641,"src":"2881:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"2881:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1635,"mutability":"mutable","name":"amount","nameLocation":"2913:6:18","nodeType":"VariableDeclaration","scope":1641,"src":"2905:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1634,"name":"uint256","nodeType":"ElementaryTypeName","src":"2905:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1637,"mutability":"mutable","name":"depositReasonCode","nameLocation":"2929:17:18","nodeType":"VariableDeclaration","scope":1641,"src":"2921:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2921:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1639,"mutability":"mutable","name":"nonce","nameLocation":"2956:5:18","nodeType":"VariableDeclaration","scope":1641,"src":"2948:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1638,"name":"uint256","nodeType":"ElementaryTypeName","src":"2948:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2847:115:18"},"src":"2829:134:18"},{"documentation":{"id":1642,"nodeType":"StructuredDocumentation","src":"2969:98:18","text":"@notice Throws when the season does not exists.\n @param season The season of the claim."},"errorSelector":"0b22ca35","id":1646,"name":"InvalidSeason","nameLocation":"3078:13:18","nodeType":"ErrorDefinition","parameters":{"id":1645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"season","nameLocation":"3100:6:18","nodeType":"VariableDeclaration","scope":1646,"src":"3092:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3092:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3091:16:18"},"src":"3072:36:18"},{"documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"3114:102:18","text":"@notice Throws when the merkle root does not exist.\n @param season The season of the claim."},"errorSelector":"1d3bbc3f","id":1651,"name":"MerkleRootNotExists","nameLocation":"3227:19:18","nodeType":"ErrorDefinition","parameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"season","nameLocation":"3255:6:18","nodeType":"VariableDeclaration","scope":1651,"src":"3247:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1648,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3247:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3246:16:18"},"src":"3221:42:18"},{"documentation":{"id":1652,"nodeType":"StructuredDocumentation","src":"3269:96:18","text":"@notice Throws when the claim amount is zero.\n @param amount The amount of the claim."},"errorSelector":"27ab1ee2","id":1656,"name":"InvalidClaimAmount","nameLocation":"3376:18:18","nodeType":"ErrorDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"amount","nameLocation":"3403:6:18","nodeType":"VariableDeclaration","scope":1656,"src":"3395:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"3395:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3394:16:18"},"src":"3370:41:18"},{"documentation":{"id":1657,"nodeType":"StructuredDocumentation","src":"3417:93:18","text":"@notice Throws when the season is paused.\n @param season The season that is paused"},"errorSelector":"4501e9a2","id":1661,"name":"SeasonIsPaused","nameLocation":"3521:14:18","nodeType":"ErrorDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"season","nameLocation":"3544:6:18","nodeType":"VariableDeclaration","scope":1661,"src":"3536:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3536:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3535:16:18"},"src":"3515:37:18"},{"documentation":{"id":1662,"nodeType":"StructuredDocumentation","src":"3558:102:18","text":"@notice Throws when the season is not paused.\n @param season The season that is not paused."},"errorSelector":"d7590240","id":1666,"name":"SeasonNotPaused","nameLocation":"3671:15:18","nodeType":"ErrorDefinition","parameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"season","nameLocation":"3695:6:18","nodeType":"VariableDeclaration","scope":1666,"src":"3687:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1663,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3687:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3686:16:18"},"src":"3665:38:18"},{"body":{"id":1681,"nodeType":"Block","src":"3786:78:18","statements":[{"expression":{"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1675,"name":"MOCA_POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"3796:20:18","typeDescriptions":{"typeIdentifier":"t_contract$_IMocaPoints_$1906","typeString":"contract IMocaPoints"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1677,"name":"mocaPointsContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"3831:25:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1676,"name":"IMocaPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"3819:11:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMocaPoints_$1906_$","typeString":"type(contract IMocaPoints)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3819:38:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMocaPoints_$1906","typeString":"contract IMocaPoints"}},"src":"3796:61:18","typeDescriptions":{"typeIdentifier":"t_contract$_IMocaPoints_$1906","typeString":"contract IMocaPoints"}},"id":1680,"nodeType":"ExpressionStatement","src":"3796:61:18"}]},"id":1682,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":1671,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3774:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3778:6:18","memberName":"sender","nodeType":"MemberAccess","src":"3774:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1673,"kind":"baseConstructorSpecifier","modifierName":{"id":1670,"name":"ContractOwnership","nameLocations":["3756:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"3756:17:18"},"nodeType":"ModifierInvocation","src":"3756:29:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1668,"mutability":"mutable","name":"mocaPointsContractAddress","nameLocation":"3729:25:18","nodeType":"VariableDeclaration","scope":1682,"src":"3721:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1667,"name":"address","nodeType":"ElementaryTypeName","src":"3721:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3720:35:18"},"returnParameters":{"id":1674,"nodeType":"ParameterList","parameters":[],"src":"3786:0:18"},"scope":1883,"src":"3709:155:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1753,"nodeType":"Block","src":"4489:507:18","statements":[{"expression":{"arguments":[{"expression":{"id":1695,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4556:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4560:6:18","memberName":"sender","nodeType":"MemberAccess","src":"4556:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1690,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"4499:24:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4524:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"4499:31:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4499:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$163_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4533:22:18","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":361,"src":"4499:56:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$163_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$163_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4499:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1698,"nodeType":"ExpressionStatement","src":"4499:68:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1699,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"4582:5:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":1701,"indexExpression":{"id":1700,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4588:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4582:13:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4599:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4582:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4604:15:18","subExpression":{"baseExpression":{"id":1704,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"4605:6:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1706,"indexExpression":{"id":1705,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4612:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4605:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4582:37:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1714,"nodeType":"IfStatement","src":"4578:98:18","trueBody":{"id":1713,"nodeType":"Block","src":"4621:55:18","statements":[{"errorCall":{"arguments":[{"id":1710,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4658:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1709,"name":"SeasonNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"4642:15:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4642:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1712,"nodeType":"RevertStatement","src":"4635:30:18"}]}},{"condition":{"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4689:37:18","subExpression":{"arguments":[{"id":1717,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4719:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1715,"name":"MOCA_POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"4690:20:18","typeDescriptions":{"typeIdentifier":"t_contract$_IMocaPoints_$1906","typeString":"contract IMocaPoints"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4711:7:18","memberName":"seasons","nodeType":"MemberAccess","referencedDeclaration":1892,"src":"4690:28:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32) view external returns (bool)"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4690:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1725,"nodeType":"IfStatement","src":"4685:96:18","trueBody":{"id":1724,"nodeType":"Block","src":"4728:53:18","statements":[{"errorCall":{"arguments":[{"id":1721,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4763:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1720,"name":"InvalidSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4749:13:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1723,"nodeType":"RevertStatement","src":"4742:28:18"}]}},{"expression":{"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1726,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"4791:5:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":1728,"indexExpression":{"id":1727,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4797:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4791:13:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1729,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"4807:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4791:26:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1731,"nodeType":"ExpressionStatement","src":"4791:26:18"},{"id":1737,"nodeType":"UncheckedBlock","src":"4827:51:18","statements":[{"expression":{"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4851:16:18","subExpression":{"baseExpression":{"id":1732,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"4853:6:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1734,"indexExpression":{"id":1733,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4860:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4853:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1736,"nodeType":"ExpressionStatement","src":"4851:16:18"}]},{"eventCall":{"arguments":[{"id":1739,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4906:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1740,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"4914:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1738,"name":"MerkleRootSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"4892:13:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4892:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1742,"nodeType":"EmitStatement","src":"4887:38:18"},{"expression":{"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1743,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"4936:6:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1745,"indexExpression":{"id":1744,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4943:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4936:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4953:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4936:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1748,"nodeType":"ExpressionStatement","src":"4936:22:18"},{"eventCall":{"arguments":[{"id":1750,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"4982:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1749,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"4973:8:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4973:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1752,"nodeType":"EmitStatement","src":"4968:21:18"}]},"documentation":{"id":1683,"nodeType":"StructuredDocumentation","src":"3870:548:18","text":"@notice Sets the merkle root for a new claiming period and unpauses the season.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {SeasonNotPaused} if the season is not paused while applying an update to the root.\n @dev Reverts with {InvalidSeason} if the season does not exist.\n @dev Emits an {Unpaused} event.\n @dev Emits a {MerkleRootSet} event.\n @param season The season to be set for th merkle root.\n @param merkleRoot The merkle root to set."},"functionSelector":"75edcbe0","id":1754,"implemented":true,"kind":"function","modifiers":[],"name":"setMerkleRoot","nameLocation":"4432:13:18","nodeType":"FunctionDefinition","parameters":{"id":1688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1685,"mutability":"mutable","name":"season","nameLocation":"4454:6:18","nodeType":"VariableDeclaration","scope":1754,"src":"4446:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1684,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4446:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1687,"mutability":"mutable","name":"merkleRoot","nameLocation":"4470:10:18","nodeType":"VariableDeclaration","scope":1754,"src":"4462:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4462:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4445:36:18"},"returnParameters":{"id":1689,"nodeType":"ParameterList","parameters":[],"src":"4489:0:18"},"scope":1883,"src":"4423:573:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1881,"nodeType":"Block","src":"6158:1052:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1771,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"6172:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6182:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6172:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1779,"nodeType":"IfStatement","src":"6168:75:18","trueBody":{"id":1778,"nodeType":"Block","src":"6185:58:18","statements":[{"errorCall":{"arguments":[{"id":1775,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"6225:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1774,"name":"InvalidClaimAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"6206:18:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6206:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1777,"nodeType":"RevertStatement","src":"6199:33:18"}]}},{"condition":{"baseExpression":{"id":1780,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"6256:6:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1782,"indexExpression":{"id":1781,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6263:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6256:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1788,"nodeType":"IfStatement","src":"6252:74:18","trueBody":{"id":1787,"nodeType":"Block","src":"6272:54:18","statements":[{"errorCall":{"arguments":[{"id":1784,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6308:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1783,"name":"SeasonIsPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"6293:14:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6293:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1786,"nodeType":"RevertStatement","src":"6286:29:18"}]}},{"assignments":[1790],"declarations":[{"constant":false,"id":1790,"mutability":"mutable","name":"currentRoot","nameLocation":"6343:11:18","nodeType":"VariableDeclaration","scope":1881,"src":"6335:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6335:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1794,"initialValue":{"baseExpression":{"id":1791,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"6357:5:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":1793,"indexExpression":{"id":1792,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6363:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6357:13:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6335:35:18"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1795,"name":"currentRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"6384:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6399:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6384:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1803,"nodeType":"IfStatement","src":"6380:81:18","trueBody":{"id":1802,"nodeType":"Block","src":"6402:59:18","statements":[{"errorCall":{"arguments":[{"id":1799,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6443:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1798,"name":"MerkleRootNotExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"6423:19:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1801,"nodeType":"RevertStatement","src":"6416:34:18"}]}},{"assignments":[1805],"declarations":[{"constant":false,"id":1805,"mutability":"mutable","name":"currentNonce","nameLocation":"6479:12:18","nodeType":"VariableDeclaration","scope":1881,"src":"6471:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"6471:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1809,"initialValue":{"baseExpression":{"id":1806,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6494:6:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1808,"indexExpression":{"id":1807,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6501:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6494:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6471:37:18"},{"assignments":[1811],"declarations":[{"constant":false,"id":1811,"mutability":"mutable","name":"leaf","nameLocation":"6527:4:18","nodeType":"VariableDeclaration","scope":1881,"src":"6519:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6519:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1823,"initialValue":{"arguments":[{"arguments":[{"id":1815,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6561:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1816,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"6569:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1817,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"6578:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1818,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"6594:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1819,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"6602:17:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1820,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"6621:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1813,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6544:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6548:12:18","memberName":"encodePacked","nodeType":"MemberAccess","src":"6544:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6544:90:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1812,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6534:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6534:101:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6519:116:18"},{"condition":{"baseExpression":{"id":1824,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6650:7:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1826,"indexExpression":{"id":1825,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"6658:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6650:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1837,"nodeType":"IfStatement","src":"6646:139:18","trueBody":{"id":1836,"nodeType":"Block","src":"6665:120:18","statements":[{"errorCall":{"arguments":[{"id":1828,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6701:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1829,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"6709:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1830,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"6718:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1831,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"6734:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1832,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"6742:17:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1833,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"6761:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1827,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6686:14:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256,uint256,uint256,bytes32,uint256) pure"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6686:88:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1835,"nodeType":"RevertStatement","src":"6679:95:18"}]}},{"condition":{"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6798:40:18","subExpression":{"arguments":[{"id":1840,"name":"currentRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"6820:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1841,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"6833:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1838,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"6799:5:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6805:14:18","memberName":"verifyCalldata","nodeType":"MemberAccess","referencedDeclaration":1055,"src":"6799:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_calldata_ptr_$","typeString":"function (bytes32[] calldata,bytes32,bytes32) pure returns (bool)"}},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1854,"nodeType":"IfStatement","src":"6794:164:18","trueBody":{"id":1853,"nodeType":"Block","src":"6840:118:18","statements":[{"errorCall":{"arguments":[{"id":1845,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6874:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1846,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"6882:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1847,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"6891:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1848,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"6907:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1849,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"6915:17:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1850,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"6934:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1844,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"6861:12:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256,uint256,uint256,bytes32,uint256) pure"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6861:86:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1852,"nodeType":"RevertStatement","src":"6854:93:18"}]}},{"expression":{"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1855,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6968:7:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1857,"indexExpression":{"id":1856,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"6976:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6968:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6984:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6968:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1860,"nodeType":"ExpressionStatement","src":"6968:20:18"},{"expression":{"arguments":[{"id":1864,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"7028:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1865,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"7036:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1866,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"7045:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1867,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"7061:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1868,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"7069:17:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1861,"name":"MOCA_POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"6999:20:18","typeDescriptions":{"typeIdentifier":"t_contract$_IMocaPoints_$1906","typeString":"contract IMocaPoints"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7020:7:18","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":1905,"src":"6999:28:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (bytes32,uint256,uint256,uint256,bytes32) external"}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6999:88:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1870,"nodeType":"ExpressionStatement","src":"6999:88:18"},{"eventCall":{"arguments":[{"id":1872,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"7117:6:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1873,"name":"currentRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"7125:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1874,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"7138:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1875,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"7147:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1876,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"7163:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1877,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"7171:17:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1878,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"7190:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1871,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"7103:13:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256,uint256,uint256,bytes32,uint256)"}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7103:100:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1880,"nodeType":"EmitStatement","src":"7098:105:18"}]},"documentation":{"id":1755,"nodeType":"StructuredDocumentation","src":"5002:941:18","text":"@notice Executes the payout for a given realmId (anyone can call this function).\n @dev Reverts with {MerkleRootNotExists} if the merkle root does not exist.\n @dev Reverts with {SeasonIsPaused} if the contract is paused for that season.\n @dev Reverts with {InvalidClaimAmount} if the merkle leaf is storing a zero amount.\n @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\n @dev Reverts with {InvalidProof} if the merkle proof cannot be verified.\n @dev Emits a {PayoutClaimed} event.\n @param season The season to be claimed.\n @param realmId The realmId for this claim.\n @param realmIdVersion The version of the realmId for this claim.\n @param amount The amount of points to be claimed.\n @param depositReasonCode The deposit reason code for this claim.\n @param proof The Merkle proof of the user based on the merkle root"},"functionSelector":"9931012e","id":1882,"implemented":true,"kind":"function","modifiers":[],"name":"claimPayout","nameLocation":"5957:11:18","nodeType":"FunctionDefinition","parameters":{"id":1769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1757,"mutability":"mutable","name":"season","nameLocation":"5986:6:18","nodeType":"VariableDeclaration","scope":1882,"src":"5978:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1756,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5978:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"realmId","nameLocation":"6010:7:18","nodeType":"VariableDeclaration","scope":1882,"src":"6002:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"6002:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"realmIdVersion","nameLocation":"6035:14:18","nodeType":"VariableDeclaration","scope":1882,"src":"6027:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"6027:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"amount","nameLocation":"6067:6:18","nodeType":"VariableDeclaration","scope":1882,"src":"6059:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"6059:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"depositReasonCode","nameLocation":"6091:17:18","nodeType":"VariableDeclaration","scope":1882,"src":"6083:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1764,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6083:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1768,"mutability":"mutable","name":"proof","nameLocation":"6137:5:18","nodeType":"VariableDeclaration","scope":1882,"src":"6118:24:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1766,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6118:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1767,"nodeType":"ArrayTypeName","src":"6118:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5968:180:18"},"returnParameters":{"id":1770,"nodeType":"ParameterList","parameters":[],"src":"6158:0:18"},"scope":1883,"src":"5948:1262:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1884,"src":"493:6719:18","usedErrors":[94,429,1626,1641,1646,1651,1656,1661,1666],"usedEvents":[111,1583,1587,1594,1611]}],"src":"32:7180:18"},"id":18},"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol":{"ast":{"absolutePath":"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol","exportedSymbols":{"IMocaPoints":[1906]},"id":1907,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1885,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"45:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IMocaPoints","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1906,"linearizedBaseContracts":[1906],"name":"IMocaPoints","nameLocation":"80:11:19","nodeType":"ContractDefinition","nodes":[{"functionSelector":"4529cc1b","id":1892,"implemented":false,"kind":"function","modifiers":[],"name":"seasons","nameLocation":"108:7:19","nodeType":"FunctionDefinition","parameters":{"id":1888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1892,"src":"116:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1886,"name":"bytes32","nodeType":"ElementaryTypeName","src":"116:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"115:9:19"},"returnParameters":{"id":1891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1892,"src":"148:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1889,"name":"bool","nodeType":"ElementaryTypeName","src":"148:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"147:6:19"},"scope":1906,"src":"99:55:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18ee89f0","id":1905,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"168:7:19","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1894,"mutability":"mutable","name":"season","nameLocation":"184:6:19","nodeType":"VariableDeclaration","scope":1905,"src":"176:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1893,"name":"bytes32","nodeType":"ElementaryTypeName","src":"176:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1896,"mutability":"mutable","name":"realmId","nameLocation":"200:7:19","nodeType":"VariableDeclaration","scope":1905,"src":"192:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"192:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"realmIdVersion","nameLocation":"217:14:19","nodeType":"VariableDeclaration","scope":1905,"src":"209:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1897,"name":"uint256","nodeType":"ElementaryTypeName","src":"209:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1900,"mutability":"mutable","name":"amount","nameLocation":"241:6:19","nodeType":"VariableDeclaration","scope":1905,"src":"233:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1899,"name":"uint256","nodeType":"ElementaryTypeName","src":"233:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1902,"mutability":"mutable","name":"depositReasonCode","nameLocation":"257:17:19","nodeType":"VariableDeclaration","scope":1905,"src":"249:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"249:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"175:100:19"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[],"src":"284:0:19"},"scope":1906,"src":"159:126:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1907,"src":"70:217:19","usedErrors":[],"usedEvents":[]}],"src":"45:242:19"},"id":19}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"IERC173Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{},"title":"ERC-173 Contract Ownership Standard (events)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC-173 Contract Ownership Standard (events)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":\"IERC173Events\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e42a5dba46811e92e408e2fe9877716adacdd1052e479a95bab5cd357620f4d664736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0x2A 0x5D 0xBA CHAINID DUP2 0x1E SWAP3 0xE4 ADDMOD 0xE2 INVALID SWAP9 PUSH24 0x716ADACDD1052E479A95BAB5CD357620F4D664736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"589:4674:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;589:4674:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e42a5dba46811e92e408e2fe9877716adacdd1052e479a95bab5cd357620f4d664736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0x2A 0x5D 0xBA CHAINID DUP2 0x1E SWAP3 0xE4 ADDMOD 0xE2 INVALID SWAP9 PUSH24 0x716ADACDD1052E479A95BAB5CD357620F4D664736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"589:4674:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220abd2a005c4507c98ccd917ab1fbd496bab7c55873eb067513adf485da2b2866e64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xD2 LOG0 SDIV 0xC4 POP PUSH29 0x98CCD917AB1FBD496BAB7C55873EB067513ADF485DA2B2866E64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220abd2a005c4507c98ccd917ab1fbd496bab7c55873eb067513adf485da2b2866e64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xD2 LOG0 SDIV 0xC4 POP PUSH29 0x98CCD917AB1FBD496BAB7C55873EB067513ADF485DA2B2866E64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207163aad0d24dfbf938674c77a52d35ddf2388f2140eef8a65b17a332babca60c64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x63AAD0D24DFBF938674C77A52D35DDF2388F 0x21 BLOCKHASH 0xEE 0xF8 0xA6 JUMPDEST OR LOG3 ORIGIN 0xBA 0xBC 0xA6 0xC PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"319:712:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207163aad0d24dfbf938674c77a52d35ddf2388f2140eef8a65b17a332babca60c64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x63AAD0D24DFBF938674C77A52D35DDF2388F 0x21 BLOCKHASH 0xEE 0xF8 0xA6 JUMPDEST OR LOG3 ORIGIN 0xBA 0xBC 0xA6 0xC PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"319:712:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220321f3a618dd43ace719079c39f253d2c2276a964234e934c1d8d7cfe736a4f1a64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x1F GASPRICE PUSH2 0x8DD4 GASPRICE 0xCE PUSH18 0x9079C39F253D2C2276A964234E934C1D8D7C INVALID PUSH20 0x6A4F1A64736F6C63430008150033000000000000 ","sourceMap":"194:8964:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220321f3a618dd43ace719079c39f253d2c2276a964234e934c1d8d7cfe736a4f1a64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x1F GASPRICE PUSH2 0x8DD4 GASPRICE 0xCE PUSH18 0x9079C39F253D2C2276A964234E934C1D8D7C INVALID PUSH20 0x6A4F1A64736F6C63430008150033000000000000 ","sourceMap":"194:8964:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4e2e1478ff6765d2946223f1e2b16165eaba9ab3b7c3b88700d949de47f2e9364736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xE2 0xE1 SELFBALANCE DUP16 0xF6 PUSH23 0x5D2946223F1E2B16165EABA9AB3B7C3B88700D949DE47F 0x2E SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1279:1391:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4e2e1478ff6765d2946223f1e2b16165eaba9ab3b7c3b88700d949de47f2e9364736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xE2 0xE1 SELFBALANCE DUP16 0xF6 PUSH23 0x5D2946223F1E2B16165EABA9AB3B7C3B88700D949DE47F 0x2E SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1279:1391:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037f7e566a814c1db878f1f3ac2178a801ec8196b23bbae7a4cf7356a30f3fa0e64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xF7 0xE5 PUSH7 0xA814C1DB878F1F GASPRICE 0xC2 OR DUP11 DUP1 0x1E 0xC8 NOT PUSH12 0x23BBAE7A4CF7356A30F3FA0E PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"802:8493:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037f7e566a814c1db878f1f3ac2178a801ec8196b23bbae7a4cf7356a30f3fa0e64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xF7 0xE5 PUSH7 0xA814C1DB878F1F GASPRICE 0xC2 OR DUP11 DUP1 0x1E 0xC8 NOT PUSH12 0x23BBAE7A4CF7356A30F3FA0E PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"802:8493:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MocaPoints/interface/IRealmId.sol":{"IRealmId":{"abi":[{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"burnCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burnCounts(uint256)":"a9735f94","getTokenId(string,bytes32)":"cad6b901","ownerOf(uint256)":"6352211e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"burnCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MocaPoints/interface/IRealmId.sol\":\"IRealmId\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/MocaPoints/interface/IRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// import {RealmId} from \\\"../realmIdContract/RealmId.sol\\\";\\n\\ninterface IRealmId {\\n    function burnCounts(uint256 realmId) external view returns (uint256);\\n\\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\\n\\n    function ownerOf(uint256 realmId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfad6e9198a7ed75d8ebb7253962413ce9e789c9d4a90b31bbf460a3f2bef217a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol":{"SeasonalCumulativeMerkleClaim":{"abi":[{"inputs":[{"internalType":"address","name":"mocaPointsContractAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidClaimAmount","type":"error"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"InvalidSeason","type":"error"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"MerkleRootNotExists","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"SeasonIsPaused","type":"error"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"SeasonNotPaused","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"realmId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"MOCA_POINTS_CONTRACT","outputs":[{"internalType":"contract IMocaPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claimPayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"roots","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AlreadyClaimed(bytes32,uint256,uint256,uint256,bytes32,uint256)":[{"params":{"amount":"The amount of points is claimed.","depositReasonCode":"The deposit reason of the claim.","nonce":"The nonce as when the claim was made.","realmId":"The realmId of the claim.","realmIdVersion":"The version of the realmId.","season":"The season of the claim."}}],"InvalidClaimAmount(uint256)":[{"params":{"amount":"The amount of the claim."}}],"InvalidProof(bytes32,uint256,uint256,uint256,bytes32,uint256)":[{"params":{"amount":"The amount of points is claimed.","depositReasonCode":"The deposit reason of the claim.","nonce":"The nonce as when the claim was made.","realmId":"The realmId of the claim.","realmIdVersion":"The version of the realmId.","season":"The season of the claim."}}],"InvalidSeason(bytes32)":[{"params":{"season":"The season of the claim."}}],"MerkleRootNotExists(bytes32)":[{"params":{"season":"The season of the claim."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"SeasonIsPaused(bytes32)":[{"params":{"season":"The season that is paused"}}],"SeasonNotPaused(bytes32)":[{"params":{"season":"The season that is not paused."}}]},"events":{"MerkleRootSet(bytes32,bytes32)":{"params":{"root":"The new merkle root.","season":"The season that the merkle root would be set."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutClaimed(bytes32,bytes32,uint256,uint256,uint256,bytes32,uint256)":{"params":{"amount":"The amount of points is claimed.","depositReasonCode":"The deposit reason of the claim.","nonce":"The nonce as when the claim was made.","realmId":"The realmId of the claim.","realmIdVersion":"The version of the realmId.","root":"The merkle root on which the claim was made.","season":"The season of the claim."}}},"kind":"dev","methods":{"claimPayout(bytes32,uint256,uint256,uint256,bytes32,bytes32[])":{"details":"Reverts with {MerkleRootNotExists} if the merkle root does not exist.Reverts with {SeasonIsPaused} if the contract is paused for that season.Reverts with {InvalidClaimAmount} if the merkle leaf is storing a zero amount.Reverts with {AlreadyClaimed} if this specific payout has already been claimed.Reverts with {InvalidProof} if the merkle proof cannot be verified.Emits a {PayoutClaimed} event.","params":{"amount":"The amount of points to be claimed.","depositReasonCode":"The deposit reason code for this claim.","proof":"The Merkle proof of the user based on the merkle root","realmId":"The realmId for this claim.","realmIdVersion":"The version of the realmId for this claim.","season":"The season to be claimed."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setMerkleRoot(bytes32,bytes32)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {SeasonNotPaused} if the season is not paused while applying an update to the root.Reverts with {InvalidSeason} if the season does not exist.Emits an {Unpaused} event.Emits a {MerkleRootSet} event.","params":{"merkleRoot":"The merkle root to set.","season":"The season to be set for th merkle root."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1682":{"entryPoint":null,"id":1682,"parameterSlots":1,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@constructorInit_235":{"entryPoint":148,"id":235,"parameterSlots":2,"returnSlots":0},"@layout_393":{"entryPoint":94,"id":393,"parameterSlots":0,"returnSlots":1},"@layout_541":{"entryPoint":271,"id":541,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_495":{"entryPoint":319,"id":495,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":412,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":462,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:536:20","nodeType":"YulBlock","src":"0:536:20","statements":[{"nativeSrc":"6:3:20","nodeType":"YulBlock","src":"6:3:20","statements":[]},{"body":{"nativeSrc":"95:209:20","nodeType":"YulBlock","src":"95:209:20","statements":[{"body":{"nativeSrc":"141:16:20","nodeType":"YulBlock","src":"141:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:20","nodeType":"YulLiteral","src":"150:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:20","nodeType":"YulLiteral","src":"153:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:20","nodeType":"YulIdentifier","src":"143:6:20"},"nativeSrc":"143:12:20","nodeType":"YulFunctionCall","src":"143:12:20"},"nativeSrc":"143:12:20","nodeType":"YulExpressionStatement","src":"143:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"116:7:20","nodeType":"YulIdentifier","src":"116:7:20"},{"name":"headStart","nativeSrc":"125:9:20","nodeType":"YulIdentifier","src":"125:9:20"}],"functionName":{"name":"sub","nativeSrc":"112:3:20","nodeType":"YulIdentifier","src":"112:3:20"},"nativeSrc":"112:23:20","nodeType":"YulFunctionCall","src":"112:23:20"},{"kind":"number","nativeSrc":"137:2:20","nodeType":"YulLiteral","src":"137:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"108:3:20","nodeType":"YulIdentifier","src":"108:3:20"},"nativeSrc":"108:32:20","nodeType":"YulFunctionCall","src":"108:32:20"},"nativeSrc":"105:52:20","nodeType":"YulIf","src":"105:52:20"},{"nativeSrc":"166:29:20","nodeType":"YulVariableDeclaration","src":"166:29:20","value":{"arguments":[{"name":"headStart","nativeSrc":"185:9:20","nodeType":"YulIdentifier","src":"185:9:20"}],"functionName":{"name":"mload","nativeSrc":"179:5:20","nodeType":"YulIdentifier","src":"179:5:20"},"nativeSrc":"179:16:20","nodeType":"YulFunctionCall","src":"179:16:20"},"variables":[{"name":"value","nativeSrc":"170:5:20","nodeType":"YulTypedName","src":"170:5:20","type":""}]},{"body":{"nativeSrc":"258:16:20","nodeType":"YulBlock","src":"258:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"267:1:20","nodeType":"YulLiteral","src":"267:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"270:1:20","nodeType":"YulLiteral","src":"270:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"260:6:20","nodeType":"YulIdentifier","src":"260:6:20"},"nativeSrc":"260:12:20","nodeType":"YulFunctionCall","src":"260:12:20"},"nativeSrc":"260:12:20","nodeType":"YulExpressionStatement","src":"260:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"217:5:20","nodeType":"YulIdentifier","src":"217:5:20"},{"arguments":[{"name":"value","nativeSrc":"228:5:20","nodeType":"YulIdentifier","src":"228:5:20"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"243:3:20","nodeType":"YulLiteral","src":"243:3:20","type":"","value":"160"},{"kind":"number","nativeSrc":"248:1:20","nodeType":"YulLiteral","src":"248:1:20","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"239:3:20","nodeType":"YulIdentifier","src":"239:3:20"},"nativeSrc":"239:11:20","nodeType":"YulFunctionCall","src":"239:11:20"},{"kind":"number","nativeSrc":"252:1:20","nodeType":"YulLiteral","src":"252:1:20","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"235:3:20","nodeType":"YulIdentifier","src":"235:3:20"},"nativeSrc":"235:19:20","nodeType":"YulFunctionCall","src":"235:19:20"}],"functionName":{"name":"and","nativeSrc":"224:3:20","nodeType":"YulIdentifier","src":"224:3:20"},"nativeSrc":"224:31:20","nodeType":"YulFunctionCall","src":"224:31:20"}],"functionName":{"name":"eq","nativeSrc":"214:2:20","nodeType":"YulIdentifier","src":"214:2:20"},"nativeSrc":"214:42:20","nodeType":"YulFunctionCall","src":"214:42:20"}],"functionName":{"name":"iszero","nativeSrc":"207:6:20","nodeType":"YulIdentifier","src":"207:6:20"},"nativeSrc":"207:50:20","nodeType":"YulFunctionCall","src":"207:50:20"},"nativeSrc":"204:70:20","nodeType":"YulIf","src":"204:70:20"},{"nativeSrc":"283:15:20","nodeType":"YulAssignment","src":"283:15:20","value":{"name":"value","nativeSrc":"293:5:20","nodeType":"YulIdentifier","src":"293:5:20"},"variableNames":[{"name":"value0","nativeSrc":"283:6:20","nodeType":"YulIdentifier","src":"283:6:20"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"14:290:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"61:9:20","nodeType":"YulTypedName","src":"61:9:20","type":""},{"name":"dataEnd","nativeSrc":"72:7:20","nodeType":"YulTypedName","src":"72:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"84:6:20","nodeType":"YulTypedName","src":"84:6:20","type":""}],"src":"14:290:20"},{"body":{"nativeSrc":"358:176:20","nodeType":"YulBlock","src":"358:176:20","statements":[{"nativeSrc":"368:17:20","nodeType":"YulAssignment","src":"368:17:20","value":{"arguments":[{"name":"x","nativeSrc":"380:1:20","nodeType":"YulIdentifier","src":"380:1:20"},{"name":"y","nativeSrc":"383:1:20","nodeType":"YulIdentifier","src":"383:1:20"}],"functionName":{"name":"sub","nativeSrc":"376:3:20","nodeType":"YulIdentifier","src":"376:3:20"},"nativeSrc":"376:9:20","nodeType":"YulFunctionCall","src":"376:9:20"},"variableNames":[{"name":"diff","nativeSrc":"368:4:20","nodeType":"YulIdentifier","src":"368:4:20"}]},{"body":{"nativeSrc":"417:111:20","nodeType":"YulBlock","src":"417:111:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"438:1:20","nodeType":"YulLiteral","src":"438:1:20","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"445:3:20","nodeType":"YulLiteral","src":"445:3:20","type":"","value":"224"},{"kind":"number","nativeSrc":"450:10:20","nodeType":"YulLiteral","src":"450:10:20","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"441:3:20","nodeType":"YulIdentifier","src":"441:3:20"},"nativeSrc":"441:20:20","nodeType":"YulFunctionCall","src":"441:20:20"}],"functionName":{"name":"mstore","nativeSrc":"431:6:20","nodeType":"YulIdentifier","src":"431:6:20"},"nativeSrc":"431:31:20","nodeType":"YulFunctionCall","src":"431:31:20"},"nativeSrc":"431:31:20","nodeType":"YulExpressionStatement","src":"431:31:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"482:1:20","nodeType":"YulLiteral","src":"482:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"485:4:20","nodeType":"YulLiteral","src":"485:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"475:6:20","nodeType":"YulIdentifier","src":"475:6:20"},"nativeSrc":"475:15:20","nodeType":"YulFunctionCall","src":"475:15:20"},"nativeSrc":"475:15:20","nodeType":"YulExpressionStatement","src":"475:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"510:1:20","nodeType":"YulLiteral","src":"510:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"513:4:20","nodeType":"YulLiteral","src":"513:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"503:6:20","nodeType":"YulIdentifier","src":"503:6:20"},"nativeSrc":"503:15:20","nodeType":"YulFunctionCall","src":"503:15:20"},"nativeSrc":"503:15:20","nodeType":"YulExpressionStatement","src":"503:15:20"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"400:4:20","nodeType":"YulIdentifier","src":"400:4:20"},{"name":"x","nativeSrc":"406:1:20","nodeType":"YulIdentifier","src":"406:1:20"}],"functionName":{"name":"gt","nativeSrc":"397:2:20","nodeType":"YulIdentifier","src":"397:2:20"},"nativeSrc":"397:11:20","nodeType":"YulFunctionCall","src":"397:11:20"},"nativeSrc":"394:134:20","nodeType":"YulIf","src":"394:134:20"}]},"name":"checked_sub_t_uint256","nativeSrc":"309:225:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"340:1:20","nodeType":"YulTypedName","src":"340:1:20","type":""},{"name":"y","nativeSrc":"343:1:20","nodeType":"YulTypedName","src":"343:1:20","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"349:4:20","nodeType":"YulTypedName","src":"349:4:20","type":""}],"src":"309:225:20"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b5060405162000fa038038062000fa083398101604081905262000034916200019c565b336200004b81620000446200005e565b9062000094565b506001600160a01b0316608052620001f0565b6000806200008e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd620001ce565b92915050565b6001600160a01b03811615620000eb5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6200010b6307f5828d60e41b6001620001036200010f565b91906200013f565b5050565b6000806200008e60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e620001ce565b600160e01b6001600160e01b03198316016200016e576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b600060208284031215620001af57600080fd5b81516001600160a01b0381168114620001c757600080fd5b9392505050565b818103818111156200008e57634e487b7160e01b600052601160045260246000fd5b608051610d87620002196000396000818160f0015281816102d401526107100152610d876000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639e317f1211610076578063ae6dead71161005b578063ae6dead7146101b8578063cc3c0f06146101d8578063f2fde38b146101fb57600080fd5b80639e317f12146101675780639e9e46661461019557600080fd5b806375edcbe0116100a757806375edcbe0146101375780638da5cb5b1461014c5780639931012e1461015457600080fd5b806301ffc9a7146100c35780632727aae8146100eb575b600080fd5b6100d66100d1366004610b2d565b61020e565b60405190151581526020015b60405180910390f35b6101127f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b61014a610145366004610b6f565b610228565b005b610112610451565b61014a610162366004610b91565b61047d565b610187610175366004610c37565b60026020526000908152604090205481565b6040519081526020016100e2565b6100d66101a3366004610c37565b60006020819052908152604090205460ff1681565b6101876101c6366004610c37565b60016020526000908152604090205481565b6100d66101e6366004610c37565b60036020526000908152604090205460ff1681565b61014a610209366004610c50565b6107c6565b60006102228261021c6107dd565b9061080b565b92915050565b61023a336102346108e5565b90610913565b60008281526001602052604090205415801590610266575060008281526020819052604090205460ff16155b156102a5576040517fd7590240000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6040517f4529cc1b000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634529cc1b90602401602060405180830381865afa158015610330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103549190610c86565b61038d576040517f0b22ca350000000000000000000000000000000000000000000000000000000081526004810183905260240161029c565b60008281526001602081815260408084208590556002825292839020805490920190915581518481529081018390527f4983a335d43faab715b8e7c23f104092b464c1b553f3f4aa3fc33c473b45dd49910160405180910390a16000828152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590518381527fd05bfc2250abb0f8fd265a54c53a24359c5484af63cad2e4ce87c78ab751395a910160405180910390a15050565b600061047861045e6108e5565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b836000036104ba576040517f27ab1ee20000000000000000000000000000000000000000000000000000000081526004810185905260240161029c565b60008781526020819052604090205460ff1615610506576040517f4501e9a20000000000000000000000000000000000000000000000000000000081526004810188905260240161029c565b60008781526001602052604081205490819003610552576040517f1d3bbc3f0000000000000000000000000000000000000000000000000000000081526004810189905260240161029c565b60008881526002602090815260408083205481518084018d90528083018c9052606081018b9052608081018a905260a0810189905260c08082018390528351808303909101815260e09091018352805190840120808552600390935292205460ff1615610611576040517f57793e5c000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a905260448101899052606481018890526084810187905260a4810183905260c40161029c565b61061d85858584610982565b610679576040517f50d53cc8000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a905260448101899052606481018890526084810187905260a4810183905260c40161029c565b6000818152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f18ee89f0000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a905260448101899052606481018890526084810187905273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906318ee89f09060a401600060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b5050604080518b8152602081018b9052908101899052606081018590528b92508591508c907f6e125d7bd8f9609ca71a5f3e816580b0eb4a45663664eb21343914c5db5aeae99060800160405180910390a450505050505050505050565b6107da33826107d36108e5565b919061099a565b50565b60008061022260017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610cd7565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161085b57506000610222565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108ac57506001610222565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061022260017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610cd7565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461097e576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161029c565b5050565b600082610990868685610aaf565b1495945050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610a07576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161029c565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610aa95783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600081815b84811015610af257610ade82878784818110610ad257610ad2610cea565b90506020020135610afb565b915080610aea81610d19565b915050610ab4565b50949350505050565b6000818310610b17576000828152602084905260409020610b26565b60008381526020839052604090205b9392505050565b600060208284031215610b3f57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b2657600080fd5b60008060408385031215610b8257600080fd5b50508035926020909101359150565b600080600080600080600060c0888a031215610bac57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610be757600080fd5b818a0191508a601f830112610bfb57600080fd5b813581811115610c0a57600080fd5b8b60208260051b8501011115610c1f57600080fd5b60208301945080935050505092959891949750929550565b600060208284031215610c4957600080fd5b5035919050565b600060208284031215610c6257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b2657600080fd5b600060208284031215610c9857600080fd5b81518015158114610b2657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561022257610222610ca8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4a57610d4a610ca8565b506001019056fea26469706673582212207adef4ed1f976e0a52d7c91992fcb0614fe80c628ae084c40470ade2ad6200b064736f6c63430008150033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xFA0 CODESIZE SUB DUP1 PUSH3 0xFA0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x19C JUMP JUMPDEST CALLER PUSH3 0x4B DUP2 PUSH3 0x44 PUSH3 0x5E JUMP JUMPDEST SWAP1 PUSH3 0x94 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH3 0x1F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x8E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x1CE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0xEB JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x10B PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x103 PUSH3 0x10F JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x13F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x8E PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x1CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x16E JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x8E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xD87 PUSH3 0x219 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xF0 ADD MSTORE DUP2 DUP2 PUSH2 0x2D4 ADD MSTORE PUSH2 0x710 ADD MSTORE PUSH2 0xD87 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9E317F12 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xAE6DEAD7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9E317F12 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x9E9E4666 EQ PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75EDCBE0 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x75EDCBE0 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x9931012E EQ PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x2727AAE8 EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB2D JUMP JUMPDEST PUSH2 0x20E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x112 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0xB6F JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x112 PUSH2 0x451 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0xB91 JUMP JUMPDEST PUSH2 0x47D JUMP JUMPDEST PUSH2 0x187 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1C6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x209 CALLDATASIZE PUSH1 0x4 PUSH2 0xC50 JUMP JUMPDEST PUSH2 0x7C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x222 DUP3 PUSH2 0x21C PUSH2 0x7DD JUMP JUMPDEST SWAP1 PUSH2 0x80B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23A CALLER PUSH2 0x234 PUSH2 0x8E5 JUMP JUMPDEST SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x266 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD759024000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4529CC1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x4529CC1B SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x330 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x354 SWAP2 SWAP1 PUSH2 0xC86 JUMP JUMPDEST PUSH2 0x38D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB22CA3500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x2 DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x4983A335D43FAAB715B8E7C23F104092B464C1B553F3F4AA3FC33C473B45DD49 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP1 MLOAD DUP4 DUP2 MSTORE PUSH32 0xD05BFC2250ABB0F8FD265A54C53A24359C5484AF63CAD2E4CE87C78AB751395A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x478 PUSH2 0x45E PUSH2 0x8E5 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0x4BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x27AB1EE200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x506 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4501E9A200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1D3BBC3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP5 ADD DUP14 SWAP1 MSTORE DUP1 DUP4 ADD DUP13 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xC0 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP2 ADD DUP4 MSTORE DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x611 JUMPI PUSH1 0x40 MLOAD PUSH32 0x57793E5C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xA4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC4 ADD PUSH2 0x29C JUMP JUMPDEST PUSH2 0x61D DUP6 DUP6 DUP6 DUP5 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH32 0x50D53CC800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xA4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC4 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x18EE89F000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x18EE89F0 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x768 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP12 SWAP1 MSTORE SWAP1 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE DUP12 SWAP3 POP DUP6 SWAP2 POP DUP13 SWAP1 PUSH32 0x6E125D7BD8F9609CA71A5F3E816580B0EB4A45663664EB21343914C5DB5AEAE9 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7DA CALLER DUP3 PUSH2 0x7D3 PUSH2 0x8E5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x99A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x222 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xCD7 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x85B JUMPI POP PUSH1 0x0 PUSH2 0x222 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8AC JUMPI POP PUSH1 0x1 PUSH2 0x222 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x222 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xCD7 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x990 DUP7 DUP7 DUP6 PUSH2 0xAAF JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAA9 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xAF2 JUMPI PUSH2 0xADE DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xAD2 JUMPI PUSH2 0xAD2 PUSH2 0xCEA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xAFB JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xAEA DUP2 PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAB4 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xB17 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xBAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP12 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x222 JUMPI PUSH2 0x222 PUSH2 0xCA8 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xD4A JUMPI PUSH2 0xD4A PUSH2 0xCA8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xDEF4ED1F976E0A52D7C91992FCB0614FE80C628AE084C40470ADE2 0xAD PUSH3 0xB064 PUSH20 0x6F6C634300081500330000000000000000000000 ","sourceMap":"493:6719:18:-:0;;;3709:155;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3774:10;1008:63:0;3774:10:18;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;3796:61:18::1;;::::0;493:6719;;5087:174:6;5128:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5087:174;-1:-1:-1;;5087:174:6:o;1561:355::-;-1:-1:-1;;;;;1649:26:6;;;1645:166;;1691:30;;-1:-1:-1;;;;;;1691:30:6;-1:-1:-1;;;;;1691:30:6;;;;;;;1740:60;;-1:-1:-1;;1740:60:6;;-1:-1:-1;;1740:60:6;1645:166;1820:89;-1:-1:-1;;;1904:4:6;1820:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1561:355;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:290:20:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:20;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:20:o;309:225::-;376:9;;;397:11;;;394:134;;;450:10;445:3;441:20;438:1;431:31;485:4;482:1;475:15;513:4;510:1;503:15;309:225;493:6719:18;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MOCA_POINTS_CONTRACT_1563":{"entryPoint":null,"id":1563,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1511":{"entryPoint":null,"id":1511,"parameterSlots":2,"returnSlots":1},"@_hashPair_1500":{"entryPoint":2811,"id":1500,"parameterSlots":2,"returnSlots":1},"@_msgSender_940":{"entryPoint":null,"id":940,"parameterSlots":0,"returnSlots":1},"@claimPayout_1882":{"entryPoint":1149,"id":1882,"parameterSlots":7,"returnSlots":0},"@claimed_1579":{"entryPoint":null,"id":1579,"parameterSlots":0,"returnSlots":0},"@enforceIsContractOwner_361":{"entryPoint":2323,"id":361,"parameterSlots":2,"returnSlots":0},"@layout_393":{"entryPoint":2277,"id":393,"parameterSlots":0,"returnSlots":1},"@layout_541":{"entryPoint":2013,"id":541,"parameterSlots":0,"returnSlots":1},"@nonces_1575":{"entryPoint":null,"id":1575,"parameterSlots":0,"returnSlots":0},"@owner_314":{"entryPoint":null,"id":314,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1105,"id":62,"parameterSlots":0,"returnSlots":1},"@paused_1567":{"entryPoint":null,"id":1567,"parameterSlots":0,"returnSlots":0},"@processProofCalldata_1135":{"entryPoint":2735,"id":1135,"parameterSlots":3,"returnSlots":1},"@roots_1571":{"entryPoint":null,"id":1571,"parameterSlots":0,"returnSlots":0},"@setMerkleRoot_1754":{"entryPoint":552,"id":1754,"parameterSlots":2,"returnSlots":0},"@supportsInterface_423":{"entryPoint":526,"id":423,"parameterSlots":1,"returnSlots":1},"@supportsInterface_529":{"entryPoint":2059,"id":529,"parameterSlots":2,"returnSlots":1},"@transferOwnership_301":{"entryPoint":2458,"id":301,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":1990,"id":79,"parameterSlots":1,"returnSlots":0},"@verifyCalldata_1055":{"entryPoint":2434,"id":1055,"parameterSlots":4,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3152,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3206,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3127,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes32":{"entryPoint":2927,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":2961,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_bytes4":{"entryPoint":2861,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_contract$_IMocaPoints_$1906__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3287,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3353,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3240,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3306,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:6266:20","nodeType":"YulBlock","src":"0:6266:20","statements":[{"nativeSrc":"6:3:20","nodeType":"YulBlock","src":"6:3:20","statements":[]},{"body":{"nativeSrc":"83:263:20","nodeType":"YulBlock","src":"83:263:20","statements":[{"body":{"nativeSrc":"129:16:20","nodeType":"YulBlock","src":"129:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:20","nodeType":"YulLiteral","src":"138:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:20","nodeType":"YulLiteral","src":"141:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:20","nodeType":"YulIdentifier","src":"131:6:20"},"nativeSrc":"131:12:20","nodeType":"YulFunctionCall","src":"131:12:20"},"nativeSrc":"131:12:20","nodeType":"YulExpressionStatement","src":"131:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:20","nodeType":"YulIdentifier","src":"104:7:20"},{"name":"headStart","nativeSrc":"113:9:20","nodeType":"YulIdentifier","src":"113:9:20"}],"functionName":{"name":"sub","nativeSrc":"100:3:20","nodeType":"YulIdentifier","src":"100:3:20"},"nativeSrc":"100:23:20","nodeType":"YulFunctionCall","src":"100:23:20"},{"kind":"number","nativeSrc":"125:2:20","nodeType":"YulLiteral","src":"125:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:20","nodeType":"YulIdentifier","src":"96:3:20"},"nativeSrc":"96:32:20","nodeType":"YulFunctionCall","src":"96:32:20"},"nativeSrc":"93:52:20","nodeType":"YulIf","src":"93:52:20"},{"nativeSrc":"154:36:20","nodeType":"YulVariableDeclaration","src":"154:36:20","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:20","nodeType":"YulIdentifier","src":"180:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:20","nodeType":"YulIdentifier","src":"167:12:20"},"nativeSrc":"167:23:20","nodeType":"YulFunctionCall","src":"167:23:20"},"variables":[{"name":"value","nativeSrc":"158:5:20","nodeType":"YulTypedName","src":"158:5:20","type":""}]},{"body":{"nativeSrc":"300:16:20","nodeType":"YulBlock","src":"300:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:20","nodeType":"YulLiteral","src":"309:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:20","nodeType":"YulLiteral","src":"312:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:20","nodeType":"YulIdentifier","src":"302:6:20"},"nativeSrc":"302:12:20","nodeType":"YulFunctionCall","src":"302:12:20"},"nativeSrc":"302:12:20","nodeType":"YulExpressionStatement","src":"302:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:20","nodeType":"YulIdentifier","src":"212:5:20"},{"arguments":[{"name":"value","nativeSrc":"223:5:20","nodeType":"YulIdentifier","src":"223:5:20"},{"kind":"number","nativeSrc":"230:66:20","nodeType":"YulLiteral","src":"230:66:20","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:20","nodeType":"YulIdentifier","src":"219:3:20"},"nativeSrc":"219:78:20","nodeType":"YulFunctionCall","src":"219:78:20"}],"functionName":{"name":"eq","nativeSrc":"209:2:20","nodeType":"YulIdentifier","src":"209:2:20"},"nativeSrc":"209:89:20","nodeType":"YulFunctionCall","src":"209:89:20"}],"functionName":{"name":"iszero","nativeSrc":"202:6:20","nodeType":"YulIdentifier","src":"202:6:20"},"nativeSrc":"202:97:20","nodeType":"YulFunctionCall","src":"202:97:20"},"nativeSrc":"199:117:20","nodeType":"YulIf","src":"199:117:20"},{"nativeSrc":"325:15:20","nodeType":"YulAssignment","src":"325:15:20","value":{"name":"value","nativeSrc":"335:5:20","nodeType":"YulIdentifier","src":"335:5:20"},"variableNames":[{"name":"value0","nativeSrc":"325:6:20","nodeType":"YulIdentifier","src":"325:6:20"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:20","nodeType":"YulTypedName","src":"49:9:20","type":""},{"name":"dataEnd","nativeSrc":"60:7:20","nodeType":"YulTypedName","src":"60:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:20","nodeType":"YulTypedName","src":"72:6:20","type":""}],"src":"14:332:20"},{"body":{"nativeSrc":"446:92:20","nodeType":"YulBlock","src":"446:92:20","statements":[{"nativeSrc":"456:26:20","nodeType":"YulAssignment","src":"456:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:20","nodeType":"YulIdentifier","src":"468:9:20"},{"kind":"number","nativeSrc":"479:2:20","nodeType":"YulLiteral","src":"479:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:20","nodeType":"YulIdentifier","src":"464:3:20"},"nativeSrc":"464:18:20","nodeType":"YulFunctionCall","src":"464:18:20"},"variableNames":[{"name":"tail","nativeSrc":"456:4:20","nodeType":"YulIdentifier","src":"456:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:20","nodeType":"YulIdentifier","src":"498:9:20"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:20","nodeType":"YulIdentifier","src":"523:6:20"}],"functionName":{"name":"iszero","nativeSrc":"516:6:20","nodeType":"YulIdentifier","src":"516:6:20"},"nativeSrc":"516:14:20","nodeType":"YulFunctionCall","src":"516:14:20"}],"functionName":{"name":"iszero","nativeSrc":"509:6:20","nodeType":"YulIdentifier","src":"509:6:20"},"nativeSrc":"509:22:20","nodeType":"YulFunctionCall","src":"509:22:20"}],"functionName":{"name":"mstore","nativeSrc":"491:6:20","nodeType":"YulIdentifier","src":"491:6:20"},"nativeSrc":"491:41:20","nodeType":"YulFunctionCall","src":"491:41:20"},"nativeSrc":"491:41:20","nodeType":"YulExpressionStatement","src":"491:41:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:20","nodeType":"YulTypedName","src":"415:9:20","type":""},{"name":"value0","nativeSrc":"426:6:20","nodeType":"YulTypedName","src":"426:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:20","nodeType":"YulTypedName","src":"437:4:20","type":""}],"src":"351:187:20"},{"body":{"nativeSrc":"664:125:20","nodeType":"YulBlock","src":"664:125:20","statements":[{"nativeSrc":"674:26:20","nodeType":"YulAssignment","src":"674:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"686:9:20","nodeType":"YulIdentifier","src":"686:9:20"},{"kind":"number","nativeSrc":"697:2:20","nodeType":"YulLiteral","src":"697:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"682:3:20","nodeType":"YulIdentifier","src":"682:3:20"},"nativeSrc":"682:18:20","nodeType":"YulFunctionCall","src":"682:18:20"},"variableNames":[{"name":"tail","nativeSrc":"674:4:20","nodeType":"YulIdentifier","src":"674:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"716:9:20","nodeType":"YulIdentifier","src":"716:9:20"},{"arguments":[{"name":"value0","nativeSrc":"731:6:20","nodeType":"YulIdentifier","src":"731:6:20"},{"kind":"number","nativeSrc":"739:42:20","nodeType":"YulLiteral","src":"739:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"727:3:20","nodeType":"YulIdentifier","src":"727:3:20"},"nativeSrc":"727:55:20","nodeType":"YulFunctionCall","src":"727:55:20"}],"functionName":{"name":"mstore","nativeSrc":"709:6:20","nodeType":"YulIdentifier","src":"709:6:20"},"nativeSrc":"709:74:20","nodeType":"YulFunctionCall","src":"709:74:20"},"nativeSrc":"709:74:20","nodeType":"YulExpressionStatement","src":"709:74:20"}]},"name":"abi_encode_tuple_t_contract$_IMocaPoints_$1906__to_t_address__fromStack_reversed","nativeSrc":"543:246:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"633:9:20","nodeType":"YulTypedName","src":"633:9:20","type":""},{"name":"value0","nativeSrc":"644:6:20","nodeType":"YulTypedName","src":"644:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"655:4:20","nodeType":"YulTypedName","src":"655:4:20","type":""}],"src":"543:246:20"},{"body":{"nativeSrc":"881:161:20","nodeType":"YulBlock","src":"881:161:20","statements":[{"body":{"nativeSrc":"927:16:20","nodeType":"YulBlock","src":"927:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"936:1:20","nodeType":"YulLiteral","src":"936:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"939:1:20","nodeType":"YulLiteral","src":"939:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"929:6:20","nodeType":"YulIdentifier","src":"929:6:20"},"nativeSrc":"929:12:20","nodeType":"YulFunctionCall","src":"929:12:20"},"nativeSrc":"929:12:20","nodeType":"YulExpressionStatement","src":"929:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"902:7:20","nodeType":"YulIdentifier","src":"902:7:20"},{"name":"headStart","nativeSrc":"911:9:20","nodeType":"YulIdentifier","src":"911:9:20"}],"functionName":{"name":"sub","nativeSrc":"898:3:20","nodeType":"YulIdentifier","src":"898:3:20"},"nativeSrc":"898:23:20","nodeType":"YulFunctionCall","src":"898:23:20"},{"kind":"number","nativeSrc":"923:2:20","nodeType":"YulLiteral","src":"923:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"894:3:20","nodeType":"YulIdentifier","src":"894:3:20"},"nativeSrc":"894:32:20","nodeType":"YulFunctionCall","src":"894:32:20"},"nativeSrc":"891:52:20","nodeType":"YulIf","src":"891:52:20"},{"nativeSrc":"952:33:20","nodeType":"YulAssignment","src":"952:33:20","value":{"arguments":[{"name":"headStart","nativeSrc":"975:9:20","nodeType":"YulIdentifier","src":"975:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"962:12:20","nodeType":"YulIdentifier","src":"962:12:20"},"nativeSrc":"962:23:20","nodeType":"YulFunctionCall","src":"962:23:20"},"variableNames":[{"name":"value0","nativeSrc":"952:6:20","nodeType":"YulIdentifier","src":"952:6:20"}]},{"nativeSrc":"994:42:20","nodeType":"YulAssignment","src":"994:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1021:9:20","nodeType":"YulIdentifier","src":"1021:9:20"},{"kind":"number","nativeSrc":"1032:2:20","nodeType":"YulLiteral","src":"1032:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1017:3:20","nodeType":"YulIdentifier","src":"1017:3:20"},"nativeSrc":"1017:18:20","nodeType":"YulFunctionCall","src":"1017:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1004:12:20","nodeType":"YulIdentifier","src":"1004:12:20"},"nativeSrc":"1004:32:20","nodeType":"YulFunctionCall","src":"1004:32:20"},"variableNames":[{"name":"value1","nativeSrc":"994:6:20","nodeType":"YulIdentifier","src":"994:6:20"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32","nativeSrc":"794:248:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"839:9:20","nodeType":"YulTypedName","src":"839:9:20","type":""},{"name":"dataEnd","nativeSrc":"850:7:20","nodeType":"YulTypedName","src":"850:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"862:6:20","nodeType":"YulTypedName","src":"862:6:20","type":""},{"name":"value1","nativeSrc":"870:6:20","nodeType":"YulTypedName","src":"870:6:20","type":""}],"src":"794:248:20"},{"body":{"nativeSrc":"1148:125:20","nodeType":"YulBlock","src":"1148:125:20","statements":[{"nativeSrc":"1158:26:20","nodeType":"YulAssignment","src":"1158:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"1170:9:20","nodeType":"YulIdentifier","src":"1170:9:20"},{"kind":"number","nativeSrc":"1181:2:20","nodeType":"YulLiteral","src":"1181:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1166:3:20","nodeType":"YulIdentifier","src":"1166:3:20"},"nativeSrc":"1166:18:20","nodeType":"YulFunctionCall","src":"1166:18:20"},"variableNames":[{"name":"tail","nativeSrc":"1158:4:20","nodeType":"YulIdentifier","src":"1158:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1200:9:20","nodeType":"YulIdentifier","src":"1200:9:20"},{"arguments":[{"name":"value0","nativeSrc":"1215:6:20","nodeType":"YulIdentifier","src":"1215:6:20"},{"kind":"number","nativeSrc":"1223:42:20","nodeType":"YulLiteral","src":"1223:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1211:3:20","nodeType":"YulIdentifier","src":"1211:3:20"},"nativeSrc":"1211:55:20","nodeType":"YulFunctionCall","src":"1211:55:20"}],"functionName":{"name":"mstore","nativeSrc":"1193:6:20","nodeType":"YulIdentifier","src":"1193:6:20"},"nativeSrc":"1193:74:20","nodeType":"YulFunctionCall","src":"1193:74:20"},"nativeSrc":"1193:74:20","nodeType":"YulExpressionStatement","src":"1193:74:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1047:226:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1117:9:20","nodeType":"YulTypedName","src":"1117:9:20","type":""},{"name":"value0","nativeSrc":"1128:6:20","nodeType":"YulTypedName","src":"1128:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1139:4:20","nodeType":"YulTypedName","src":"1139:4:20","type":""}],"src":"1047:226:20"},{"body":{"nativeSrc":"1468:768:20","nodeType":"YulBlock","src":"1468:768:20","statements":[{"body":{"nativeSrc":"1515:16:20","nodeType":"YulBlock","src":"1515:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1524:1:20","nodeType":"YulLiteral","src":"1524:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"1527:1:20","nodeType":"YulLiteral","src":"1527:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1517:6:20","nodeType":"YulIdentifier","src":"1517:6:20"},"nativeSrc":"1517:12:20","nodeType":"YulFunctionCall","src":"1517:12:20"},"nativeSrc":"1517:12:20","nodeType":"YulExpressionStatement","src":"1517:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1489:7:20","nodeType":"YulIdentifier","src":"1489:7:20"},{"name":"headStart","nativeSrc":"1498:9:20","nodeType":"YulIdentifier","src":"1498:9:20"}],"functionName":{"name":"sub","nativeSrc":"1485:3:20","nodeType":"YulIdentifier","src":"1485:3:20"},"nativeSrc":"1485:23:20","nodeType":"YulFunctionCall","src":"1485:23:20"},{"kind":"number","nativeSrc":"1510:3:20","nodeType":"YulLiteral","src":"1510:3:20","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"1481:3:20","nodeType":"YulIdentifier","src":"1481:3:20"},"nativeSrc":"1481:33:20","nodeType":"YulFunctionCall","src":"1481:33:20"},"nativeSrc":"1478:53:20","nodeType":"YulIf","src":"1478:53:20"},{"nativeSrc":"1540:33:20","nodeType":"YulAssignment","src":"1540:33:20","value":{"arguments":[{"name":"headStart","nativeSrc":"1563:9:20","nodeType":"YulIdentifier","src":"1563:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"1550:12:20","nodeType":"YulIdentifier","src":"1550:12:20"},"nativeSrc":"1550:23:20","nodeType":"YulFunctionCall","src":"1550:23:20"},"variableNames":[{"name":"value0","nativeSrc":"1540:6:20","nodeType":"YulIdentifier","src":"1540:6:20"}]},{"nativeSrc":"1582:42:20","nodeType":"YulAssignment","src":"1582:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1609:9:20","nodeType":"YulIdentifier","src":"1609:9:20"},{"kind":"number","nativeSrc":"1620:2:20","nodeType":"YulLiteral","src":"1620:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1605:3:20","nodeType":"YulIdentifier","src":"1605:3:20"},"nativeSrc":"1605:18:20","nodeType":"YulFunctionCall","src":"1605:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1592:12:20","nodeType":"YulIdentifier","src":"1592:12:20"},"nativeSrc":"1592:32:20","nodeType":"YulFunctionCall","src":"1592:32:20"},"variableNames":[{"name":"value1","nativeSrc":"1582:6:20","nodeType":"YulIdentifier","src":"1582:6:20"}]},{"nativeSrc":"1633:42:20","nodeType":"YulAssignment","src":"1633:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1660:9:20","nodeType":"YulIdentifier","src":"1660:9:20"},{"kind":"number","nativeSrc":"1671:2:20","nodeType":"YulLiteral","src":"1671:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1656:3:20","nodeType":"YulIdentifier","src":"1656:3:20"},"nativeSrc":"1656:18:20","nodeType":"YulFunctionCall","src":"1656:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1643:12:20","nodeType":"YulIdentifier","src":"1643:12:20"},"nativeSrc":"1643:32:20","nodeType":"YulFunctionCall","src":"1643:32:20"},"variableNames":[{"name":"value2","nativeSrc":"1633:6:20","nodeType":"YulIdentifier","src":"1633:6:20"}]},{"nativeSrc":"1684:42:20","nodeType":"YulAssignment","src":"1684:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1711:9:20","nodeType":"YulIdentifier","src":"1711:9:20"},{"kind":"number","nativeSrc":"1722:2:20","nodeType":"YulLiteral","src":"1722:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1707:3:20","nodeType":"YulIdentifier","src":"1707:3:20"},"nativeSrc":"1707:18:20","nodeType":"YulFunctionCall","src":"1707:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1694:12:20","nodeType":"YulIdentifier","src":"1694:12:20"},"nativeSrc":"1694:32:20","nodeType":"YulFunctionCall","src":"1694:32:20"},"variableNames":[{"name":"value3","nativeSrc":"1684:6:20","nodeType":"YulIdentifier","src":"1684:6:20"}]},{"nativeSrc":"1735:43:20","nodeType":"YulAssignment","src":"1735:43:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1762:9:20","nodeType":"YulIdentifier","src":"1762:9:20"},{"kind":"number","nativeSrc":"1773:3:20","nodeType":"YulLiteral","src":"1773:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1758:3:20","nodeType":"YulIdentifier","src":"1758:3:20"},"nativeSrc":"1758:19:20","nodeType":"YulFunctionCall","src":"1758:19:20"}],"functionName":{"name":"calldataload","nativeSrc":"1745:12:20","nodeType":"YulIdentifier","src":"1745:12:20"},"nativeSrc":"1745:33:20","nodeType":"YulFunctionCall","src":"1745:33:20"},"variableNames":[{"name":"value4","nativeSrc":"1735:6:20","nodeType":"YulIdentifier","src":"1735:6:20"}]},{"nativeSrc":"1787:47:20","nodeType":"YulVariableDeclaration","src":"1787:47:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1818:9:20","nodeType":"YulIdentifier","src":"1818:9:20"},{"kind":"number","nativeSrc":"1829:3:20","nodeType":"YulLiteral","src":"1829:3:20","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"1814:3:20","nodeType":"YulIdentifier","src":"1814:3:20"},"nativeSrc":"1814:19:20","nodeType":"YulFunctionCall","src":"1814:19:20"}],"functionName":{"name":"calldataload","nativeSrc":"1801:12:20","nodeType":"YulIdentifier","src":"1801:12:20"},"nativeSrc":"1801:33:20","nodeType":"YulFunctionCall","src":"1801:33:20"},"variables":[{"name":"offset","nativeSrc":"1791:6:20","nodeType":"YulTypedName","src":"1791:6:20","type":""}]},{"nativeSrc":"1843:28:20","nodeType":"YulVariableDeclaration","src":"1843:28:20","value":{"kind":"number","nativeSrc":"1853:18:20","nodeType":"YulLiteral","src":"1853:18:20","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1847:2:20","nodeType":"YulTypedName","src":"1847:2:20","type":""}]},{"body":{"nativeSrc":"1898:16:20","nodeType":"YulBlock","src":"1898:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1907:1:20","nodeType":"YulLiteral","src":"1907:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"1910:1:20","nodeType":"YulLiteral","src":"1910:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1900:6:20","nodeType":"YulIdentifier","src":"1900:6:20"},"nativeSrc":"1900:12:20","nodeType":"YulFunctionCall","src":"1900:12:20"},"nativeSrc":"1900:12:20","nodeType":"YulExpressionStatement","src":"1900:12:20"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1886:6:20","nodeType":"YulIdentifier","src":"1886:6:20"},{"name":"_1","nativeSrc":"1894:2:20","nodeType":"YulIdentifier","src":"1894:2:20"}],"functionName":{"name":"gt","nativeSrc":"1883:2:20","nodeType":"YulIdentifier","src":"1883:2:20"},"nativeSrc":"1883:14:20","nodeType":"YulFunctionCall","src":"1883:14:20"},"nativeSrc":"1880:34:20","nodeType":"YulIf","src":"1880:34:20"},{"nativeSrc":"1923:32:20","nodeType":"YulVariableDeclaration","src":"1923:32:20","value":{"arguments":[{"name":"headStart","nativeSrc":"1937:9:20","nodeType":"YulIdentifier","src":"1937:9:20"},{"name":"offset","nativeSrc":"1948:6:20","nodeType":"YulIdentifier","src":"1948:6:20"}],"functionName":{"name":"add","nativeSrc":"1933:3:20","nodeType":"YulIdentifier","src":"1933:3:20"},"nativeSrc":"1933:22:20","nodeType":"YulFunctionCall","src":"1933:22:20"},"variables":[{"name":"_2","nativeSrc":"1927:2:20","nodeType":"YulTypedName","src":"1927:2:20","type":""}]},{"body":{"nativeSrc":"2003:16:20","nodeType":"YulBlock","src":"2003:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2012:1:20","nodeType":"YulLiteral","src":"2012:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2015:1:20","nodeType":"YulLiteral","src":"2015:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2005:6:20","nodeType":"YulIdentifier","src":"2005:6:20"},"nativeSrc":"2005:12:20","nodeType":"YulFunctionCall","src":"2005:12:20"},"nativeSrc":"2005:12:20","nodeType":"YulExpressionStatement","src":"2005:12:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"1982:2:20","nodeType":"YulIdentifier","src":"1982:2:20"},{"kind":"number","nativeSrc":"1986:4:20","nodeType":"YulLiteral","src":"1986:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1978:3:20","nodeType":"YulIdentifier","src":"1978:3:20"},"nativeSrc":"1978:13:20","nodeType":"YulFunctionCall","src":"1978:13:20"},{"name":"dataEnd","nativeSrc":"1993:7:20","nodeType":"YulIdentifier","src":"1993:7:20"}],"functionName":{"name":"slt","nativeSrc":"1974:3:20","nodeType":"YulIdentifier","src":"1974:3:20"},"nativeSrc":"1974:27:20","nodeType":"YulFunctionCall","src":"1974:27:20"}],"functionName":{"name":"iszero","nativeSrc":"1967:6:20","nodeType":"YulIdentifier","src":"1967:6:20"},"nativeSrc":"1967:35:20","nodeType":"YulFunctionCall","src":"1967:35:20"},"nativeSrc":"1964:55:20","nodeType":"YulIf","src":"1964:55:20"},{"nativeSrc":"2028:30:20","nodeType":"YulVariableDeclaration","src":"2028:30:20","value":{"arguments":[{"name":"_2","nativeSrc":"2055:2:20","nodeType":"YulIdentifier","src":"2055:2:20"}],"functionName":{"name":"calldataload","nativeSrc":"2042:12:20","nodeType":"YulIdentifier","src":"2042:12:20"},"nativeSrc":"2042:16:20","nodeType":"YulFunctionCall","src":"2042:16:20"},"variables":[{"name":"length","nativeSrc":"2032:6:20","nodeType":"YulTypedName","src":"2032:6:20","type":""}]},{"body":{"nativeSrc":"2085:16:20","nodeType":"YulBlock","src":"2085:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2094:1:20","nodeType":"YulLiteral","src":"2094:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2097:1:20","nodeType":"YulLiteral","src":"2097:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2087:6:20","nodeType":"YulIdentifier","src":"2087:6:20"},"nativeSrc":"2087:12:20","nodeType":"YulFunctionCall","src":"2087:12:20"},"nativeSrc":"2087:12:20","nodeType":"YulExpressionStatement","src":"2087:12:20"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2073:6:20","nodeType":"YulIdentifier","src":"2073:6:20"},{"name":"_1","nativeSrc":"2081:2:20","nodeType":"YulIdentifier","src":"2081:2:20"}],"functionName":{"name":"gt","nativeSrc":"2070:2:20","nodeType":"YulIdentifier","src":"2070:2:20"},"nativeSrc":"2070:14:20","nodeType":"YulFunctionCall","src":"2070:14:20"},"nativeSrc":"2067:34:20","nodeType":"YulIf","src":"2067:34:20"},{"body":{"nativeSrc":"2159:16:20","nodeType":"YulBlock","src":"2159:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2168:1:20","nodeType":"YulLiteral","src":"2168:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2171:1:20","nodeType":"YulLiteral","src":"2171:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2161:6:20","nodeType":"YulIdentifier","src":"2161:6:20"},"nativeSrc":"2161:12:20","nodeType":"YulFunctionCall","src":"2161:12:20"},"nativeSrc":"2161:12:20","nodeType":"YulExpressionStatement","src":"2161:12:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"2124:2:20","nodeType":"YulIdentifier","src":"2124:2:20"},{"arguments":[{"kind":"number","nativeSrc":"2132:1:20","nodeType":"YulLiteral","src":"2132:1:20","type":"","value":"5"},{"name":"length","nativeSrc":"2135:6:20","nodeType":"YulIdentifier","src":"2135:6:20"}],"functionName":{"name":"shl","nativeSrc":"2128:3:20","nodeType":"YulIdentifier","src":"2128:3:20"},"nativeSrc":"2128:14:20","nodeType":"YulFunctionCall","src":"2128:14:20"}],"functionName":{"name":"add","nativeSrc":"2120:3:20","nodeType":"YulIdentifier","src":"2120:3:20"},"nativeSrc":"2120:23:20","nodeType":"YulFunctionCall","src":"2120:23:20"},{"kind":"number","nativeSrc":"2145:2:20","nodeType":"YulLiteral","src":"2145:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2116:3:20","nodeType":"YulIdentifier","src":"2116:3:20"},"nativeSrc":"2116:32:20","nodeType":"YulFunctionCall","src":"2116:32:20"},{"name":"dataEnd","nativeSrc":"2150:7:20","nodeType":"YulIdentifier","src":"2150:7:20"}],"functionName":{"name":"gt","nativeSrc":"2113:2:20","nodeType":"YulIdentifier","src":"2113:2:20"},"nativeSrc":"2113:45:20","nodeType":"YulFunctionCall","src":"2113:45:20"},"nativeSrc":"2110:65:20","nodeType":"YulIf","src":"2110:65:20"},{"nativeSrc":"2184:21:20","nodeType":"YulAssignment","src":"2184:21:20","value":{"arguments":[{"name":"_2","nativeSrc":"2198:2:20","nodeType":"YulIdentifier","src":"2198:2:20"},{"kind":"number","nativeSrc":"2202:2:20","nodeType":"YulLiteral","src":"2202:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2194:3:20","nodeType":"YulIdentifier","src":"2194:3:20"},"nativeSrc":"2194:11:20","nodeType":"YulFunctionCall","src":"2194:11:20"},"variableNames":[{"name":"value5","nativeSrc":"2184:6:20","nodeType":"YulIdentifier","src":"2184:6:20"}]},{"nativeSrc":"2214:16:20","nodeType":"YulAssignment","src":"2214:16:20","value":{"name":"length","nativeSrc":"2224:6:20","nodeType":"YulIdentifier","src":"2224:6:20"},"variableNames":[{"name":"value6","nativeSrc":"2214:6:20","nodeType":"YulIdentifier","src":"2214:6:20"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"1278:958:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1386:9:20","nodeType":"YulTypedName","src":"1386:9:20","type":""},{"name":"dataEnd","nativeSrc":"1397:7:20","nodeType":"YulTypedName","src":"1397:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1409:6:20","nodeType":"YulTypedName","src":"1409:6:20","type":""},{"name":"value1","nativeSrc":"1417:6:20","nodeType":"YulTypedName","src":"1417:6:20","type":""},{"name":"value2","nativeSrc":"1425:6:20","nodeType":"YulTypedName","src":"1425:6:20","type":""},{"name":"value3","nativeSrc":"1433:6:20","nodeType":"YulTypedName","src":"1433:6:20","type":""},{"name":"value4","nativeSrc":"1441:6:20","nodeType":"YulTypedName","src":"1441:6:20","type":""},{"name":"value5","nativeSrc":"1449:6:20","nodeType":"YulTypedName","src":"1449:6:20","type":""},{"name":"value6","nativeSrc":"1457:6:20","nodeType":"YulTypedName","src":"1457:6:20","type":""}],"src":"1278:958:20"},{"body":{"nativeSrc":"2311:110:20","nodeType":"YulBlock","src":"2311:110:20","statements":[{"body":{"nativeSrc":"2357:16:20","nodeType":"YulBlock","src":"2357:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2366:1:20","nodeType":"YulLiteral","src":"2366:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2369:1:20","nodeType":"YulLiteral","src":"2369:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2359:6:20","nodeType":"YulIdentifier","src":"2359:6:20"},"nativeSrc":"2359:12:20","nodeType":"YulFunctionCall","src":"2359:12:20"},"nativeSrc":"2359:12:20","nodeType":"YulExpressionStatement","src":"2359:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2332:7:20","nodeType":"YulIdentifier","src":"2332:7:20"},{"name":"headStart","nativeSrc":"2341:9:20","nodeType":"YulIdentifier","src":"2341:9:20"}],"functionName":{"name":"sub","nativeSrc":"2328:3:20","nodeType":"YulIdentifier","src":"2328:3:20"},"nativeSrc":"2328:23:20","nodeType":"YulFunctionCall","src":"2328:23:20"},{"kind":"number","nativeSrc":"2353:2:20","nodeType":"YulLiteral","src":"2353:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2324:3:20","nodeType":"YulIdentifier","src":"2324:3:20"},"nativeSrc":"2324:32:20","nodeType":"YulFunctionCall","src":"2324:32:20"},"nativeSrc":"2321:52:20","nodeType":"YulIf","src":"2321:52:20"},{"nativeSrc":"2382:33:20","nodeType":"YulAssignment","src":"2382:33:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2405:9:20","nodeType":"YulIdentifier","src":"2405:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"2392:12:20","nodeType":"YulIdentifier","src":"2392:12:20"},"nativeSrc":"2392:23:20","nodeType":"YulFunctionCall","src":"2392:23:20"},"variableNames":[{"name":"value0","nativeSrc":"2382:6:20","nodeType":"YulIdentifier","src":"2382:6:20"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2241:180:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2277:9:20","nodeType":"YulTypedName","src":"2277:9:20","type":""},{"name":"dataEnd","nativeSrc":"2288:7:20","nodeType":"YulTypedName","src":"2288:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2300:6:20","nodeType":"YulTypedName","src":"2300:6:20","type":""}],"src":"2241:180:20"},{"body":{"nativeSrc":"2527:76:20","nodeType":"YulBlock","src":"2527:76:20","statements":[{"nativeSrc":"2537:26:20","nodeType":"YulAssignment","src":"2537:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2549:9:20","nodeType":"YulIdentifier","src":"2549:9:20"},{"kind":"number","nativeSrc":"2560:2:20","nodeType":"YulLiteral","src":"2560:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2545:3:20","nodeType":"YulIdentifier","src":"2545:3:20"},"nativeSrc":"2545:18:20","nodeType":"YulFunctionCall","src":"2545:18:20"},"variableNames":[{"name":"tail","nativeSrc":"2537:4:20","nodeType":"YulIdentifier","src":"2537:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2579:9:20","nodeType":"YulIdentifier","src":"2579:9:20"},{"name":"value0","nativeSrc":"2590:6:20","nodeType":"YulIdentifier","src":"2590:6:20"}],"functionName":{"name":"mstore","nativeSrc":"2572:6:20","nodeType":"YulIdentifier","src":"2572:6:20"},"nativeSrc":"2572:25:20","nodeType":"YulFunctionCall","src":"2572:25:20"},"nativeSrc":"2572:25:20","nodeType":"YulExpressionStatement","src":"2572:25:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"2426:177:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2496:9:20","nodeType":"YulTypedName","src":"2496:9:20","type":""},{"name":"value0","nativeSrc":"2507:6:20","nodeType":"YulTypedName","src":"2507:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2518:4:20","nodeType":"YulTypedName","src":"2518:4:20","type":""}],"src":"2426:177:20"},{"body":{"nativeSrc":"2709:76:20","nodeType":"YulBlock","src":"2709:76:20","statements":[{"nativeSrc":"2719:26:20","nodeType":"YulAssignment","src":"2719:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2731:9:20","nodeType":"YulIdentifier","src":"2731:9:20"},{"kind":"number","nativeSrc":"2742:2:20","nodeType":"YulLiteral","src":"2742:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2727:3:20","nodeType":"YulIdentifier","src":"2727:3:20"},"nativeSrc":"2727:18:20","nodeType":"YulFunctionCall","src":"2727:18:20"},"variableNames":[{"name":"tail","nativeSrc":"2719:4:20","nodeType":"YulIdentifier","src":"2719:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2761:9:20","nodeType":"YulIdentifier","src":"2761:9:20"},{"name":"value0","nativeSrc":"2772:6:20","nodeType":"YulIdentifier","src":"2772:6:20"}],"functionName":{"name":"mstore","nativeSrc":"2754:6:20","nodeType":"YulIdentifier","src":"2754:6:20"},"nativeSrc":"2754:25:20","nodeType":"YulFunctionCall","src":"2754:25:20"},"nativeSrc":"2754:25:20","nodeType":"YulExpressionStatement","src":"2754:25:20"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2608:177:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2678:9:20","nodeType":"YulTypedName","src":"2678:9:20","type":""},{"name":"value0","nativeSrc":"2689:6:20","nodeType":"YulTypedName","src":"2689:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2700:4:20","nodeType":"YulTypedName","src":"2700:4:20","type":""}],"src":"2608:177:20"},{"body":{"nativeSrc":"2860:239:20","nodeType":"YulBlock","src":"2860:239:20","statements":[{"body":{"nativeSrc":"2906:16:20","nodeType":"YulBlock","src":"2906:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2915:1:20","nodeType":"YulLiteral","src":"2915:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2918:1:20","nodeType":"YulLiteral","src":"2918:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2908:6:20","nodeType":"YulIdentifier","src":"2908:6:20"},"nativeSrc":"2908:12:20","nodeType":"YulFunctionCall","src":"2908:12:20"},"nativeSrc":"2908:12:20","nodeType":"YulExpressionStatement","src":"2908:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2881:7:20","nodeType":"YulIdentifier","src":"2881:7:20"},{"name":"headStart","nativeSrc":"2890:9:20","nodeType":"YulIdentifier","src":"2890:9:20"}],"functionName":{"name":"sub","nativeSrc":"2877:3:20","nodeType":"YulIdentifier","src":"2877:3:20"},"nativeSrc":"2877:23:20","nodeType":"YulFunctionCall","src":"2877:23:20"},{"kind":"number","nativeSrc":"2902:2:20","nodeType":"YulLiteral","src":"2902:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2873:3:20","nodeType":"YulIdentifier","src":"2873:3:20"},"nativeSrc":"2873:32:20","nodeType":"YulFunctionCall","src":"2873:32:20"},"nativeSrc":"2870:52:20","nodeType":"YulIf","src":"2870:52:20"},{"nativeSrc":"2931:36:20","nodeType":"YulVariableDeclaration","src":"2931:36:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2957:9:20","nodeType":"YulIdentifier","src":"2957:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"2944:12:20","nodeType":"YulIdentifier","src":"2944:12:20"},"nativeSrc":"2944:23:20","nodeType":"YulFunctionCall","src":"2944:23:20"},"variables":[{"name":"value","nativeSrc":"2935:5:20","nodeType":"YulTypedName","src":"2935:5:20","type":""}]},{"body":{"nativeSrc":"3053:16:20","nodeType":"YulBlock","src":"3053:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3062:1:20","nodeType":"YulLiteral","src":"3062:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"3065:1:20","nodeType":"YulLiteral","src":"3065:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3055:6:20","nodeType":"YulIdentifier","src":"3055:6:20"},"nativeSrc":"3055:12:20","nodeType":"YulFunctionCall","src":"3055:12:20"},"nativeSrc":"3055:12:20","nodeType":"YulExpressionStatement","src":"3055:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2989:5:20","nodeType":"YulIdentifier","src":"2989:5:20"},{"arguments":[{"name":"value","nativeSrc":"3000:5:20","nodeType":"YulIdentifier","src":"3000:5:20"},{"kind":"number","nativeSrc":"3007:42:20","nodeType":"YulLiteral","src":"3007:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2996:3:20","nodeType":"YulIdentifier","src":"2996:3:20"},"nativeSrc":"2996:54:20","nodeType":"YulFunctionCall","src":"2996:54:20"}],"functionName":{"name":"eq","nativeSrc":"2986:2:20","nodeType":"YulIdentifier","src":"2986:2:20"},"nativeSrc":"2986:65:20","nodeType":"YulFunctionCall","src":"2986:65:20"}],"functionName":{"name":"iszero","nativeSrc":"2979:6:20","nodeType":"YulIdentifier","src":"2979:6:20"},"nativeSrc":"2979:73:20","nodeType":"YulFunctionCall","src":"2979:73:20"},"nativeSrc":"2976:93:20","nodeType":"YulIf","src":"2976:93:20"},{"nativeSrc":"3078:15:20","nodeType":"YulAssignment","src":"3078:15:20","value":{"name":"value","nativeSrc":"3088:5:20","nodeType":"YulIdentifier","src":"3088:5:20"},"variableNames":[{"name":"value0","nativeSrc":"3078:6:20","nodeType":"YulIdentifier","src":"3078:6:20"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2790:309:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2826:9:20","nodeType":"YulTypedName","src":"2826:9:20","type":""},{"name":"dataEnd","nativeSrc":"2837:7:20","nodeType":"YulTypedName","src":"2837:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2849:6:20","nodeType":"YulTypedName","src":"2849:6:20","type":""}],"src":"2790:309:20"},{"body":{"nativeSrc":"3182:199:20","nodeType":"YulBlock","src":"3182:199:20","statements":[{"body":{"nativeSrc":"3228:16:20","nodeType":"YulBlock","src":"3228:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3237:1:20","nodeType":"YulLiteral","src":"3237:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"3240:1:20","nodeType":"YulLiteral","src":"3240:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3230:6:20","nodeType":"YulIdentifier","src":"3230:6:20"},"nativeSrc":"3230:12:20","nodeType":"YulFunctionCall","src":"3230:12:20"},"nativeSrc":"3230:12:20","nodeType":"YulExpressionStatement","src":"3230:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3203:7:20","nodeType":"YulIdentifier","src":"3203:7:20"},{"name":"headStart","nativeSrc":"3212:9:20","nodeType":"YulIdentifier","src":"3212:9:20"}],"functionName":{"name":"sub","nativeSrc":"3199:3:20","nodeType":"YulIdentifier","src":"3199:3:20"},"nativeSrc":"3199:23:20","nodeType":"YulFunctionCall","src":"3199:23:20"},{"kind":"number","nativeSrc":"3224:2:20","nodeType":"YulLiteral","src":"3224:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3195:3:20","nodeType":"YulIdentifier","src":"3195:3:20"},"nativeSrc":"3195:32:20","nodeType":"YulFunctionCall","src":"3195:32:20"},"nativeSrc":"3192:52:20","nodeType":"YulIf","src":"3192:52:20"},{"nativeSrc":"3253:29:20","nodeType":"YulVariableDeclaration","src":"3253:29:20","value":{"arguments":[{"name":"headStart","nativeSrc":"3272:9:20","nodeType":"YulIdentifier","src":"3272:9:20"}],"functionName":{"name":"mload","nativeSrc":"3266:5:20","nodeType":"YulIdentifier","src":"3266:5:20"},"nativeSrc":"3266:16:20","nodeType":"YulFunctionCall","src":"3266:16:20"},"variables":[{"name":"value","nativeSrc":"3257:5:20","nodeType":"YulTypedName","src":"3257:5:20","type":""}]},{"body":{"nativeSrc":"3335:16:20","nodeType":"YulBlock","src":"3335:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3344:1:20","nodeType":"YulLiteral","src":"3344:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"3347:1:20","nodeType":"YulLiteral","src":"3347:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3337:6:20","nodeType":"YulIdentifier","src":"3337:6:20"},"nativeSrc":"3337:12:20","nodeType":"YulFunctionCall","src":"3337:12:20"},"nativeSrc":"3337:12:20","nodeType":"YulExpressionStatement","src":"3337:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3304:5:20","nodeType":"YulIdentifier","src":"3304:5:20"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3325:5:20","nodeType":"YulIdentifier","src":"3325:5:20"}],"functionName":{"name":"iszero","nativeSrc":"3318:6:20","nodeType":"YulIdentifier","src":"3318:6:20"},"nativeSrc":"3318:13:20","nodeType":"YulFunctionCall","src":"3318:13:20"}],"functionName":{"name":"iszero","nativeSrc":"3311:6:20","nodeType":"YulIdentifier","src":"3311:6:20"},"nativeSrc":"3311:21:20","nodeType":"YulFunctionCall","src":"3311:21:20"}],"functionName":{"name":"eq","nativeSrc":"3301:2:20","nodeType":"YulIdentifier","src":"3301:2:20"},"nativeSrc":"3301:32:20","nodeType":"YulFunctionCall","src":"3301:32:20"}],"functionName":{"name":"iszero","nativeSrc":"3294:6:20","nodeType":"YulIdentifier","src":"3294:6:20"},"nativeSrc":"3294:40:20","nodeType":"YulFunctionCall","src":"3294:40:20"},"nativeSrc":"3291:60:20","nodeType":"YulIf","src":"3291:60:20"},{"nativeSrc":"3360:15:20","nodeType":"YulAssignment","src":"3360:15:20","value":{"name":"value","nativeSrc":"3370:5:20","nodeType":"YulIdentifier","src":"3370:5:20"},"variableNames":[{"name":"value0","nativeSrc":"3360:6:20","nodeType":"YulIdentifier","src":"3360:6:20"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"3104:277:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3148:9:20","nodeType":"YulTypedName","src":"3148:9:20","type":""},{"name":"dataEnd","nativeSrc":"3159:7:20","nodeType":"YulTypedName","src":"3159:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3171:6:20","nodeType":"YulTypedName","src":"3171:6:20","type":""}],"src":"3104:277:20"},{"body":{"nativeSrc":"3515:119:20","nodeType":"YulBlock","src":"3515:119:20","statements":[{"nativeSrc":"3525:26:20","nodeType":"YulAssignment","src":"3525:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"3537:9:20","nodeType":"YulIdentifier","src":"3537:9:20"},{"kind":"number","nativeSrc":"3548:2:20","nodeType":"YulLiteral","src":"3548:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3533:3:20","nodeType":"YulIdentifier","src":"3533:3:20"},"nativeSrc":"3533:18:20","nodeType":"YulFunctionCall","src":"3533:18:20"},"variableNames":[{"name":"tail","nativeSrc":"3525:4:20","nodeType":"YulIdentifier","src":"3525:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3567:9:20","nodeType":"YulIdentifier","src":"3567:9:20"},{"name":"value0","nativeSrc":"3578:6:20","nodeType":"YulIdentifier","src":"3578:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3560:6:20","nodeType":"YulIdentifier","src":"3560:6:20"},"nativeSrc":"3560:25:20","nodeType":"YulFunctionCall","src":"3560:25:20"},"nativeSrc":"3560:25:20","nodeType":"YulExpressionStatement","src":"3560:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3605:9:20","nodeType":"YulIdentifier","src":"3605:9:20"},{"kind":"number","nativeSrc":"3616:2:20","nodeType":"YulLiteral","src":"3616:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3601:3:20","nodeType":"YulIdentifier","src":"3601:3:20"},"nativeSrc":"3601:18:20","nodeType":"YulFunctionCall","src":"3601:18:20"},{"name":"value1","nativeSrc":"3621:6:20","nodeType":"YulIdentifier","src":"3621:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3594:6:20","nodeType":"YulIdentifier","src":"3594:6:20"},"nativeSrc":"3594:34:20","nodeType":"YulFunctionCall","src":"3594:34:20"},"nativeSrc":"3594:34:20","nodeType":"YulExpressionStatement","src":"3594:34:20"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"3386:248:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3476:9:20","nodeType":"YulTypedName","src":"3476:9:20","type":""},{"name":"value1","nativeSrc":"3487:6:20","nodeType":"YulTypedName","src":"3487:6:20","type":""},{"name":"value0","nativeSrc":"3495:6:20","nodeType":"YulTypedName","src":"3495:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3506:4:20","nodeType":"YulTypedName","src":"3506:4:20","type":""}],"src":"3386:248:20"},{"body":{"nativeSrc":"3898:251:20","nodeType":"YulBlock","src":"3898:251:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3915:3:20","nodeType":"YulIdentifier","src":"3915:3:20"},{"name":"value0","nativeSrc":"3920:6:20","nodeType":"YulIdentifier","src":"3920:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3908:6:20","nodeType":"YulIdentifier","src":"3908:6:20"},"nativeSrc":"3908:19:20","nodeType":"YulFunctionCall","src":"3908:19:20"},"nativeSrc":"3908:19:20","nodeType":"YulExpressionStatement","src":"3908:19:20"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3947:3:20","nodeType":"YulIdentifier","src":"3947:3:20"},{"kind":"number","nativeSrc":"3952:2:20","nodeType":"YulLiteral","src":"3952:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3943:3:20","nodeType":"YulIdentifier","src":"3943:3:20"},"nativeSrc":"3943:12:20","nodeType":"YulFunctionCall","src":"3943:12:20"},{"name":"value1","nativeSrc":"3957:6:20","nodeType":"YulIdentifier","src":"3957:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3936:6:20","nodeType":"YulIdentifier","src":"3936:6:20"},"nativeSrc":"3936:28:20","nodeType":"YulFunctionCall","src":"3936:28:20"},"nativeSrc":"3936:28:20","nodeType":"YulExpressionStatement","src":"3936:28:20"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3984:3:20","nodeType":"YulIdentifier","src":"3984:3:20"},{"kind":"number","nativeSrc":"3989:2:20","nodeType":"YulLiteral","src":"3989:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3980:3:20","nodeType":"YulIdentifier","src":"3980:3:20"},"nativeSrc":"3980:12:20","nodeType":"YulFunctionCall","src":"3980:12:20"},{"name":"value2","nativeSrc":"3994:6:20","nodeType":"YulIdentifier","src":"3994:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3973:6:20","nodeType":"YulIdentifier","src":"3973:6:20"},"nativeSrc":"3973:28:20","nodeType":"YulFunctionCall","src":"3973:28:20"},"nativeSrc":"3973:28:20","nodeType":"YulExpressionStatement","src":"3973:28:20"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4021:3:20","nodeType":"YulIdentifier","src":"4021:3:20"},{"kind":"number","nativeSrc":"4026:2:20","nodeType":"YulLiteral","src":"4026:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4017:3:20","nodeType":"YulIdentifier","src":"4017:3:20"},"nativeSrc":"4017:12:20","nodeType":"YulFunctionCall","src":"4017:12:20"},{"name":"value3","nativeSrc":"4031:6:20","nodeType":"YulIdentifier","src":"4031:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4010:6:20","nodeType":"YulIdentifier","src":"4010:6:20"},"nativeSrc":"4010:28:20","nodeType":"YulFunctionCall","src":"4010:28:20"},"nativeSrc":"4010:28:20","nodeType":"YulExpressionStatement","src":"4010:28:20"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4058:3:20","nodeType":"YulIdentifier","src":"4058:3:20"},{"kind":"number","nativeSrc":"4063:3:20","nodeType":"YulLiteral","src":"4063:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4054:3:20","nodeType":"YulIdentifier","src":"4054:3:20"},"nativeSrc":"4054:13:20","nodeType":"YulFunctionCall","src":"4054:13:20"},{"name":"value4","nativeSrc":"4069:6:20","nodeType":"YulIdentifier","src":"4069:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4047:6:20","nodeType":"YulIdentifier","src":"4047:6:20"},"nativeSrc":"4047:29:20","nodeType":"YulFunctionCall","src":"4047:29:20"},"nativeSrc":"4047:29:20","nodeType":"YulExpressionStatement","src":"4047:29:20"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4096:3:20","nodeType":"YulIdentifier","src":"4096:3:20"},{"kind":"number","nativeSrc":"4101:3:20","nodeType":"YulLiteral","src":"4101:3:20","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4092:3:20","nodeType":"YulIdentifier","src":"4092:3:20"},"nativeSrc":"4092:13:20","nodeType":"YulFunctionCall","src":"4092:13:20"},{"name":"value5","nativeSrc":"4107:6:20","nodeType":"YulIdentifier","src":"4107:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4085:6:20","nodeType":"YulIdentifier","src":"4085:6:20"},"nativeSrc":"4085:29:20","nodeType":"YulFunctionCall","src":"4085:29:20"},"nativeSrc":"4085:29:20","nodeType":"YulExpressionStatement","src":"4085:29:20"},{"nativeSrc":"4123:20:20","nodeType":"YulAssignment","src":"4123:20:20","value":{"arguments":[{"name":"pos","nativeSrc":"4134:3:20","nodeType":"YulIdentifier","src":"4134:3:20"},{"kind":"number","nativeSrc":"4139:3:20","nodeType":"YulLiteral","src":"4139:3:20","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"4130:3:20","nodeType":"YulIdentifier","src":"4130:3:20"},"nativeSrc":"4130:13:20","nodeType":"YulFunctionCall","src":"4130:13:20"},"variableNames":[{"name":"end","nativeSrc":"4123:3:20","nodeType":"YulIdentifier","src":"4123:3:20"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"3639:510:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"3834:3:20","nodeType":"YulTypedName","src":"3834:3:20","type":""},{"name":"value5","nativeSrc":"3839:6:20","nodeType":"YulTypedName","src":"3839:6:20","type":""},{"name":"value4","nativeSrc":"3847:6:20","nodeType":"YulTypedName","src":"3847:6:20","type":""},{"name":"value3","nativeSrc":"3855:6:20","nodeType":"YulTypedName","src":"3855:6:20","type":""},{"name":"value2","nativeSrc":"3863:6:20","nodeType":"YulTypedName","src":"3863:6:20","type":""},{"name":"value1","nativeSrc":"3871:6:20","nodeType":"YulTypedName","src":"3871:6:20","type":""},{"name":"value0","nativeSrc":"3879:6:20","nodeType":"YulTypedName","src":"3879:6:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3890:3:20","nodeType":"YulTypedName","src":"3890:3:20","type":""}],"src":"3639:510:20"},{"body":{"nativeSrc":"4395:294:20","nodeType":"YulBlock","src":"4395:294:20","statements":[{"nativeSrc":"4405:27:20","nodeType":"YulAssignment","src":"4405:27:20","value":{"arguments":[{"name":"headStart","nativeSrc":"4417:9:20","nodeType":"YulIdentifier","src":"4417:9:20"},{"kind":"number","nativeSrc":"4428:3:20","nodeType":"YulLiteral","src":"4428:3:20","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"4413:3:20","nodeType":"YulIdentifier","src":"4413:3:20"},"nativeSrc":"4413:19:20","nodeType":"YulFunctionCall","src":"4413:19:20"},"variableNames":[{"name":"tail","nativeSrc":"4405:4:20","nodeType":"YulIdentifier","src":"4405:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4448:9:20","nodeType":"YulIdentifier","src":"4448:9:20"},{"name":"value0","nativeSrc":"4459:6:20","nodeType":"YulIdentifier","src":"4459:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4441:6:20","nodeType":"YulIdentifier","src":"4441:6:20"},"nativeSrc":"4441:25:20","nodeType":"YulFunctionCall","src":"4441:25:20"},"nativeSrc":"4441:25:20","nodeType":"YulExpressionStatement","src":"4441:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4486:9:20","nodeType":"YulIdentifier","src":"4486:9:20"},{"kind":"number","nativeSrc":"4497:2:20","nodeType":"YulLiteral","src":"4497:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4482:3:20","nodeType":"YulIdentifier","src":"4482:3:20"},"nativeSrc":"4482:18:20","nodeType":"YulFunctionCall","src":"4482:18:20"},{"name":"value1","nativeSrc":"4502:6:20","nodeType":"YulIdentifier","src":"4502:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4475:6:20","nodeType":"YulIdentifier","src":"4475:6:20"},"nativeSrc":"4475:34:20","nodeType":"YulFunctionCall","src":"4475:34:20"},"nativeSrc":"4475:34:20","nodeType":"YulExpressionStatement","src":"4475:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4529:9:20","nodeType":"YulIdentifier","src":"4529:9:20"},{"kind":"number","nativeSrc":"4540:2:20","nodeType":"YulLiteral","src":"4540:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4525:3:20","nodeType":"YulIdentifier","src":"4525:3:20"},"nativeSrc":"4525:18:20","nodeType":"YulFunctionCall","src":"4525:18:20"},{"name":"value2","nativeSrc":"4545:6:20","nodeType":"YulIdentifier","src":"4545:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4518:6:20","nodeType":"YulIdentifier","src":"4518:6:20"},"nativeSrc":"4518:34:20","nodeType":"YulFunctionCall","src":"4518:34:20"},"nativeSrc":"4518:34:20","nodeType":"YulExpressionStatement","src":"4518:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4572:9:20","nodeType":"YulIdentifier","src":"4572:9:20"},{"kind":"number","nativeSrc":"4583:2:20","nodeType":"YulLiteral","src":"4583:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4568:3:20","nodeType":"YulIdentifier","src":"4568:3:20"},"nativeSrc":"4568:18:20","nodeType":"YulFunctionCall","src":"4568:18:20"},{"name":"value3","nativeSrc":"4588:6:20","nodeType":"YulIdentifier","src":"4588:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4561:6:20","nodeType":"YulIdentifier","src":"4561:6:20"},"nativeSrc":"4561:34:20","nodeType":"YulFunctionCall","src":"4561:34:20"},"nativeSrc":"4561:34:20","nodeType":"YulExpressionStatement","src":"4561:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4615:9:20","nodeType":"YulIdentifier","src":"4615:9:20"},{"kind":"number","nativeSrc":"4626:3:20","nodeType":"YulLiteral","src":"4626:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4611:3:20","nodeType":"YulIdentifier","src":"4611:3:20"},"nativeSrc":"4611:19:20","nodeType":"YulFunctionCall","src":"4611:19:20"},{"name":"value4","nativeSrc":"4632:6:20","nodeType":"YulIdentifier","src":"4632:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4604:6:20","nodeType":"YulIdentifier","src":"4604:6:20"},"nativeSrc":"4604:35:20","nodeType":"YulFunctionCall","src":"4604:35:20"},"nativeSrc":"4604:35:20","nodeType":"YulExpressionStatement","src":"4604:35:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4659:9:20","nodeType":"YulIdentifier","src":"4659:9:20"},{"kind":"number","nativeSrc":"4670:3:20","nodeType":"YulLiteral","src":"4670:3:20","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4655:3:20","nodeType":"YulIdentifier","src":"4655:3:20"},"nativeSrc":"4655:19:20","nodeType":"YulFunctionCall","src":"4655:19:20"},{"name":"value5","nativeSrc":"4676:6:20","nodeType":"YulIdentifier","src":"4676:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4648:6:20","nodeType":"YulIdentifier","src":"4648:6:20"},"nativeSrc":"4648:35:20","nodeType":"YulFunctionCall","src":"4648:35:20"},"nativeSrc":"4648:35:20","nodeType":"YulExpressionStatement","src":"4648:35:20"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"4154:535:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4324:9:20","nodeType":"YulTypedName","src":"4324:9:20","type":""},{"name":"value5","nativeSrc":"4335:6:20","nodeType":"YulTypedName","src":"4335:6:20","type":""},{"name":"value4","nativeSrc":"4343:6:20","nodeType":"YulTypedName","src":"4343:6:20","type":""},{"name":"value3","nativeSrc":"4351:6:20","nodeType":"YulTypedName","src":"4351:6:20","type":""},{"name":"value2","nativeSrc":"4359:6:20","nodeType":"YulTypedName","src":"4359:6:20","type":""},{"name":"value1","nativeSrc":"4367:6:20","nodeType":"YulTypedName","src":"4367:6:20","type":""},{"name":"value0","nativeSrc":"4375:6:20","nodeType":"YulTypedName","src":"4375:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4386:4:20","nodeType":"YulTypedName","src":"4386:4:20","type":""}],"src":"4154:535:20"},{"body":{"nativeSrc":"4907:250:20","nodeType":"YulBlock","src":"4907:250:20","statements":[{"nativeSrc":"4917:27:20","nodeType":"YulAssignment","src":"4917:27:20","value":{"arguments":[{"name":"headStart","nativeSrc":"4929:9:20","nodeType":"YulIdentifier","src":"4929:9:20"},{"kind":"number","nativeSrc":"4940:3:20","nodeType":"YulLiteral","src":"4940:3:20","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4925:3:20","nodeType":"YulIdentifier","src":"4925:3:20"},"nativeSrc":"4925:19:20","nodeType":"YulFunctionCall","src":"4925:19:20"},"variableNames":[{"name":"tail","nativeSrc":"4917:4:20","nodeType":"YulIdentifier","src":"4917:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4960:9:20","nodeType":"YulIdentifier","src":"4960:9:20"},{"name":"value0","nativeSrc":"4971:6:20","nodeType":"YulIdentifier","src":"4971:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4953:6:20","nodeType":"YulIdentifier","src":"4953:6:20"},"nativeSrc":"4953:25:20","nodeType":"YulFunctionCall","src":"4953:25:20"},"nativeSrc":"4953:25:20","nodeType":"YulExpressionStatement","src":"4953:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4998:9:20","nodeType":"YulIdentifier","src":"4998:9:20"},{"kind":"number","nativeSrc":"5009:2:20","nodeType":"YulLiteral","src":"5009:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4994:3:20","nodeType":"YulIdentifier","src":"4994:3:20"},"nativeSrc":"4994:18:20","nodeType":"YulFunctionCall","src":"4994:18:20"},{"name":"value1","nativeSrc":"5014:6:20","nodeType":"YulIdentifier","src":"5014:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4987:6:20","nodeType":"YulIdentifier","src":"4987:6:20"},"nativeSrc":"4987:34:20","nodeType":"YulFunctionCall","src":"4987:34:20"},"nativeSrc":"4987:34:20","nodeType":"YulExpressionStatement","src":"4987:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5041:9:20","nodeType":"YulIdentifier","src":"5041:9:20"},{"kind":"number","nativeSrc":"5052:2:20","nodeType":"YulLiteral","src":"5052:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5037:3:20","nodeType":"YulIdentifier","src":"5037:3:20"},"nativeSrc":"5037:18:20","nodeType":"YulFunctionCall","src":"5037:18:20"},{"name":"value2","nativeSrc":"5057:6:20","nodeType":"YulIdentifier","src":"5057:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5030:6:20","nodeType":"YulIdentifier","src":"5030:6:20"},"nativeSrc":"5030:34:20","nodeType":"YulFunctionCall","src":"5030:34:20"},"nativeSrc":"5030:34:20","nodeType":"YulExpressionStatement","src":"5030:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5084:9:20","nodeType":"YulIdentifier","src":"5084:9:20"},{"kind":"number","nativeSrc":"5095:2:20","nodeType":"YulLiteral","src":"5095:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5080:3:20","nodeType":"YulIdentifier","src":"5080:3:20"},"nativeSrc":"5080:18:20","nodeType":"YulFunctionCall","src":"5080:18:20"},{"name":"value3","nativeSrc":"5100:6:20","nodeType":"YulIdentifier","src":"5100:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5073:6:20","nodeType":"YulIdentifier","src":"5073:6:20"},"nativeSrc":"5073:34:20","nodeType":"YulFunctionCall","src":"5073:34:20"},"nativeSrc":"5073:34:20","nodeType":"YulExpressionStatement","src":"5073:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5127:9:20","nodeType":"YulIdentifier","src":"5127:9:20"},{"kind":"number","nativeSrc":"5138:3:20","nodeType":"YulLiteral","src":"5138:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5123:3:20","nodeType":"YulIdentifier","src":"5123:3:20"},"nativeSrc":"5123:19:20","nodeType":"YulFunctionCall","src":"5123:19:20"},{"name":"value4","nativeSrc":"5144:6:20","nodeType":"YulIdentifier","src":"5144:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5116:6:20","nodeType":"YulIdentifier","src":"5116:6:20"},"nativeSrc":"5116:35:20","nodeType":"YulFunctionCall","src":"5116:35:20"},"nativeSrc":"5116:35:20","nodeType":"YulExpressionStatement","src":"5116:35:20"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"4694:463:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4844:9:20","nodeType":"YulTypedName","src":"4844:9:20","type":""},{"name":"value4","nativeSrc":"4855:6:20","nodeType":"YulTypedName","src":"4855:6:20","type":""},{"name":"value3","nativeSrc":"4863:6:20","nodeType":"YulTypedName","src":"4863:6:20","type":""},{"name":"value2","nativeSrc":"4871:6:20","nodeType":"YulTypedName","src":"4871:6:20","type":""},{"name":"value1","nativeSrc":"4879:6:20","nodeType":"YulTypedName","src":"4879:6:20","type":""},{"name":"value0","nativeSrc":"4887:6:20","nodeType":"YulTypedName","src":"4887:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4898:4:20","nodeType":"YulTypedName","src":"4898:4:20","type":""}],"src":"4694:463:20"},{"body":{"nativeSrc":"5347:206:20","nodeType":"YulBlock","src":"5347:206:20","statements":[{"nativeSrc":"5357:27:20","nodeType":"YulAssignment","src":"5357:27:20","value":{"arguments":[{"name":"headStart","nativeSrc":"5369:9:20","nodeType":"YulIdentifier","src":"5369:9:20"},{"kind":"number","nativeSrc":"5380:3:20","nodeType":"YulLiteral","src":"5380:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5365:3:20","nodeType":"YulIdentifier","src":"5365:3:20"},"nativeSrc":"5365:19:20","nodeType":"YulFunctionCall","src":"5365:19:20"},"variableNames":[{"name":"tail","nativeSrc":"5357:4:20","nodeType":"YulIdentifier","src":"5357:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5400:9:20","nodeType":"YulIdentifier","src":"5400:9:20"},{"name":"value0","nativeSrc":"5411:6:20","nodeType":"YulIdentifier","src":"5411:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5393:6:20","nodeType":"YulIdentifier","src":"5393:6:20"},"nativeSrc":"5393:25:20","nodeType":"YulFunctionCall","src":"5393:25:20"},"nativeSrc":"5393:25:20","nodeType":"YulExpressionStatement","src":"5393:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5438:9:20","nodeType":"YulIdentifier","src":"5438:9:20"},{"kind":"number","nativeSrc":"5449:2:20","nodeType":"YulLiteral","src":"5449:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5434:3:20","nodeType":"YulIdentifier","src":"5434:3:20"},"nativeSrc":"5434:18:20","nodeType":"YulFunctionCall","src":"5434:18:20"},{"name":"value1","nativeSrc":"5454:6:20","nodeType":"YulIdentifier","src":"5454:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5427:6:20","nodeType":"YulIdentifier","src":"5427:6:20"},"nativeSrc":"5427:34:20","nodeType":"YulFunctionCall","src":"5427:34:20"},"nativeSrc":"5427:34:20","nodeType":"YulExpressionStatement","src":"5427:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5481:9:20","nodeType":"YulIdentifier","src":"5481:9:20"},{"kind":"number","nativeSrc":"5492:2:20","nodeType":"YulLiteral","src":"5492:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5477:3:20","nodeType":"YulIdentifier","src":"5477:3:20"},"nativeSrc":"5477:18:20","nodeType":"YulFunctionCall","src":"5477:18:20"},{"name":"value2","nativeSrc":"5497:6:20","nodeType":"YulIdentifier","src":"5497:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5470:6:20","nodeType":"YulIdentifier","src":"5470:6:20"},"nativeSrc":"5470:34:20","nodeType":"YulFunctionCall","src":"5470:34:20"},"nativeSrc":"5470:34:20","nodeType":"YulExpressionStatement","src":"5470:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5524:9:20","nodeType":"YulIdentifier","src":"5524:9:20"},{"kind":"number","nativeSrc":"5535:2:20","nodeType":"YulLiteral","src":"5535:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5520:3:20","nodeType":"YulIdentifier","src":"5520:3:20"},"nativeSrc":"5520:18:20","nodeType":"YulFunctionCall","src":"5520:18:20"},{"name":"value3","nativeSrc":"5540:6:20","nodeType":"YulIdentifier","src":"5540:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5513:6:20","nodeType":"YulIdentifier","src":"5513:6:20"},"nativeSrc":"5513:34:20","nodeType":"YulFunctionCall","src":"5513:34:20"},"nativeSrc":"5513:34:20","nodeType":"YulExpressionStatement","src":"5513:34:20"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"5162:391:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5292:9:20","nodeType":"YulTypedName","src":"5292:9:20","type":""},{"name":"value3","nativeSrc":"5303:6:20","nodeType":"YulTypedName","src":"5303:6:20","type":""},{"name":"value2","nativeSrc":"5311:6:20","nodeType":"YulTypedName","src":"5311:6:20","type":""},{"name":"value1","nativeSrc":"5319:6:20","nodeType":"YulTypedName","src":"5319:6:20","type":""},{"name":"value0","nativeSrc":"5327:6:20","nodeType":"YulTypedName","src":"5327:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5338:4:20","nodeType":"YulTypedName","src":"5338:4:20","type":""}],"src":"5162:391:20"},{"body":{"nativeSrc":"5590:152:20","nodeType":"YulBlock","src":"5590:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5607:1:20","nodeType":"YulLiteral","src":"5607:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5610:77:20","nodeType":"YulLiteral","src":"5610:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5600:6:20","nodeType":"YulIdentifier","src":"5600:6:20"},"nativeSrc":"5600:88:20","nodeType":"YulFunctionCall","src":"5600:88:20"},"nativeSrc":"5600:88:20","nodeType":"YulExpressionStatement","src":"5600:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5704:1:20","nodeType":"YulLiteral","src":"5704:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"5707:4:20","nodeType":"YulLiteral","src":"5707:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5697:6:20","nodeType":"YulIdentifier","src":"5697:6:20"},"nativeSrc":"5697:15:20","nodeType":"YulFunctionCall","src":"5697:15:20"},"nativeSrc":"5697:15:20","nodeType":"YulExpressionStatement","src":"5697:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5728:1:20","nodeType":"YulLiteral","src":"5728:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5731:4:20","nodeType":"YulLiteral","src":"5731:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5721:6:20","nodeType":"YulIdentifier","src":"5721:6:20"},"nativeSrc":"5721:15:20","nodeType":"YulFunctionCall","src":"5721:15:20"},"nativeSrc":"5721:15:20","nodeType":"YulExpressionStatement","src":"5721:15:20"}]},"name":"panic_error_0x11","nativeSrc":"5558:184:20","nodeType":"YulFunctionDefinition","src":"5558:184:20"},{"body":{"nativeSrc":"5796:79:20","nodeType":"YulBlock","src":"5796:79:20","statements":[{"nativeSrc":"5806:17:20","nodeType":"YulAssignment","src":"5806:17:20","value":{"arguments":[{"name":"x","nativeSrc":"5818:1:20","nodeType":"YulIdentifier","src":"5818:1:20"},{"name":"y","nativeSrc":"5821:1:20","nodeType":"YulIdentifier","src":"5821:1:20"}],"functionName":{"name":"sub","nativeSrc":"5814:3:20","nodeType":"YulIdentifier","src":"5814:3:20"},"nativeSrc":"5814:9:20","nodeType":"YulFunctionCall","src":"5814:9:20"},"variableNames":[{"name":"diff","nativeSrc":"5806:4:20","nodeType":"YulIdentifier","src":"5806:4:20"}]},{"body":{"nativeSrc":"5847:22:20","nodeType":"YulBlock","src":"5847:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5849:16:20","nodeType":"YulIdentifier","src":"5849:16:20"},"nativeSrc":"5849:18:20","nodeType":"YulFunctionCall","src":"5849:18:20"},"nativeSrc":"5849:18:20","nodeType":"YulExpressionStatement","src":"5849:18:20"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5838:4:20","nodeType":"YulIdentifier","src":"5838:4:20"},{"name":"x","nativeSrc":"5844:1:20","nodeType":"YulIdentifier","src":"5844:1:20"}],"functionName":{"name":"gt","nativeSrc":"5835:2:20","nodeType":"YulIdentifier","src":"5835:2:20"},"nativeSrc":"5835:11:20","nodeType":"YulFunctionCall","src":"5835:11:20"},"nativeSrc":"5832:37:20","nodeType":"YulIf","src":"5832:37:20"}]},"name":"checked_sub_t_uint256","nativeSrc":"5747:128:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5778:1:20","nodeType":"YulTypedName","src":"5778:1:20","type":""},{"name":"y","nativeSrc":"5781:1:20","nodeType":"YulTypedName","src":"5781:1:20","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5787:4:20","nodeType":"YulTypedName","src":"5787:4:20","type":""}],"src":"5747:128:20"},{"body":{"nativeSrc":"5912:152:20","nodeType":"YulBlock","src":"5912:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5929:1:20","nodeType":"YulLiteral","src":"5929:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5932:77:20","nodeType":"YulLiteral","src":"5932:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5922:6:20","nodeType":"YulIdentifier","src":"5922:6:20"},"nativeSrc":"5922:88:20","nodeType":"YulFunctionCall","src":"5922:88:20"},"nativeSrc":"5922:88:20","nodeType":"YulExpressionStatement","src":"5922:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6026:1:20","nodeType":"YulLiteral","src":"6026:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"6029:4:20","nodeType":"YulLiteral","src":"6029:4:20","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6019:6:20","nodeType":"YulIdentifier","src":"6019:6:20"},"nativeSrc":"6019:15:20","nodeType":"YulFunctionCall","src":"6019:15:20"},"nativeSrc":"6019:15:20","nodeType":"YulExpressionStatement","src":"6019:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6050:1:20","nodeType":"YulLiteral","src":"6050:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"6053:4:20","nodeType":"YulLiteral","src":"6053:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6043:6:20","nodeType":"YulIdentifier","src":"6043:6:20"},"nativeSrc":"6043:15:20","nodeType":"YulFunctionCall","src":"6043:15:20"},"nativeSrc":"6043:15:20","nodeType":"YulExpressionStatement","src":"6043:15:20"}]},"name":"panic_error_0x32","nativeSrc":"5880:184:20","nodeType":"YulFunctionDefinition","src":"5880:184:20"},{"body":{"nativeSrc":"6116:148:20","nodeType":"YulBlock","src":"6116:148:20","statements":[{"body":{"nativeSrc":"6207:22:20","nodeType":"YulBlock","src":"6207:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6209:16:20","nodeType":"YulIdentifier","src":"6209:16:20"},"nativeSrc":"6209:18:20","nodeType":"YulFunctionCall","src":"6209:18:20"},"nativeSrc":"6209:18:20","nodeType":"YulExpressionStatement","src":"6209:18:20"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"6132:5:20","nodeType":"YulIdentifier","src":"6132:5:20"},{"kind":"number","nativeSrc":"6139:66:20","nodeType":"YulLiteral","src":"6139:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"6129:2:20","nodeType":"YulIdentifier","src":"6129:2:20"},"nativeSrc":"6129:77:20","nodeType":"YulFunctionCall","src":"6129:77:20"},"nativeSrc":"6126:103:20","nodeType":"YulIf","src":"6126:103:20"},{"nativeSrc":"6238:20:20","nodeType":"YulAssignment","src":"6238:20:20","value":{"arguments":[{"name":"value","nativeSrc":"6249:5:20","nodeType":"YulIdentifier","src":"6249:5:20"},{"kind":"number","nativeSrc":"6256:1:20","nodeType":"YulLiteral","src":"6256:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6245:3:20","nodeType":"YulIdentifier","src":"6245:3:20"},"nativeSrc":"6245:13:20","nodeType":"YulFunctionCall","src":"6245:13:20"},"variableNames":[{"name":"ret","nativeSrc":"6238:3:20","nodeType":"YulIdentifier","src":"6238:3:20"}]}]},"name":"increment_t_uint256","nativeSrc":"6069:195:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6098:5:20","nodeType":"YulTypedName","src":"6098:5:20","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"6108:3:20","nodeType":"YulTypedName","src":"6108:3:20","type":""}],"src":"6069:195:20"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IMocaPoints_$1906__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        let offset := calldataload(add(headStart, 160))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value5 := add(_2, 32)\n        value6 := length\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value5, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), value2)\n        mstore(add(pos, 96), value3)\n        mstore(add(pos, 128), value4)\n        mstore(add(pos, 160), value5)\n        end := add(pos, 192)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1563":[{"length":32,"start":240},{"length":32,"start":724},{"length":32,"start":1808}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100be5760003560e01c80639e317f1211610076578063ae6dead71161005b578063ae6dead7146101b8578063cc3c0f06146101d8578063f2fde38b146101fb57600080fd5b80639e317f12146101675780639e9e46661461019557600080fd5b806375edcbe0116100a757806375edcbe0146101375780638da5cb5b1461014c5780639931012e1461015457600080fd5b806301ffc9a7146100c35780632727aae8146100eb575b600080fd5b6100d66100d1366004610b2d565b61020e565b60405190151581526020015b60405180910390f35b6101127f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b61014a610145366004610b6f565b610228565b005b610112610451565b61014a610162366004610b91565b61047d565b610187610175366004610c37565b60026020526000908152604090205481565b6040519081526020016100e2565b6100d66101a3366004610c37565b60006020819052908152604090205460ff1681565b6101876101c6366004610c37565b60016020526000908152604090205481565b6100d66101e6366004610c37565b60036020526000908152604090205460ff1681565b61014a610209366004610c50565b6107c6565b60006102228261021c6107dd565b9061080b565b92915050565b61023a336102346108e5565b90610913565b60008281526001602052604090205415801590610266575060008281526020819052604090205460ff16155b156102a5576040517fd7590240000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6040517f4529cc1b000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634529cc1b90602401602060405180830381865afa158015610330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103549190610c86565b61038d576040517f0b22ca350000000000000000000000000000000000000000000000000000000081526004810183905260240161029c565b60008281526001602081815260408084208590556002825292839020805490920190915581518481529081018390527f4983a335d43faab715b8e7c23f104092b464c1b553f3f4aa3fc33c473b45dd49910160405180910390a16000828152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590518381527fd05bfc2250abb0f8fd265a54c53a24359c5484af63cad2e4ce87c78ab751395a910160405180910390a15050565b600061047861045e6108e5565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b836000036104ba576040517f27ab1ee20000000000000000000000000000000000000000000000000000000081526004810185905260240161029c565b60008781526020819052604090205460ff1615610506576040517f4501e9a20000000000000000000000000000000000000000000000000000000081526004810188905260240161029c565b60008781526001602052604081205490819003610552576040517f1d3bbc3f0000000000000000000000000000000000000000000000000000000081526004810189905260240161029c565b60008881526002602090815260408083205481518084018d90528083018c9052606081018b9052608081018a905260a0810189905260c08082018390528351808303909101815260e09091018352805190840120808552600390935292205460ff1615610611576040517f57793e5c000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a905260448101899052606481018890526084810187905260a4810183905260c40161029c565b61061d85858584610982565b610679576040517f50d53cc8000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a905260448101899052606481018890526084810187905260a4810183905260c40161029c565b6000818152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f18ee89f0000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a905260448101899052606481018890526084810187905273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906318ee89f09060a401600060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b5050604080518b8152602081018b9052908101899052606081018590528b92508591508c907f6e125d7bd8f9609ca71a5f3e816580b0eb4a45663664eb21343914c5db5aeae99060800160405180910390a450505050505050505050565b6107da33826107d36108e5565b919061099a565b50565b60008061022260017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610cd7565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161085b57506000610222565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108ac57506001610222565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061022260017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610cd7565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461097e576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161029c565b5050565b600082610990868685610aaf565b1495945050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610a07576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161029c565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610aa95783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600081815b84811015610af257610ade82878784818110610ad257610ad2610cea565b90506020020135610afb565b915080610aea81610d19565b915050610ab4565b50949350505050565b6000818310610b17576000828152602084905260409020610b26565b60008381526020839052604090205b9392505050565b600060208284031215610b3f57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b2657600080fd5b60008060408385031215610b8257600080fd5b50508035926020909101359150565b600080600080600080600060c0888a031215610bac57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610be757600080fd5b818a0191508a601f830112610bfb57600080fd5b813581811115610c0a57600080fd5b8b60208260051b8501011115610c1f57600080fd5b60208301945080935050505092959891949750929550565b600060208284031215610c4957600080fd5b5035919050565b600060208284031215610c6257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b2657600080fd5b600060208284031215610c9857600080fd5b81518015158114610b2657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561022257610222610ca8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4a57610d4a610ca8565b506001019056fea26469706673582212207adef4ed1f976e0a52d7c91992fcb0614fe80c628ae084c40470ade2ad6200b064736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9E317F12 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xAE6DEAD7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9E317F12 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x9E9E4666 EQ PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75EDCBE0 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x75EDCBE0 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x9931012E EQ PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x2727AAE8 EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB2D JUMP JUMPDEST PUSH2 0x20E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x112 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0xB6F JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x112 PUSH2 0x451 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0xB91 JUMP JUMPDEST PUSH2 0x47D JUMP JUMPDEST PUSH2 0x187 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x1C6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x209 CALLDATASIZE PUSH1 0x4 PUSH2 0xC50 JUMP JUMPDEST PUSH2 0x7C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x222 DUP3 PUSH2 0x21C PUSH2 0x7DD JUMP JUMPDEST SWAP1 PUSH2 0x80B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23A CALLER PUSH2 0x234 PUSH2 0x8E5 JUMP JUMPDEST SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x266 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD759024000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4529CC1B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x4529CC1B SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x330 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x354 SWAP2 SWAP1 PUSH2 0xC86 JUMP JUMPDEST PUSH2 0x38D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB22CA3500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x2 DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x4983A335D43FAAB715B8E7C23F104092B464C1B553F3F4AA3FC33C473B45DD49 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP1 MLOAD DUP4 DUP2 MSTORE PUSH32 0xD05BFC2250ABB0F8FD265A54C53A24359C5484AF63CAD2E4CE87C78AB751395A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x478 PUSH2 0x45E PUSH2 0x8E5 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0x4BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x27AB1EE200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x506 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4501E9A200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1D3BBC3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP5 ADD DUP14 SWAP1 MSTORE DUP1 DUP4 ADD DUP13 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xC0 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP2 ADD DUP4 MSTORE DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x611 JUMPI PUSH1 0x40 MLOAD PUSH32 0x57793E5C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xA4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC4 ADD PUSH2 0x29C JUMP JUMPDEST PUSH2 0x61D DUP6 DUP6 DUP6 DUP5 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH32 0x50D53CC800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xA4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC4 ADD PUSH2 0x29C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x18EE89F000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x18EE89F0 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x768 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP12 SWAP1 MSTORE SWAP1 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE DUP12 SWAP3 POP DUP6 SWAP2 POP DUP13 SWAP1 PUSH32 0x6E125D7BD8F9609CA71A5F3E816580B0EB4A45663664EB21343914C5DB5AEAE9 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7DA CALLER DUP3 PUSH2 0x7D3 PUSH2 0x8E5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x99A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x222 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xCD7 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x85B JUMPI POP PUSH1 0x0 PUSH2 0x222 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8AC JUMPI POP PUSH1 0x1 PUSH2 0x222 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x222 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xCD7 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x990 DUP7 DUP7 DUP6 PUSH2 0xAAF JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x29C JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAA9 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xAF2 JUMPI PUSH2 0xADE DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xAD2 JUMPI PUSH2 0xAD2 PUSH2 0xCEA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xAFB JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xAEA DUP2 PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAB4 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xB17 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xBAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP12 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x222 JUMPI PUSH2 0x222 PUSH2 0xCA8 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xD4A JUMPI PUSH2 0xD4A PUSH2 0xCA8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xDEF4ED1F976E0A52D7C91992FCB0614FE80C628AE084C40470ADE2 0xAD PUSH3 0xB064 PUSH20 0x6F6C634300081500330000000000000000000000 ","sourceMap":"493:6719:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:20;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;669:49:18;;;;;;;;739:42:20;727:55;;;709:74;;697:2;682:18;669:49:18;543:246:20;4423:573:18;;;;;;:::i;:::-;;:::i;:::-;;710:120:1;;;:::i;5948:1262:18:-;;;;;;:::i;:::-;;:::i;815:41::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2572:25:20;;;2560:2;2545:18;815:41:18;2426:177:20;725:38:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;769:40;;;;;;:::i;:::-;;;;;;;;;;;;;;862:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;864:152:1;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;4423:573:18:-;4499:68;4556:10;4499:33;:31;:33::i;:::-;:56;;:68::i;:::-;4582:13;;;;:5;:13;;;;;;:18;;;;:37;;-1:-1:-1;4605:6:18;:14;;;;;;;;;;;;;4604:15;4582:37;4578:98;;;4642:23;;;;;;;;2572:25:20;;;2545:18;;4642:23:18;;;;;;;;4578:98;4690:36;;;;;;;;2572:25:20;;;4690:20:18;:28;;;;;2545:18:20;;4690:36:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4685:96;;4749:21;;;;;;;;2572:25:20;;;2545:18;;4749:21:18;2426:177:20;4685:96:18;4791:13;;;;:5;:13;;;;;;;;:26;;;4853:6;:14;;;;;;4851:16;;;;;;;;4892:33;;3560:25:20;;;3601:18;;;3594:34;;;4892:33:18;;3533:18:20;4892:33:18;;;;;;;4953:5;4936:14;;;;;;;;;;;;:22;;;;;;4973:16;;2572:25:20;;;4973:16:18;;2545:18:20;4973:16:18;;;;;;;4423:573;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3674:15:6;;;;3578:118;782:41:1;775:48;;710:120;:::o;5948:1262:18:-;6172:6;6182:1;6172:11;6168:75;;6206:26;;;;;;;;2572:25:20;;;2545:18;;6206:26:18;2426:177:20;6168:75:18;6256:6;:14;;;;;;;;;;;;;6252:74;;;6293:22;;;;;;;;2572:25:20;;;2545:18;;6293:22:18;2426:177:20;6252:74:18;6335:19;6357:13;;;:5;:13;;;;;;;6384:16;;;6380:81;;6423:27;;;;;;;;2572:25:20;;;2545:18;;6423:27:18;2426:177:20;6380:81:18;6471:20;6494:14;;;:6;:14;;;;;;;;;6544:90;;;;;3908:19:20;;;3943:12;;;3936:28;;;3980:12;;;3973:28;;;4017:12;;;4010:28;;;4054:13;;;4047:29;;;4092:13;;;;4085:29;;;6544:90:18;;;;;;;;;;4130:13:20;;;;6544:90:18;;6534:101;;;;;;6650:13;;;:7;:13;;;;;;;;6646:139;;;6686:88;;;;;;;;4441:25:20;;;4482:18;;;4475:34;;;4525:18;;;4518:34;;;4568:18;;;4561:34;;;4611:19;;;4604:35;;;4655:19;;;4648:35;;;4413:19;;6686:88:18;4154:535:20;6646:139:18;6799:39;:5;;6820:11;6833:4;6799:20;:39::i;:::-;6794:164;;6861:86;;;;;;;;4441:25:20;;;4482:18;;;4475:34;;;4525:18;;;4518:34;;;4568:18;;;4561:34;;;4611:19;;;4604:35;;;4655:19;;;4648:35;;;4413:19;;6861:86:18;4154:535:20;6794:164:18;6968:13;;;;:7;:13;;;;;;;:20;;;;6984:4;6968:20;;;6999:88;;;;;;;4953:25:20;;;4994:18;;;4987:34;;;5037:18;;;5030:34;;;5080:18;;;5073:34;;;5123:19;;;5116:35;;;6999:28:18;:20;:28;;;;4925:19:20;;6999:88:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7103:100:18;;;5393:25:20;;;5449:2;5434:18;;5427:34;;;5477:18;;;5470:34;;;5535:2;5520:18;;5513:34;;;7138:7:18;;-1:-1:-1;7125:11:18;;-1:-1:-1;7117:6:18;;7103:100;;5380:3:20;5365:19;7103:100:18;;;;;;;6158:1052;;;5948:1262;;;;;;;:::o;864:152:1:-;934:75;719:10:14;1000:8:1;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5087:174:6:-;5128:16;;920:71;990:1;928:58;920:71;:::i;4435:162::-;4541:15;;;4530:26;;;4541:15;;4530:26;4526:64;;4565:25;;;;;739:42:20;727:55;;4565:25:6;;;709:74:20;682:18;;4565:25:6;543:246:20;4526:64:6;4435:162;;:::o;1441:202:16:-;1572:4;1632;1595:33;1616:5;;1623:4;1595:20;:33::i;:::-;:41;;1441:202;-1:-1:-1;;;;;1441:202:16:o;3068:383:6:-;3190:15;;;;;;;3219:23;;;;3215:60;;3251:24;;;;;739:42:20;727:55;;3251:24:6;;;709:74:20;682:18;;3251:24:6;543:246:20;3215:60:6;3306:8;3289:25;;:13;:25;;;3285:160;;3330:26;;;;;;;;;;;;;3375:59;;;;;;;;-1:-1:-1;;3375:59:6;3285:160;3156:295;3068:383;;;:::o;2391:300:16:-;2484:7;2526:4;2484:7;2540:116;2560:16;;;2540:116;;;2612:33;2622:12;2636:5;;2642:1;2636:8;;;;;;;:::i;:::-;;;;;;;2612:9;:33::i;:::-;2597:48;-1:-1:-1;2578:3:16;;;;:::i;:::-;;;;2540:116;;;-1:-1:-1;2672:12:16;2391:300;-1:-1:-1;;;;2391:300:16:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:16:o;14:332:20:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;794:248;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;-1:-1:-1;;962:23:20;;;1032:2;1017:18;;;1004:32;;-1:-1:-1;794:248:20:o;1278:958::-;1409:6;1417;1425;1433;1441;1449;1457;1510:3;1498:9;1489:7;1485:23;1481:33;1478:53;;;1527:1;1524;1517:12;1478:53;1563:9;1550:23;1540:33;;1620:2;1609:9;1605:18;1592:32;1582:42;;1671:2;1660:9;1656:18;1643:32;1633:42;;1722:2;1711:9;1707:18;1694:32;1684:42;;1773:3;1762:9;1758:19;1745:33;1735:43;;1829:3;1818:9;1814:19;1801:33;1853:18;1894:2;1886:6;1883:14;1880:34;;;1910:1;1907;1900:12;1880:34;1948:6;1937:9;1933:22;1923:32;;1993:7;1986:4;1982:2;1978:13;1974:27;1964:55;;2015:1;2012;2005:12;1964:55;2055:2;2042:16;2081:2;2073:6;2070:14;2067:34;;;2097:1;2094;2087:12;2067:34;2150:7;2145:2;2135:6;2132:1;2128:14;2124:2;2120:23;2116:32;2113:45;2110:65;;;2171:1;2168;2161:12;2110:65;2202:2;2198;2194:11;2184:21;;2224:6;2214:16;;;;;1278:958;;;;;;;;;;:::o;2241:180::-;2300:6;2353:2;2341:9;2332:7;2328:23;2324:32;2321:52;;;2369:1;2366;2359:12;2321:52;-1:-1:-1;2392:23:20;;2241:180;-1:-1:-1;2241:180:20:o;2790:309::-;2849:6;2902:2;2890:9;2881:7;2877:23;2873:32;2870:52;;;2918:1;2915;2908:12;2870:52;2957:9;2944:23;3007:42;3000:5;2996:54;2989:5;2986:65;2976:93;;3065:1;3062;3055:12;3104:277;3171:6;3224:2;3212:9;3203:7;3199:23;3195:32;3192:52;;;3240:1;3237;3230:12;3192:52;3272:9;3266:16;3325:5;3318:13;3311:21;3304:5;3301:32;3291:60;;3347:1;3344;3337:12;5558:184;5610:77;5607:1;5600:88;5707:4;5704:1;5697:15;5731:4;5728:1;5721:15;5747:128;5814:9;;;5835:11;;;5832:37;;;5849:18;;:::i;5880:184::-;5932:77;5929:1;5922:88;6029:4;6026:1;6019:15;6053:4;6050:1;6043:15;6069:195;6108:3;6139:66;6132:5;6129:77;6126:103;;6209:18;;:::i;:::-;-1:-1:-1;6256:1:20;6245:13;;6069:195::o"},"gasEstimates":{"creation":{"codeDepositCost":"692600","executionCost":"infinite","totalCost":"infinite"},"external":{"MOCA_POINTS_CONTRACT()":"infinite","claimPayout(bytes32,uint256,uint256,uint256,bytes32,bytes32[])":"infinite","claimed(bytes32)":"2483","nonces(bytes32)":"2461","owner()":"infinite","paused(bytes32)":"2487","roots(bytes32)":"2460","setMerkleRoot(bytes32,bytes32)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"MOCA_POINTS_CONTRACT()":"2727aae8","claimPayout(bytes32,uint256,uint256,uint256,bytes32,bytes32[])":"9931012e","claimed(bytes32)":"cc3c0f06","nonces(bytes32)":"9e317f12","owner()":"8da5cb5b","paused(bytes32)":"9e9e4666","roots(bytes32)":"ae6dead7","setMerkleRoot(bytes32,bytes32)":"75edcbe0","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocaPointsContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"InvalidSeason\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"SeasonIsPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"SeasonNotPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MOCA_POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IMocaPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,uint256,uint256,uint256,bytes32,uint256)\":[{\"params\":{\"amount\":\"The amount of points is claimed.\",\"depositReasonCode\":\"The deposit reason of the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"realmId\":\"The realmId of the claim.\",\"realmIdVersion\":\"The version of the realmId.\",\"season\":\"The season of the claim.\"}}],\"InvalidClaimAmount(uint256)\":[{\"params\":{\"amount\":\"The amount of the claim.\"}}],\"InvalidProof(bytes32,uint256,uint256,uint256,bytes32,uint256)\":[{\"params\":{\"amount\":\"The amount of points is claimed.\",\"depositReasonCode\":\"The deposit reason of the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"realmId\":\"The realmId of the claim.\",\"realmIdVersion\":\"The version of the realmId.\",\"season\":\"The season of the claim.\"}}],\"InvalidSeason(bytes32)\":[{\"params\":{\"season\":\"The season of the claim.\"}}],\"MerkleRootNotExists(bytes32)\":[{\"params\":{\"season\":\"The season of the claim.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SeasonIsPaused(bytes32)\":[{\"params\":{\"season\":\"The season that is paused\"}}],\"SeasonNotPaused(bytes32)\":[{\"params\":{\"season\":\"The season that is not paused.\"}}]},\"events\":{\"MerkleRootSet(bytes32,bytes32)\":{\"params\":{\"root\":\"The new merkle root.\",\"season\":\"The season that the merkle root would be set.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutClaimed(bytes32,bytes32,uint256,uint256,uint256,bytes32,uint256)\":{\"params\":{\"amount\":\"The amount of points is claimed.\",\"depositReasonCode\":\"The deposit reason of the claim.\",\"nonce\":\"The nonce as when the claim was made.\",\"realmId\":\"The realmId of the claim.\",\"realmIdVersion\":\"The version of the realmId.\",\"root\":\"The merkle root on which the claim was made.\",\"season\":\"The season of the claim.\"}}},\"kind\":\"dev\",\"methods\":{\"claimPayout(bytes32,uint256,uint256,uint256,bytes32,bytes32[])\":{\"details\":\"Reverts with {MerkleRootNotExists} if the merkle root does not exist.Reverts with {SeasonIsPaused} if the contract is paused for that season.Reverts with {InvalidClaimAmount} if the merkle leaf is storing a zero amount.Reverts with {AlreadyClaimed} if this specific payout has already been claimed.Reverts with {InvalidProof} if the merkle proof cannot be verified.Emits a {PayoutClaimed} event.\",\"params\":{\"amount\":\"The amount of points to be claimed.\",\"depositReasonCode\":\"The deposit reason code for this claim.\",\"proof\":\"The Merkle proof of the user based on the merkle root\",\"realmId\":\"The realmId for this claim.\",\"realmIdVersion\":\"The version of the realmId for this claim.\",\"season\":\"The season to be claimed.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setMerkleRoot(bytes32,bytes32)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {SeasonNotPaused} if the season is not paused while applying an update to the root.Reverts with {InvalidSeason} if the season does not exist.Emits an {Unpaused} event.Emits a {MerkleRootSet} event.\",\"params\":{\"merkleRoot\":\"The merkle root to set.\",\"season\":\"The season to be set for th merkle root.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,uint256,uint256,uint256,bytes32,uint256)\":[{\"notice\":\"Thrown when trying to claim the same leaf more than once.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidClaimAmount(uint256)\":[{\"notice\":\"Throws when the claim amount is zero.\"}],\"InvalidProof(bytes32,uint256,uint256,uint256,bytes32,uint256)\":[{\"notice\":\"Thrown when a proof cannot be verified.\"}],\"InvalidSeason(bytes32)\":[{\"notice\":\"Throws when the season does not exists.\"}],\"MerkleRootNotExists(bytes32)\":[{\"notice\":\"Throws when the merkle root does not exist.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"SeasonIsPaused(bytes32)\":[{\"notice\":\"Throws when the season is paused.\"}],\"SeasonNotPaused(bytes32)\":[{\"notice\":\"Throws when the season is not paused.\"}]},\"events\":{\"MerkleRootSet(bytes32,bytes32)\":{\"notice\":\"Emitted when a new merkle root is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,bytes32,uint256,uint256,uint256,bytes32,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"}},\"kind\":\"user\",\"methods\":{\"claimPayout(bytes32,uint256,uint256,uint256,bytes32,bytes32[])\":{\"notice\":\"Executes the payout for a given realmId (anyone can call this function).\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setMerkleRoot(bytes32,bytes32)\":{\"notice\":\"Sets the merkle root for a new claiming period and unpauses the season.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol\":\"SeasonalCumulativeMerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/MocaPoints/interface/IRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// import {RealmId} from \\\"../realmIdContract/RealmId.sol\\\";\\n\\ninterface IRealmId {\\n    function burnCounts(uint256 realmId) external view returns (uint256);\\n\\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\\n\\n    function ownerOf(uint256 realmId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfad6e9198a7ed75d8ebb7253962413ce9e789c9d4a90b31bbf460a3f2bef217a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport {IRealmId} from \\\"../MocaPoints/interface/IRealmId.sol\\\";\\nimport {IMocaPoints} from \\\"./interface/IMocaPoints.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\n\\ncontract SeasonalCumulativeMerkleClaim is ContractOwnership {\\n    using MerkleProof for bytes32[];\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    IMocaPoints public immutable MOCA_POINTS_CONTRACT;\\n\\n    mapping(bytes32 => bool) public paused;\\n    mapping(bytes32 => bytes32) public roots;\\n    mapping(bytes32 => uint256) public nonces;\\n    mapping(bytes32 => bool) public claimed;\\n\\n    event Paused(bytes32 season);\\n    event Unpaused(bytes32 season);\\n\\n    /// @notice Emitted when a new merkle root is set.\\n    /// @param season The season that the merkle root would be set.\\n    /// @param root The new merkle root.\\n    event MerkleRootSet(bytes32 season, bytes32 root);\\n\\n    /// @notice Emitted when a payout is claimed.\\n    /// @param season The season of the claim.\\n    /// @param root The merkle root on which the claim was made.\\n    /// @param realmId The realmId of the claim.\\n    /// @param realmIdVersion The version of the realmId.\\n    /// @param amount The amount of points is claimed.\\n    /// @param depositReasonCode The deposit reason of the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    event PayoutClaimed(\\n        bytes32 indexed season,\\n        bytes32 indexed root,\\n        uint256 indexed realmId,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        bytes32 depositReasonCode,\\n        uint256 nonce\\n    );\\n\\n    /// @notice Thrown when trying to claim the same leaf more than once.\\n    /// @param season The season of the claim.\\n    /// @param realmId The realmId of the claim.\\n    /// @param realmIdVersion The version of the realmId.\\n    /// @param amount The amount of points is claimed.\\n    /// @param depositReasonCode The deposit reason of the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    error AlreadyClaimed(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode, uint256 nonce);\\n\\n    /// @notice Thrown when a proof cannot be verified.\\n    /// @param season The season of the claim.\\n    /// @param realmId The realmId of the claim.\\n    /// @param realmIdVersion The version of the realmId.\\n    /// @param amount The amount of points is claimed.\\n    /// @param depositReasonCode The deposit reason of the claim.\\n    /// @param nonce The nonce as when the claim was made.\\n    error InvalidProof(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode, uint256 nonce);\\n\\n    /// @notice Throws when the season does not exists.\\n    /// @param season The season of the claim.\\n    error InvalidSeason(bytes32 season);\\n\\n    /// @notice Throws when the merkle root does not exist.\\n    /// @param season The season of the claim.\\n    error MerkleRootNotExists(bytes32 season);\\n\\n    /// @notice Throws when the claim amount is zero.\\n    /// @param amount The amount of the claim.\\n    error InvalidClaimAmount(uint256 amount);\\n\\n    /// @notice Throws when the season is paused.\\n    /// @param season The season that is paused\\n    error SeasonIsPaused(bytes32 season);\\n\\n    /// @notice Throws when the season is not paused.\\n    /// @param season The season that is not paused.\\n    error SeasonNotPaused(bytes32 season);\\n\\n    constructor(address mocaPointsContractAddress) ContractOwnership(msg.sender) {\\n        MOCA_POINTS_CONTRACT = IMocaPoints(mocaPointsContractAddress);\\n    }\\n\\n    /// @notice Sets the merkle root for a new claiming period and unpauses the season.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {SeasonNotPaused} if the season is not paused while applying an update to the root.\\n    /// @dev Reverts with {InvalidSeason} if the season does not exist.\\n    /// @dev Emits an {Unpaused} event.\\n    /// @dev Emits a {MerkleRootSet} event.\\n    /// @param season The season to be set for th merkle root.\\n    /// @param merkleRoot The merkle root to set.\\n    function setMerkleRoot(bytes32 season, bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(msg.sender);\\n\\n        if (roots[season] != 0 && !paused[season]) {\\n            revert SeasonNotPaused(season);\\n        }\\n        if (!MOCA_POINTS_CONTRACT.seasons(season)) {\\n            revert InvalidSeason(season);\\n        }\\n\\n        roots[season] = merkleRoot;\\n        unchecked {\\n            ++nonces[season];\\n        }\\n        emit MerkleRootSet(season, merkleRoot);\\n\\n        paused[season] = false;\\n        emit Unpaused(season);\\n    }\\n\\n    /// @notice Executes the payout for a given realmId (anyone can call this function).\\n    /// @dev Reverts with {MerkleRootNotExists} if the merkle root does not exist.\\n    /// @dev Reverts with {SeasonIsPaused} if the contract is paused for that season.\\n    /// @dev Reverts with {InvalidClaimAmount} if the merkle leaf is storing a zero amount.\\n    /// @dev Reverts with {AlreadyClaimed} if this specific payout has already been claimed.\\n    /// @dev Reverts with {InvalidProof} if the merkle proof cannot be verified.\\n    /// @dev Emits a {PayoutClaimed} event.\\n    /// @param season The season to be claimed.\\n    /// @param realmId The realmId for this claim.\\n    /// @param realmIdVersion The version of the realmId for this claim.\\n    /// @param amount The amount of points to be claimed.\\n    /// @param depositReasonCode The deposit reason code for this claim.\\n    /// @param proof The Merkle proof of the user based on the merkle root\\n    function claimPayout(\\n        bytes32 season,\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        bytes32 depositReasonCode,\\n        bytes32[] calldata proof\\n    ) external {\\n        if (amount == 0) {\\n            revert InvalidClaimAmount(amount);\\n        }\\n        if (paused[season]) {\\n            revert SeasonIsPaused(season);\\n        }\\n        bytes32 currentRoot = roots[season];\\n        if (currentRoot == 0) {\\n            revert MerkleRootNotExists(season);\\n        }\\n\\n        uint256 currentNonce = nonces[season];\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(season, realmId, realmIdVersion, amount, depositReasonCode, currentNonce));\\n\\n        if (claimed[leaf]) {\\n            revert AlreadyClaimed(season, realmId, realmIdVersion, amount, depositReasonCode, currentNonce);\\n        }\\n        if (!proof.verifyCalldata(currentRoot, leaf)) {\\n            revert InvalidProof(season, realmId, realmIdVersion, amount, depositReasonCode, currentNonce);\\n        }\\n\\n        claimed[leaf] = true;\\n\\n        MOCA_POINTS_CONTRACT.deposit(season, realmId, realmIdVersion, amount, depositReasonCode);\\n\\n        emit PayoutClaimed(season, currentRoot, realmId, realmIdVersion, amount, depositReasonCode, currentNonce);\\n    }\\n}\",\"keccak256\":\"0x98c1f756c31beec895e61b6860a5fe4dba5ce6ea85516c380726dccd475fe7e7\",\"license\":\"MIT\"},\"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\ninterface IMocaPoints {\\n\\n    function seasons(bytes32) external view returns (bool);\\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) external;\\n}\",\"keccak256\":\"0x4534e096cf8379cfbfaaff704f3f2e68ade69cb1ac714635973980758ea56b3c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1567,"contract":"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol:SeasonalCumulativeMerkleClaim","label":"paused","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1571,"contract":"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol:SeasonalCumulativeMerkleClaim","label":"roots","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bytes32)"},{"astId":1575,"contract":"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol:SeasonalCumulativeMerkleClaim","label":"nonces","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":1579,"contract":"contracts/SeasonalCumulativeMerkleClaim/SeasonalCmulativeMerkleClaim.sol:SeasonalCumulativeMerkleClaim","label":"claimed","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_bytes32)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,uint256,uint256,uint256,bytes32,uint256)":[{"notice":"Thrown when trying to claim the same leaf more than once."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidClaimAmount(uint256)":[{"notice":"Throws when the claim amount is zero."}],"InvalidProof(bytes32,uint256,uint256,uint256,bytes32,uint256)":[{"notice":"Thrown when a proof cannot be verified."}],"InvalidSeason(bytes32)":[{"notice":"Throws when the season does not exists."}],"MerkleRootNotExists(bytes32)":[{"notice":"Throws when the merkle root does not exist."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"SeasonIsPaused(bytes32)":[{"notice":"Throws when the season is paused."}],"SeasonNotPaused(bytes32)":[{"notice":"Throws when the season is not paused."}]},"events":{"MerkleRootSet(bytes32,bytes32)":{"notice":"Emitted when a new merkle root is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,bytes32,uint256,uint256,uint256,bytes32,uint256)":{"notice":"Emitted when a payout is claimed."}},"kind":"user","methods":{"claimPayout(bytes32,uint256,uint256,uint256,bytes32,bytes32[])":{"notice":"Executes the payout for a given realmId (anyone can call this function)."},"owner()":{"notice":"Gets the address of the contract owner."},"setMerkleRoot(bytes32,bytes32)":{"notice":"Sets the merkle root for a new claiming period and unpauses the season."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol":{"IMocaPoints":{"abi":[{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"seasons","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit(bytes32,uint256,uint256,uint256,bytes32)":"18ee89f0","seasons(bytes32)":"4529cc1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seasons\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol\":\"IMocaPoints\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/SeasonalCumulativeMerkleClaim/interface/IMocaPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\ninterface IMocaPoints {\\n\\n    function seasons(bytes32) external view returns (bool);\\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) external;\\n}\",\"keccak256\":\"0x4534e096cf8379cfbfaaff704f3f2e68ade69cb1ac714635973980758ea56b3c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}