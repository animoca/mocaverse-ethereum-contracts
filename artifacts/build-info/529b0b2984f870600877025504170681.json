{"id":"529b0b2984f870600877025504170681","_format":"hh-sol-build-info-1","solcVersion":"0.8.21","solcLongVersion":"0.8.21+commit.d9974bed","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title Access control via roles management (events)\ninterface IAccessControlEvents {\n    /// @notice Emitted when `role` is granted to `account`.\n    /// @param role The role that has been granted.\n    /// @param account The account that has been granted the role.\n    /// @param operator The account that granted the role.\n    event RoleGranted(bytes32 role, address account, address operator);\n\n    /// @notice Emitted when `role` is revoked from `account`.\n    /// @param role The role that has been revoked.\n    /// @param account The account that has been revoked the role.\n    /// @param operator The account that revoked the role.\n    event RoleRevoked(bytes32 role, address account, address operator);\n}\n"},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC-173 Contract Ownership Standard (events)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173Events {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IAccessControlEvents} from \"./../events/IAccessControlEvents.sol\";\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl is IAccessControlEvents {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 is IERC173Events {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {IAccessControlEvents} from \"./../events/IAccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary AccessControlStorage {\n    using Address for address;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/RealmPoints/interface/IRealmId.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\n// import {RealmId} from \"../realmIdContract/RealmId.sol\";\n\ninterface IRealmId {\n    function burnCounts(uint256 realmId) external view returns (uint256);\n\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\n\n    function ownerOf(uint256 realmId) external view returns (address);\n}\n"},"contracts/RealmPoints/mock/realmIdContract/MockRealmId.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract MockRealmId {\n    function burnCounts(uint256) public pure returns (uint256) {\n        return 0;\n    }\n\n    function getTokenId(string calldata, bytes32) public pure returns (uint256) {\n        return 10;\n    }\n\n    function ownerOf(uint256) public pure returns (address) {\n        return address(0x90F79bf6EB2c4f870365E785982E1f101E93b906);\n    }\n}\n"},"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {RealmPoints} from \"../../RealmPoints.sol\";\n\ncontract MockRealmPointsUpgrade is RealmPoints {\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address realmIdContract) RealmPoints(realmIdContract) {}\n\n    function initializeV2(uint256 _newVal) public reinitializer(2) {\n        val = _newVal;\n    }\n\n    uint256 public val;\n}\n"},"contracts/RealmPoints/RealmPoints.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IRealmId} from \"./interface/IRealmId.sol\";\nimport {SignatureChecker} from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport {AccessControlStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\";\nimport {AccessControlBase} from \"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\";\nimport {ContractOwnershipBase} from \"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\n/// @title RealmPoints\n/// @notice This contract is designed for managing the point balances of RealmId.\n/// @notice Point balances are registered by realmId (verioned) by season.\n/// @notice Methods apply to the current version of the realmId if realmId version is not specified.\n/// @notice Methods support identifying the realmId by the realmId itself, or by its parent node and name.\ncontract RealmPoints is Initializable, AccessControlBase, ContractOwnershipBase, UUPSUpgradeable {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");\n\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IRealmId public immutable REALM_ID_CONTRACT;\n\n    bytes32 public currentSeason;\n    mapping(bytes32 => bool) public seasons;\n\n    mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256))) public balances; // season => realmId => realmIdVersion => balance\n\n    mapping(uint256 => uint256) public nonces; // realmId => nonce\n\n    mapping(bytes32 => bool) public allowedConsumeReasonCodes;\n\n    /// @notice Emitted when the current season is set.\n    /// @param season The new season being set.\n    event SetCurrentSeason(bytes32 season);\n\n    /// @notice Emitted when one or more reason code(s) are added to the comsume reason code mapping.\n    /// @param reasonCodes The reason codes added to the mapping.\n    event BatchAddedConsumeReasonCode(bytes32[] reasonCodes);\n\n    /// @notice Emitted when one or more reason code(s) are removed from the comsume reason code mapping.\n    /// @param reasonCodes The reason codes removed from the mapping.\n    event BatchRemovedConsumeReasonCode(bytes32[] reasonCodes);\n\n    /// @notice Emitted when an amount is deposited to a balance.\n    /// @param sender The sender of the deposit.\n    /// @param season The season of the balance deposited to.\n    /// @param reasonCode The reason code of the deposit.\n    /// @param realmId The realmId of the balance deposited to.\n    /// @param realmIdVersion The realmId version.\n    /// @param amount The amount deposited.\n    event Deposited(\n        address indexed sender,\n        bytes32 indexed season,\n        bytes32 indexed reasonCode,\n        uint256 realmId,\n        uint256 realmIdVersion,\n        uint256 amount\n    );\n\n    /// @notice Emitted when an amount is consumed from a balance.\n    /// @param realmId The realmId of the balance consumed from.\n    /// @param season The season of the balance consumed from.\n    /// @param reasonCode The reason code of the consumption.\n    /// @param operator The sender of the consumption.\n    /// @param realmIdVersion The realmId version.\n    /// @param amount The amount consumed.\n    /// @param realmIdOwner The realmId owner's address.\n    event Consumed(\n        uint256 indexed realmId,\n        bytes32 indexed season,\n        bytes32 indexed reasonCode,\n        address operator,\n        uint256 realmIdVersion,\n        uint256 amount,\n        address realmIdOwner\n    );\n\n    /// @notice Thrown at construction when the given realmId contract address is invalid.\n    /// @param addr The invalid realmId contract address.\n    error InvalidRealmIdContractAddress(address addr);\n\n    /// @notice Thrown when the given season has already been set.\n    /// @param season The season that already exists in the mapping.\n    error SeasonAlreadySet(bytes32 season);\n\n    /// @notice Thrown when the given consume reason codes array is empty.\n    error ConsumeReasonCodesArrayEmpty();\n\n    /// @notice Thrown when the given consume reason code already exists in the mapping.\n    /// @param reasonCode The reason code that already exists in the mapping.\n    error ConsumeReasonCodeAlreadyExists(bytes32 reasonCode);\n\n    /// @notice Thrown when the given reason code does not exist in the mapping.\n    /// @param reasonCode The reason code that does not exist in the mapping.\n    error ConsumeReasonCodeDoesNotExist(bytes32 reasonCode);\n\n    /// @notice Thrown when the given realmId version does not match the current realmId version.\n    /// @param realmId The given realmId.\n    /// @param realmIdVersion The given realmId version.\n    error InvalidRealmIdVersion(uint256 realmId, uint256 realmIdVersion);\n\n    /// @notice Thrown when the realmId does not have enough balance\n    /// @param realmId The given realmId.\n    /// @param requiredBalance The required balance.\n    error InsufficientBalance(uint256 realmId, uint256 requiredBalance);\n\n    /// @notice Thrown when the signer is not the realmId owner.\n    /// @param signer The incorrect signer.\n    error IncorrectSigner(address signer);\n\n    /// @notice Thrown when the signature is invalid.\n    error InvalidSignature();\n\n    /// @param realmIdContractAddress The realmId contract address.\n    /// @dev Reverts if the given address is invalid (equal to ZeroAddress).\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address realmIdContractAddress) {\n        if (realmIdContractAddress == address(0)) {\n            revert InvalidRealmIdContractAddress(realmIdContractAddress);\n        }\n        REALM_ID_CONTRACT = IRealmId(realmIdContractAddress);\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the contract with the provided realmId contract address.\n    function initialize() public initializer {\n        __UUPSUpgradeable_init();\n        ContractOwnershipStorage.layout().proxyInit(_msgSender());\n    }\n\n    /// @notice Checks whether the sender is authorized to upgrade the contract.\n    /// @dev Reverts if sender is not the contract owner.\n    function _authorizeUpgrade(address) internal view override {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n    }\n\n    /// @notice Sets the current season.\n    /// @dev Reverts if sender does not have Admin role.\n    /// @dev Reverts if the given season has already been set before.\n    /// @dev Emits a {SetCurrentSeason} event if successful.\n    /// @param season The season to set.\n    function setCurrentSeason(bytes32 season) external {\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\n        if (seasons[season]) {\n            revert SeasonAlreadySet(season);\n        }\n\n        currentSeason = season;\n        seasons[season] = true;\n        emit SetCurrentSeason(season);\n    }\n\n    /// @notice Adds one or more reason code(s) to the consume reason code mapping.\n    /// @dev Reverts if sender does not have Admin role.\n    /// @dev Reverts if the given reason codes array is empty.\n    /// @dev Reverts if any of the given reason codes already exists in the mapping.\n    /// @dev Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.\n    /// @param reasonCodes Array of reason codes to add.\n    function batchAddConsumeReasonCodes(bytes32[] calldata reasonCodes) external {\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\n        if (reasonCodes.length <= 0) {\n            revert ConsumeReasonCodesArrayEmpty();\n        }\n\n        for (uint256 i = 0; i < reasonCodes.length; i++) {\n            if (allowedConsumeReasonCodes[reasonCodes[i]]) {\n                revert ConsumeReasonCodeAlreadyExists(reasonCodes[i]);\n            }\n            allowedConsumeReasonCodes[reasonCodes[i]] = true;\n        }\n        emit BatchAddedConsumeReasonCode(reasonCodes);\n    }\n\n    /// @notice Removes one or more reason code(s) from the consume reason code mapping.\n    /// @dev Reverts if sender does not have Admin role.\n    /// @dev Reverts if the given reason codes array is empty.\n    /// @dev Reverts if any of the given reason codes do not exist in the mapping.\n    /// @dev Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.\n    /// @param reasonCodes Array of reason codes to remove.\n    function batchRemoveConsumeReasonCodes(bytes32[] calldata reasonCodes) external {\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\n        if (reasonCodes.length <= 0) {\n            revert ConsumeReasonCodesArrayEmpty();\n        }\n\n        for (uint256 i = 0; i < reasonCodes.length; i++) {\n            if (!allowedConsumeReasonCodes[reasonCodes[i]]) {\n                revert ConsumeReasonCodeDoesNotExist(reasonCodes[i]);\n            }\n            delete allowedConsumeReasonCodes[reasonCodes[i]];\n        }\n        emit BatchRemovedConsumeReasonCode(reasonCodes);\n    }\n\n    /// @notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\n    /// @dev Reverts if sender does not have Depositor role.\n    /// @dev Reverts if the realmId does not exist.\n    /// @dev Reverts if the given realmId version does not match the current realmId version.\n    /// @dev Emits a {Deposited} event if successful.\n    /// @param season The season to deposit to.\n    /// @param realmId The realmId to deposit to.\n    /// @param realmIdVersion The realmId version.\n    /// @param amount The amount to deposit.\n    /// @param depositReasonCode The reason code of the deposit.\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) public {\n        AccessControlStorage.layout().enforceHasRole(DEPOSITOR_ROLE, _msgSender());\n\n        REALM_ID_CONTRACT.ownerOf(realmId);\n        uint256 curRealmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        if (curRealmIdVersion != realmIdVersion) {\n            revert InvalidRealmIdVersion(realmId, realmIdVersion);\n        }\n\n        balances[season][realmId][realmIdVersion] += amount;\n        emit Deposited(_msgSender(), season, depositReasonCode, realmId, realmIdVersion, amount);\n    }\n\n    /// @notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\n    /// @notice The realmId is resolved from the given parent node and name.\n    /// @dev Reverts if sender does not have Depositor role.\n    /// @dev Reverts if the realmId does not exist.\n    /// @dev Reverts if the given realmId version does not match the current realmId version.\n    /// @dev Emits a {Deposited} event with msg.sender as the sender.\n    /// @param season The season to deposit to.\n    /// @param parentNode The parent node associated with the realmId.\n    /// @param name The name associated with the realmId.\n    /// @param realmIdVersion The realmId version.\n    /// @param amount The amount to deposit.\n    /// @param depositReasonCode The reason code of the deposit.\n    function deposit(\n        bytes32 season,\n        bytes32 parentNode,\n        string calldata name,\n        uint256 realmIdVersion,\n        uint256 amount,\n        bytes32 depositReasonCode\n    ) external {\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\n        deposit(season, realmId, realmIdVersion, amount, depositReasonCode);\n    }\n\n    /// @notice Called by other public functions to consume a given amount from the balance of a given realmId and version.\n    /// @notice Applies to the current season.\n    /// @dev Reverts if balance is insufficient.\n    /// @dev Reverts if the consume reason code is not allowed.\n    /// @dev Emits a {Consumed} event if the consumption is successful.\n    /// @param realmId The realmId to deposit to.\n    /// @param realmIdVersion The realmId version.\n    /// @param amount The amount to consume.\n    /// @param consumeReasonCode The reason code of the consumption.\n    /// @param owner Address of the realmId's owner.\n    function _consume(uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 consumeReasonCode, address owner) internal {\n        uint256 balance = balances[currentSeason][realmId][realmIdVersion];\n        if (balance < amount) {\n            revert InsufficientBalance(realmId, amount);\n        }\n        if (!allowedConsumeReasonCodes[consumeReasonCode]) {\n            revert ConsumeReasonCodeDoesNotExist(consumeReasonCode);\n        }\n\n        balances[currentSeason][realmId][realmIdVersion] = balance - amount;\n\n        emit Consumed(realmId, currentSeason, consumeReasonCode, _msgSender(), realmIdVersion, amount, owner);\n    }\n\n    /// @notice Called with a signature to consume a given amount from the balance of a realmId.\n    /// @notice The realmId is resolved from the given parent node and name.\n    /// @notice Applies to the current version of the realmId.\n    /// @notice Applies to the current season.\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\n    /// @dev Reverts if fails to resolve realmId's version.\n    /// @dev Reverts if signature is invalid.\n    /// @dev Reverts if fails to resolve owner of the realmId.\n    /// @dev Reverts if signer is not the realmId owner.\n    /// @dev Reverts if balance is insufficient.\n    /// @dev Reverts if the consume reason code is not allowed.\n    /// @dev Emits a {Consumed} event if the consumption is successful.\n    /// @param parentNode The parent node of the realmId.\n    /// @param name The name of the realmId.\n    /// @param amount The amount to consume.\n    /// @param consumeReasonCode The reason code of the consumption.\n    /// @param v v value of the signature.\n    /// @param s s value of the signature.\n    /// @param r r value of the signature.\n    function consume(bytes32 parentNode, string calldata name, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) external {\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\n        consume(realmId, amount, consumeReasonCode, v, r, s);\n    }\n\n    /// @notice Called with a signature to consume a given amount from the balance of a given realmId.\n    /// @notice Applies to the current version of the realmId.\n    /// @notice Applies to the current season.\n    /// @dev Reverts if failes to resolve realmId's version.\n    /// @dev Reverts if signature is invalid.\n    /// @dev Reverts if fails to resolve owner of the realmId.\n    /// @dev Reverts if signer is not the realmId owner.\n    /// @dev Reverts if balance is insufficient.\n    /// @dev Reverts if the consume reason code is not allowed.\n    /// @dev Emits a {Consumed} event if the consumption is successful.\n    /// @param realmId The realmId to consume from.\n    /// @param amount The amount to consume.\n    /// @param consumeReasonCode The reason code of the consumption.\n    /// @param v v value of the signature.\n    /// @param s s value of the signature.\n    /// @param r r value of the signature.\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) public {\n        uint256 nonce = nonces[realmId];\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        bytes32 messageHash = _preparePayload(realmId, realmIdVersion, _msgSender(), amount, nonce, consumeReasonCode);\n        bytes32 messageDigest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\n\n        address owner = REALM_ID_CONTRACT.ownerOf(realmId);\n        bytes memory signature = abi.encodePacked(r, s, v);\n        bool isValid = SignatureChecker.isValidSignatureNow(owner, messageDigest, signature);\n        if (!isValid) {\n            revert InvalidSignature();\n        }\n\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner);\n        nonces[realmId] = nonce + 1;\n    }\n\n    /// @notice Called by the realmId owner to consume a given amount from the realmId's balance.\n    /// @notice The realmId is resolved from the given parent node and name.\n    /// @notice Applies to the current version of the realmId.\n    /// @notice Applies to the current season.\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\n    /// @dev Reverts if fails to resolve owner of the realmId.\n    /// @dev Reverts if the sender is not the owner of the realmId.\n    /// @dev Reverts if fails to resolve realmId's version.\n    /// @dev Reverts if balance is insufficient.\n    /// @dev Reverts if the consume reason code is not allowed.\n    /// @dev Emits a {Consumed} event if the consumption is successful.\n    /// @param parentNode The parent node of the realmId.\n    /// @param name The name of the realmId.\n    /// @param amount The amount to consume.\n    /// @param consumeReasonCode The reason code of the consumption.\n    function consume(bytes32 parentNode, string calldata name, uint256 amount, bytes32 consumeReasonCode) external {\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\n        consume(realmId, amount, consumeReasonCode);\n    }\n\n    /// @notice Called by the realmId owner to consume a given amount from the given realmId's balance.\n    /// @notice Applies to the current version of the realmId.\n    /// @notice Applies to the current season.\n    /// @dev Reverts if fails to resolve owner of the realmId.\n    /// @dev Reverts if the sender is not the owner of the realmId.\n    /// @dev Reverts if fails to resolve realmId's version.\n    /// @dev Reverts if balance is insufficient.\n    /// @dev Reverts if the consume reason code is not allowed.\n    /// @dev Emits a {Consumed} event if the consumption is successful.\n    /// @param realmId The realmId to deposit to.\n    /// @param amount The amount to consume.\n    /// @param consumeReasonCode The reason code of the consumption.\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode) public {\n        address owner = REALM_ID_CONTRACT.ownerOf(realmId);\n        if (_msgSender() != owner) {\n            revert IncorrectSigner(_msgSender());\n        }\n\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner);\n    }\n\n    /// @notice Gets the balance of a given realmId for a specified season.\n    /// @notice Applies to the current version of the realmId.\n    /// @dev Reverts if fails to resolve realmId's version.\n    /// @param season The season.\n    /// @param realmId The realmId.\n    /// @return The balance.\n    function balanceOf(bytes32 season, uint256 realmId) external view returns (uint256) {\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        return balances[season][realmId][realmIdVersion];\n    }\n\n    /// @notice Gets the balance of a realmId for a specified season.\n    /// @notice The realmId is resolved from the given parent node and name.\n    /// @notice Applies to the current version of the realmId.\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\n    /// @dev Reverts if fails to resolve realmId's version.\n    /// @param season The season.\n    /// @param parentNode The parent node of the realmId.\n    /// @param name The name of the realmId.\n    /// @return The balance.\n    function balanceOf(bytes32 season, bytes32 parentNode, string calldata name) external view returns (uint256) {\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        return balances[season][realmId][realmIdVersion];\n    }\n\n    /// @notice Gets the balance of a given realmId.\n    /// @notice Applies to the current version of the realmId.\n    /// @notice Applies to the current season.\n    /// @dev Reverts if fails to resolve realmId's version.\n    /// @param realmId The realmId.\n    /// @return The balance.\n    function balanceOf(uint256 realmId) external view returns (uint256) {\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        return balances[currentSeason][realmId][realmIdVersion];\n    }\n\n    /// @notice Gets the balance of a realmId.\n    /// @notice The realmId is resolved from the given parent node and name.\n    /// @notice Applies to the current version of the realmId.\n    /// @notice Applies to the current season.\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\n    /// @dev Reverts if fails to resolve realmId's version.\n    /// @param parentNode The parent node of the realmId.\n    /// @param name The name of the realmId.\n    /// @return The balance.\n    function balanceOf(bytes32 parentNode, string calldata name) external view returns (uint256) {\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        return balances[currentSeason][realmId][realmIdVersion];\n    }\n\n    /// @notice Returns a payload generated from the arguments and the current season.\n    /// @param realmId The realmId.\n    /// @param realmIdVersion The realmId version.\n    /// @param amount The amount.\n    /// @param nonce The nonce.\n    /// @param reasonCode The reason code.\n    /// @return The payload.\n    function _preparePayload(\n        uint256 realmId,\n        uint256 realmIdVersion,\n        address spender,\n        uint256 amount,\n        uint256 nonce,\n        bytes32 reasonCode\n    ) internal view returns (bytes32) {\n        bytes32 payload = keccak256(abi.encodePacked(realmId, realmIdVersion, spender, amount, currentSeason, reasonCode, nonce));\n        return payload;\n    }\n\n    /// @notice Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version.\n    /// @dev Reverts if fails to resolve the realmId's version.\n    /// @param realmId The realmId.\n    /// @param amount The amount.\n    /// @param reasonCode The reason code.\n    /// @return The payload.\n    function preparePayload(uint256 realmId, address spender, uint256 amount, bytes32 reasonCode) external view returns (bytes32) {\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\n        bytes32 payload = _preparePayload(realmId, realmIdVersion, spender, amount, nonces[realmId], reasonCode);\n        return payload;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[123],"AccessControlStorage":[555],"Context":[2467],"ContractOwnershipStorage":[817],"IAccessControl":[267]},"id":124,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../../access/interfaces/IAccessControl.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":268,"src":"58:76:0","symbolAliases":[{"foreign":{"id":2,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"66:14:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":556,"src":"135:77:0","symbolAliases":[{"foreign":{"id":4,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"143:20:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":818,"src":"213:85:0","symbolAliases":[{"foreign":{"id":6,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"221:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":9,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":2468,"src":"299:66:0","symbolAliases":[{"foreign":{"id":8,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"307:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":11,"name":"IAccessControl","nameLocations":["632:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":267,"src":"632:14:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"632:14:0"},{"baseName":{"id":13,"name":"Context","nameLocations":["648:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":2467,"src":"648:7:0"},"id":14,"nodeType":"InheritanceSpecifier","src":"648:7:0"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":10,"nodeType":"StructuredDocumentation","src":"367:226:0","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":123,"linearizedBaseContracts":[123,2467,267,232],"name":"AccessControlBase","nameLocation":"611:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":18,"libraryName":{"id":15,"name":"AccessControlStorage","nameLocations":["668:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":555,"src":"668:20:0"},"nodeType":"UsingForDirective","src":"662:59:0","typeName":{"id":17,"nodeType":"UserDefinedTypeName","pathNode":{"id":16,"name":"AccessControlStorage.Layout","nameLocations":["693:20:0","714:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"693:27:0"},"referencedDeclaration":314,"src":"693:27:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":22,"libraryName":{"id":19,"name":"ContractOwnershipStorage","nameLocations":["732:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":817,"src":"732:24:0"},"nodeType":"UsingForDirective","src":"726:67:0","typeName":{"id":21,"nodeType":"UserDefinedTypeName","pathNode":{"id":20,"name":"ContractOwnershipStorage.Layout","nameLocations":["761:24:0","786:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"761:31:0"},"referencedDeclaration":586,"src":"761:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":53,"nodeType":"Block","src":"1175:198:0","statements":[{"assignments":[31],"declarations":[{"constant":false,"id":31,"mutability":"mutable","name":"operator","nameLocation":"1193:8:0","nodeType":"VariableDeclaration","scope":53,"src":"1185:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":34,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"1204:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1185:31:0"},{"expression":{"arguments":[{"id":40,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1283:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":35,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"1226:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$817_$","typeString":"type(library ContractOwnershipStorage)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":816,"src":"1226:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":39,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:22:0","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":784,"src":"1226:56:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$586_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1226:66:0"},{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"1342:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":49,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1348:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":50,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1357:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":43,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"1302:20:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"1302:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":47,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1332:9:0","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":367,"src":"1302:39:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1302:64:0"}]},"documentation":{"id":23,"nodeType":"StructuredDocumentation","src":"799:312:0","text":"@notice Grants a role to an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1125:9:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25,"mutability":"mutable","name":"role","nameLocation":"1143:4:0","nodeType":"VariableDeclaration","scope":54,"src":"1135:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":24,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1135:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"account","nameLocation":"1157:7:0","nodeType":"VariableDeclaration","scope":54,"src":"1149:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1134:31:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1175:0:0"},"scope":123,"src":"1116:257:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":85,"nodeType":"Block","src":"1754:199:0","statements":[{"assignments":[63],"declarations":[{"constant":false,"id":63,"mutability":"mutable","name":"operator","nameLocation":"1772:8:0","nodeType":"VariableDeclaration","scope":85,"src":"1764:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":66,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":64,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"1783:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1783:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1764:31:0"},{"expression":{"arguments":[{"id":72,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1862:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":67,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"1805:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$817_$","typeString":"type(library ContractOwnershipStorage)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1830:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":816,"src":"1805:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":71,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1839:22:0","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":784,"src":"1805:56:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$586_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":74,"nodeType":"ExpressionStatement","src":"1805:66:0"},{"expression":{"arguments":[{"id":80,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"1922:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":81,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1928:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":82,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1937:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":75,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"1881:20:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1902:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"1881:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":79,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1911:10:0","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":406,"src":"1881:40:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":84,"nodeType":"ExpressionStatement","src":"1881:65:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1379:310:0","text":"@notice Revokes a role from an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":86,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1703:10:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"role","nameLocation":"1722:4:0","nodeType":"VariableDeclaration","scope":86,"src":"1714:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"account","nameLocation":"1736:7:0","nodeType":"VariableDeclaration","scope":86,"src":"1728:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:31:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"1754:0:0"},"scope":123,"src":"1694:259:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[256],"body":{"id":102,"nodeType":"Block","src":"2039:79:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":97,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"2092:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":99,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":89,"src":"2106:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":92,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"2049:20:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"2049:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":96,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:12:0","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":443,"src":"2049:42:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$314_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:62:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":101,"nodeType":"ExpressionStatement","src":"2049:62:0"}]},"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"1959:30:0","text":"@inheritdoc IAccessControl"},"functionSelector":"8bb9c5bf","id":103,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2003:12:0","nodeType":"FunctionDefinition","parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"role","nameLocation":"2024:4:0","nodeType":"VariableDeclaration","scope":103,"src":"2016:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:14:0"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[],"src":"2039:0:0"},"scope":123,"src":"1994:124:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[266],"body":{"id":121,"nodeType":"Block","src":"2245:76:0","statements":[{"expression":{"arguments":[{"id":117,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"2300:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":118,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2306:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":113,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"2262:20:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2283:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"2262:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":464,"src":"2262:37:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":112,"id":120,"nodeType":"Return","src":"2255:59:0"}]},"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"2124:30:0","text":"@inheritdoc IAccessControl"},"functionSelector":"91d14854","id":122,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2168:7:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"mutability":"mutable","name":"role","nameLocation":"2184:4:0","nodeType":"VariableDeclaration","scope":122,"src":"2176:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":105,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2176:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":108,"mutability":"mutable","name":"account","nameLocation":"2198:7:0","nodeType":"VariableDeclaration","scope":122,"src":"2190:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2190:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:31:0"},"returnParameters":{"id":112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"hasRole_","nameLocation":"2235:8:0","nodeType":"VariableDeclaration","scope":122,"src":"2230:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":110,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:15:0"},"scope":123,"src":"2159:162:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":124,"src":"593:1730:0","usedErrors":[180,203],"usedEvents":[222,231]}],"src":"32:2292:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[2467],"ContractOwnershipBase":[171],"ContractOwnershipStorage":[817],"IERC173":[287]},"id":172,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":125,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":127,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":172,"sourceUnit":288,"src":"58:52:1","symbolAliases":[{"foreign":{"id":126,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":129,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":172,"sourceUnit":818,"src":"111:85:1","symbolAliases":[{"foreign":{"id":128,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":172,"sourceUnit":2468,"src":"197:66:1","symbolAliases":[{"foreign":{"id":130,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":133,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":287,"src":"586:7:1"},"id":134,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":135,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2467,"src":"595:7:1"},"id":136,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":171,"linearizedBaseContracts":[171,2467,287,243],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":140,"libraryName":{"id":137,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":817,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":139,"nodeType":"UserDefinedTypeName","pathNode":{"id":138,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"644:31:1"},"referencedDeclaration":586,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[286],"body":{"id":152,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":146,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$817_$","typeString":"type(library ContractOwnershipStorage)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":816,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":737,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$586_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":145,"id":151,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":153,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":142,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":153,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":143,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":171,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[280],"body":{"id":169,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":164,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":166,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":159,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$817_$","typeString":"type(library ContractOwnershipStorage)"}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":816,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":724,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$586_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":168,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":170,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":170,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":171,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":172,"src":"543:475:1","usedErrors":[203],"usedEvents":[242]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","exportedSymbols":{"NotRoleHolder":[180],"NotTargetContractRoleHolder":[189]},"id":190,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":173,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":174,"nodeType":"StructuredDocumentation","src":"58:165:2","text":"@notice Thrown when an account does not have the required role.\n @param role The role the caller is missing.\n @param account The account that was checked."},"errorSelector":"7aa72882","id":180,"name":"NotRoleHolder","nameLocation":"229:13:2","nodeType":"ErrorDefinition","parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"role","nameLocation":"251:4:2","nodeType":"VariableDeclaration","scope":180,"src":"243:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"243:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"account","nameLocation":"265:7:2","nodeType":"VariableDeclaration","scope":180,"src":"257:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"242:31:2"},"src":"223:51:2"},{"documentation":{"id":181,"nodeType":"StructuredDocumentation","src":"276:238:2","text":"@notice Thrown when an account does not have the required role on a target contract.\n @param targetContract The contract that was checked.\n @param role The role that was checked.\n @param account The account that was checked."},"errorSelector":"7a436c16","id":189,"name":"NotTargetContractRoleHolder","nameLocation":"520:27:2","nodeType":"ErrorDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"targetContract","nameLocation":"556:14:2","nodeType":"VariableDeclaration","scope":189,"src":"548:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"role","nameLocation":"580:4:2","nodeType":"VariableDeclaration","scope":189,"src":"572:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"572:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"account","nameLocation":"594:7:2","nodeType":"VariableDeclaration","scope":189,"src":"586:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"547:55:2"},"src":"514:89:2"}],"src":"32:572:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[196]},"id":197,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":191,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":192,"nodeType":"StructuredDocumentation","src":"58:128:3","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":196,"name":"TargetIsNotAContract","nameLocation":"192:20:3","nodeType":"ErrorDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":194,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:3","nodeType":"VariableDeclaration","scope":196,"src":"213:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:3"},"src":"186:51:3"}],"src":"32:206:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[203],"NotTargetContractOwner":[210]},"id":211,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":198,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:4"},{"documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"58:130:4","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":203,"name":"NotContractOwner","nameLocation":"194:16:4","nodeType":"ErrorDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":201,"mutability":"mutable","name":"account","nameLocation":"219:7:4","nodeType":"VariableDeclaration","scope":203,"src":"211:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":200,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:4"},"src":"188:40:4"},{"documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"230:194:4","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":210,"name":"NotTargetContractOwner","nameLocation":"430:22:4","nodeType":"ErrorDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:4","nodeType":"VariableDeclaration","scope":210,"src":"453:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"account","nameLocation":"485:7:4","nodeType":"VariableDeclaration","scope":210,"src":"477:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:4"},"src":"424:70:4"}],"src":"32:463:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol","exportedSymbols":{"IAccessControlEvents":[232]},"id":233,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":212,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"58:56:5","text":"@title Access control via roles management (events)"},"fullyImplemented":true,"id":232,"linearizedBaseContracts":[232],"name":"IAccessControlEvents","nameLocation":"124:20:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":214,"nodeType":"StructuredDocumentation","src":"151:234:5","text":"@notice Emitted when `role` is granted to `account`.\n @param role The role that has been granted.\n @param account The account that has been granted the role.\n @param operator The account that granted the role."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":222,"name":"RoleGranted","nameLocation":"396:11:5","nodeType":"EventDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"416:4:5","nodeType":"VariableDeclaration","scope":222,"src":"408:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"408:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":218,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"430:7:5","nodeType":"VariableDeclaration","scope":222,"src":"422:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"422:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":220,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"447:8:5","nodeType":"VariableDeclaration","scope":222,"src":"439:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"439:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"407:49:5"},"src":"390:67:5"},{"anonymous":false,"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"463:236:5","text":"@notice Emitted when `role` is revoked from `account`.\n @param role The role that has been revoked.\n @param account The account that has been revoked the role.\n @param operator The account that revoked the role."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":231,"name":"RoleRevoked","nameLocation":"710:11:5","nodeType":"EventDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"730:4:5","nodeType":"VariableDeclaration","scope":231,"src":"722:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"722:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":227,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"744:7:5","nodeType":"VariableDeclaration","scope":231,"src":"736:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":226,"name":"address","nodeType":"ElementaryTypeName","src":"736:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":229,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"761:8:5","nodeType":"VariableDeclaration","scope":231,"src":"753:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"721:49:5"},"src":"704:67:5"}],"scope":233,"src":"114:659:5","usedErrors":[],"usedEvents":[222,231]}],"src":"32:742:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","exportedSymbols":{"IERC173Events":[243]},"id":244,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":234,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173Events","contractDependencies":[],"contractKind":"interface","documentation":{"id":235,"nodeType":"StructuredDocumentation","src":"58:179:6","text":"@title ERC-173 Contract Ownership Standard (events)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":true,"id":243,"linearizedBaseContracts":[243],"name":"IERC173Events","nameLocation":"247:13:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"267:162:6","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":242,"name":"OwnershipTransferred","nameLocation":"440:20:6","nodeType":"EventDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"477:13:6","nodeType":"VariableDeclaration","scope":242,"src":"461:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":237,"name":"address","nodeType":"ElementaryTypeName","src":"461:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":240,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"508:8:6","nodeType":"VariableDeclaration","scope":242,"src":"492:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"492:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"460:57:6"},"src":"434:84:6"}],"scope":244,"src":"237:283:6","usedErrors":[],"usedEvents":[242]}],"src":"32:489:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","exportedSymbols":{"IAccessControl":[267],"IAccessControlEvents":[232]},"id":268,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":245,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol","file":"./../events/IAccessControlEvents.sol","id":247,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":268,"sourceUnit":233,"src":"58:74:7","symbolAliases":[{"foreign":{"id":246,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"66:20:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":249,"name":"IAccessControlEvents","nameLocations":["221:20:7"],"nodeType":"IdentifierPath","referencedDeclaration":232,"src":"221:20:7"},"id":250,"nodeType":"InheritanceSpecifier","src":"221:20:7"}],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"134:59:7","text":"@title Access control via roles management (functions)"},"fullyImplemented":false,"id":267,"linearizedBaseContracts":[267,232],"name":"IAccessControl","nameLocation":"203:14:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"248:182:7","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":256,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"444:12:7","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":253,"mutability":"mutable","name":"role","nameLocation":"465:4:7","nodeType":"VariableDeclaration","scope":256,"src":"457:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":252,"name":"bytes32","nodeType":"ElementaryTypeName","src":"457:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"456:14:7"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"479:0:7"},"scope":267,"src":"435:45:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"486:173:7","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"functionSelector":"91d14854","id":266,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"673:7:7","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"role","nameLocation":"689:4:7","nodeType":"VariableDeclaration","scope":266,"src":"681:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"681:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":261,"mutability":"mutable","name":"account","nameLocation":"703:7:7","nodeType":"VariableDeclaration","scope":266,"src":"695:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"695:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"680:31:7"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"hasRole_","nameLocation":"740:8:7","nodeType":"VariableDeclaration","scope":266,"src":"735:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":263,"name":"bool","nodeType":"ElementaryTypeName","src":"735:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"734:15:7"},"scope":267,"src":"664:86:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":268,"src":"193:559:7","usedErrors":[],"usedEvents":[222,231]}],"src":"32:721:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[287],"IERC173Events":[243]},"id":288,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":269,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":271,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":288,"sourceUnit":244,"src":"58:60:8","symbolAliases":[{"foreign":{"id":270,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"66:13:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":273,"name":"IERC173Events","nameLocations":["323:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":243,"src":"323:13:8"},"id":274,"nodeType":"InheritanceSpecifier","src":"323:13:8"}],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"120:182:8","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":287,"linearizedBaseContracts":[287,243],"name":"IERC173","nameLocation":"312:7:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":275,"nodeType":"StructuredDocumentation","src":"343:342:8","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":280,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"699:17:8","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"newOwner","nameLocation":"725:8:8","nodeType":"VariableDeclaration","scope":280,"src":"717:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":276,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"716:18:8"},"returnParameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"743:0:8"},"scope":287,"src":"690:54:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":281,"nodeType":"StructuredDocumentation","src":"750:116:8","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":286,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"880:5:8","nodeType":"FunctionDefinition","parameters":{"id":282,"nodeType":"ParameterList","parameters":[],"src":"885:2:8"},"returnParameters":{"id":285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":284,"mutability":"mutable","name":"contractOwner","nameLocation":"919:13:8","nodeType":"VariableDeclaration","scope":286,"src":"911:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"910:23:8"},"scope":287,"src":"871:63:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":288,"src":"302:634:8","usedErrors":[],"usedEvents":[242]}],"src":"32:905:8"},"id":8},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[555],"Address":[2445],"IAccessControl":[267],"IAccessControlEvents":[232],"NotRoleHolder":[180],"NotTargetContractRoleHolder":[189],"TargetIsNotAContract":[196]},"id":556,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":289,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:9"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","file":"./../errors/AccessControlErrors.sol","id":292,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":190,"src":"58:95:9","symbolAliases":[{"foreign":{"id":290,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"66:13:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":291,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"81:27:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":294,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":197,"src":"154:60:9","symbolAliases":[{"foreign":{"id":293,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"162:20:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol","file":"./../events/IAccessControlEvents.sol","id":296,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":233,"src":"215:74:9","symbolAliases":[{"foreign":{"id":295,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"223:20:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../interfaces/IAccessControl.sol","id":298,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":268,"src":"290:66:9","symbolAliases":[{"foreign":{"id":297,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"298:14:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":300,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":2446,"src":"357:66:9","symbolAliases":[{"foreign":{"id":299,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"365:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":555,"linearizedBaseContracts":[555],"name":"AccessControlStorage","nameLocation":"433:20:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":303,"libraryName":{"id":301,"name":"Address","nameLocations":["466:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2445,"src":"466:7:9"},"nodeType":"UsingForDirective","src":"460:26:9","typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"478:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":307,"libraryName":{"id":304,"name":"AccessControlStorage","nameLocations":["497:20:9"],"nodeType":"IdentifierPath","referencedDeclaration":555,"src":"497:20:9"},"nodeType":"UsingForDirective","src":"491:59:9","typeName":{"id":306,"nodeType":"UserDefinedTypeName","pathNode":{"id":305,"name":"AccessControlStorage.Layout","nameLocations":["522:20:9","543:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"522:27:9"},"referencedDeclaration":314,"src":"522:27:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":314,"members":[{"constant":false,"id":313,"mutability":"mutable","name":"roles","nameLocation":"625:5:9","nodeType":"VariableDeclaration","scope":314,"src":"580:50:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":312,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"588:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"580:44:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":311,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"599:24:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":310,"name":"bool","nodeType":"ElementaryTypeName","src":"618:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"563:6:9","nodeType":"StructDefinition","scope":555,"src":"556:81:9","visibility":"public"},{"constant":true,"id":327,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"669:19:9","nodeType":"VariableDeclaration","scope":555,"src":"643:124:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":315,"name":"bytes32","nodeType":"ElementaryTypeName","src":"643:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"717:43:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":320,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"707:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"707:54:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"699:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:9","typeDescriptions":{}}},"id":323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"699:63:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"765:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"699:67:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"691:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"691:7:9","typeDescriptions":{}}},"id":326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"691:76:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":366,"nodeType":"Block","src":"1243:177:9","statements":[{"condition":{"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1257:25:9","subExpression":{"arguments":[{"id":342,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1268:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":343,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"1274:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":340,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"1258:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:7:9","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":464,"src":"1258:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1258:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":365,"nodeType":"IfStatement","src":"1253:161:9","trueBody":{"id":364,"nodeType":"Block","src":"1284:130:9","statements":[{"expression":{"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":346,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"1298:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":350,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1300:5:9","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":313,"src":"1298:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":351,"indexExpression":{"id":348,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1306:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1298:13:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":352,"indexExpression":{"id":349,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"1312:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1298:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1323:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1298:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":355,"nodeType":"ExpressionStatement","src":"1298:29:9"},{"eventCall":{"arguments":[{"id":359,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1379:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":360,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"1385:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"1394:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":356,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1346:20:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEvents_$232_$","typeString":"type(contract IAccessControlEvents)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1367:11:9","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":222,"src":"1346:32:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1346:57:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":363,"nodeType":"EmitStatement","src":"1341:62:9"}]}}]},"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"774:369:9","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":367,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1157:9:9","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"s","nameLocation":"1182:1:9","nodeType":"VariableDeclaration","scope":367,"src":"1167:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":330,"nodeType":"UserDefinedTypeName","pathNode":{"id":329,"name":"Layout","nameLocations":["1167:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"1167:6:9"},"referencedDeclaration":314,"src":"1167:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"role","nameLocation":"1193:4:9","nodeType":"VariableDeclaration","scope":367,"src":"1185:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":332,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1185:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"account","nameLocation":"1207:7:9","nodeType":"VariableDeclaration","scope":367,"src":"1199:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"1199:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"operator","nameLocation":"1224:8:9","nodeType":"VariableDeclaration","scope":367,"src":"1216:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":336,"name":"address","nodeType":"ElementaryTypeName","src":"1216:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1166:67:9"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[],"src":"1243:0:9"},"scope":555,"src":"1148:272:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":405,"nodeType":"Block","src":"1894:177:9","statements":[{"condition":{"arguments":[{"id":382,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"1918:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":383,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1924:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":380,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"1908:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1910:7:9","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":464,"src":"1908:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1908:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":404,"nodeType":"IfStatement","src":"1904:161:9","trueBody":{"id":403,"nodeType":"Block","src":"1934:131:9","statements":[{"expression":{"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":385,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"1948:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":389,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1950:5:9","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":313,"src":"1948:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":390,"indexExpression":{"id":387,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"1956:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1948:13:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":391,"indexExpression":{"id":388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1962:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1948:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1973:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1948:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":394,"nodeType":"ExpressionStatement","src":"1948:30:9"},{"eventCall":{"arguments":[{"id":398,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"2030:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":399,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"2036:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":400,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"2045:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":395,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1997:20:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEvents_$232_$","typeString":"type(contract IAccessControlEvents)"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2018:11:9","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":231,"src":"1997:32:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1997:57:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"EmitStatement","src":"1992:62:9"}]}}]},"documentation":{"id":368,"nodeType":"StructuredDocumentation","src":"1426:367:9","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":406,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1807:10:9","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"s","nameLocation":"1833:1:9","nodeType":"VariableDeclaration","scope":406,"src":"1818:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":370,"nodeType":"UserDefinedTypeName","pathNode":{"id":369,"name":"Layout","nameLocations":["1818:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"1818:6:9"},"referencedDeclaration":314,"src":"1818:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"role","nameLocation":"1844:4:9","nodeType":"VariableDeclaration","scope":406,"src":"1836:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1836:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":375,"mutability":"mutable","name":"account","nameLocation":"1858:7:9","nodeType":"VariableDeclaration","scope":406,"src":"1850:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":374,"name":"address","nodeType":"ElementaryTypeName","src":"1850:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"operator","nameLocation":"1875:8:9","nodeType":"VariableDeclaration","scope":406,"src":"1867:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"1867:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1817:67:9"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[],"src":"1894:0:9"},"scope":555,"src":"1798:273:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":442,"nodeType":"Block","src":"2406:155:9","statements":[{"expression":{"arguments":[{"id":420,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"2433:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":421,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"2439:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":417,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"2416:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2418:14:9","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":518,"src":"2416:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2416:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":423,"nodeType":"ExpressionStatement","src":"2416:30:9"},{"expression":{"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":424,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"2456:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2458:5:9","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":313,"src":"2456:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":429,"indexExpression":{"id":426,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"2464:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2456:13:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":430,"indexExpression":{"id":427,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"2470:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2456:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2480:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2456:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":433,"nodeType":"ExpressionStatement","src":"2456:29:9"},{"eventCall":{"arguments":[{"id":437,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"2533:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":438,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"2539:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":439,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"2547:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":434,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"2500:20:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEvents_$232_$","typeString":"type(contract IAccessControlEvents)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2521:11:9","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":231,"src":"2500:32:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:54:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"EmitStatement","src":"2495:59:9"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"2077:245:9","text":"@notice Renounces a role by the sender.\n @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":443,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2336:12:9","nodeType":"FunctionDefinition","parameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"s","nameLocation":"2364:1:9","nodeType":"VariableDeclaration","scope":443,"src":"2349:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":409,"nodeType":"UserDefinedTypeName","pathNode":{"id":408,"name":"Layout","nameLocations":["2349:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"2349:6:9"},"referencedDeclaration":314,"src":"2349:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"sender","nameLocation":"2375:6:9","nodeType":"VariableDeclaration","scope":443,"src":"2367:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"2367:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"role","nameLocation":"2391:4:9","nodeType":"VariableDeclaration","scope":443,"src":"2383:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2383:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2348:48:9"},"returnParameters":{"id":416,"nodeType":"ParameterList","parameters":[],"src":"2406:0:9"},"scope":555,"src":"2327:234:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":463,"nodeType":"Block","src":"2849:46:9","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":456,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"2866:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":457,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2868:5:9","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":313,"src":"2866:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":459,"indexExpression":{"id":458,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"2874:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2866:13:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":461,"indexExpression":{"id":460,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2880:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2866:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":455,"id":462,"nodeType":"Return","src":"2859:29:9"}]},"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"2567:173:9","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"id":464,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2754:7:9","nodeType":"FunctionDefinition","parameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"s","nameLocation":"2777:1:9","nodeType":"VariableDeclaration","scope":464,"src":"2762:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":446,"nodeType":"UserDefinedTypeName","pathNode":{"id":445,"name":"Layout","nameLocations":["2762:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"2762:6:9"},"referencedDeclaration":314,"src":"2762:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"role","nameLocation":"2788:4:9","nodeType":"VariableDeclaration","scope":464,"src":"2780:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2780:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":451,"mutability":"mutable","name":"account","nameLocation":"2802:7:9","nodeType":"VariableDeclaration","scope":464,"src":"2794:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":450,"name":"address","nodeType":"ElementaryTypeName","src":"2794:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2761:49:9"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"hasRole_","nameLocation":"2839:8:9","nodeType":"VariableDeclaration","scope":464,"src":"2834:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":453,"name":"bool","nodeType":"ElementaryTypeName","src":"2834:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2833:15:9"},"scope":555,"src":"2745:150:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":493,"nodeType":"Block","src":"3340:164:9","statements":[{"condition":{"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3354:28:9","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":476,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"3355:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3370:10:9","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2133,"src":"3355:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3355:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":484,"nodeType":"IfStatement","src":"3350:77:9","trueBody":{"errorCall":{"arguments":[{"id":481,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"3412:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":480,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"3391:20:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3391:36:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":483,"nodeType":"RevertStatement","src":"3384:43:9"}},{"expression":{"arguments":[{"id":489,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"3483:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":490,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"3489:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":486,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"3459:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":485,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"3444:14:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$267_$","typeString":"type(contract IAccessControl)"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3444:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessControl_$267","typeString":"contract IAccessControl"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3475:7:9","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":266,"src":"3444:38:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3444:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":475,"id":492,"nodeType":"Return","src":"3437:60:9"}]},"documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"2901:296:9","text":"@notice Checks whether an account has a role in a target contract.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check.\n @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`."},"id":494,"implemented":true,"kind":"function","modifiers":[],"name":"hasTargetContractRole","nameLocation":"3211:21:9","nodeType":"FunctionDefinition","parameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"targetContract","nameLocation":"3241:14:9","nodeType":"VariableDeclaration","scope":494,"src":"3233:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":466,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":469,"mutability":"mutable","name":"role","nameLocation":"3265:4:9","nodeType":"VariableDeclaration","scope":494,"src":"3257:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3257:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":471,"mutability":"mutable","name":"account","nameLocation":"3279:7:9","nodeType":"VariableDeclaration","scope":494,"src":"3271:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"3271:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:55:9"},"returnParameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"hasTargetContractRole_","nameLocation":"3316:22:9","nodeType":"VariableDeclaration","scope":494,"src":"3311:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":473,"name":"bool","nodeType":"ElementaryTypeName","src":"3311:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3310:29:9"},"scope":555,"src":"3202:302:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":517,"nodeType":"Block","src":"3792:83:9","statements":[{"condition":{"id":510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3806:25:9","subExpression":{"arguments":[{"id":507,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"3817:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":508,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"3823:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":505,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"3807:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3809:7:9","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":464,"src":"3807:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":516,"nodeType":"IfStatement","src":"3802:66:9","trueBody":{"errorCall":{"arguments":[{"id":512,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"3854:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":513,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"3860:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":511,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"3840:13:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3840:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":515,"nodeType":"RevertStatement","src":"3833:35:9"}}]},"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"3510:190:9","text":"@notice Ensures that an account has a role.\n @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":518,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"3714:14:9","nodeType":"FunctionDefinition","parameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"s","nameLocation":"3744:1:9","nodeType":"VariableDeclaration","scope":518,"src":"3729:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":497,"nodeType":"UserDefinedTypeName","pathNode":{"id":496,"name":"Layout","nameLocations":["3729:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"3729:6:9"},"referencedDeclaration":314,"src":"3729:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"role","nameLocation":"3755:4:9","nodeType":"VariableDeclaration","scope":518,"src":"3747:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3747:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":502,"mutability":"mutable","name":"account","nameLocation":"3769:7:9","nodeType":"VariableDeclaration","scope":518,"src":"3761:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":501,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3728:49:9"},"returnParameters":{"id":504,"nodeType":"ParameterList","parameters":[],"src":"3792:0:9"},"scope":555,"src":"3705:170:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":541,"nodeType":"Block","src":"4294:141:9","statements":[{"condition":{"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4308:53:9","subExpression":{"arguments":[{"id":529,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"4331:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":530,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"4347:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":531,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"4353:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":528,"name":"hasTargetContractRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"4309:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4309:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":540,"nodeType":"IfStatement","src":"4304:124:9","trueBody":{"errorCall":{"arguments":[{"id":535,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"4398:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":536,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"4414:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":537,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"4420:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":534,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"4370:27:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (address,bytes32,address) pure"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4370:58:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":539,"nodeType":"RevertStatement","src":"4363:65:9"}}]},"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"3881:301:9","text":"@notice Enforces that an account has a role in a target contract.\n @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check."},"id":542,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasTargetContractRole","nameLocation":"4196:28:9","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"targetContract","nameLocation":"4233:14:9","nodeType":"VariableDeclaration","scope":542,"src":"4225:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":520,"name":"address","nodeType":"ElementaryTypeName","src":"4225:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"role","nameLocation":"4257:4:9","nodeType":"VariableDeclaration","scope":542,"src":"4249:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4249:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"account","nameLocation":"4271:7:9","nodeType":"VariableDeclaration","scope":542,"src":"4263:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"4263:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4224:55:9"},"returnParameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"4294:0:9"},"scope":555,"src":"4187:248:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":553,"nodeType":"Block","src":"4500:115:9","statements":[{"assignments":[549],"declarations":[{"constant":false,"id":549,"mutability":"mutable","name":"position","nameLocation":"4518:8:9","nodeType":"VariableDeclaration","scope":553,"src":"4510:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4510:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":551,"initialValue":{"id":550,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"4529:19:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4510:38:9"},{"AST":{"nativeSrc":"4567:42:9","nodeType":"YulBlock","src":"4567:42:9","statements":[{"nativeSrc":"4581:18:9","nodeType":"YulAssignment","src":"4581:18:9","value":{"name":"position","nativeSrc":"4591:8:9","nodeType":"YulIdentifier","src":"4591:8:9"},"variableNames":[{"name":"s.slot","nativeSrc":"4581:6:9","nodeType":"YulIdentifier","src":"4581:6:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":549,"isOffset":false,"isSlot":false,"src":"4591:8:9","valueSize":1},{"declaration":546,"isOffset":false,"isSlot":true,"src":"4581:6:9","suffix":"slot","valueSize":1}],"id":552,"nodeType":"InlineAssembly","src":"4558:51:9"}]},"id":554,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4450:6:9","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"4456:2:9"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"s","nameLocation":"4497:1:9","nodeType":"VariableDeclaration","scope":554,"src":"4482:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":545,"nodeType":"UserDefinedTypeName","pathNode":{"id":544,"name":"Layout","nameLocations":["4482:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"4482:6:9"},"referencedDeclaration":314,"src":"4482:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"4481:18:9"},"scope":555,"src":"4441:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":556,"src":"425:4192:9","usedErrors":[],"usedEvents":[]}],"src":"32:4586:9"},"id":9},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[2445],"ContractOwnershipStorage":[817],"IERC173":[287],"IERC173Events":[243],"InterfaceDetectionStorage":[935],"NotContractOwner":[203],"NotTargetContractOwner":[210],"ProxyInitialization":[991],"TargetIsNotAContract":[196]},"id":818,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":557,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":818,"sourceUnit":211,"src":"58:97:10","symbolAliases":[{"foreign":{"id":558,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"66:16:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":559,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"84:22:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":562,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":818,"sourceUnit":197,"src":"156:60:10","symbolAliases":[{"foreign":{"id":561,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"164:20:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":818,"sourceUnit":244,"src":"217:60:10","symbolAliases":[{"foreign":{"id":563,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"225:13:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":818,"sourceUnit":288,"src":"278:52:10","symbolAliases":[{"foreign":{"id":565,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"286:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":818,"sourceUnit":2446,"src":"331:66:10","symbolAliases":[{"foreign":{"id":567,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"339:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":570,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":818,"sourceUnit":992,"src":"398:84:10","symbolAliases":[{"foreign":{"id":569,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"406:19:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":572,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":818,"sourceUnit":936,"src":"483:104:10","symbolAliases":[{"foreign":{"id":571,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"491:25:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":817,"linearizedBaseContracts":[817],"name":"ContractOwnershipStorage","nameLocation":"597:24:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":575,"libraryName":{"id":573,"name":"Address","nameLocations":["634:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2445,"src":"634:7:10"},"nodeType":"UsingForDirective","src":"628:26:10","typeName":{"id":574,"name":"address","nodeType":"ElementaryTypeName","src":"646:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":579,"libraryName":{"id":576,"name":"ContractOwnershipStorage","nameLocations":["665:24:10"],"nodeType":"IdentifierPath","referencedDeclaration":817,"src":"665:24:10"},"nodeType":"UsingForDirective","src":"659:67:10","typeName":{"id":578,"nodeType":"UserDefinedTypeName","pathNode":{"id":577,"name":"ContractOwnershipStorage.Layout","nameLocations":["694:24:10","719:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"694:31:10"},"referencedDeclaration":586,"src":"694:31:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":583,"libraryName":{"id":580,"name":"InterfaceDetectionStorage","nameLocations":["737:25:10"],"nodeType":"IdentifierPath","referencedDeclaration":935,"src":"737:25:10"},"nodeType":"UsingForDirective","src":"731:69:10","typeName":{"id":582,"nodeType":"UserDefinedTypeName","pathNode":{"id":581,"name":"InterfaceDetectionStorage.Layout","nameLocations":["767:25:10","793:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":845,"src":"767:32:10"},"referencedDeclaration":845,"src":"767:32:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":586,"members":[{"constant":false,"id":585,"mutability":"mutable","name":"contractOwner","nameLocation":"838:13:10","nodeType":"VariableDeclaration","scope":586,"src":"830:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":584,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"813:6:10","nodeType":"StructDefinition","scope":817,"src":"806:52:10","visibility":"public"},{"constant":true,"id":599,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"890:19:10","nodeType":"VariableDeclaration","scope":817,"src":"864:128:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"938:47:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":592,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"928:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"928:58:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"920:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":590,"name":"uint256","nodeType":"ElementaryTypeName","src":"920:7:10","typeDescriptions":{}}},"id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:67:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"920:71:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"912:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:10","typeDescriptions":{}}},"id":598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:80:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":612,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1024:21:10","nodeType":"VariableDeclaration","scope":817,"src":"998:128:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1074:45:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":605,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1064:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:56:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1056:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:10","typeDescriptions":{}}},"id":608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:65:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1124:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1056:69:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1048:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:10","typeDescriptions":{}}},"id":611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1048:78:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":657,"nodeType":"Block","src":"1635:281:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":621,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1649:12:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1673:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:10","typeDescriptions":{}}},"id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":644,"nodeType":"IfStatement","src":"1645:166:10","trueBody":{"id":643,"nodeType":"Block","src":"1677:134:10","statements":[{"expression":{"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":627,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"1691:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1693:13:10","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":585,"src":"1691:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":630,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1709:12:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1691:30:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":632,"nodeType":"ExpressionStatement","src":"1691:30:10"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1775:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":636,"name":"address","nodeType":"ElementaryTypeName","src":"1775:7:10","typeDescriptions":{}}},"id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1775:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":640,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1787:12:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":633,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"1740:13:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$243_$","typeString":"type(contract IERC173Events)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1754:20:10","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":242,"src":"1740:34:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:60:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":642,"nodeType":"EmitStatement","src":"1735:65:10"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":651,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"1882:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$287_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$287_$","typeString":"type(contract IERC173)"}],"id":650,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1877:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1877:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$287","typeString":"type(contract IERC173)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1891:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1877:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1904:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":645,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"1820:25:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$935_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1846:6:10","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":934,"src":"1820:32:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$845_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1820:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1855:21:10","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":888,"src":"1820:56:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$845_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$845_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1820:89:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":656,"nodeType":"ExpressionStatement","src":"1820:89:10"}]},"documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"1133:423:10","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1570:15:10","nodeType":"FunctionDefinition","parameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"s","nameLocation":"1601:1:10","nodeType":"VariableDeclaration","scope":658,"src":"1586:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":615,"nodeType":"UserDefinedTypeName","pathNode":{"id":614,"name":"Layout","nameLocations":["1586:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"1586:6:10"},"referencedDeclaration":586,"src":"1586:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":618,"mutability":"mutable","name":"initialOwner","nameLocation":"1612:12:10","nodeType":"VariableDeclaration","scope":658,"src":"1604:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1585:40:10"},"returnParameters":{"id":620,"nodeType":"ParameterList","parameters":[],"src":"1635:0:10"},"scope":817,"src":"1561:355:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":680,"nodeType":"Block","src":"2581:112:10","statements":[{"expression":{"arguments":[{"id":670,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"2620:21:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2643:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":667,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"2591:19:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$991_$","typeString":"type(library ProxyInitialization)"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2611:8:10","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":990,"src":"2591:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2591:54:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":673,"nodeType":"ExpressionStatement","src":"2591:54:10"},{"expression":{"arguments":[{"id":677,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"2673:12:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":674,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"2655:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2657:15:10","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":658,"src":"2655:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$586_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2655:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"2655:31:10"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"1922:586:10","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2522:9:10","nodeType":"FunctionDefinition","parameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":662,"mutability":"mutable","name":"s","nameLocation":"2547:1:10","nodeType":"VariableDeclaration","scope":681,"src":"2532:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":661,"nodeType":"UserDefinedTypeName","pathNode":{"id":660,"name":"Layout","nameLocations":["2532:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"2532:6:10"},"referencedDeclaration":586,"src":"2532:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":664,"mutability":"mutable","name":"initialOwner","nameLocation":"2558:12:10","nodeType":"VariableDeclaration","scope":681,"src":"2550:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"2550:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2531:40:10"},"returnParameters":{"id":666,"nodeType":"ParameterList","parameters":[],"src":"2581:0:10"},"scope":817,"src":"2513:180:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":723,"nodeType":"Block","src":"3156:295:10","statements":[{"assignments":[693],"declarations":[{"constant":false,"id":693,"mutability":"mutable","name":"previousOwner","nameLocation":"3174:13:10","nodeType":"VariableDeclaration","scope":723,"src":"3166:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"3166:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":696,"initialValue":{"expression":{"id":694,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"3190:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":695,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3192:13:10","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":585,"src":"3190:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3166:39:10"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":697,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"3219:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":698,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"3229:13:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3219:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":704,"nodeType":"IfStatement","src":"3215:60:10","trueBody":{"errorCall":{"arguments":[{"id":701,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"3268:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":700,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"3251:16:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":703,"nodeType":"RevertStatement","src":"3244:31:10"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":705,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"3289:13:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":706,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"3306:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3289:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":722,"nodeType":"IfStatement","src":"3285:160:10","trueBody":{"id":721,"nodeType":"Block","src":"3316:129:10","statements":[{"expression":{"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":708,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"3330:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3332:13:10","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":585,"src":"3330:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":711,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"3348:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3330:26:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":713,"nodeType":"ExpressionStatement","src":"3330:26:10"},{"eventCall":{"arguments":[{"id":717,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"3410:13:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":718,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"3425:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":714,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"3375:13:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$243_$","typeString":"type(contract IERC173Events)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3389:20:10","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":242,"src":"3375:34:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3375:59:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":720,"nodeType":"EmitStatement","src":"3370:64:10"}]}}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"2699:364:10","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":724,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3077:17:10","nodeType":"FunctionDefinition","parameters":{"id":690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":685,"mutability":"mutable","name":"s","nameLocation":"3110:1:10","nodeType":"VariableDeclaration","scope":724,"src":"3095:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":684,"nodeType":"UserDefinedTypeName","pathNode":{"id":683,"name":"Layout","nameLocations":["3095:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"3095:6:10"},"referencedDeclaration":586,"src":"3095:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":687,"mutability":"mutable","name":"sender","nameLocation":"3121:6:10","nodeType":"VariableDeclaration","scope":724,"src":"3113:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":686,"name":"address","nodeType":"ElementaryTypeName","src":"3113:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":689,"mutability":"mutable","name":"newOwner","nameLocation":"3137:8:10","nodeType":"VariableDeclaration","scope":724,"src":"3129:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":688,"name":"address","nodeType":"ElementaryTypeName","src":"3129:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3094:52:10"},"returnParameters":{"id":691,"nodeType":"ParameterList","parameters":[],"src":"3156:0:10"},"scope":817,"src":"3068:383:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":736,"nodeType":"Block","src":"3657:39:10","statements":[{"expression":{"expression":{"id":733,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"3674:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":734,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3676:13:10","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":585,"src":"3674:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":732,"id":735,"nodeType":"Return","src":"3667:22:10"}]},"documentation":{"id":725,"nodeType":"StructuredDocumentation","src":"3457:116:10","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":737,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3587:5:10","nodeType":"FunctionDefinition","parameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"s","nameLocation":"3608:1:10","nodeType":"VariableDeclaration","scope":737,"src":"3593:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":727,"nodeType":"UserDefinedTypeName","pathNode":{"id":726,"name":"Layout","nameLocations":["3593:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"3593:6:10"},"referencedDeclaration":586,"src":"3593:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3592:18:10"},"returnParameters":{"id":732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":731,"mutability":"mutable","name":"contractOwner","nameLocation":"3642:13:10","nodeType":"VariableDeclaration","scope":737,"src":"3634:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":730,"name":"address","nodeType":"ElementaryTypeName","src":"3634:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3633:23:10"},"scope":817,"src":"3578:118:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":764,"nodeType":"Block","src":"4092:153:10","statements":[{"condition":{"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4106:28:10","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":747,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"4107:14:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4122:10:10","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2133,"src":"4107:25:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4107:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":755,"nodeType":"IfStatement","src":"4102:77:10","trueBody":{"errorCall":{"arguments":[{"id":752,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"4164:14:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":751,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"4143:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4143:36:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":754,"nodeType":"RevertStatement","src":"4136:43:10"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":757,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"4204:14:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":756,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"4196:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$287_$","typeString":"type(contract IERC173)"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4196:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$287","typeString":"contract IERC173"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4220:5:10","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":286,"src":"4196:29:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4196:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":761,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"4231:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4196:42:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":746,"id":763,"nodeType":"Return","src":"4189:49:10"}]},"documentation":{"id":738,"nodeType":"StructuredDocumentation","src":"3702:261:10","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":765,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3977:21:10","nodeType":"FunctionDefinition","parameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":740,"mutability":"mutable","name":"targetContract","nameLocation":"4007:14:10","nodeType":"VariableDeclaration","scope":765,"src":"3999:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"3999:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":742,"mutability":"mutable","name":"account","nameLocation":"4031:7:10","nodeType":"VariableDeclaration","scope":765,"src":"4023:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":741,"name":"address","nodeType":"ElementaryTypeName","src":"4023:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3998:41:10"},"returnParameters":{"id":746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4068:22:10","nodeType":"VariableDeclaration","scope":765,"src":"4063:27:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":744,"name":"bool","nodeType":"ElementaryTypeName","src":"4063:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4062:29:10"},"scope":817,"src":"3968:277:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":783,"nodeType":"Block","src":"4516:81:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":774,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"4530:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":775,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":769,"src":"4541:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":776,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4543:13:10","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":585,"src":"4541:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4530:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":782,"nodeType":"IfStatement","src":"4526:64:10","trueBody":{"errorCall":{"arguments":[{"id":779,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"4582:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":778,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"4565:16:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4565:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":781,"nodeType":"RevertStatement","src":"4558:32:10"}}]},"documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"4251:179:10","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":784,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4444:22:10","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"s","nameLocation":"4482:1:10","nodeType":"VariableDeclaration","scope":784,"src":"4467:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":768,"nodeType":"UserDefinedTypeName","pathNode":{"id":767,"name":"Layout","nameLocations":["4467:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"4467:6:10"},"referencedDeclaration":586,"src":"4467:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":771,"mutability":"mutable","name":"account","nameLocation":"4493:7:10","nodeType":"VariableDeclaration","scope":784,"src":"4485:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":770,"name":"address","nodeType":"ElementaryTypeName","src":"4485:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4466:35:10"},"returnParameters":{"id":773,"nodeType":"ParameterList","parameters":[],"src":"4516:0:10"},"scope":817,"src":"4435:162:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":803,"nodeType":"Block","src":"4957:124:10","statements":[{"condition":{"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4971:47:10","subExpression":{"arguments":[{"id":793,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"4994:14:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":794,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"5010:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":792,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"4972:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4972:46:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":802,"nodeType":"IfStatement","src":"4967:107:10","trueBody":{"errorCall":{"arguments":[{"id":798,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"5050:14:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":799,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"5066:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":797,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"5027:22:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5027:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":801,"nodeType":"RevertStatement","src":"5020:54:10"}}]},"documentation":{"id":785,"nodeType":"StructuredDocumentation","src":"4603:256:10","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":804,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4873:28:10","nodeType":"FunctionDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"mutability":"mutable","name":"targetContract","nameLocation":"4910:14:10","nodeType":"VariableDeclaration","scope":804,"src":"4902:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":786,"name":"address","nodeType":"ElementaryTypeName","src":"4902:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":789,"mutability":"mutable","name":"account","nameLocation":"4934:7:10","nodeType":"VariableDeclaration","scope":804,"src":"4926:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":788,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4901:41:10"},"returnParameters":{"id":791,"nodeType":"ParameterList","parameters":[],"src":"4957:0:10"},"scope":817,"src":"4864:217:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":815,"nodeType":"Block","src":"5146:115:10","statements":[{"assignments":[811],"declarations":[{"constant":false,"id":811,"mutability":"mutable","name":"position","nameLocation":"5164:8:10","nodeType":"VariableDeclaration","scope":815,"src":"5156:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":813,"initialValue":{"id":812,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"5175:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5156:38:10"},{"AST":{"nativeSrc":"5213:42:10","nodeType":"YulBlock","src":"5213:42:10","statements":[{"nativeSrc":"5227:18:10","nodeType":"YulAssignment","src":"5227:18:10","value":{"name":"position","nativeSrc":"5237:8:10","nodeType":"YulIdentifier","src":"5237:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"5227:6:10","nodeType":"YulIdentifier","src":"5227:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":811,"isOffset":false,"isSlot":false,"src":"5237:8:10","valueSize":1},{"declaration":808,"isOffset":false,"isSlot":true,"src":"5227:6:10","suffix":"slot","valueSize":1}],"id":814,"nodeType":"InlineAssembly","src":"5204:51:10"}]},"id":816,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5096:6:10","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[],"src":"5102:2:10"},"returnParameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"s","nameLocation":"5143:1:10","nodeType":"VariableDeclaration","scope":816,"src":"5128:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":807,"nodeType":"UserDefinedTypeName","pathNode":{"id":806,"name":"Layout","nameLocations":["5128:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"5128:6:10"},"referencedDeclaration":586,"src":"5128:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5127:18:10"},"scope":817,"src":"5087:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":818,"src":"589:4674:10","usedErrors":[],"usedEvents":[]}],"src":"32:5232:10"},"id":10},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[822]},"id":823,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":819,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:11"},{"documentation":{"id":820,"nodeType":"StructuredDocumentation","src":"58:68:11","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":822,"name":"IllegalInterfaceId","nameLocation":"132:18:11","nodeType":"ErrorDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[],"src":"150:2:11"},"src":"126:27:11"}],"src":"32:122:11"},"id":11},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[834]},"id":835,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":824,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":825,"nodeType":"StructuredDocumentation","src":"58:173:12","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":834,"linearizedBaseContracts":[834],"name":"IERC165","nameLocation":"241:7:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"255:340:12","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":833,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:12","nodeType":"FunctionDefinition","parameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:12","nodeType":"VariableDeclaration","scope":833,"src":"627:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":827,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:12"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"supported","nameLocation":"675:9:12","nodeType":"VariableDeclaration","scope":833,"src":"670:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":830,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:12"},"scope":834,"src":"600:86:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":835,"src":"231:457:12","usedErrors":[],"usedEvents":[]}],"src":"32:657:12"},"id":12},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[834],"IllegalInterfaceId":[822],"InterfaceDetectionStorage":[935]},"id":936,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":836,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":838,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":936,"sourceUnit":823,"src":"58:76:13","symbolAliases":[{"foreign":{"id":837,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"66:18:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":840,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":936,"sourceUnit":835,"src":"135:52:13","symbolAliases":[{"foreign":{"id":839,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"143:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":935,"linearizedBaseContracts":[935],"name":"InterfaceDetectionStorage","nameLocation":"197:25:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":845,"members":[{"constant":false,"id":844,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:13","nodeType":"VariableDeclaration","scope":845,"src":"253:43:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":843,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":841,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":842,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:13","nodeType":"StructDefinition","scope":935,"src":"229:74:13","visibility":"public"},{"constant":true,"id":858,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:13","nodeType":"VariableDeclaration","scope":935,"src":"309:136:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":846,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":851,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":849,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:13","typeDescriptions":{}}},"id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":847,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:13","typeDescriptions":{}}},"id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":861,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:13","nodeType":"VariableDeclaration","scope":935,"src":"452:58:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":859,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:13","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":887,"nodeType":"Block","src":"867:141:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":872,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"881:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":873,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"896:20:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":878,"nodeType":"IfStatement","src":"877:68:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":875,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"925:18:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":877,"nodeType":"RevertStatement","src":"918:27:13"}},{"expression":{"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":879,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"955:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":882,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:13","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":844,"src":"955:21:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":883,"indexExpression":{"id":881,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"977:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":884,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"992:9:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":886,"nodeType":"ExpressionStatement","src":"955:46:13"}]},"documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"517:251:13","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":888,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:13","nodeType":"FunctionDefinition","parameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"s","nameLocation":"819:1:13","nodeType":"VariableDeclaration","scope":888,"src":"804:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":864,"nodeType":"UserDefinedTypeName","pathNode":{"id":863,"name":"Layout","nameLocations":["804:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":845,"src":"804:6:13"},"referencedDeclaration":845,"src":"804:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:13","nodeType":"VariableDeclaration","scope":888,"src":"822:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":866,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":869,"mutability":"mutable","name":"supported","nameLocation":"847:9:13","nodeType":"VariableDeclaration","scope":888,"src":"842:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":868,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:13"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[],"src":"867:0:13"},"scope":935,"src":"773:235:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":921,"nodeType":"Block","src":"1463:236:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":899,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"1477:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":900,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1492:20:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":905,"nodeType":"IfStatement","src":"1473:78:13","trueBody":{"id":904,"nodeType":"Block","src":"1514:37:13","statements":[{"expression":{"hexValue":"66616c7365","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":898,"id":903,"nodeType":"Return","src":"1528:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":906,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"1564:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":908,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"1584:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$834_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$834_$","typeString":"type(contract IERC165)"}],"id":907,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$834","typeString":"type(contract IERC165)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":915,"nodeType":"IfStatement","src":"1560:82:13","trueBody":{"id":914,"nodeType":"Block","src":"1606:36:13","statements":[{"expression":{"hexValue":"74727565","id":912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":898,"id":913,"nodeType":"Return","src":"1620:11:13"}]}},{"expression":{"baseExpression":{"expression":{"id":916,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"1658:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":917,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:13","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":844,"src":"1658:21:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":919,"indexExpression":{"id":918,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"1680:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":898,"id":920,"nodeType":"Return","src":"1651:41:13"}]},"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"1014:340:13","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":922,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:13","nodeType":"FunctionDefinition","parameters":{"id":895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"s","nameLocation":"1401:1:13","nodeType":"VariableDeclaration","scope":922,"src":"1386:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":891,"nodeType":"UserDefinedTypeName","pathNode":{"id":890,"name":"Layout","nameLocations":["1386:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":845,"src":"1386:6:13"},"referencedDeclaration":845,"src":"1386:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:13","nodeType":"VariableDeclaration","scope":922,"src":"1404:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":893,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:13"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"supported","nameLocation":"1452:9:13","nodeType":"VariableDeclaration","scope":922,"src":"1447:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":896,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:13"},"scope":935,"src":"1359:340:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":933,"nodeType":"Block","src":"1764:115:13","statements":[{"assignments":[929],"declarations":[{"constant":false,"id":929,"mutability":"mutable","name":"position","nameLocation":"1782:8:13","nodeType":"VariableDeclaration","scope":933,"src":"1774:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":928,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":931,"initialValue":{"id":930,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"1793:19:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:13"},{"AST":{"nativeSrc":"1831:42:13","nodeType":"YulBlock","src":"1831:42:13","statements":[{"nativeSrc":"1845:18:13","nodeType":"YulAssignment","src":"1845:18:13","value":{"name":"position","nativeSrc":"1855:8:13","nodeType":"YulIdentifier","src":"1855:8:13"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:13","nodeType":"YulIdentifier","src":"1845:6:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":929,"isOffset":false,"isSlot":false,"src":"1855:8:13","valueSize":1},{"declaration":926,"isOffset":false,"isSlot":true,"src":"1845:6:13","suffix":"slot","valueSize":1}],"id":932,"nodeType":"InlineAssembly","src":"1822:51:13"}]},"id":934,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:13","nodeType":"FunctionDefinition","parameters":{"id":923,"nodeType":"ParameterList","parameters":[],"src":"1720:2:13"},"returnParameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":926,"mutability":"mutable","name":"s","nameLocation":"1761:1:13","nodeType":"VariableDeclaration","scope":934,"src":"1746:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":925,"nodeType":"UserDefinedTypeName","pathNode":{"id":924,"name":"Layout","nameLocations":["1746:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":845,"src":"1746:6:13"},"referencedDeclaration":845,"src":"1746:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$845_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:13"},"scope":935,"src":"1705:174:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":936,"src":"189:1692:13","usedErrors":[],"usedEvents":[]}],"src":"32:1850:13"},"id":13},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[944]},"id":945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":937,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:14"},{"documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"58:179:14","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":944,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:14","nodeType":"ErrorDefinition","parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:14","nodeType":"VariableDeclaration","scope":944,"src":"277:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:14","nodeType":"VariableDeclaration","scope":944,"src":"299:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:14"},"src":"237:80:14"}],"src":"32:286:14"},"id":14},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[944],"ProxyInitialization":[991],"StorageSlot":[2527]},"id":992,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":946,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:15"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":992,"sourceUnit":945,"src":"58:92:15","symbolAliases":[{"foreign":{"id":947,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"66:33:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":950,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":992,"sourceUnit":2528,"src":"151:74:15","symbolAliases":[{"foreign":{"id":949,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"159:11:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"227:92:15","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":991,"linearizedBaseContracts":[991],"name":"ProxyInitialization","nameLocation":"327:19:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":989,"nodeType":"Block","src":"735:294:15","statements":[{"assignments":[963],"declarations":[{"constant":false,"id":963,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:15","nodeType":"VariableDeclaration","scope":989,"src":"745:46:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2482_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":962,"nodeType":"UserDefinedTypeName","pathNode":{"id":961,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:15","757:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2482,"src":"745:23:15"},"referencedDeclaration":2482,"src":"745:23:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2482_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":968,"initialValue":{"arguments":[{"id":966,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"821:11:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":964,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"794:11:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2527_$","typeString":"type(library StorageSlot)"}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:15","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2526,"src":"794:26:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2482_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2482_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:15"},{"assignments":[970],"declarations":[{"constant":false,"id":970,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:15","nodeType":"VariableDeclaration","scope":989,"src":"843:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":973,"initialValue":{"expression":{"id":971,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"866:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2482_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:15","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2481,"src":"866:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"900:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":975,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"916:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":982,"nodeType":"IfStatement","src":"896:88:15","trueBody":{"errorCall":{"arguments":[{"id":978,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"964:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":979,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"978:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":977,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"930:33:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":981,"nodeType":"RevertStatement","src":"923:61:15"}},{"expression":{"id":987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":983,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"994:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2482_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":985,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:15","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2481,"src":"994:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":986,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"1017:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":988,"nodeType":"ExpressionStatement","src":"994:28:15"}]},"documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"353:314:15","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":990,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:15","nodeType":"FunctionDefinition","parameters":{"id":957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:15","nodeType":"VariableDeclaration","scope":990,"src":"690:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":953,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":956,"mutability":"mutable","name":"phase","nameLocation":"719:5:15","nodeType":"VariableDeclaration","scope":990,"src":"711:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:15"},"returnParameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"735:0:15"},"scope":991,"src":"672:357:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":992,"src":"319:712:15","usedErrors":[],"usedEvents":[]}],"src":"32:1000:15"},"id":15},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[1012]},"id":1013,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":993,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"132:133:16","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":1012,"linearizedBaseContracts":[1012],"name":"IERC1967Upgradeable","nameLocation":"276:19:16","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"302:68:16","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":999,"name":"Upgraded","nameLocation":"381:8:16","nodeType":"EventDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:16","nodeType":"VariableDeclaration","scope":999,"src":"390:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":996,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:16"},"src":"375:47:16"},{"anonymous":false,"documentation":{"id":1000,"nodeType":"StructuredDocumentation","src":"428:67:16","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":1006,"name":"AdminChanged","nameLocation":"506:12:16","nodeType":"EventDefinition","parameters":{"id":1005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1002,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:16","nodeType":"VariableDeclaration","scope":1006,"src":"519:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1004,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:16","nodeType":"VariableDeclaration","scope":1006,"src":"542:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:16"},"src":"500:60:16"},{"anonymous":false,"documentation":{"id":1007,"nodeType":"StructuredDocumentation","src":"566:59:16","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":1011,"name":"BeaconUpgraded","nameLocation":"636:14:16","nodeType":"EventDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:16","nodeType":"VariableDeclaration","scope":1011,"src":"651:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1008,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:16"},"src":"630:45:16"}],"scope":1013,"src":"266:411:16","usedErrors":[],"usedEvents":[999,1006,1011]}],"src":"107:571:16"},"id":16},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[1022]},"id":1023,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1014,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1015,"nodeType":"StructuredDocumentation","src":"138:203:17","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":1022,"linearizedBaseContracts":[1022],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1016,"nodeType":"StructuredDocumentation","src":"387:438:17","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":1021,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:17","nodeType":"FunctionDefinition","parameters":{"id":1017,"nodeType":"ParameterList","parameters":[],"src":"852:2:17"},"returnParameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1021,"src":"878:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:17"},"scope":1022,"src":"830:57:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1023,"src":"342:547:17","usedErrors":[],"usedEvents":[]}],"src":"113:777:17"},"id":17},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1991],"ERC1967UpgradeUpgradeable":[1346],"IBeaconUpgradeable":[1356],"IERC1822ProxiableUpgradeable":[1022],"IERC1967Upgradeable":[1012],"Initializable":[1525],"StorageSlotUpgradeable":[2101]},"id":1347,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1024,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:18"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":1025,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1357,"src":"141:42:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":1026,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1013,"src":"184:50:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":1027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1023,"src":"235:56:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":1028,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1992,"src":"292:44:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":1029,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":2102,"src":"337:48:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":1030,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1347,"sourceUnit":1526,"src":"386:36:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1032,"name":"Initializable","nameLocations":["656:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":1525,"src":"656:13:18"},"id":1033,"nodeType":"InheritanceSpecifier","src":"656:13:18"},{"baseName":{"id":1034,"name":"IERC1967Upgradeable","nameLocations":["671:19:18"],"nodeType":"IdentifierPath","referencedDeclaration":1012,"src":"671:19:18"},"id":1035,"nodeType":"InheritanceSpecifier","src":"671:19:18"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1031,"nodeType":"StructuredDocumentation","src":"424:184:18","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":1346,"linearizedBaseContracts":[1346,1012,1525],"name":"ERC1967UpgradeUpgradeable","nameLocation":"627:25:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":1040,"nodeType":"Block","src":"756:7:18","statements":[]},"id":1041,"implemented":true,"kind":"function","modifiers":[{"id":1038,"kind":"modifierInvocation","modifierName":{"id":1037,"name":"onlyInitializing","nameLocations":["739:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"739:16:18"},"nodeType":"ModifierInvocation","src":"739:16:18"}],"name":"__ERC1967Upgrade_init","nameLocation":"706:21:18","nodeType":"FunctionDefinition","parameters":{"id":1036,"nodeType":"ParameterList","parameters":[],"src":"727:2:18"},"returnParameters":{"id":1039,"nodeType":"ParameterList","parameters":[],"src":"756:0:18"},"scope":1346,"src":"697:66:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1046,"nodeType":"Block","src":"838:7:18","statements":[]},"id":1047,"implemented":true,"kind":"function","modifiers":[{"id":1044,"kind":"modifierInvocation","modifierName":{"id":1043,"name":"onlyInitializing","nameLocations":["821:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"821:16:18"},"nodeType":"ModifierInvocation","src":"821:16:18"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"778:31:18","nodeType":"FunctionDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[],"src":"809:2:18"},"returnParameters":{"id":1045,"nodeType":"ParameterList","parameters":[],"src":"838:0:18"},"scope":1346,"src":"769:76:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":1050,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"954:14:18","nodeType":"VariableDeclaration","scope":1346,"src":"929:108:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"929:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":1049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"971:66:18","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":1051,"nodeType":"StructuredDocumentation","src":"1044:214:18","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":1054,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1289:20:18","nodeType":"VariableDeclaration","scope":1346,"src":"1263:115:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":1053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1312:66:18","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":1066,"nodeType":"Block","src":"1519:89:18","statements":[{"expression":{"expression":{"arguments":[{"id":1062,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"1574:20:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1060,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1536:22:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2101_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1559:14:18","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"1536:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1997_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:59:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1596:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"1536:65:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1059,"id":1065,"nodeType":"Return","src":"1529:72:18"}]},"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"1385:67:18","text":" @dev Returns the current implementation address."},"id":1067,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1466:18:18","nodeType":"FunctionDefinition","parameters":{"id":1056,"nodeType":"ParameterList","parameters":[],"src":"1484:2:18"},"returnParameters":{"id":1059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1067,"src":"1510:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1057,"name":"address","nodeType":"ElementaryTypeName","src":"1510:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1509:9:18"},"scope":1346,"src":"1457:151:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1090,"nodeType":"Block","src":"1762:218:18","statements":[{"expression":{"arguments":[{"arguments":[{"id":1076,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"1810:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1074,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"1780:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1991_$","typeString":"type(library AddressUpgradeable)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:10:18","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1679,"src":"1780:29:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1780:48:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1830:47:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":1073,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1772:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1080,"nodeType":"ExpressionStatement","src":"1772:106:18"},{"expression":{"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1084,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"1926:20:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1081,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1888:22:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2101_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1911:14:18","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"1888:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1997_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:59:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1086,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1948:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"1888:65:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1087,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"1956:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1888:85:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1089,"nodeType":"ExpressionStatement","src":"1888:85:18"}]},"documentation":{"id":1068,"nodeType":"StructuredDocumentation","src":"1614:80:18","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":1091,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1708:18:18","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1070,"mutability":"mutable","name":"newImplementation","nameLocation":"1735:17:18","nodeType":"VariableDeclaration","scope":1091,"src":"1727:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"1727:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1726:27:18"},"returnParameters":{"id":1072,"nodeType":"ParameterList","parameters":[],"src":"1762:0:18"},"scope":1346,"src":"1699:281:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1105,"nodeType":"Block","src":"2142:96:18","statements":[{"expression":{"arguments":[{"id":1098,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"2171:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1097,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"2152:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2152:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1100,"nodeType":"ExpressionStatement","src":"2152:37:18"},{"eventCall":{"arguments":[{"id":1102,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"2213:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1101,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2204:8:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1104,"nodeType":"EmitStatement","src":"2199:32:18"}]},"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"1986:95:18","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":1106,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2095:10:18","nodeType":"FunctionDefinition","parameters":{"id":1095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"mutability":"mutable","name":"newImplementation","nameLocation":"2114:17:18","nodeType":"VariableDeclaration","scope":1106,"src":"2106:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"2106:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2105:27:18"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[],"src":"2142:0:18"},"scope":1346,"src":"2086:152:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1135,"nodeType":"Block","src":"2470:178:18","statements":[{"expression":{"arguments":[{"id":1117,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"2491:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1116,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"2480:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2480:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1119,"nodeType":"ExpressionStatement","src":"2480:29:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1120,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2523:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2528:6:18","memberName":"length","nodeType":"MemberAccess","src":"2523:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2523:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1124,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2542:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2523:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1134,"nodeType":"IfStatement","src":"2519:123:18","trueBody":{"id":1133,"nodeType":"Block","src":"2553:89:18","statements":[{"expression":{"arguments":[{"id":1129,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"2607:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1130,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2626:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1126,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"2567:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1991_$","typeString":"type(library AddressUpgradeable)"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:20:18","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1878,"src":"2567:39:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:64:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1132,"nodeType":"ExpressionStatement","src":"2567:64:18"}]}}]},"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"2244:123:18","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2381:17:18","nodeType":"FunctionDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"newImplementation","nameLocation":"2407:17:18","nodeType":"VariableDeclaration","scope":1136,"src":"2399:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"data","nameLocation":"2439:4:18","nodeType":"VariableDeclaration","scope":1136,"src":"2426:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1110,"name":"bytes","nodeType":"ElementaryTypeName","src":"2426:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"forceCall","nameLocation":"2450:9:18","nodeType":"VariableDeclaration","scope":1136,"src":"2445:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1112,"name":"bool","nodeType":"ElementaryTypeName","src":"2445:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2398:62:18"},"returnParameters":{"id":1115,"nodeType":"ParameterList","parameters":[],"src":"2470:0:18"},"scope":1346,"src":"2372:276:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1188,"nodeType":"Block","src":"2922:842:18","statements":[{"condition":{"expression":{"arguments":[{"id":1148,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"3274:14:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1146,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"3236:22:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2101_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:14:18","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":2034,"src":"3236:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2000_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3236:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2000_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":1150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3290:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1999,"src":"3236:59:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1186,"nodeType":"Block","src":"3365:393:18","statements":[{"clauses":[{"block":{"id":1171,"nodeType":"Block","src":"3470:115:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"3496:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1166,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"3504:20:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3496:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3526:43:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":1164,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3488:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3488:82:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"ExpressionStatement","src":"3488:82:18"}]},"errorName":"","id":1172,"nodeType":"TryCatchClause","parameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"slot","nameLocation":"3464:4:18","nodeType":"VariableDeclaration","scope":1172,"src":"3456:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3456:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3455:14:18"},"src":"3447:138:18"},{"block":{"id":1177,"nodeType":"Block","src":"3592:89:18","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":1174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3617:48:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":1173,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3610:6:18","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3610:56:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1176,"nodeType":"ExpressionStatement","src":"3610:56:18"}]},"errorName":"","id":1178,"nodeType":"TryCatchClause","src":"3586:95:18"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1157,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"3412:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1156,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"3383:28:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$1022_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$1022","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:13:18","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":1021,"src":"3383:61:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:63:18","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1179,"nodeType":"TryStatement","src":"3379:302:18"},{"expression":{"arguments":[{"id":1181,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"3712:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1182,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"3731:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1183,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"3737:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1180,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"3694:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3694:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1185,"nodeType":"ExpressionStatement","src":"3694:53:18"}]},"id":1187,"nodeType":"IfStatement","src":"3232:526:18","trueBody":{"id":1155,"nodeType":"Block","src":"3297:62:18","statements":[{"expression":{"arguments":[{"id":1152,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"3330:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1151,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"3311:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3311:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1154,"nodeType":"ExpressionStatement","src":"3311:37:18"}]}}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"2654:161:18","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":1189,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2829:21:18","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"newImplementation","nameLocation":"2859:17:18","nodeType":"VariableDeclaration","scope":1189,"src":"2851:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"2851:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"data","nameLocation":"2891:4:18","nodeType":"VariableDeclaration","scope":1189,"src":"2878:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1140,"name":"bytes","nodeType":"ElementaryTypeName","src":"2878:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"forceCall","nameLocation":"2902:9:18","nodeType":"VariableDeclaration","scope":1189,"src":"2897:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1142,"name":"bool","nodeType":"ElementaryTypeName","src":"2897:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2850:62:18"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[],"src":"2922:0:18"},"scope":1346,"src":"2820:944:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":1190,"nodeType":"StructuredDocumentation","src":"3770:189:18","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":1193,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3990:11:18","nodeType":"VariableDeclaration","scope":1346,"src":"3964:106:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3964:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4004:66:18","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":1205,"nodeType":"Block","src":"4185:80:18","statements":[{"expression":{"expression":{"arguments":[{"id":1201,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"4240:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1199,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"4202:22:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2101_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4225:14:18","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"4202:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1997_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4202:50:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4253:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"4202:56:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1198,"id":1204,"nodeType":"Return","src":"4195:63:18"}]},"documentation":{"id":1194,"nodeType":"StructuredDocumentation","src":"4077:50:18","text":" @dev Returns the current admin."},"id":1206,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4141:9:18","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[],"src":"4150:2:18"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1206,"src":"4176:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4175:9:18"},"scope":1346,"src":"4132:133:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1231,"nodeType":"Block","src":"4392:167:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1213,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"4410:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4430:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4422:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"4422:7:18","typeDescriptions":{}}},"id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4422:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4410:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":1219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4434:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":1212,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4402:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4402:73:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1221,"nodeType":"ExpressionStatement","src":"4402:73:18"},{"expression":{"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1225,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"4523:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1222,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"4485:22:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2101_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4508:14:18","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"4485:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1997_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4485:50:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4536:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"4485:56:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1228,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"4544:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4485:67:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1230,"nodeType":"ExpressionStatement","src":"4485:67:18"}]},"documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"4271:71:18","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":1232,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4356:9:18","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1209,"mutability":"mutable","name":"newAdmin","nameLocation":"4374:8:18","nodeType":"VariableDeclaration","scope":1232,"src":"4366:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4365:18:18"},"returnParameters":{"id":1211,"nodeType":"ParameterList","parameters":[],"src":"4392:0:18"},"scope":1346,"src":"4347:212:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1248,"nodeType":"Block","src":"4719:86:18","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1239,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"4747:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1241,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"4760:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1238,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"4734:12:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1243,"nodeType":"EmitStatement","src":"4729:40:18"},{"expression":{"arguments":[{"id":1245,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"4789:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1244,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"4779:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4779:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1247,"nodeType":"ExpressionStatement","src":"4779:19:18"}]},"documentation":{"id":1233,"nodeType":"StructuredDocumentation","src":"4565:100:18","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":1249,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4679:12:18","nodeType":"FunctionDefinition","parameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"newAdmin","nameLocation":"4700:8:18","nodeType":"VariableDeclaration","scope":1249,"src":"4692:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1234,"name":"address","nodeType":"ElementaryTypeName","src":"4692:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4691:18:18"},"returnParameters":{"id":1237,"nodeType":"ParameterList","parameters":[],"src":"4719:0:18"},"scope":1346,"src":"4670:135:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"4811:232:18","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":1253,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5074:12:18","nodeType":"VariableDeclaration","scope":1346,"src":"5048:107:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5048:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5089:66:18","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":1265,"nodeType":"Block","src":"5272:81:18","statements":[{"expression":{"expression":{"arguments":[{"id":1261,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"5327:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1259,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"5289:22:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2101_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5312:14:18","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"5289:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1997_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5289:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1263,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5341:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"5289:57:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1258,"id":1264,"nodeType":"Return","src":"5282:64:18"}]},"documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"5162:51:18","text":" @dev Returns the current beacon."},"id":1266,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5227:10:18","nodeType":"FunctionDefinition","parameters":{"id":1255,"nodeType":"ParameterList","parameters":[],"src":"5237:2:18"},"returnParameters":{"id":1258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1266,"src":"5263:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5262:9:18"},"scope":1346,"src":"5218:135:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1301,"nodeType":"Block","src":"5482:368:18","statements":[{"expression":{"arguments":[{"arguments":[{"id":1275,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"5530:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1273,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"5500:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1991_$","typeString":"type(library AddressUpgradeable)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5519:10:18","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1679,"src":"5500:29:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5500:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5542:39:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":1272,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5492:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5492:90:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1279,"nodeType":"ExpressionStatement","src":"5492:90:18"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1284,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"5662:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1283,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"5643:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$1356_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$1356","typeString":"contract IBeaconUpgradeable"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5673:14:18","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1355,"src":"5643:44:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1281,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"5613:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1991_$","typeString":"type(library AddressUpgradeable)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5632:10:18","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1679,"src":"5613:29:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:77:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":1289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5704:50:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":1280,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5592:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:172:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1291,"nodeType":"ExpressionStatement","src":"5592:172:18"},{"expression":{"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1295,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"5812:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1292,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"5774:22:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2101_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5797:14:18","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"5774:37:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1997_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1297,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5826:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"5774:57:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1298,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"5834:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5774:69:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1300,"nodeType":"ExpressionStatement","src":"5774:69:18"}]},"documentation":{"id":1267,"nodeType":"StructuredDocumentation","src":"5359:71:18","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":1302,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5444:10:18","nodeType":"FunctionDefinition","parameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1269,"mutability":"mutable","name":"newBeacon","nameLocation":"5463:9:18","nodeType":"VariableDeclaration","scope":1302,"src":"5455:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1268,"name":"address","nodeType":"ElementaryTypeName","src":"5455:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5454:19:18"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[],"src":"5482:0:18"},"scope":1346,"src":"5435:415:18","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1339,"nodeType":"Block","src":"6249:239:18","statements":[{"expression":{"arguments":[{"id":1313,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"6270:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1312,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"6259:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6259:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1315,"nodeType":"ExpressionStatement","src":"6259:21:18"},{"eventCall":{"arguments":[{"id":1317,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"6310:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1316,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"6295:14:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6295:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1319,"nodeType":"EmitStatement","src":"6290:30:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1320,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"6334:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6339:6:18","memberName":"length","nodeType":"MemberAccess","src":"6334:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6348:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6334:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1324,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"6353:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6334:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1338,"nodeType":"IfStatement","src":"6330:152:18","trueBody":{"id":1337,"nodeType":"Block","src":"6364:118:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1330,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"6437:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1329,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"6418:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$1356_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$1356","typeString":"contract IBeaconUpgradeable"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6448:14:18","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1355,"src":"6418:44:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1334,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"6466:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1326,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"6378:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1991_$","typeString":"type(library AddressUpgradeable)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:20:18","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1878,"src":"6378:39:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6378:93:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1336,"nodeType":"ExpressionStatement","src":"6378:93:18"}]}}]},"documentation":{"id":1303,"nodeType":"StructuredDocumentation","src":"5856:292:18","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":1340,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6162:23:18","nodeType":"FunctionDefinition","parameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"newBeacon","nameLocation":"6194:9:18","nodeType":"VariableDeclaration","scope":1340,"src":"6186:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1307,"mutability":"mutable","name":"data","nameLocation":"6218:4:18","nodeType":"VariableDeclaration","scope":1340,"src":"6205:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1306,"name":"bytes","nodeType":"ElementaryTypeName","src":"6205:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1309,"mutability":"mutable","name":"forceCall","nameLocation":"6229:9:18","nodeType":"VariableDeclaration","scope":1340,"src":"6224:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1308,"name":"bool","nodeType":"ElementaryTypeName","src":"6224:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6185:54:18"},"returnParameters":{"id":1311,"nodeType":"ParameterList","parameters":[],"src":"6249:0:18"},"scope":1346,"src":"6153:335:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":1341,"nodeType":"StructuredDocumentation","src":"6494:254:18","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1345,"mutability":"mutable","name":"__gap","nameLocation":"6773:5:18","nodeType":"VariableDeclaration","scope":1346,"src":"6753:25:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"6753:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1344,"length":{"hexValue":"3530","id":1343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6761:2:18","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6753:11:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1347,"src":"609:6172:18","usedErrors":[],"usedEvents":[999,1006,1011,1371]}],"src":"116:6666:18"},"id":18},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[1356]},"id":1357,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1348,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"118:79:19","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":1356,"linearizedBaseContracts":[1356],"name":"IBeaconUpgradeable","nameLocation":"208:18:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"233:162:19","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":1355,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:19","nodeType":"FunctionDefinition","parameters":{"id":1351,"nodeType":"ParameterList","parameters":[],"src":"423:2:19"},"returnParameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1355,"src":"449:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1352,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:19"},"scope":1356,"src":"400:58:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1357,"src":"198:262:19","usedErrors":[],"usedEvents":[]}],"src":"93:368:19"},"id":19},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1991],"Initializable":[1525]},"id":1526,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1358,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:20"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":1359,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1526,"sourceUnit":1992,"src":"138:44:20","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1360,"nodeType":"StructuredDocumentation","src":"184:2209:20","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1525,"linearizedBaseContracts":[1525],"name":"Initializable","nameLocation":"2412:13:20","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1361,"nodeType":"StructuredDocumentation","src":"2432:109:20","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":1363,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:20","nodeType":"VariableDeclaration","scope":1525,"src":"2546:26:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1362,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"2579:91:20","text":" @dev Indicates that the contract is in the process of being initialized."},"id":1366,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:20","nodeType":"VariableDeclaration","scope":1525,"src":"2675:26:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1365,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":1367,"nodeType":"StructuredDocumentation","src":"2708:90:20","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":1371,"name":"Initialized","nameLocation":"2809:11:20","nodeType":"EventDefinition","parameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:20","nodeType":"VariableDeclaration","scope":1371,"src":"2821:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1368,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:20"},"src":"2803:33:20"},{"body":{"id":1426,"nodeType":"Block","src":"3269:483:20","statements":[{"assignments":[1375],"declarations":[{"constant":false,"id":1375,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:20","nodeType":"VariableDeclaration","scope":1426,"src":"3279:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1374,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1378,"initialValue":{"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:20","subExpression":{"id":1376,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"3302:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1380,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"3347:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1381,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"3365:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":1382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1385,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:20","subExpression":{"arguments":[{"arguments":[{"id":1390,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1525","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1525","typeString":"contract Initializable"}],"id":1389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1388,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:20","typeDescriptions":{}}},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1386,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"3388:18:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1991_$","typeString":"type(library AddressUpgradeable)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:20","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1679,"src":"3388:29:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1394,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"3436:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1379,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1402,"nodeType":"ExpressionStatement","src":"3325:201:20"},{"expression":{"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1403,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"3536:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1406,"nodeType":"ExpressionStatement","src":"3536:16:20"},{"condition":{"id":1407,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"3566:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1413,"nodeType":"IfStatement","src":"3562:65:20","trueBody":{"id":1412,"nodeType":"Block","src":"3582:45:20","statements":[{"expression":{"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1408,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"3596:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1411,"nodeType":"ExpressionStatement","src":"3596:20:20"}]}},{"id":1414,"nodeType":"PlaceholderStatement","src":"3636:1:20"},{"condition":{"id":1415,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"3651:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1425,"nodeType":"IfStatement","src":"3647:99:20","trueBody":{"id":1424,"nodeType":"Block","src":"3667:79:20","statements":[{"expression":{"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1416,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"3681:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1419,"nodeType":"ExpressionStatement","src":"3681:21:20"},{"eventCall":{"arguments":[{"hexValue":"31","id":1421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1420,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"3721:11:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1423,"nodeType":"EmitStatement","src":"3716:19:20"}]}}]},"documentation":{"id":1372,"nodeType":"StructuredDocumentation","src":"2842:399:20","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":1427,"name":"initializer","nameLocation":"3255:11:20","nodeType":"ModifierDefinition","parameters":{"id":1373,"nodeType":"ParameterList","parameters":[],"src":"3266:2:20"},"src":"3246:506:20","virtual":false,"visibility":"internal"},{"body":{"id":1459,"nodeType":"Block","src":"4863:255:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:20","subExpression":{"id":1433,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"4882:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1435,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4899:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1436,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"4914:7:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1432,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1441,"nodeType":"ExpressionStatement","src":"4873:99:20"},{"expression":{"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1442,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4982:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1443,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"4997:7:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1445,"nodeType":"ExpressionStatement","src":"4982:22:20"},{"expression":{"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1446,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"5014:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1449,"nodeType":"ExpressionStatement","src":"5014:20:20"},{"id":1450,"nodeType":"PlaceholderStatement","src":"5044:1:20"},{"expression":{"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1451,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"5055:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1454,"nodeType":"ExpressionStatement","src":"5055:21:20"},{"eventCall":{"arguments":[{"id":1456,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"5103:7:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1455,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"5091:11:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1458,"nodeType":"EmitStatement","src":"5086:25:20"}]},"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"3758:1062:20","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1460,"name":"reinitializer","nameLocation":"4834:13:20","nodeType":"ModifierDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"version","nameLocation":"4854:7:20","nodeType":"VariableDeclaration","scope":1460,"src":"4848:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1429,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:20"},"src":"4825:293:20","virtual":false,"visibility":"internal"},{"body":{"id":1469,"nodeType":"Block","src":"5356:97:20","statements":[{"expression":{"arguments":[{"id":1464,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"5374:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1463,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1467,"nodeType":"ExpressionStatement","src":"5366:69:20"},{"id":1468,"nodeType":"PlaceholderStatement","src":"5445:1:20"}]},"documentation":{"id":1461,"nodeType":"StructuredDocumentation","src":"5124:199:20","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1470,"name":"onlyInitializing","nameLocation":"5337:16:20","nodeType":"ModifierDefinition","parameters":{"id":1462,"nodeType":"ParameterList","parameters":[],"src":"5353:2:20"},"src":"5328:125:20","virtual":false,"visibility":"internal"},{"body":{"id":1505,"nodeType":"Block","src":"5988:231:20","statements":[{"expression":{"arguments":[{"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:20","subExpression":{"id":1475,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"6007:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1474,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1479,"nodeType":"ExpressionStatement","src":"5998:66:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1480,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"6078:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1482,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1481,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:20","memberName":"max","nodeType":"MemberAccess","src":"6094:15:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1504,"nodeType":"IfStatement","src":"6074:139:20","trueBody":{"id":1503,"nodeType":"Block","src":"6111:102:20","statements":[{"expression":{"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1487,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"6125:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1489,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1488,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:20","memberName":"max","nodeType":"MemberAccess","src":"6140:15:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1494,"nodeType":"ExpressionStatement","src":"6125:30:20"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1497,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1496,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:20","memberName":"max","nodeType":"MemberAccess","src":"6186:15:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1495,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"6174:11:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1502,"nodeType":"EmitStatement","src":"6169:33:20"}]}}]},"documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"5459:475:20","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1506,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:20","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[],"src":"5968:2:20"},"returnParameters":{"id":1473,"nodeType":"ParameterList","parameters":[],"src":"5988:0:20"},"scope":1525,"src":"5939:280:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1514,"nodeType":"Block","src":"6393:36:20","statements":[{"expression":{"id":1512,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"6410:12:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1511,"id":1513,"nodeType":"Return","src":"6403:19:20"}]},"documentation":{"id":1507,"nodeType":"StructuredDocumentation","src":"6225:99:20","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1515,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:20","nodeType":"FunctionDefinition","parameters":{"id":1508,"nodeType":"ParameterList","parameters":[],"src":"6360:2:20"},"returnParameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1515,"src":"6386:5:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1509,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:20"},"scope":1525,"src":"6329:100:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1523,"nodeType":"Block","src":"6601:37:20","statements":[{"expression":{"id":1521,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"6618:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1520,"id":1522,"nodeType":"Return","src":"6611:20:20"}]},"documentation":{"id":1516,"nodeType":"StructuredDocumentation","src":"6435:105:20","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1524,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:20","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[],"src":"6569:2:20"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1524,"src":"6595:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1518,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:20"},"scope":1525,"src":"6545:93:20","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1526,"src":"2394:4246:20","usedErrors":[],"usedEvents":[1371]}],"src":"113:6528:20"},"id":20},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1991],"ERC1967UpgradeUpgradeable":[1346],"IBeaconUpgradeable":[1356],"IERC1822ProxiableUpgradeable":[1022],"IERC1967Upgradeable":[1012],"Initializable":[1525],"StorageSlotUpgradeable":[2101],"UUPSUpgradeable":[1661]},"id":1662,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1527,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:21"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":1528,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1662,"sourceUnit":1023,"src":"140:56:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":1529,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1662,"sourceUnit":1347,"src":"197:50:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":1530,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1662,"sourceUnit":1526,"src":"248:29:21","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1532,"name":"Initializable","nameLocations":["965:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":1525,"src":"965:13:21"},"id":1533,"nodeType":"InheritanceSpecifier","src":"965:13:21"},{"baseName":{"id":1534,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:21"],"nodeType":"IdentifierPath","referencedDeclaration":1022,"src":"980:28:21"},"id":1535,"nodeType":"InheritanceSpecifier","src":"980:28:21"},{"baseName":{"id":1536,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:21"],"nodeType":"IdentifierPath","referencedDeclaration":1346,"src":"1010:25:21"},"id":1537,"nodeType":"InheritanceSpecifier","src":"1010:25:21"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1531,"nodeType":"StructuredDocumentation","src":"279:648:21","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1661,"linearizedBaseContracts":[1661,1346,1012,1022,1525],"name":"UUPSUpgradeable","nameLocation":"946:15:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":1542,"nodeType":"Block","src":"1102:7:21","statements":[]},"id":1543,"implemented":true,"kind":"function","modifiers":[{"id":1540,"kind":"modifierInvocation","modifierName":{"id":1539,"name":"onlyInitializing","nameLocations":["1085:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"1085:16:21"},"nodeType":"ModifierInvocation","src":"1085:16:21"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:21","nodeType":"FunctionDefinition","parameters":{"id":1538,"nodeType":"ParameterList","parameters":[],"src":"1073:2:21"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[],"src":"1102:0:21"},"scope":1661,"src":"1042:67:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1548,"nodeType":"Block","src":"1185:7:21","statements":[]},"id":1549,"implemented":true,"kind":"function","modifiers":[{"id":1546,"kind":"modifierInvocation","modifierName":{"id":1545,"name":"onlyInitializing","nameLocations":["1168:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"1168:16:21"},"nodeType":"ModifierInvocation","src":"1168:16:21"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:21","nodeType":"FunctionDefinition","parameters":{"id":1544,"nodeType":"ParameterList","parameters":[],"src":"1156:2:21"},"returnParameters":{"id":1547,"nodeType":"ParameterList","parameters":[],"src":"1185:0:21"},"scope":1661,"src":"1115:77:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"1197:87:21","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":1556,"mutability":"immutable","name":"__self","nameLocation":"1315:6:21","nodeType":"VariableDeclaration","scope":1661,"src":"1289:48:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1551,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":1554,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1661","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1661","typeString":"contract UUPSUpgradeable"}],"id":1553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1552,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:21","typeDescriptions":{}}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1578,"nodeType":"Block","src":"1863:205:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1562,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1661","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1661","typeString":"contract UUPSUpgradeable"}],"id":1561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1560,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:21","typeDescriptions":{}}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1564,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1898:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":1559,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1568,"nodeType":"ExpressionStatement","src":"1873:80:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1570,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"1971:18:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1572,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1995:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":1569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1576,"nodeType":"ExpressionStatement","src":"1963:87:21"},{"id":1577,"nodeType":"PlaceholderStatement","src":"2060:1:21"}]},"documentation":{"id":1557,"nodeType":"StructuredDocumentation","src":"1344:493:21","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":1579,"name":"onlyProxy","nameLocation":"1851:9:21","nodeType":"ModifierDefinition","parameters":{"id":1558,"nodeType":"ParameterList","parameters":[],"src":"1860:2:21"},"src":"1842:226:21","virtual":false,"visibility":"internal"},{"body":{"id":1593,"nodeType":"Block","src":"2298:120:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1585,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1661","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1661","typeString":"contract UUPSUpgradeable"}],"id":1584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:21","typeDescriptions":{}}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1587,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"2333:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":1582,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1591,"nodeType":"ExpressionStatement","src":"2308:92:21"},{"id":1592,"nodeType":"PlaceholderStatement","src":"2410:1:21"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"2074:195:21","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1594,"name":"notDelegated","nameLocation":"2283:12:21","nodeType":"ModifierDefinition","parameters":{"id":1581,"nodeType":"ParameterList","parameters":[],"src":"2295:2:21"},"src":"2274:144:21","virtual":false,"visibility":"internal"},{"baseFunctions":[1021],"body":{"id":1605,"nodeType":"Block","src":"3093:44:21","statements":[{"expression":{"id":1603,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"3110:20:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1602,"id":1604,"nodeType":"Return","src":"3103:27:21"}]},"documentation":{"id":1595,"nodeType":"StructuredDocumentation","src":"2424:577:21","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1606,"implemented":true,"kind":"function","modifiers":[{"id":1599,"kind":"modifierInvocation","modifierName":{"id":1598,"name":"notDelegated","nameLocations":["3062:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":1594,"src":"3062:12:21"},"nodeType":"ModifierInvocation","src":"3062:12:21"}],"name":"proxiableUUID","nameLocation":"3015:13:21","nodeType":"FunctionDefinition","overrides":{"id":1597,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:21"},"parameters":{"id":1596,"nodeType":"ParameterList","parameters":[],"src":"3028:2:21"},"returnParameters":{"id":1602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1606,"src":"3084:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:21"},"scope":1661,"src":"3006:131:21","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1627,"nodeType":"Block","src":"3458:124:21","statements":[{"expression":{"arguments":[{"id":1615,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"3486:17:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1614,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"3468:17:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3468:36:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1617,"nodeType":"ExpressionStatement","src":"3468:36:21"},{"expression":{"arguments":[{"id":1619,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"3536:17:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3555:9:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1620,"name":"bytes","nodeType":"ElementaryTypeName","src":"3559:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3555:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3569:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1618,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"3514:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:61:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1626,"nodeType":"ExpressionStatement","src":"3514:61:21"}]},"documentation":{"id":1607,"nodeType":"StructuredDocumentation","src":"3143:239:21","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":1628,"implemented":true,"kind":"function","modifiers":[{"id":1612,"kind":"modifierInvocation","modifierName":{"id":1611,"name":"onlyProxy","nameLocations":["3448:9:21"],"nodeType":"IdentifierPath","referencedDeclaration":1579,"src":"3448:9:21"},"nodeType":"ModifierInvocation","src":"3448:9:21"}],"name":"upgradeTo","nameLocation":"3396:9:21","nodeType":"FunctionDefinition","parameters":{"id":1610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"newImplementation","nameLocation":"3414:17:21","nodeType":"VariableDeclaration","scope":1628,"src":"3406:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1608,"name":"address","nodeType":"ElementaryTypeName","src":"3406:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3405:27:21"},"returnParameters":{"id":1613,"nodeType":"ParameterList","parameters":[],"src":"3458:0:21"},"scope":1661,"src":"3387:195:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1648,"nodeType":"Block","src":"4006:115:21","statements":[{"expression":{"arguments":[{"id":1639,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"4034:17:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1638,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"4016:17:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4016:36:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1641,"nodeType":"ExpressionStatement","src":"4016:36:21"},{"expression":{"arguments":[{"id":1643,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"4084:17:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1644,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"4103:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4109:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1642,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"4062:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:52:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1647,"nodeType":"ExpressionStatement","src":"4062:52:21"}]},"documentation":{"id":1629,"nodeType":"StructuredDocumentation","src":"3588:308:21","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":1649,"implemented":true,"kind":"function","modifiers":[{"id":1636,"kind":"modifierInvocation","modifierName":{"id":1635,"name":"onlyProxy","nameLocations":["3996:9:21"],"nodeType":"IdentifierPath","referencedDeclaration":1579,"src":"3996:9:21"},"nodeType":"ModifierInvocation","src":"3996:9:21"}],"name":"upgradeToAndCall","nameLocation":"3910:16:21","nodeType":"FunctionDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"newImplementation","nameLocation":"3935:17:21","nodeType":"VariableDeclaration","scope":1649,"src":"3927:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1630,"name":"address","nodeType":"ElementaryTypeName","src":"3927:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"data","nameLocation":"3967:4:21","nodeType":"VariableDeclaration","scope":1649,"src":"3954:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1632,"name":"bytes","nodeType":"ElementaryTypeName","src":"3954:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3926:46:21"},"returnParameters":{"id":1637,"nodeType":"ParameterList","parameters":[],"src":"4006:0:21"},"scope":1661,"src":"3901:220:21","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"4127:397:21","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1655,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4538:17:21","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"newImplementation","nameLocation":"4564:17:21","nodeType":"VariableDeclaration","scope":1655,"src":"4556:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1651,"name":"address","nodeType":"ElementaryTypeName","src":"4556:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4555:27:21"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[],"src":"4599:0:21"},"scope":1661,"src":"4529:71:21","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"4606:254:21","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1660,"mutability":"mutable","name":"__gap","nameLocation":"4885:5:21","nodeType":"VariableDeclaration","scope":1661,"src":"4865:25:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1657,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1659,"length":{"hexValue":"3530","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4873:2:21","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4865:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1662,"src":"928:3965:21","usedErrors":[],"usedEvents":[999,1006,1011,1371]}],"src":"115:4779:21"},"id":21},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1991]},"id":1992,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1663,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1664,"nodeType":"StructuredDocumentation","src":"126:67:22","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1991,"linearizedBaseContracts":[1991],"name":"AddressUpgradeable","nameLocation":"202:18:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":1678,"nodeType":"Block","src":"1489:254:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1672,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"1713:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:22","memberName":"code","nodeType":"MemberAccess","src":"1713:12:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:22","memberName":"length","nodeType":"MemberAccess","src":"1713:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1671,"id":1677,"nodeType":"Return","src":"1706:30:22"}]},"documentation":{"id":1665,"nodeType":"StructuredDocumentation","src":"227:1191:22","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1679,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:22","nodeType":"FunctionDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"mutability":"mutable","name":"account","nameLocation":"1451:7:22","nodeType":"VariableDeclaration","scope":1679,"src":"1443:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1666,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:22"},"returnParameters":{"id":1671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1679,"src":"1483:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1669,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:22"},"scope":1991,"src":"1423:320:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1712,"nodeType":"Block","src":"2729:241:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1690,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1991","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1991","typeString":"library AddressUpgradeable"}],"id":1689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1688,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:22","typeDescriptions":{}}},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:22","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1693,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"2772:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1687,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1697,"nodeType":"ExpressionStatement","src":"2739:73:22"},{"assignments":[1699,null],"declarations":[{"constant":false,"id":1699,"mutability":"mutable","name":"success","nameLocation":"2829:7:22","nodeType":"VariableDeclaration","scope":1712,"src":"2824:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1698,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1706,"initialValue":{"arguments":[{"hexValue":"","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1700,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"2842:9:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:22","memberName":"call","nodeType":"MemberAccess","src":"2842:14:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1702,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"2864:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:22"},{"expression":{"arguments":[{"id":1708,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"2893:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1707,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1711,"nodeType":"ExpressionStatement","src":"2885:78:22"}]},"documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"1749:904:22","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1713,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:22","nodeType":"FunctionDefinition","parameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:22","nodeType":"VariableDeclaration","scope":1713,"src":"2677:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1681,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"amount","nameLocation":"2712:6:22","nodeType":"VariableDeclaration","scope":1713,"src":"2704:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1683,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:22"},"returnParameters":{"id":1686,"nodeType":"ParameterList","parameters":[],"src":"2729:0:22"},"scope":1991,"src":"2658:312:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1730,"nodeType":"Block","src":"3801:96:22","statements":[{"expression":{"arguments":[{"id":1724,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"3840:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1725,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"3848:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1723,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1771,1815],"referencedDeclaration":1815,"src":"3818:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1722,"id":1729,"nodeType":"Return","src":"3811:79:22"}]},"documentation":{"id":1714,"nodeType":"StructuredDocumentation","src":"2976:731:22","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1731,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:22","nodeType":"FunctionDefinition","parameters":{"id":1719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"target","nameLocation":"3742:6:22","nodeType":"VariableDeclaration","scope":1731,"src":"3734:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1715,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1718,"mutability":"mutable","name":"data","nameLocation":"3763:4:22","nodeType":"VariableDeclaration","scope":1731,"src":"3750:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1717,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:22"},"returnParameters":{"id":1722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1731,"src":"3787:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1720,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:22"},"scope":1991,"src":"3712:185:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1750,"nodeType":"Block","src":"4266:76:22","statements":[{"expression":{"arguments":[{"id":1744,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"4305:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1745,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"4313:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1747,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"4322:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1743,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1771,1815],"referencedDeclaration":1815,"src":"4283:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1742,"id":1749,"nodeType":"Return","src":"4276:59:22"}]},"documentation":{"id":1732,"nodeType":"StructuredDocumentation","src":"3903:211:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1751,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:22","nodeType":"FunctionDefinition","parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"mutability":"mutable","name":"target","nameLocation":"4158:6:22","nodeType":"VariableDeclaration","scope":1751,"src":"4150:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1733,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1736,"mutability":"mutable","name":"data","nameLocation":"4187:4:22","nodeType":"VariableDeclaration","scope":1751,"src":"4174:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1735,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:22","nodeType":"VariableDeclaration","scope":1751,"src":"4201:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1737,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:22"},"returnParameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1751,"src":"4252:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1740,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:22"},"scope":1991,"src":"4119:223:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1770,"nodeType":"Block","src":"4817:111:22","statements":[{"expression":{"arguments":[{"id":1764,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"4856:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1765,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"4864:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"4870:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1763,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1771,1815],"referencedDeclaration":1815,"src":"4834:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1762,"id":1769,"nodeType":"Return","src":"4827:94:22"}]},"documentation":{"id":1752,"nodeType":"StructuredDocumentation","src":"4348:351:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1771,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:22","nodeType":"FunctionDefinition","parameters":{"id":1759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"target","nameLocation":"4743:6:22","nodeType":"VariableDeclaration","scope":1771,"src":"4735:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1753,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"data","nameLocation":"4764:4:22","nodeType":"VariableDeclaration","scope":1771,"src":"4751:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1755,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1758,"mutability":"mutable","name":"value","nameLocation":"4778:5:22","nodeType":"VariableDeclaration","scope":1771,"src":"4770:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1757,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:22"},"returnParameters":{"id":1762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1771,"src":"4803:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1760,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:22"},"scope":1991,"src":"4704:224:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1814,"nodeType":"Block","src":"5355:267:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1788,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1991","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1991","typeString":"library AddressUpgradeable"}],"id":1787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1786,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:22","typeDescriptions":{}}},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:22","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"5398:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1785,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1795,"nodeType":"ExpressionStatement","src":"5365:81:22"},{"assignments":[1797,1799],"declarations":[{"constant":false,"id":1797,"mutability":"mutable","name":"success","nameLocation":"5462:7:22","nodeType":"VariableDeclaration","scope":1814,"src":"5457:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1796,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1799,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:22","nodeType":"VariableDeclaration","scope":1814,"src":"5471:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1798,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1806,"initialValue":{"arguments":[{"id":1804,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"5524:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1800,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"5498:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:22","memberName":"call","nodeType":"MemberAccess","src":"5498:11:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"5517:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:22"},{"expression":{"arguments":[{"id":1808,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"5573:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1809,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"5581:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1810,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"5590:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1811,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"5602:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1807,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5546:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1784,"id":1813,"nodeType":"Return","src":"5539:76:22"}]},"documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"4934:237:22","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1815,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:22","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"target","nameLocation":"5224:6:22","nodeType":"VariableDeclaration","scope":1815,"src":"5216:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1776,"mutability":"mutable","name":"data","nameLocation":"5253:4:22","nodeType":"VariableDeclaration","scope":1815,"src":"5240:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1775,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1778,"mutability":"mutable","name":"value","nameLocation":"5275:5:22","nodeType":"VariableDeclaration","scope":1815,"src":"5267:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1777,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:22","nodeType":"VariableDeclaration","scope":1815,"src":"5290:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1779,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:22"},"returnParameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1815,"src":"5341:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1782,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:22"},"scope":1991,"src":"5176:446:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1831,"nodeType":"Block","src":"5899:97:22","statements":[{"expression":{"arguments":[{"id":1826,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"5935:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1827,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"5943:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1825,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1832,1861],"referencedDeclaration":1861,"src":"5916:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1824,"id":1830,"nodeType":"Return","src":"5909:80:22"}]},"documentation":{"id":1816,"nodeType":"StructuredDocumentation","src":"5628:166:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1832,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:22","nodeType":"FunctionDefinition","parameters":{"id":1821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"target","nameLocation":"5835:6:22","nodeType":"VariableDeclaration","scope":1832,"src":"5827:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1817,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1820,"mutability":"mutable","name":"data","nameLocation":"5856:4:22","nodeType":"VariableDeclaration","scope":1832,"src":"5843:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1819,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:22"},"returnParameters":{"id":1824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1832,"src":"5885:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1822,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:22"},"scope":1991,"src":"5799:197:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1860,"nodeType":"Block","src":"6338:168:22","statements":[{"assignments":[1845,1847],"declarations":[{"constant":false,"id":1845,"mutability":"mutable","name":"success","nameLocation":"6354:7:22","nodeType":"VariableDeclaration","scope":1860,"src":"6349:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1844,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1847,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:22","nodeType":"VariableDeclaration","scope":1860,"src":"6363:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1846,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1852,"initialValue":{"arguments":[{"id":1850,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"6408:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1848,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"6390:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:22","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:22","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:22"},{"expression":{"arguments":[{"id":1854,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"6457:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1855,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"6465:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1856,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"6474:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1857,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"6486:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1853,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"6430:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1843,"id":1859,"nodeType":"Return","src":"6423:76:22"}]},"documentation":{"id":1833,"nodeType":"StructuredDocumentation","src":"6002:173:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1861,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:22","nodeType":"FunctionDefinition","parameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"target","nameLocation":"6225:6:22","nodeType":"VariableDeclaration","scope":1861,"src":"6217:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1834,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"data","nameLocation":"6254:4:22","nodeType":"VariableDeclaration","scope":1861,"src":"6241:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1836,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:22","nodeType":"VariableDeclaration","scope":1861,"src":"6268:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1838,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:22"},"returnParameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1861,"src":"6324:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1841,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:22"},"scope":1991,"src":"6180:326:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1877,"nodeType":"Block","src":"6782:101:22","statements":[{"expression":{"arguments":[{"id":1872,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"6820:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1873,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"6828:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1871,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1878,1907],"referencedDeclaration":1907,"src":"6799:20:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1870,"id":1876,"nodeType":"Return","src":"6792:84:22"}]},"documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"6512:168:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1878,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:22","nodeType":"FunctionDefinition","parameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"target","nameLocation":"6723:6:22","nodeType":"VariableDeclaration","scope":1878,"src":"6715:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1863,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1866,"mutability":"mutable","name":"data","nameLocation":"6744:4:22","nodeType":"VariableDeclaration","scope":1878,"src":"6731:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1865,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:22"},"returnParameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1878,"src":"6768:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1868,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:22"},"scope":1991,"src":"6685:198:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1906,"nodeType":"Block","src":"7224:170:22","statements":[{"assignments":[1891,1893],"declarations":[{"constant":false,"id":1891,"mutability":"mutable","name":"success","nameLocation":"7240:7:22","nodeType":"VariableDeclaration","scope":1906,"src":"7235:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1890,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1893,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:22","nodeType":"VariableDeclaration","scope":1906,"src":"7249:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1892,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1898,"initialValue":{"arguments":[{"id":1896,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"7296:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1894,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"7276:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:22","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:22","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:22"},{"expression":{"arguments":[{"id":1900,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"7345:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1901,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"7353:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1902,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"7362:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1903,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"7374:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1899,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"7318:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1889,"id":1905,"nodeType":"Return","src":"7311:76:22"}]},"documentation":{"id":1879,"nodeType":"StructuredDocumentation","src":"6889:175:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1907,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:22","nodeType":"FunctionDefinition","parameters":{"id":1886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1881,"mutability":"mutable","name":"target","nameLocation":"7116:6:22","nodeType":"VariableDeclaration","scope":1907,"src":"7108:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1880,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1883,"mutability":"mutable","name":"data","nameLocation":"7145:4:22","nodeType":"VariableDeclaration","scope":1907,"src":"7132:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1882,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1885,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:22","nodeType":"VariableDeclaration","scope":1907,"src":"7159:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1884,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:22"},"returnParameters":{"id":1889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1907,"src":"7210:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1887,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:22"},"scope":1991,"src":"7069:325:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1945,"nodeType":"Block","src":"7876:434:22","statements":[{"condition":{"id":1921,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"7890:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1943,"nodeType":"Block","src":"8246:58:22","statements":[{"expression":{"arguments":[{"id":1939,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"8268:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1940,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"8280:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1938,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"8260:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1942,"nodeType":"ExpressionStatement","src":"8260:33:22"}]},"id":1944,"nodeType":"IfStatement","src":"7886:418:22","trueBody":{"id":1937,"nodeType":"Block","src":"7899:341:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1922,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"7917:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:22","memberName":"length","nodeType":"MemberAccess","src":"7917:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1934,"nodeType":"IfStatement","src":"7913:286:22","trueBody":{"id":1933,"nodeType":"Block","src":"7941:258:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":1928,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"8143:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1927,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"8132:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1926,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1932,"nodeType":"ExpressionStatement","src":"8124:60:22"}]}},{"expression":{"id":1935,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"8219:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1920,"id":1936,"nodeType":"Return","src":"8212:17:22"}]}}]},"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"7400:277:22","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1946,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:22","nodeType":"FunctionDefinition","parameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"target","nameLocation":"7735:6:22","nodeType":"VariableDeclaration","scope":1946,"src":"7727:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1909,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1912,"mutability":"mutable","name":"success","nameLocation":"7756:7:22","nodeType":"VariableDeclaration","scope":1946,"src":"7751:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1911,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1914,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:22","nodeType":"VariableDeclaration","scope":1946,"src":"7773:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1913,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:22","nodeType":"VariableDeclaration","scope":1946,"src":"7806:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1915,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:22"},"returnParameters":{"id":1920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1946,"src":"7862:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1918,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:22"},"scope":1991,"src":"7682:628:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1969,"nodeType":"Block","src":"8691:135:22","statements":[{"condition":{"id":1958,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"8705:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1967,"nodeType":"Block","src":"8762:58:22","statements":[{"expression":{"arguments":[{"id":1963,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"8784:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1964,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"8796:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1962,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"8776:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1966,"nodeType":"ExpressionStatement","src":"8776:33:22"}]},"id":1968,"nodeType":"IfStatement","src":"8701:119:22","trueBody":{"id":1961,"nodeType":"Block","src":"8714:42:22","statements":[{"expression":{"id":1959,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"8735:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1957,"id":1960,"nodeType":"Return","src":"8728:17:22"}]}}]},"documentation":{"id":1947,"nodeType":"StructuredDocumentation","src":"8316:210:22","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1970,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:22","nodeType":"FunctionDefinition","parameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1949,"mutability":"mutable","name":"success","nameLocation":"8571:7:22","nodeType":"VariableDeclaration","scope":1970,"src":"8566:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1948,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:22","nodeType":"VariableDeclaration","scope":1970,"src":"8588:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1950,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1953,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:22","nodeType":"VariableDeclaration","scope":1970,"src":"8621:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1952,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:22"},"returnParameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1970,"src":"8677:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1955,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:22"},"scope":1991,"src":"8531:295:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1989,"nodeType":"Block","src":"8915:457:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1977,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"8991:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:22","memberName":"length","nodeType":"MemberAccess","src":"8991:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1987,"nodeType":"Block","src":"9321:45:22","statements":[{"expression":{"arguments":[{"id":1984,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"9342:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1983,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1986,"nodeType":"ExpressionStatement","src":"9335:20:22"}]},"id":1988,"nodeType":"IfStatement","src":"8987:379:22","trueBody":{"id":1982,"nodeType":"Block","src":"9014:301:22","statements":[{"AST":{"nativeSrc":"9172:133:22","nodeType":"YulBlock","src":"9172:133:22","statements":[{"nativeSrc":"9190:40:22","nodeType":"YulVariableDeclaration","src":"9190:40:22","value":{"arguments":[{"name":"returndata","nativeSrc":"9219:10:22","nodeType":"YulIdentifier","src":"9219:10:22"}],"functionName":{"name":"mload","nativeSrc":"9213:5:22","nodeType":"YulIdentifier","src":"9213:5:22"},"nativeSrc":"9213:17:22","nodeType":"YulFunctionCall","src":"9213:17:22"},"variables":[{"name":"returndata_size","nativeSrc":"9194:15:22","nodeType":"YulTypedName","src":"9194:15:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9258:2:22","nodeType":"YulLiteral","src":"9258:2:22","type":"","value":"32"},{"name":"returndata","nativeSrc":"9262:10:22","nodeType":"YulIdentifier","src":"9262:10:22"}],"functionName":{"name":"add","nativeSrc":"9254:3:22","nodeType":"YulIdentifier","src":"9254:3:22"},"nativeSrc":"9254:19:22","nodeType":"YulFunctionCall","src":"9254:19:22"},{"name":"returndata_size","nativeSrc":"9275:15:22","nodeType":"YulIdentifier","src":"9275:15:22"}],"functionName":{"name":"revert","nativeSrc":"9247:6:22","nodeType":"YulIdentifier","src":"9247:6:22"},"nativeSrc":"9247:44:22","nodeType":"YulFunctionCall","src":"9247:44:22"},"nativeSrc":"9247:44:22","nodeType":"YulExpressionStatement","src":"9247:44:22"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1972,"isOffset":false,"isSlot":false,"src":"9219:10:22","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"9262:10:22","valueSize":1}],"id":1981,"nodeType":"InlineAssembly","src":"9163:142:22"}]}}]},"id":1990,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:22","nodeType":"FunctionDefinition","parameters":{"id":1975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:22","nodeType":"VariableDeclaration","scope":1990,"src":"8849:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1971,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1974,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:22","nodeType":"VariableDeclaration","scope":1990,"src":"8874:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1973,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:22"},"returnParameters":{"id":1976,"nodeType":"ParameterList","parameters":[],"src":"8915:0:22"},"scope":1991,"src":"8832:540:22","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1992,"src":"194:9180:22","usedErrors":[],"usedEvents":[]}],"src":"101:9274:22"},"id":22},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[2101]},"id":2102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1993,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1994,"nodeType":"StructuredDocumentation","src":"218:1201:23","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":2101,"linearizedBaseContracts":[2101],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:23","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":1997,"members":[{"constant":false,"id":1996,"mutability":"mutable","name":"value","nameLocation":"1494:5:23","nodeType":"VariableDeclaration","scope":1997,"src":"1486:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1995,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:23","nodeType":"StructDefinition","scope":2101,"src":"1457:49:23","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":2000,"members":[{"constant":false,"id":1999,"mutability":"mutable","name":"value","nameLocation":"1546:5:23","nodeType":"VariableDeclaration","scope":2000,"src":"1541:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1998,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:23","nodeType":"StructDefinition","scope":2101,"src":"1512:46:23","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":2003,"members":[{"constant":false,"id":2002,"mutability":"mutable","name":"value","nameLocation":"1601:5:23","nodeType":"VariableDeclaration","scope":2003,"src":"1593:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2001,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:23","nodeType":"StructDefinition","scope":2101,"src":"1564:49:23","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":2006,"members":[{"constant":false,"id":2005,"mutability":"mutable","name":"value","nameLocation":"1656:5:23","nodeType":"VariableDeclaration","scope":2006,"src":"1648:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2004,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:23","nodeType":"StructDefinition","scope":2101,"src":"1619:49:23","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":2009,"members":[{"constant":false,"id":2008,"mutability":"mutable","name":"value","nameLocation":"1709:5:23","nodeType":"VariableDeclaration","scope":2009,"src":"1702:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2007,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:23","nodeType":"StructDefinition","scope":2101,"src":"1674:47:23","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":2012,"members":[{"constant":false,"id":2011,"mutability":"mutable","name":"value","nameLocation":"1760:5:23","nodeType":"VariableDeclaration","scope":2012,"src":"1754:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2010,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:23","nodeType":"StructDefinition","scope":2101,"src":"1727:45:23","visibility":"public"},{"body":{"id":2022,"nodeType":"Block","src":"1954:106:23","statements":[{"AST":{"nativeSrc":"2016:38:23","nodeType":"YulBlock","src":"2016:38:23","statements":[{"nativeSrc":"2030:14:23","nodeType":"YulAssignment","src":"2030:14:23","value":{"name":"slot","nativeSrc":"2040:4:23","nodeType":"YulIdentifier","src":"2040:4:23"},"variableNames":[{"name":"r.slot","nativeSrc":"2030:6:23","nodeType":"YulIdentifier","src":"2030:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2019,"isOffset":false,"isSlot":true,"src":"2030:6:23","suffix":"slot","valueSize":1},{"declaration":2015,"isOffset":false,"isSlot":false,"src":"2040:4:23","valueSize":1}],"id":2021,"nodeType":"InlineAssembly","src":"2007:47:23"}]},"documentation":{"id":2013,"nodeType":"StructuredDocumentation","src":"1778:87:23","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2023,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:23","nodeType":"FunctionDefinition","parameters":{"id":2016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2015,"mutability":"mutable","name":"slot","nameLocation":"1902:4:23","nodeType":"VariableDeclaration","scope":2023,"src":"1894:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:23"},"returnParameters":{"id":2020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2019,"mutability":"mutable","name":"r","nameLocation":"1951:1:23","nodeType":"VariableDeclaration","scope":2023,"src":"1931:21:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":2018,"nodeType":"UserDefinedTypeName","pathNode":{"id":2017,"name":"AddressSlot","nameLocations":["1931:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":1997,"src":"1931:11:23"},"referencedDeclaration":1997,"src":"1931:11:23","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1997_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:23"},"scope":2101,"src":"1870:190:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2033,"nodeType":"Block","src":"2242:106:23","statements":[{"AST":{"nativeSrc":"2304:38:23","nodeType":"YulBlock","src":"2304:38:23","statements":[{"nativeSrc":"2318:14:23","nodeType":"YulAssignment","src":"2318:14:23","value":{"name":"slot","nativeSrc":"2328:4:23","nodeType":"YulIdentifier","src":"2328:4:23"},"variableNames":[{"name":"r.slot","nativeSrc":"2318:6:23","nodeType":"YulIdentifier","src":"2318:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2030,"isOffset":false,"isSlot":true,"src":"2318:6:23","suffix":"slot","valueSize":1},{"declaration":2026,"isOffset":false,"isSlot":false,"src":"2328:4:23","valueSize":1}],"id":2032,"nodeType":"InlineAssembly","src":"2295:47:23"}]},"documentation":{"id":2024,"nodeType":"StructuredDocumentation","src":"2066:87:23","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2034,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:23","nodeType":"FunctionDefinition","parameters":{"id":2027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"mutability":"mutable","name":"slot","nameLocation":"2190:4:23","nodeType":"VariableDeclaration","scope":2034,"src":"2182:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:23"},"returnParameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2030,"mutability":"mutable","name":"r","nameLocation":"2239:1:23","nodeType":"VariableDeclaration","scope":2034,"src":"2219:21:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2000_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":2029,"nodeType":"UserDefinedTypeName","pathNode":{"id":2028,"name":"BooleanSlot","nameLocations":["2219:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":2000,"src":"2219:11:23"},"referencedDeclaration":2000,"src":"2219:11:23","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2000_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:23"},"scope":2101,"src":"2158:190:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2044,"nodeType":"Block","src":"2530:106:23","statements":[{"AST":{"nativeSrc":"2592:38:23","nodeType":"YulBlock","src":"2592:38:23","statements":[{"nativeSrc":"2606:14:23","nodeType":"YulAssignment","src":"2606:14:23","value":{"name":"slot","nativeSrc":"2616:4:23","nodeType":"YulIdentifier","src":"2616:4:23"},"variableNames":[{"name":"r.slot","nativeSrc":"2606:6:23","nodeType":"YulIdentifier","src":"2606:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2041,"isOffset":false,"isSlot":true,"src":"2606:6:23","suffix":"slot","valueSize":1},{"declaration":2037,"isOffset":false,"isSlot":false,"src":"2616:4:23","valueSize":1}],"id":2043,"nodeType":"InlineAssembly","src":"2583:47:23"}]},"documentation":{"id":2035,"nodeType":"StructuredDocumentation","src":"2354:87:23","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2045,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:23","nodeType":"FunctionDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"mutability":"mutable","name":"slot","nameLocation":"2478:4:23","nodeType":"VariableDeclaration","scope":2045,"src":"2470:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:23"},"returnParameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2041,"mutability":"mutable","name":"r","nameLocation":"2527:1:23","nodeType":"VariableDeclaration","scope":2045,"src":"2507:21:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2003_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":2040,"nodeType":"UserDefinedTypeName","pathNode":{"id":2039,"name":"Bytes32Slot","nameLocations":["2507:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":2003,"src":"2507:11:23"},"referencedDeclaration":2003,"src":"2507:11:23","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2003_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:23"},"scope":2101,"src":"2446:190:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2055,"nodeType":"Block","src":"2818:106:23","statements":[{"AST":{"nativeSrc":"2880:38:23","nodeType":"YulBlock","src":"2880:38:23","statements":[{"nativeSrc":"2894:14:23","nodeType":"YulAssignment","src":"2894:14:23","value":{"name":"slot","nativeSrc":"2904:4:23","nodeType":"YulIdentifier","src":"2904:4:23"},"variableNames":[{"name":"r.slot","nativeSrc":"2894:6:23","nodeType":"YulIdentifier","src":"2894:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2052,"isOffset":false,"isSlot":true,"src":"2894:6:23","suffix":"slot","valueSize":1},{"declaration":2048,"isOffset":false,"isSlot":false,"src":"2904:4:23","valueSize":1}],"id":2054,"nodeType":"InlineAssembly","src":"2871:47:23"}]},"documentation":{"id":2046,"nodeType":"StructuredDocumentation","src":"2642:87:23","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2056,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:23","nodeType":"FunctionDefinition","parameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"slot","nameLocation":"2766:4:23","nodeType":"VariableDeclaration","scope":2056,"src":"2758:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2047,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:23"},"returnParameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"r","nameLocation":"2815:1:23","nodeType":"VariableDeclaration","scope":2056,"src":"2795:21:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2006_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":2051,"nodeType":"UserDefinedTypeName","pathNode":{"id":2050,"name":"Uint256Slot","nameLocations":["2795:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":2006,"src":"2795:11:23"},"referencedDeclaration":2006,"src":"2795:11:23","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2006_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:23"},"scope":2101,"src":"2734:190:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2066,"nodeType":"Block","src":"3103:106:23","statements":[{"AST":{"nativeSrc":"3165:38:23","nodeType":"YulBlock","src":"3165:38:23","statements":[{"nativeSrc":"3179:14:23","nodeType":"YulAssignment","src":"3179:14:23","value":{"name":"slot","nativeSrc":"3189:4:23","nodeType":"YulIdentifier","src":"3189:4:23"},"variableNames":[{"name":"r.slot","nativeSrc":"3179:6:23","nodeType":"YulIdentifier","src":"3179:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2063,"isOffset":false,"isSlot":true,"src":"3179:6:23","suffix":"slot","valueSize":1},{"declaration":2059,"isOffset":false,"isSlot":false,"src":"3189:4:23","valueSize":1}],"id":2065,"nodeType":"InlineAssembly","src":"3156:47:23"}]},"documentation":{"id":2057,"nodeType":"StructuredDocumentation","src":"2930:86:23","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2067,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:23","nodeType":"FunctionDefinition","parameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2059,"mutability":"mutable","name":"slot","nameLocation":"3052:4:23","nodeType":"VariableDeclaration","scope":2067,"src":"3044:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2058,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:23"},"returnParameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"r","nameLocation":"3100:1:23","nodeType":"VariableDeclaration","scope":2067,"src":"3081:20:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2009_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":2062,"nodeType":"UserDefinedTypeName","pathNode":{"id":2061,"name":"StringSlot","nameLocations":["3081:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":2009,"src":"3081:10:23"},"referencedDeclaration":2009,"src":"3081:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2009_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:23"},"scope":2101,"src":"3021:188:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2077,"nodeType":"Block","src":"3411:112:23","statements":[{"AST":{"nativeSrc":"3473:44:23","nodeType":"YulBlock","src":"3473:44:23","statements":[{"nativeSrc":"3487:20:23","nodeType":"YulAssignment","src":"3487:20:23","value":{"name":"store.slot","nativeSrc":"3497:10:23","nodeType":"YulIdentifier","src":"3497:10:23"},"variableNames":[{"name":"r.slot","nativeSrc":"3487:6:23","nodeType":"YulIdentifier","src":"3487:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2074,"isOffset":false,"isSlot":true,"src":"3487:6:23","suffix":"slot","valueSize":1},{"declaration":2070,"isOffset":false,"isSlot":true,"src":"3497:10:23","suffix":"slot","valueSize":1}],"id":2076,"nodeType":"InlineAssembly","src":"3464:53:23"}]},"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"3215:101:23","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2078,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:23","nodeType":"FunctionDefinition","parameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"store","nameLocation":"3359:5:23","nodeType":"VariableDeclaration","scope":2078,"src":"3344:20:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2069,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:23"},"returnParameters":{"id":2075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2074,"mutability":"mutable","name":"r","nameLocation":"3408:1:23","nodeType":"VariableDeclaration","scope":2078,"src":"3389:20:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2009_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":2073,"nodeType":"UserDefinedTypeName","pathNode":{"id":2072,"name":"StringSlot","nameLocations":["3389:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":2009,"src":"3389:10:23"},"referencedDeclaration":2009,"src":"3389:10:23","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2009_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:23"},"scope":2101,"src":"3321:202:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2088,"nodeType":"Block","src":"3699:106:23","statements":[{"AST":{"nativeSrc":"3761:38:23","nodeType":"YulBlock","src":"3761:38:23","statements":[{"nativeSrc":"3775:14:23","nodeType":"YulAssignment","src":"3775:14:23","value":{"name":"slot","nativeSrc":"3785:4:23","nodeType":"YulIdentifier","src":"3785:4:23"},"variableNames":[{"name":"r.slot","nativeSrc":"3775:6:23","nodeType":"YulIdentifier","src":"3775:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2085,"isOffset":false,"isSlot":true,"src":"3775:6:23","suffix":"slot","valueSize":1},{"declaration":2081,"isOffset":false,"isSlot":false,"src":"3785:4:23","valueSize":1}],"id":2087,"nodeType":"InlineAssembly","src":"3752:47:23"}]},"documentation":{"id":2079,"nodeType":"StructuredDocumentation","src":"3529:85:23","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2089,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:23","nodeType":"FunctionDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"slot","nameLocation":"3649:4:23","nodeType":"VariableDeclaration","scope":2089,"src":"3641:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2080,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:23"},"returnParameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"r","nameLocation":"3696:1:23","nodeType":"VariableDeclaration","scope":2089,"src":"3678:19:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2012_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":2084,"nodeType":"UserDefinedTypeName","pathNode":{"id":2083,"name":"BytesSlot","nameLocations":["3678:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":2012,"src":"3678:9:23"},"referencedDeclaration":2012,"src":"3678:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2012_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:23"},"scope":2101,"src":"3619:186:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2099,"nodeType":"Block","src":"4002:112:23","statements":[{"AST":{"nativeSrc":"4064:44:23","nodeType":"YulBlock","src":"4064:44:23","statements":[{"nativeSrc":"4078:20:23","nodeType":"YulAssignment","src":"4078:20:23","value":{"name":"store.slot","nativeSrc":"4088:10:23","nodeType":"YulIdentifier","src":"4088:10:23"},"variableNames":[{"name":"r.slot","nativeSrc":"4078:6:23","nodeType":"YulIdentifier","src":"4078:6:23"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2096,"isOffset":false,"isSlot":true,"src":"4078:6:23","suffix":"slot","valueSize":1},{"declaration":2092,"isOffset":false,"isSlot":true,"src":"4088:10:23","suffix":"slot","valueSize":1}],"id":2098,"nodeType":"InlineAssembly","src":"4055:53:23"}]},"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"3811:99:23","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2100,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:23","nodeType":"FunctionDefinition","parameters":{"id":2093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"store","nameLocation":"3951:5:23","nodeType":"VariableDeclaration","scope":2100,"src":"3937:19:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2091,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:23"},"returnParameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2096,"mutability":"mutable","name":"r","nameLocation":"3999:1:23","nodeType":"VariableDeclaration","scope":2100,"src":"3981:19:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2012_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":2095,"nodeType":"UserDefinedTypeName","pathNode":{"id":2094,"name":"BytesSlot","nameLocations":["3981:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":2012,"src":"3981:9:23"},"referencedDeclaration":2012,"src":"3981:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2012_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:23"},"scope":2101,"src":"3915:199:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2102,"src":"1420:2696:23","usedErrors":[],"usedEvents":[]}],"src":"193:3924:23"},"id":23},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1271.sol","exportedSymbols":{"IERC1271":[2115]},"id":2116,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2103,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"92:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1271","contractDependencies":[],"contractKind":"interface","documentation":{"id":2104,"nodeType":"StructuredDocumentation","src":"117:189:24","text":" @dev Interface of the ERC1271 standard signature validation method for\n contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n _Available since v4.1._"},"fullyImplemented":false,"id":2115,"linearizedBaseContracts":[2115],"name":"IERC1271","nameLocation":"317:8:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2105,"nodeType":"StructuredDocumentation","src":"332:220:24","text":" @dev Should return whether the signature provided is valid for the provided data\n @param hash      Hash of the data to be signed\n @param signature Signature byte array associated with _data"},"functionSelector":"1626ba7e","id":2114,"implemented":false,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"566:16:24","nodeType":"FunctionDefinition","parameters":{"id":2110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2107,"mutability":"mutable","name":"hash","nameLocation":"591:4:24","nodeType":"VariableDeclaration","scope":2114,"src":"583:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2106,"name":"bytes32","nodeType":"ElementaryTypeName","src":"583:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2109,"mutability":"mutable","name":"signature","nameLocation":"610:9:24","nodeType":"VariableDeclaration","scope":2114,"src":"597:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2108,"name":"bytes","nodeType":"ElementaryTypeName","src":"597:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"582:38:24"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"magicValue","nameLocation":"651:10:24","nodeType":"VariableDeclaration","scope":2114,"src":"644:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2111,"name":"bytes4","nodeType":"ElementaryTypeName","src":"644:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"643:19:24"},"scope":2115,"src":"557:106:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2116,"src":"307:358:24","usedErrors":[],"usedEvents":[]}],"src":"92:574:24"},"id":24},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2445]},"id":2446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2117,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2118,"nodeType":"StructuredDocumentation","src":"126:67:25","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2445,"linearizedBaseContracts":[2445],"name":"Address","nameLocation":"202:7:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":2132,"nodeType":"Block","src":"1241:254:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2126,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"1465:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:25","memberName":"code","nodeType":"MemberAccess","src":"1465:12:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:25","memberName":"length","nodeType":"MemberAccess","src":"1465:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2125,"id":2131,"nodeType":"Return","src":"1458:30:25"}]},"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"216:954:25","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2133,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:25","nodeType":"FunctionDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"account","nameLocation":"1203:7:25","nodeType":"VariableDeclaration","scope":2133,"src":"1195:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2120,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:25"},"returnParameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2133,"src":"1235:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2123,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:25"},"scope":2445,"src":"1175:320:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2166,"nodeType":"Block","src":"2483:241:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2144,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2445","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2445","typeString":"library Address"}],"id":2143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2142,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:25","typeDescriptions":{}}},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:25","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2147,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2526:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2141,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2151,"nodeType":"ExpressionStatement","src":"2493:73:25"},{"assignments":[2153,null],"declarations":[{"constant":false,"id":2153,"mutability":"mutable","name":"success","nameLocation":"2583:7:25","nodeType":"VariableDeclaration","scope":2166,"src":"2578:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2152,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2160,"initialValue":{"arguments":[{"hexValue":"","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2154,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"2596:9:25","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:25","memberName":"call","nodeType":"MemberAccess","src":"2596:14:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2156,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2618:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:25"},{"expression":{"arguments":[{"id":2162,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2647:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2161,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2165,"nodeType":"ExpressionStatement","src":"2639:78:25"}]},"documentation":{"id":2134,"nodeType":"StructuredDocumentation","src":"1501:906:25","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2167,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:25","nodeType":"FunctionDefinition","parameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:25","nodeType":"VariableDeclaration","scope":2167,"src":"2431:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2135,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:25","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"amount","nameLocation":"2466:6:25","nodeType":"VariableDeclaration","scope":2167,"src":"2458:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:25"},"returnParameters":{"id":2140,"nodeType":"ParameterList","parameters":[],"src":"2483:0:25"},"scope":2445,"src":"2412:312:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2184,"nodeType":"Block","src":"3555:96:25","statements":[{"expression":{"arguments":[{"id":2178,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"3594:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2179,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"3602:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2177,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2225,2269],"referencedDeclaration":2269,"src":"3572:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2176,"id":2183,"nodeType":"Return","src":"3565:79:25"}]},"documentation":{"id":2168,"nodeType":"StructuredDocumentation","src":"2730:731:25","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2185,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:25","nodeType":"FunctionDefinition","parameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2170,"mutability":"mutable","name":"target","nameLocation":"3496:6:25","nodeType":"VariableDeclaration","scope":2185,"src":"3488:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2169,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2172,"mutability":"mutable","name":"data","nameLocation":"3517:4:25","nodeType":"VariableDeclaration","scope":2185,"src":"3504:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2171,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:25"},"returnParameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2185,"src":"3541:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2174,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:25"},"scope":2445,"src":"3466:185:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2204,"nodeType":"Block","src":"4020:76:25","statements":[{"expression":{"arguments":[{"id":2198,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"4059:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2199,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"4067:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2201,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"4076:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2197,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2225,2269],"referencedDeclaration":2269,"src":"4037:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2196,"id":2203,"nodeType":"Return","src":"4030:59:25"}]},"documentation":{"id":2186,"nodeType":"StructuredDocumentation","src":"3657:211:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2205,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:25","nodeType":"FunctionDefinition","parameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2188,"mutability":"mutable","name":"target","nameLocation":"3912:6:25","nodeType":"VariableDeclaration","scope":2205,"src":"3904:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2187,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2190,"mutability":"mutable","name":"data","nameLocation":"3941:4:25","nodeType":"VariableDeclaration","scope":2205,"src":"3928:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2189,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2192,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:25","nodeType":"VariableDeclaration","scope":2205,"src":"3955:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2191,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:25"},"returnParameters":{"id":2196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2205,"src":"4006:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2194,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:25"},"scope":2445,"src":"3873:223:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2224,"nodeType":"Block","src":"4601:111:25","statements":[{"expression":{"arguments":[{"id":2218,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"4640:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2219,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"4648:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"4654:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2217,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2225,2269],"referencedDeclaration":2269,"src":"4618:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2216,"id":2223,"nodeType":"Return","src":"4611:94:25"}]},"documentation":{"id":2206,"nodeType":"StructuredDocumentation","src":"4102:351:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2225,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:25","nodeType":"FunctionDefinition","parameters":{"id":2213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2208,"mutability":"mutable","name":"target","nameLocation":"4506:6:25","nodeType":"VariableDeclaration","scope":2225,"src":"4498:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2207,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2210,"mutability":"mutable","name":"data","nameLocation":"4535:4:25","nodeType":"VariableDeclaration","scope":2225,"src":"4522:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2209,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2212,"mutability":"mutable","name":"value","nameLocation":"4557:5:25","nodeType":"VariableDeclaration","scope":2225,"src":"4549:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2211,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:25"},"returnParameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2225,"src":"4587:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2214,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:25"},"scope":2445,"src":"4458:254:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2268,"nodeType":"Block","src":"5139:267:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2242,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2445","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2445","typeString":"library Address"}],"id":2241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2240,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:25","typeDescriptions":{}}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:25","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"5182:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2249,"nodeType":"ExpressionStatement","src":"5149:81:25"},{"assignments":[2251,2253],"declarations":[{"constant":false,"id":2251,"mutability":"mutable","name":"success","nameLocation":"5246:7:25","nodeType":"VariableDeclaration","scope":2268,"src":"5241:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2250,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2253,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:25","nodeType":"VariableDeclaration","scope":2268,"src":"5255:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2252,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2260,"initialValue":{"arguments":[{"id":2258,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"5308:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2254,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"5282:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:25","memberName":"call","nodeType":"MemberAccess","src":"5282:11:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"5301:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:25"},{"expression":{"arguments":[{"id":2262,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"5357:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2263,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"5365:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2264,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"5374:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2265,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"5386:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2261,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"5330:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2238,"id":2267,"nodeType":"Return","src":"5323:76:25"}]},"documentation":{"id":2226,"nodeType":"StructuredDocumentation","src":"4718:237:25","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2269,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:25","nodeType":"FunctionDefinition","parameters":{"id":2235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"target","nameLocation":"5008:6:25","nodeType":"VariableDeclaration","scope":2269,"src":"5000:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2227,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2230,"mutability":"mutable","name":"data","nameLocation":"5037:4:25","nodeType":"VariableDeclaration","scope":2269,"src":"5024:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2229,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2232,"mutability":"mutable","name":"value","nameLocation":"5059:5:25","nodeType":"VariableDeclaration","scope":2269,"src":"5051:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2234,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:25","nodeType":"VariableDeclaration","scope":2269,"src":"5074:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2233,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:25"},"returnParameters":{"id":2238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2269,"src":"5125:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2236,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:25"},"scope":2445,"src":"4960:446:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2285,"nodeType":"Block","src":"5683:97:25","statements":[{"expression":{"arguments":[{"id":2280,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"5719:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2281,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"5727:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2279,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2286,2315],"referencedDeclaration":2315,"src":"5700:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2278,"id":2284,"nodeType":"Return","src":"5693:80:25"}]},"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"5412:166:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2286,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:25","nodeType":"FunctionDefinition","parameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"target","nameLocation":"5619:6:25","nodeType":"VariableDeclaration","scope":2286,"src":"5611:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2271,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2274,"mutability":"mutable","name":"data","nameLocation":"5640:4:25","nodeType":"VariableDeclaration","scope":2286,"src":"5627:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2273,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:25"},"returnParameters":{"id":2278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2286,"src":"5669:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2276,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:25"},"scope":2445,"src":"5583:197:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2314,"nodeType":"Block","src":"6122:168:25","statements":[{"assignments":[2299,2301],"declarations":[{"constant":false,"id":2299,"mutability":"mutable","name":"success","nameLocation":"6138:7:25","nodeType":"VariableDeclaration","scope":2314,"src":"6133:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2298,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:25","nodeType":"VariableDeclaration","scope":2314,"src":"6147:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2300,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2306,"initialValue":{"arguments":[{"id":2304,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"6192:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2302,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"6174:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:25","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:25","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:25"},{"expression":{"arguments":[{"id":2308,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"6241:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2309,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"6249:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2310,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"6258:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2311,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6270:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2307,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"6214:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2297,"id":2313,"nodeType":"Return","src":"6207:76:25"}]},"documentation":{"id":2287,"nodeType":"StructuredDocumentation","src":"5786:173:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2315,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:25","nodeType":"FunctionDefinition","parameters":{"id":2294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2289,"mutability":"mutable","name":"target","nameLocation":"6009:6:25","nodeType":"VariableDeclaration","scope":2315,"src":"6001:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2288,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2291,"mutability":"mutable","name":"data","nameLocation":"6038:4:25","nodeType":"VariableDeclaration","scope":2315,"src":"6025:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2290,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2293,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:25","nodeType":"VariableDeclaration","scope":2315,"src":"6052:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2292,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:25"},"returnParameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2315,"src":"6108:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2295,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:25"},"scope":2445,"src":"5964:326:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2331,"nodeType":"Block","src":"6566:101:25","statements":[{"expression":{"arguments":[{"id":2326,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"6604:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2327,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"6612:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":2325,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2332,2361],"referencedDeclaration":2361,"src":"6583:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2324,"id":2330,"nodeType":"Return","src":"6576:84:25"}]},"documentation":{"id":2316,"nodeType":"StructuredDocumentation","src":"6296:168:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2332,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:25","nodeType":"FunctionDefinition","parameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2318,"mutability":"mutable","name":"target","nameLocation":"6507:6:25","nodeType":"VariableDeclaration","scope":2332,"src":"6499:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2317,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2320,"mutability":"mutable","name":"data","nameLocation":"6528:4:25","nodeType":"VariableDeclaration","scope":2332,"src":"6515:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2319,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:25"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2332,"src":"6552:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2322,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:25"},"scope":2445,"src":"6469:198:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2360,"nodeType":"Block","src":"7008:170:25","statements":[{"assignments":[2345,2347],"declarations":[{"constant":false,"id":2345,"mutability":"mutable","name":"success","nameLocation":"7024:7:25","nodeType":"VariableDeclaration","scope":2360,"src":"7019:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2344,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2347,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:25","nodeType":"VariableDeclaration","scope":2360,"src":"7033:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2346,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2352,"initialValue":{"arguments":[{"id":2350,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7080:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2348,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7060:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:25","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:25","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:25"},{"expression":{"arguments":[{"id":2354,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7129:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2355,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"7137:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2356,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"7146:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2357,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"7158:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2353,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"7102:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2343,"id":2359,"nodeType":"Return","src":"7095:76:25"}]},"documentation":{"id":2333,"nodeType":"StructuredDocumentation","src":"6673:175:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2361,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:25","nodeType":"FunctionDefinition","parameters":{"id":2340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"target","nameLocation":"6900:6:25","nodeType":"VariableDeclaration","scope":2361,"src":"6892:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2334,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2337,"mutability":"mutable","name":"data","nameLocation":"6929:4:25","nodeType":"VariableDeclaration","scope":2361,"src":"6916:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2336,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2339,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:25","nodeType":"VariableDeclaration","scope":2361,"src":"6943:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2338,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:25"},"returnParameters":{"id":2343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2361,"src":"6994:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2341,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:25"},"scope":2445,"src":"6853:325:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2399,"nodeType":"Block","src":"7660:434:25","statements":[{"condition":{"id":2375,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"7674:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2397,"nodeType":"Block","src":"8030:58:25","statements":[{"expression":{"arguments":[{"id":2393,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"8052:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2394,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"8064:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2392,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"8044:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2396,"nodeType":"ExpressionStatement","src":"8044:33:25"}]},"id":2398,"nodeType":"IfStatement","src":"7670:418:25","trueBody":{"id":2391,"nodeType":"Block","src":"7683:341:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2376,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"7701:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:25","memberName":"length","nodeType":"MemberAccess","src":"7701:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2388,"nodeType":"IfStatement","src":"7697:286:25","trueBody":{"id":2387,"nodeType":"Block","src":"7725:258:25","statements":[{"expression":{"arguments":[{"arguments":[{"id":2382,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"7927:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2381,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"7916:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2380,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2386,"nodeType":"ExpressionStatement","src":"7908:60:25"}]}},{"expression":{"id":2389,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"8003:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2374,"id":2390,"nodeType":"Return","src":"7996:17:25"}]}}]},"documentation":{"id":2362,"nodeType":"StructuredDocumentation","src":"7184:277:25","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2400,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:25","nodeType":"FunctionDefinition","parameters":{"id":2371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2364,"mutability":"mutable","name":"target","nameLocation":"7519:6:25","nodeType":"VariableDeclaration","scope":2400,"src":"7511:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2363,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"success","nameLocation":"7540:7:25","nodeType":"VariableDeclaration","scope":2400,"src":"7535:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2365,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2368,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:25","nodeType":"VariableDeclaration","scope":2400,"src":"7557:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2367,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2370,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:25","nodeType":"VariableDeclaration","scope":2400,"src":"7590:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2369,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:25"},"returnParameters":{"id":2374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2400,"src":"7646:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2372,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:25"},"scope":2445,"src":"7466:628:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2423,"nodeType":"Block","src":"8475:135:25","statements":[{"condition":{"id":2412,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"8489:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2421,"nodeType":"Block","src":"8546:58:25","statements":[{"expression":{"arguments":[{"id":2417,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"8568:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2418,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"8580:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2416,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"8560:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2420,"nodeType":"ExpressionStatement","src":"8560:33:25"}]},"id":2422,"nodeType":"IfStatement","src":"8485:119:25","trueBody":{"id":2415,"nodeType":"Block","src":"8498:42:25","statements":[{"expression":{"id":2413,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"8519:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2411,"id":2414,"nodeType":"Return","src":"8512:17:25"}]}}]},"documentation":{"id":2401,"nodeType":"StructuredDocumentation","src":"8100:210:25","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2424,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:25","nodeType":"FunctionDefinition","parameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2403,"mutability":"mutable","name":"success","nameLocation":"8355:7:25","nodeType":"VariableDeclaration","scope":2424,"src":"8350:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2402,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2405,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:25","nodeType":"VariableDeclaration","scope":2424,"src":"8372:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2404,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2407,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:25","nodeType":"VariableDeclaration","scope":2424,"src":"8405:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2406,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:25"},"returnParameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2424,"src":"8461:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2409,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:25"},"scope":2445,"src":"8315:295:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2443,"nodeType":"Block","src":"8699:457:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2431,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"8775:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:25","memberName":"length","nodeType":"MemberAccess","src":"8775:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2441,"nodeType":"Block","src":"9105:45:25","statements":[{"expression":{"arguments":[{"id":2438,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9126:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2437,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:25","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2440,"nodeType":"ExpressionStatement","src":"9119:20:25"}]},"id":2442,"nodeType":"IfStatement","src":"8771:379:25","trueBody":{"id":2436,"nodeType":"Block","src":"8798:301:25","statements":[{"AST":{"nativeSrc":"8956:133:25","nodeType":"YulBlock","src":"8956:133:25","statements":[{"nativeSrc":"8974:40:25","nodeType":"YulVariableDeclaration","src":"8974:40:25","value":{"arguments":[{"name":"returndata","nativeSrc":"9003:10:25","nodeType":"YulIdentifier","src":"9003:10:25"}],"functionName":{"name":"mload","nativeSrc":"8997:5:25","nodeType":"YulIdentifier","src":"8997:5:25"},"nativeSrc":"8997:17:25","nodeType":"YulFunctionCall","src":"8997:17:25"},"variables":[{"name":"returndata_size","nativeSrc":"8978:15:25","nodeType":"YulTypedName","src":"8978:15:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9042:2:25","nodeType":"YulLiteral","src":"9042:2:25","type":"","value":"32"},{"name":"returndata","nativeSrc":"9046:10:25","nodeType":"YulIdentifier","src":"9046:10:25"}],"functionName":{"name":"add","nativeSrc":"9038:3:25","nodeType":"YulIdentifier","src":"9038:3:25"},"nativeSrc":"9038:19:25","nodeType":"YulFunctionCall","src":"9038:19:25"},{"name":"returndata_size","nativeSrc":"9059:15:25","nodeType":"YulIdentifier","src":"9059:15:25"}],"functionName":{"name":"revert","nativeSrc":"9031:6:25","nodeType":"YulIdentifier","src":"9031:6:25"},"nativeSrc":"9031:44:25","nodeType":"YulFunctionCall","src":"9031:44:25"},"nativeSrc":"9031:44:25","nodeType":"YulExpressionStatement","src":"9031:44:25"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2426,"isOffset":false,"isSlot":false,"src":"9003:10:25","valueSize":1},{"declaration":2426,"isOffset":false,"isSlot":false,"src":"9046:10:25","valueSize":1}],"id":2435,"nodeType":"InlineAssembly","src":"8947:142:25"}]}}]},"id":2444,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:25","nodeType":"FunctionDefinition","parameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:25","nodeType":"VariableDeclaration","scope":2444,"src":"8633:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2425,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2428,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:25","nodeType":"VariableDeclaration","scope":2444,"src":"8658:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2427,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:25"},"returnParameters":{"id":2430,"nodeType":"ParameterList","parameters":[],"src":"8699:0:25"},"scope":2445,"src":"8616:540:25","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2446,"src":"194:8964:25","usedErrors":[],"usedEvents":[]}],"src":"101:9058:25"},"id":25},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2467]},"id":2468,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2447,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:26"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2448,"nodeType":"StructuredDocumentation","src":"111:496:26","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2467,"linearizedBaseContracts":[2467],"name":"Context","nameLocation":"626:7:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":2456,"nodeType":"Block","src":"702:34:26","statements":[{"expression":{"expression":{"id":2453,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:26","memberName":"sender","nodeType":"MemberAccess","src":"719:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2452,"id":2455,"nodeType":"Return","src":"712:17:26"}]},"id":2457,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:26","nodeType":"FunctionDefinition","parameters":{"id":2449,"nodeType":"ParameterList","parameters":[],"src":"659:2:26"},"returnParameters":{"id":2452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"693:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2450,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:26"},"scope":2467,"src":"640:96:26","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2465,"nodeType":"Block","src":"809:32:26","statements":[{"expression":{"expression":{"id":2462,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:26","memberName":"data","nodeType":"MemberAccess","src":"826:8:26","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2461,"id":2464,"nodeType":"Return","src":"819:15:26"}]},"id":2466,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:26","nodeType":"FunctionDefinition","parameters":{"id":2458,"nodeType":"ParameterList","parameters":[],"src":"759:2:26"},"returnParameters":{"id":2461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2466,"src":"793:14:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2459,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:26"},"scope":2467,"src":"742:99:26","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2468,"src":"608:235:26","usedErrors":[],"usedEvents":[]}],"src":"86:758:26"},"id":26},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2527]},"id":2528,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2469,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:27"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2470,"nodeType":"StructuredDocumentation","src":"130:1148:27","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":2527,"linearizedBaseContracts":[2527],"name":"StorageSlot","nameLocation":"1287:11:27","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2473,"members":[{"constant":false,"id":2472,"mutability":"mutable","name":"value","nameLocation":"1342:5:27","nodeType":"VariableDeclaration","scope":2473,"src":"1334:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2471,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:27","nodeType":"StructDefinition","scope":2527,"src":"1305:49:27","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2476,"members":[{"constant":false,"id":2475,"mutability":"mutable","name":"value","nameLocation":"1394:5:27","nodeType":"VariableDeclaration","scope":2476,"src":"1389:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2474,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:27","nodeType":"StructDefinition","scope":2527,"src":"1360:46:27","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2479,"members":[{"constant":false,"id":2478,"mutability":"mutable","name":"value","nameLocation":"1449:5:27","nodeType":"VariableDeclaration","scope":2479,"src":"1441:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:27","nodeType":"StructDefinition","scope":2527,"src":"1412:49:27","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2482,"members":[{"constant":false,"id":2481,"mutability":"mutable","name":"value","nameLocation":"1504:5:27","nodeType":"VariableDeclaration","scope":2482,"src":"1496:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:27","nodeType":"StructDefinition","scope":2527,"src":"1467:49:27","visibility":"public"},{"body":{"id":2492,"nodeType":"Block","src":"1698:106:27","statements":[{"AST":{"nativeSrc":"1760:38:27","nodeType":"YulBlock","src":"1760:38:27","statements":[{"nativeSrc":"1774:14:27","nodeType":"YulAssignment","src":"1774:14:27","value":{"name":"slot","nativeSrc":"1784:4:27","nodeType":"YulIdentifier","src":"1784:4:27"},"variableNames":[{"name":"r.slot","nativeSrc":"1774:6:27","nodeType":"YulIdentifier","src":"1774:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2489,"isOffset":false,"isSlot":true,"src":"1774:6:27","suffix":"slot","valueSize":1},{"declaration":2485,"isOffset":false,"isSlot":false,"src":"1784:4:27","valueSize":1}],"id":2491,"nodeType":"InlineAssembly","src":"1751:47:27"}]},"documentation":{"id":2483,"nodeType":"StructuredDocumentation","src":"1522:87:27","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2493,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:27","nodeType":"FunctionDefinition","parameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"slot","nameLocation":"1646:4:27","nodeType":"VariableDeclaration","scope":2493,"src":"1638:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:27"},"returnParameters":{"id":2490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2489,"mutability":"mutable","name":"r","nameLocation":"1695:1:27","nodeType":"VariableDeclaration","scope":2493,"src":"1675:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2473_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2488,"nodeType":"UserDefinedTypeName","pathNode":{"id":2487,"name":"AddressSlot","nameLocations":["1675:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2473,"src":"1675:11:27"},"referencedDeclaration":2473,"src":"1675:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2473_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:27"},"scope":2527,"src":"1614:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2503,"nodeType":"Block","src":"1986:106:27","statements":[{"AST":{"nativeSrc":"2048:38:27","nodeType":"YulBlock","src":"2048:38:27","statements":[{"nativeSrc":"2062:14:27","nodeType":"YulAssignment","src":"2062:14:27","value":{"name":"slot","nativeSrc":"2072:4:27","nodeType":"YulIdentifier","src":"2072:4:27"},"variableNames":[{"name":"r.slot","nativeSrc":"2062:6:27","nodeType":"YulIdentifier","src":"2062:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2500,"isOffset":false,"isSlot":true,"src":"2062:6:27","suffix":"slot","valueSize":1},{"declaration":2496,"isOffset":false,"isSlot":false,"src":"2072:4:27","valueSize":1}],"id":2502,"nodeType":"InlineAssembly","src":"2039:47:27"}]},"documentation":{"id":2494,"nodeType":"StructuredDocumentation","src":"1810:87:27","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2504,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:27","nodeType":"FunctionDefinition","parameters":{"id":2497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2496,"mutability":"mutable","name":"slot","nameLocation":"1934:4:27","nodeType":"VariableDeclaration","scope":2504,"src":"1926:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:27"},"returnParameters":{"id":2501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2500,"mutability":"mutable","name":"r","nameLocation":"1983:1:27","nodeType":"VariableDeclaration","scope":2504,"src":"1963:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2476_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2499,"nodeType":"UserDefinedTypeName","pathNode":{"id":2498,"name":"BooleanSlot","nameLocations":["1963:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2476,"src":"1963:11:27"},"referencedDeclaration":2476,"src":"1963:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2476_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:27"},"scope":2527,"src":"1902:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2514,"nodeType":"Block","src":"2274:106:27","statements":[{"AST":{"nativeSrc":"2336:38:27","nodeType":"YulBlock","src":"2336:38:27","statements":[{"nativeSrc":"2350:14:27","nodeType":"YulAssignment","src":"2350:14:27","value":{"name":"slot","nativeSrc":"2360:4:27","nodeType":"YulIdentifier","src":"2360:4:27"},"variableNames":[{"name":"r.slot","nativeSrc":"2350:6:27","nodeType":"YulIdentifier","src":"2350:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2511,"isOffset":false,"isSlot":true,"src":"2350:6:27","suffix":"slot","valueSize":1},{"declaration":2507,"isOffset":false,"isSlot":false,"src":"2360:4:27","valueSize":1}],"id":2513,"nodeType":"InlineAssembly","src":"2327:47:27"}]},"documentation":{"id":2505,"nodeType":"StructuredDocumentation","src":"2098:87:27","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2515,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:27","nodeType":"FunctionDefinition","parameters":{"id":2508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2507,"mutability":"mutable","name":"slot","nameLocation":"2222:4:27","nodeType":"VariableDeclaration","scope":2515,"src":"2214:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:27"},"returnParameters":{"id":2512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2511,"mutability":"mutable","name":"r","nameLocation":"2271:1:27","nodeType":"VariableDeclaration","scope":2515,"src":"2251:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2479_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2510,"nodeType":"UserDefinedTypeName","pathNode":{"id":2509,"name":"Bytes32Slot","nameLocations":["2251:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2479,"src":"2251:11:27"},"referencedDeclaration":2479,"src":"2251:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2479_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:27"},"scope":2527,"src":"2190:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2525,"nodeType":"Block","src":"2562:106:27","statements":[{"AST":{"nativeSrc":"2624:38:27","nodeType":"YulBlock","src":"2624:38:27","statements":[{"nativeSrc":"2638:14:27","nodeType":"YulAssignment","src":"2638:14:27","value":{"name":"slot","nativeSrc":"2648:4:27","nodeType":"YulIdentifier","src":"2648:4:27"},"variableNames":[{"name":"r.slot","nativeSrc":"2638:6:27","nodeType":"YulIdentifier","src":"2638:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2522,"isOffset":false,"isSlot":true,"src":"2638:6:27","suffix":"slot","valueSize":1},{"declaration":2518,"isOffset":false,"isSlot":false,"src":"2648:4:27","valueSize":1}],"id":2524,"nodeType":"InlineAssembly","src":"2615:47:27"}]},"documentation":{"id":2516,"nodeType":"StructuredDocumentation","src":"2386:87:27","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2526,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:27","nodeType":"FunctionDefinition","parameters":{"id":2519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2518,"mutability":"mutable","name":"slot","nameLocation":"2510:4:27","nodeType":"VariableDeclaration","scope":2526,"src":"2502:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:27"},"returnParameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"r","nameLocation":"2559:1:27","nodeType":"VariableDeclaration","scope":2526,"src":"2539:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2482_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2521,"nodeType":"UserDefinedTypeName","pathNode":{"id":2520,"name":"Uint256Slot","nameLocations":["2539:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2482,"src":"2539:11:27"},"referencedDeclaration":2482,"src":"2539:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2482_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:27"},"scope":2527,"src":"2478:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2528,"src":"1279:1391:27","usedErrors":[],"usedEvents":[]}],"src":"105:2566:27"},"id":27},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4011],"Strings":[2702]},"id":2703,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2529,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:28"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2530,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":4012,"src":"126:25:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2531,"nodeType":"StructuredDocumentation","src":"153:34:28","text":" @dev String operations."},"fullyImplemented":true,"id":2702,"linearizedBaseContracts":[2702],"name":"Strings","nameLocation":"196:7:28","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2534,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:28","nodeType":"VariableDeclaration","scope":2702,"src":"210:54:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2532,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:28","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2537,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:28","nodeType":"VariableDeclaration","scope":2702,"src":"270:43:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2535,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:28","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2584,"nodeType":"Block","src":"486:625:28","statements":[{"id":2583,"nodeType":"UncheckedBlock","src":"496:609:28","statements":[{"assignments":[2546],"declarations":[{"constant":false,"id":2546,"mutability":"mutable","name":"length","nameLocation":"528:6:28","nodeType":"VariableDeclaration","scope":2583,"src":"520:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2545,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2553,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2540,"src":"548:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2547,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"537:4:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4011_$","typeString":"type(library Math)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:28","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3848,"src":"537:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:28"},{"assignments":[2555],"declarations":[{"constant":false,"id":2555,"mutability":"mutable","name":"buffer","nameLocation":"586:6:28","nodeType":"VariableDeclaration","scope":2583,"src":"572:20:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2554,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2560,"initialValue":{"arguments":[{"id":2558,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"606:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2556,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:28"},{"assignments":[2562],"declarations":[{"constant":false,"id":2562,"mutability":"mutable","name":"ptr","nameLocation":"635:3:28","nodeType":"VariableDeclaration","scope":2583,"src":"627:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2561,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2563,"nodeType":"VariableDeclarationStatement","src":"627:11:28"},{"AST":{"nativeSrc":"708:67:28","nodeType":"YulBlock","src":"708:67:28","statements":[{"nativeSrc":"726:35:28","nodeType":"YulAssignment","src":"726:35:28","value":{"arguments":[{"name":"buffer","nativeSrc":"737:6:28","nodeType":"YulIdentifier","src":"737:6:28"},{"arguments":[{"kind":"number","nativeSrc":"749:2:28","nodeType":"YulLiteral","src":"749:2:28","type":"","value":"32"},{"name":"length","nativeSrc":"753:6:28","nodeType":"YulIdentifier","src":"753:6:28"}],"functionName":{"name":"add","nativeSrc":"745:3:28","nodeType":"YulIdentifier","src":"745:3:28"},"nativeSrc":"745:15:28","nodeType":"YulFunctionCall","src":"745:15:28"}],"functionName":{"name":"add","nativeSrc":"733:3:28","nodeType":"YulIdentifier","src":"733:3:28"},"nativeSrc":"733:28:28","nodeType":"YulFunctionCall","src":"733:28:28"},"variableNames":[{"name":"ptr","nativeSrc":"726:3:28","nodeType":"YulIdentifier","src":"726:3:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2555,"isOffset":false,"isSlot":false,"src":"737:6:28","valueSize":1},{"declaration":2546,"isOffset":false,"isSlot":false,"src":"753:6:28","valueSize":1},{"declaration":2562,"isOffset":false,"isSlot":false,"src":"726:3:28","valueSize":1}],"id":2564,"nodeType":"InlineAssembly","src":"699:76:28"},{"body":{"id":2579,"nodeType":"Block","src":"801:267:28","statements":[{"expression":{"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:28","subExpression":{"id":2566,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"819:3:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2568,"nodeType":"ExpressionStatement","src":"819:5:28"},{"AST":{"nativeSrc":"902:84:28","nodeType":"YulBlock","src":"902:84:28","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"932:3:28","nodeType":"YulIdentifier","src":"932:3:28"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"946:5:28","nodeType":"YulIdentifier","src":"946:5:28"},{"kind":"number","nativeSrc":"953:2:28","nodeType":"YulLiteral","src":"953:2:28","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"942:3:28","nodeType":"YulIdentifier","src":"942:3:28"},"nativeSrc":"942:14:28","nodeType":"YulFunctionCall","src":"942:14:28"},{"name":"_SYMBOLS","nativeSrc":"958:8:28","nodeType":"YulIdentifier","src":"958:8:28"}],"functionName":{"name":"byte","nativeSrc":"937:4:28","nodeType":"YulIdentifier","src":"937:4:28"},"nativeSrc":"937:30:28","nodeType":"YulFunctionCall","src":"937:30:28"}],"functionName":{"name":"mstore8","nativeSrc":"924:7:28","nodeType":"YulIdentifier","src":"924:7:28"},"nativeSrc":"924:44:28","nodeType":"YulFunctionCall","src":"924:44:28"},"nativeSrc":"924:44:28","nodeType":"YulExpressionStatement","src":"924:44:28"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2534,"isOffset":false,"isSlot":false,"src":"958:8:28","valueSize":1},{"declaration":2562,"isOffset":false,"isSlot":false,"src":"932:3:28","valueSize":1},{"declaration":2540,"isOffset":false,"isSlot":false,"src":"946:5:28","valueSize":1}],"id":2569,"nodeType":"InlineAssembly","src":"893:93:28"},{"expression":{"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2570,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2540,"src":"1003:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:28","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2573,"nodeType":"ExpressionStatement","src":"1003:11:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2540,"src":"1036:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2578,"nodeType":"IfStatement","src":"1032:21:28","trueBody":{"id":2577,"nodeType":"Break","src":"1048:5:28"}}]},"condition":{"hexValue":"74727565","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2580,"nodeType":"WhileStatement","src":"788:280:28"},{"expression":{"id":2581,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"1088:6:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2544,"id":2582,"nodeType":"Return","src":"1081:13:28"}]}]},"documentation":{"id":2538,"nodeType":"StructuredDocumentation","src":"320:90:28","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2585,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:28","nodeType":"FunctionDefinition","parameters":{"id":2541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2540,"mutability":"mutable","name":"value","nameLocation":"441:5:28","nodeType":"VariableDeclaration","scope":2585,"src":"433:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2539,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:28"},"returnParameters":{"id":2544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2585,"src":"471:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2542,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:28"},"scope":2702,"src":"415:696:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2604,"nodeType":"Block","src":"1290:100:28","statements":[{"id":2603,"nodeType":"UncheckedBlock","src":"1300:84:28","statements":[{"expression":{"arguments":[{"id":2594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"1343:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"1362:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2595,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"1350:4:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4011_$","typeString":"type(library Math)"}},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:28","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3971,"src":"1350:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2593,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2605,2681,2701],"referencedDeclaration":2681,"src":"1331:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2592,"id":2602,"nodeType":"Return","src":"1324:49:28"}]}]},"documentation":{"id":2586,"nodeType":"StructuredDocumentation","src":"1117:94:28","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2605,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:28","nodeType":"FunctionDefinition","parameters":{"id":2589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2588,"mutability":"mutable","name":"value","nameLocation":"1245:5:28","nodeType":"VariableDeclaration","scope":2605,"src":"1237:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2587,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:28"},"returnParameters":{"id":2592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2605,"src":"1275:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2590,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:28"},"scope":2702,"src":"1216:174:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2680,"nodeType":"Block","src":"1603:347:28","statements":[{"assignments":[2616],"declarations":[{"constant":false,"id":2616,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:28","nodeType":"VariableDeclaration","scope":2680,"src":"1613:19:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2615,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2625,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:28","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2620,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"1649:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:28","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2617,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:28"},{"expression":{"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2626,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1670:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2628,"indexExpression":{"hexValue":"30","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2631,"nodeType":"ExpressionStatement","src":"1670:15:28"},{"expression":{"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2632,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1695:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2634,"indexExpression":{"hexValue":"31","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2637,"nodeType":"ExpressionStatement","src":"1695:15:28"},{"body":{"id":2666,"nodeType":"Block","src":"1765:83:28","statements":[{"expression":{"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2652,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1779:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2654,"indexExpression":{"id":2653,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"1786:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2655,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"1791:8:28","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2659,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"1800:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:28","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2661,"nodeType":"ExpressionStatement","src":"1779:33:28"},{"expression":{"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"1826:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:28","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2665,"nodeType":"ExpressionStatement","src":"1826:11:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2646,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"1753:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2667,"initializationExpression":{"assignments":[2639],"declarations":[{"constant":false,"id":2639,"mutability":"mutable","name":"i","nameLocation":"1733:1:28","nodeType":"VariableDeclaration","scope":2667,"src":"1725:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2645,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:28","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2641,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"1741:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:28"},"loopExpression":{"expression":{"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:28","subExpression":{"id":2649,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"1762:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2651,"nodeType":"ExpressionStatement","src":"1760:3:28"},"nodeType":"ForStatement","src":"1720:128:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"1865:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2668,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2674,"nodeType":"ExpressionStatement","src":"1857:55:28"},{"expression":{"arguments":[{"id":2677,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1936:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2675,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:28","typeDescriptions":{}}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2614,"id":2679,"nodeType":"Return","src":"1922:21:28"}]},"documentation":{"id":2606,"nodeType":"StructuredDocumentation","src":"1396:112:28","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2681,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:28","nodeType":"FunctionDefinition","parameters":{"id":2611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2608,"mutability":"mutable","name":"value","nameLocation":"1542:5:28","nodeType":"VariableDeclaration","scope":2681,"src":"1534:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2607,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2610,"mutability":"mutable","name":"length","nameLocation":"1557:6:28","nodeType":"VariableDeclaration","scope":2681,"src":"1549:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2609,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:28"},"returnParameters":{"id":2614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2681,"src":"1588:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2612,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:28"},"scope":2702,"src":"1513:437:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2700,"nodeType":"Block","src":"2175:76:28","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2694,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"2220:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2692,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:28","typeDescriptions":{}}},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:28","typeDescriptions":{}}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2697,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"2228:15:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2689,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2605,2681,2701],"referencedDeclaration":2681,"src":"2192:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2688,"id":2699,"nodeType":"Return","src":"2185:59:28"}]},"documentation":{"id":2682,"nodeType":"StructuredDocumentation","src":"1956:141:28","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2701,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:28","nodeType":"FunctionDefinition","parameters":{"id":2685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2684,"mutability":"mutable","name":"addr","nameLocation":"2131:4:28","nodeType":"VariableDeclaration","scope":2701,"src":"2123:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2683,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:28"},"returnParameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2701,"src":"2160:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2686,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:28"},"scope":2702,"src":"2102:149:28","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2703,"src":"188:2065:28","usedErrors":[],"usedEvents":[]}],"src":"101:2153:28"},"id":28},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[3063],"Math":[4011],"Strings":[2702]},"id":3064,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2704,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:29"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":2705,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3064,"sourceUnit":2703,"src":"137:24:29","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":2706,"nodeType":"StructuredDocumentation","src":"163:205:29","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3063,"linearizedBaseContracts":[3063],"name":"ECDSA","nameLocation":"377:5:29","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":2712,"members":[{"id":2707,"name":"NoError","nameLocation":"417:7:29","nodeType":"EnumValue","src":"417:7:29"},{"id":2708,"name":"InvalidSignature","nameLocation":"434:16:29","nodeType":"EnumValue","src":"434:16:29"},{"id":2709,"name":"InvalidSignatureLength","nameLocation":"460:22:29","nodeType":"EnumValue","src":"460:22:29"},{"id":2710,"name":"InvalidSignatureS","nameLocation":"492:17:29","nodeType":"EnumValue","src":"492:17:29"},{"id":2711,"name":"InvalidSignatureV","nameLocation":"519:17:29","nodeType":"EnumValue","src":"519:17:29"}],"name":"RecoverError","nameLocation":"394:12:29","nodeType":"EnumDefinition","src":"389:175:29"},{"body":{"id":2755,"nodeType":"Block","src":"624:457:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2718,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"638:5:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2719,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"647:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:29","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2707,"src":"647:20:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2724,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"734:5:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2725,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"743:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:29","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2708,"src":"743:29:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2733,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"843:5:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2734,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"852:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:29","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2709,"src":"852:35:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2742,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"965:5:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2743,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"974:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:29","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2710,"src":"974:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2751,"nodeType":"IfStatement","src":"961:114:29","trueBody":{"id":2750,"nodeType":"Block","src":"1006:69:29","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2746,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:29","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2749,"nodeType":"ExpressionStatement","src":"1020:44:29"}]}},"id":2752,"nodeType":"IfStatement","src":"839:236:29","trueBody":{"id":2741,"nodeType":"Block","src":"889:66:29","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2737,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:29","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2740,"nodeType":"ExpressionStatement","src":"903:41:29"}]}},"id":2753,"nodeType":"IfStatement","src":"730:345:29","trueBody":{"id":2732,"nodeType":"Block","src":"774:59:29","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2728,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:29","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2731,"nodeType":"ExpressionStatement","src":"788:34:29"}]}},"id":2754,"nodeType":"IfStatement","src":"634:441:29","trueBody":{"id":2723,"nodeType":"Block","src":"669:55:29","statements":[{"functionReturnParameters":2717,"id":2722,"nodeType":"Return","src":"683:7:29"}]}}]},"id":2756,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:29","nodeType":"FunctionDefinition","parameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2715,"mutability":"mutable","name":"error","nameLocation":"604:5:29","nodeType":"VariableDeclaration","scope":2756,"src":"591:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2714,"nodeType":"UserDefinedTypeName","pathNode":{"id":2713,"name":"RecoverError","nameLocations":["591:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"591:12:29"},"referencedDeclaration":2712,"src":"591:12:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:29"},"returnParameters":{"id":2717,"nodeType":"ParameterList","parameters":[],"src":"624:0:29"},"scope":3063,"src":"570:511:29","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2801,"nodeType":"Block","src":"2249:626:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2769,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2263:9:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:29","memberName":"length","nodeType":"MemberAccess","src":"2263:16:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:29","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2799,"nodeType":"Block","src":"2788:81:29","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2791,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:29","typeDescriptions":{}}},"id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2795,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"2822:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:29","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2709,"src":"2822:35:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}}],"id":2797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2768,"id":2798,"nodeType":"Return","src":"2802:56:29"}]},"id":2800,"nodeType":"IfStatement","src":"2259:610:29","trueBody":{"id":2790,"nodeType":"Block","src":"2287:495:29","statements":[{"assignments":[2774],"declarations":[{"constant":false,"id":2774,"mutability":"mutable","name":"r","nameLocation":"2309:1:29","nodeType":"VariableDeclaration","scope":2790,"src":"2301:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2773,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2775,"nodeType":"VariableDeclarationStatement","src":"2301:9:29"},{"assignments":[2777],"declarations":[{"constant":false,"id":2777,"mutability":"mutable","name":"s","nameLocation":"2332:1:29","nodeType":"VariableDeclaration","scope":2790,"src":"2324:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2776,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2778,"nodeType":"VariableDeclarationStatement","src":"2324:9:29"},{"assignments":[2780],"declarations":[{"constant":false,"id":2780,"mutability":"mutable","name":"v","nameLocation":"2353:1:29","nodeType":"VariableDeclaration","scope":2790,"src":"2347:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2779,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2781,"nodeType":"VariableDeclarationStatement","src":"2347:7:29"},{"AST":{"nativeSrc":"2555:171:29","nodeType":"YulBlock","src":"2555:171:29","statements":[{"nativeSrc":"2573:32:29","nodeType":"YulAssignment","src":"2573:32:29","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2588:9:29","nodeType":"YulIdentifier","src":"2588:9:29"},{"kind":"number","nativeSrc":"2599:4:29","nodeType":"YulLiteral","src":"2599:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2584:3:29","nodeType":"YulIdentifier","src":"2584:3:29"},"nativeSrc":"2584:20:29","nodeType":"YulFunctionCall","src":"2584:20:29"}],"functionName":{"name":"mload","nativeSrc":"2578:5:29","nodeType":"YulIdentifier","src":"2578:5:29"},"nativeSrc":"2578:27:29","nodeType":"YulFunctionCall","src":"2578:27:29"},"variableNames":[{"name":"r","nativeSrc":"2573:1:29","nodeType":"YulIdentifier","src":"2573:1:29"}]},{"nativeSrc":"2622:32:29","nodeType":"YulAssignment","src":"2622:32:29","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2637:9:29","nodeType":"YulIdentifier","src":"2637:9:29"},{"kind":"number","nativeSrc":"2648:4:29","nodeType":"YulLiteral","src":"2648:4:29","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2633:3:29","nodeType":"YulIdentifier","src":"2633:3:29"},"nativeSrc":"2633:20:29","nodeType":"YulFunctionCall","src":"2633:20:29"}],"functionName":{"name":"mload","nativeSrc":"2627:5:29","nodeType":"YulIdentifier","src":"2627:5:29"},"nativeSrc":"2627:27:29","nodeType":"YulFunctionCall","src":"2627:27:29"},"variableNames":[{"name":"s","nativeSrc":"2622:1:29","nodeType":"YulIdentifier","src":"2622:1:29"}]},{"nativeSrc":"2671:41:29","nodeType":"YulAssignment","src":"2671:41:29","value":{"arguments":[{"kind":"number","nativeSrc":"2681:1:29","nodeType":"YulLiteral","src":"2681:1:29","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2694:9:29","nodeType":"YulIdentifier","src":"2694:9:29"},{"kind":"number","nativeSrc":"2705:4:29","nodeType":"YulLiteral","src":"2705:4:29","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2690:3:29","nodeType":"YulIdentifier","src":"2690:3:29"},"nativeSrc":"2690:20:29","nodeType":"YulFunctionCall","src":"2690:20:29"}],"functionName":{"name":"mload","nativeSrc":"2684:5:29","nodeType":"YulIdentifier","src":"2684:5:29"},"nativeSrc":"2684:27:29","nodeType":"YulFunctionCall","src":"2684:27:29"}],"functionName":{"name":"byte","nativeSrc":"2676:4:29","nodeType":"YulIdentifier","src":"2676:4:29"},"nativeSrc":"2676:36:29","nodeType":"YulFunctionCall","src":"2676:36:29"},"variableNames":[{"name":"v","nativeSrc":"2671:1:29","nodeType":"YulIdentifier","src":"2671:1:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2774,"isOffset":false,"isSlot":false,"src":"2573:1:29","valueSize":1},{"declaration":2777,"isOffset":false,"isSlot":false,"src":"2622:1:29","valueSize":1},{"declaration":2761,"isOffset":false,"isSlot":false,"src":"2588:9:29","valueSize":1},{"declaration":2761,"isOffset":false,"isSlot":false,"src":"2637:9:29","valueSize":1},{"declaration":2761,"isOffset":false,"isSlot":false,"src":"2694:9:29","valueSize":1},{"declaration":2780,"isOffset":false,"isSlot":false,"src":"2671:1:29","valueSize":1}],"id":2782,"nodeType":"InlineAssembly","src":"2546:180:29"},{"expression":{"arguments":[{"id":2784,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"2757:4:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2785,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"2763:1:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2786,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"2766:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2787,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"2769:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2783,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2802,2876,2970],"referencedDeclaration":2970,"src":"2746:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2768,"id":2789,"nodeType":"Return","src":"2739:32:29"}]}}]},"documentation":{"id":2757,"nodeType":"StructuredDocumentation","src":"1087:1053:29","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2802,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:29","nodeType":"FunctionDefinition","parameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2759,"mutability":"mutable","name":"hash","nameLocation":"2173:4:29","nodeType":"VariableDeclaration","scope":2802,"src":"2165:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2758,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2761,"mutability":"mutable","name":"signature","nameLocation":"2192:9:29","nodeType":"VariableDeclaration","scope":2802,"src":"2179:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2760,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:29"},"returnParameters":{"id":2768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2802,"src":"2226:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2763,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2802,"src":"2235:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2766,"nodeType":"UserDefinedTypeName","pathNode":{"id":2765,"name":"RecoverError","nameLocations":["2235:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"2235:12:29"},"referencedDeclaration":2712,"src":"2235:12:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:29"},"scope":3063,"src":"2145:730:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2828,"nodeType":"Block","src":"3748:140:29","statements":[{"assignments":[2813,2816],"declarations":[{"constant":false,"id":2813,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:29","nodeType":"VariableDeclaration","scope":2828,"src":"3759:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2812,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"error","nameLocation":"3791:5:29","nodeType":"VariableDeclaration","scope":2828,"src":"3778:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2815,"nodeType":"UserDefinedTypeName","pathNode":{"id":2814,"name":"RecoverError","nameLocations":["3778:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"3778:12:29"},"referencedDeclaration":2712,"src":"3778:12:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2821,"initialValue":{"arguments":[{"id":2818,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"3811:4:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2819,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"3817:9:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2817,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2802,2876,2970],"referencedDeclaration":2802,"src":"3800:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:29"},{"expression":{"arguments":[{"id":2823,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"3849:5:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}],"id":2822,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"3837:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2712_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2825,"nodeType":"ExpressionStatement","src":"3837:18:29"},{"expression":{"id":2826,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"3872:9:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2811,"id":2827,"nodeType":"Return","src":"3865:16:29"}]},"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"2881:775:29","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2829,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:29","nodeType":"FunctionDefinition","parameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"hash","nameLocation":"3686:4:29","nodeType":"VariableDeclaration","scope":2829,"src":"3678:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2804,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2807,"mutability":"mutable","name":"signature","nameLocation":"3705:9:29","nodeType":"VariableDeclaration","scope":2829,"src":"3692:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2806,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:29"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2829,"src":"3739:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2809,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:29"},"scope":3063,"src":"3661:227:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2875,"nodeType":"Block","src":"4275:203:29","statements":[{"assignments":[2845],"declarations":[{"constant":false,"id":2845,"mutability":"mutable","name":"s","nameLocation":"4293:1:29","nodeType":"VariableDeclaration","scope":2875,"src":"4285:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2844,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4285:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2852,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2846,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4297:2:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:66:29","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2847,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:29","typeDescriptions":{}}},"id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:75:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4297:80:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4285:92:29"},{"assignments":[2854],"declarations":[{"constant":false,"id":2854,"mutability":"mutable","name":"v","nameLocation":"4393:1:29","nodeType":"VariableDeclaration","scope":2875,"src":"4387:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2853,"name":"uint8","nodeType":"ElementaryTypeName","src":"4387:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2867,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2859,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4412:2:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4404:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:29","typeDescriptions":{}}},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4404:11:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:3:29","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4404:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2863,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4403:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4426:2:29","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4403:25:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4397:5:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2855,"name":"uint8","nodeType":"ElementaryTypeName","src":"4397:5:29","typeDescriptions":{}}},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4397:32:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4387:42:29"},{"expression":{"arguments":[{"id":2869,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"4457:4:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2870,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"4463:1:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2871,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"4466:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2872,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"4469:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2868,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2802,2876,2970],"referencedDeclaration":2970,"src":"4446:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4446:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2843,"id":2874,"nodeType":"Return","src":"4439:32:29"}]},"documentation":{"id":2830,"nodeType":"StructuredDocumentation","src":"3894:243:29","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2876,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:29","nodeType":"FunctionDefinition","parameters":{"id":2837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2832,"mutability":"mutable","name":"hash","nameLocation":"4179:4:29","nodeType":"VariableDeclaration","scope":2876,"src":"4171:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4171:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2834,"mutability":"mutable","name":"r","nameLocation":"4201:1:29","nodeType":"VariableDeclaration","scope":2876,"src":"4193:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2836,"mutability":"mutable","name":"vs","nameLocation":"4220:2:29","nodeType":"VariableDeclaration","scope":2876,"src":"4212:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2835,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4212:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:67:29"},"returnParameters":{"id":2843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2876,"src":"4252:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2838,"name":"address","nodeType":"ElementaryTypeName","src":"4252:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2876,"src":"4261:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2841,"nodeType":"UserDefinedTypeName","pathNode":{"id":2840,"name":"RecoverError","nameLocations":["4261:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"4261:12:29"},"referencedDeclaration":2712,"src":"4261:12:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4251:23:29"},"scope":3063,"src":"4142:336:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2905,"nodeType":"Block","src":"4759:136:29","statements":[{"assignments":[2889,2892],"declarations":[{"constant":false,"id":2889,"mutability":"mutable","name":"recovered","nameLocation":"4778:9:29","nodeType":"VariableDeclaration","scope":2905,"src":"4770:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2888,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2892,"mutability":"mutable","name":"error","nameLocation":"4802:5:29","nodeType":"VariableDeclaration","scope":2905,"src":"4789:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2891,"nodeType":"UserDefinedTypeName","pathNode":{"id":2890,"name":"RecoverError","nameLocations":["4789:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"4789:12:29"},"referencedDeclaration":2712,"src":"4789:12:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2898,"initialValue":{"arguments":[{"id":2894,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"4822:4:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2895,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"4828:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2896,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"4831:2:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2893,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2802,2876,2970],"referencedDeclaration":2876,"src":"4811:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4769:65:29"},{"expression":{"arguments":[{"id":2900,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"4856:5:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}],"id":2899,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"4844:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2712_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4844:18:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2902,"nodeType":"ExpressionStatement","src":"4844:18:29"},{"expression":{"id":2903,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"4879:9:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2887,"id":2904,"nodeType":"Return","src":"4872:16:29"}]},"documentation":{"id":2877,"nodeType":"StructuredDocumentation","src":"4484:154:29","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2906,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4652:7:29","nodeType":"FunctionDefinition","parameters":{"id":2884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"mutability":"mutable","name":"hash","nameLocation":"4677:4:29","nodeType":"VariableDeclaration","scope":2906,"src":"4669:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2878,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2881,"mutability":"mutable","name":"r","nameLocation":"4699:1:29","nodeType":"VariableDeclaration","scope":2906,"src":"4691:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2880,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2883,"mutability":"mutable","name":"vs","nameLocation":"4718:2:29","nodeType":"VariableDeclaration","scope":2906,"src":"4710:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4659:67:29"},"returnParameters":{"id":2887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2906,"src":"4750:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2885,"name":"address","nodeType":"ElementaryTypeName","src":"4750:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:9:29"},"scope":3063,"src":"4643:252:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2969,"nodeType":"Block","src":"5218:1345:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2925,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"6114:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2923,"name":"uint256","nodeType":"ElementaryTypeName","src":"6106:7:29","typeDescriptions":{}}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6106:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:66:29","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6106:79:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2938,"nodeType":"IfStatement","src":"6102:161:29","trueBody":{"id":2937,"nodeType":"Block","src":"6187:76:29","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6217:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6209:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2929,"name":"address","nodeType":"ElementaryTypeName","src":"6209:7:29","typeDescriptions":{}}},"id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6209:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2933,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"6221:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6234:17:29","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2710,"src":"6221:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}}],"id":2935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6208:44:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2922,"id":2936,"nodeType":"Return","src":"6201:51:29"}]}},{"assignments":[2940],"declarations":[{"constant":false,"id":2940,"mutability":"mutable","name":"signer","nameLocation":"6365:6:29","nodeType":"VariableDeclaration","scope":2969,"src":"6357:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2939,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2947,"initialValue":{"arguments":[{"id":2942,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"6384:4:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2943,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"6390:1:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2944,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"6393:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2945,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"6396:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2941,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6374:9:29","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:24:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6357:41:29"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2948,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"6412:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6430:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2950,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2949,"name":"address","nodeType":"ElementaryTypeName","src":"6422:7:29","typeDescriptions":{}}},"id":2952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6412:20:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2963,"nodeType":"IfStatement","src":"6408:101:29","trueBody":{"id":2962,"nodeType":"Block","src":"6434:75:29","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6464:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6456:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2954,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:29","typeDescriptions":{}}},"id":2957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6456:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2958,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"6468:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6481:16:29","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2708,"src":"6468:29:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}}],"id":2960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6455:43:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2922,"id":2961,"nodeType":"Return","src":"6448:50:29"}]}},{"expression":{"components":[{"id":2964,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"6527:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2965,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"6535:12:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6548:7:29","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2707,"src":"6535:20:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}}],"id":2967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6526:30:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2922,"id":2968,"nodeType":"Return","src":"6519:37:29"}]},"documentation":{"id":2907,"nodeType":"StructuredDocumentation","src":"4901:163:29","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2970,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5078:10:29","nodeType":"FunctionDefinition","parameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"hash","nameLocation":"5106:4:29","nodeType":"VariableDeclaration","scope":2970,"src":"5098:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5098:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2911,"mutability":"mutable","name":"v","nameLocation":"5126:1:29","nodeType":"VariableDeclaration","scope":2970,"src":"5120:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2910,"name":"uint8","nodeType":"ElementaryTypeName","src":"5120:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2913,"mutability":"mutable","name":"r","nameLocation":"5145:1:29","nodeType":"VariableDeclaration","scope":2970,"src":"5137:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5137:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2915,"mutability":"mutable","name":"s","nameLocation":"5164:1:29","nodeType":"VariableDeclaration","scope":2970,"src":"5156:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2914,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5088:83:29"},"returnParameters":{"id":2922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2970,"src":"5195:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2917,"name":"address","nodeType":"ElementaryTypeName","src":"5195:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2970,"src":"5204:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2920,"nodeType":"UserDefinedTypeName","pathNode":{"id":2919,"name":"RecoverError","nameLocations":["5204:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"5204:12:29"},"referencedDeclaration":2712,"src":"5204:12:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5194:23:29"},"scope":3063,"src":"5069:1494:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3002,"nodeType":"Block","src":"6828:138:29","statements":[{"assignments":[2985,2988],"declarations":[{"constant":false,"id":2985,"mutability":"mutable","name":"recovered","nameLocation":"6847:9:29","nodeType":"VariableDeclaration","scope":3002,"src":"6839:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2984,"name":"address","nodeType":"ElementaryTypeName","src":"6839:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2988,"mutability":"mutable","name":"error","nameLocation":"6871:5:29","nodeType":"VariableDeclaration","scope":3002,"src":"6858:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2987,"nodeType":"UserDefinedTypeName","pathNode":{"id":2986,"name":"RecoverError","nameLocations":["6858:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"6858:12:29"},"referencedDeclaration":2712,"src":"6858:12:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2995,"initialValue":{"arguments":[{"id":2990,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"6891:4:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2991,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"6897:1:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2992,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"6900:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2993,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"6903:1:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2989,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2802,2876,2970],"referencedDeclaration":2970,"src":"6880:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6880:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6838:67:29"},{"expression":{"arguments":[{"id":2997,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"6927:5:29","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}],"id":2996,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"6915:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2712_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6915:18:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2999,"nodeType":"ExpressionStatement","src":"6915:18:29"},{"expression":{"id":3000,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"6950:9:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2983,"id":3001,"nodeType":"Return","src":"6943:16:29"}]},"documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"6569:122:29","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3003,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6705:7:29","nodeType":"FunctionDefinition","parameters":{"id":2980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"hash","nameLocation":"6730:4:29","nodeType":"VariableDeclaration","scope":3003,"src":"6722:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6722:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"v","nameLocation":"6750:1:29","nodeType":"VariableDeclaration","scope":3003,"src":"6744:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2974,"name":"uint8","nodeType":"ElementaryTypeName","src":"6744:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2977,"mutability":"mutable","name":"r","nameLocation":"6769:1:29","nodeType":"VariableDeclaration","scope":3003,"src":"6761:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2976,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6761:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2979,"mutability":"mutable","name":"s","nameLocation":"6788:1:29","nodeType":"VariableDeclaration","scope":3003,"src":"6780:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6780:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6712:83:29"},"returnParameters":{"id":2983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3003,"src":"6819:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2981,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:29"},"scope":3063,"src":"6696:270:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3019,"nodeType":"Block","src":"7334:187:29","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7472:34:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":3015,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"7508:4:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3012,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7455:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7459:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"7455:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7455:58:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3011,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7445:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7445:69:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3010,"id":3018,"nodeType":"Return","src":"7438:76:29"}]},"documentation":{"id":3004,"nodeType":"StructuredDocumentation","src":"6972:279:29","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3020,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7265:22:29","nodeType":"FunctionDefinition","parameters":{"id":3007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"hash","nameLocation":"7296:4:29","nodeType":"VariableDeclaration","scope":3020,"src":"7288:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3005,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7288:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7287:14:29"},"returnParameters":{"id":3010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3020,"src":"7325:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3008,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7325:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7324:9:29"},"scope":3063,"src":"7256:265:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3041,"nodeType":"Block","src":"7886:116:29","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":3031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:32:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":3034,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"7981:1:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7983:6:29","memberName":"length","nodeType":"MemberAccess","src":"7981:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3032,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"7964:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2702_$","typeString":"type(library Strings)"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7972:8:29","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2585,"src":"7964:16:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7964:26:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3037,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"7992:1:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3029,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7913:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7917:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"7913:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7913:81:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3028,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7903:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7903:92:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3027,"id":3040,"nodeType":"Return","src":"7896:99:29"}]},"documentation":{"id":3021,"nodeType":"StructuredDocumentation","src":"7527:274:29","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3042,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7815:22:29","nodeType":"FunctionDefinition","parameters":{"id":3024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3023,"mutability":"mutable","name":"s","nameLocation":"7851:1:29","nodeType":"VariableDeclaration","scope":3042,"src":"7838:14:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3022,"name":"bytes","nodeType":"ElementaryTypeName","src":"7838:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7837:16:29"},"returnParameters":{"id":3027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3042,"src":"7877:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7877:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7876:9:29"},"scope":3063,"src":"7806:196:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3061,"nodeType":"Block","src":"8443:92:29","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":3055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:10:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3056,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"8499:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3057,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"8516:10:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3053,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8470:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8474:12:29","memberName":"encodePacked","nodeType":"MemberAccess","src":"8470:16:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8470:57:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3052,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8460:9:29","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8460:68:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3051,"id":3060,"nodeType":"Return","src":"8453:75:29"}]},"documentation":{"id":3043,"nodeType":"StructuredDocumentation","src":"8008:328:29","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":3062,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8350:15:29","nodeType":"FunctionDefinition","parameters":{"id":3048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3045,"mutability":"mutable","name":"domainSeparator","nameLocation":"8374:15:29","nodeType":"VariableDeclaration","scope":3062,"src":"8366:23:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3044,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3047,"mutability":"mutable","name":"structHash","nameLocation":"8399:10:29","nodeType":"VariableDeclaration","scope":3062,"src":"8391:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8391:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:45:29"},"returnParameters":{"id":3051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3062,"src":"8434:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8434:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8433:9:29"},"scope":3063,"src":"8341:194:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3064,"src":"369:8168:29","usedErrors":[],"usedEvents":[]}],"src":"112:8426:29"},"id":29},"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","exportedSymbols":{"Address":[2445],"ECDSA":[3063],"IERC1271":[2115],"Math":[4011],"SignatureChecker":[3146],"Strings":[2702]},"id":3147,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3065,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:30"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"./ECDSA.sol","id":3066,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3147,"sourceUnit":3064,"src":"148:21:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../Address.sol","id":3067,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3147,"sourceUnit":2446,"src":"170:24:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1271.sol","file":"../../interfaces/IERC1271.sol","id":3068,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3147,"sourceUnit":2116,"src":"195:39:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SignatureChecker","contractDependencies":[],"contractKind":"library","documentation":{"id":3069,"nodeType":"StructuredDocumentation","src":"236:294:30","text":" @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n Argent and Gnosis Safe.\n _Available since v4.1._"},"fullyImplemented":true,"id":3146,"linearizedBaseContracts":[3146],"name":"SignatureChecker","nameLocation":"539:16:30","nodeType":"ContractDefinition","nodes":[{"body":{"id":3144,"nodeType":"Block","src":"1181:525:30","statements":[{"assignments":[3082,3085],"declarations":[{"constant":false,"id":3082,"mutability":"mutable","name":"recovered","nameLocation":"1200:9:30","nodeType":"VariableDeclaration","scope":3144,"src":"1192:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3081,"name":"address","nodeType":"ElementaryTypeName","src":"1192:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3085,"mutability":"mutable","name":"error","nameLocation":"1230:5:30","nodeType":"VariableDeclaration","scope":3144,"src":"1211:24:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3084,"nodeType":"UserDefinedTypeName","pathNode":{"id":3083,"name":"ECDSA.RecoverError","nameLocations":["1211:5:30","1217:12:30"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"1211:18:30"},"referencedDeclaration":2712,"src":"1211:18:30","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":3091,"initialValue":{"arguments":[{"id":3088,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"1256:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3089,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1262:9:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3086,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"1239:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3063_$","typeString":"type(library ECDSA)"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1245:10:30","memberName":"tryRecover","nodeType":"MemberAccess","referencedDeclaration":2802,"src":"1239:16:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1239:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2712_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"1191:81:30"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3092,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"1286:5:30","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3093,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"1295:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3063_$","typeString":"type(library ECDSA)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1301:12:30","memberName":"RecoverError","nodeType":"MemberAccess","referencedDeclaration":2712,"src":"1295:18:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2712_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1314:7:30","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2707,"src":"1295:26:30","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2712","typeString":"enum ECDSA.RecoverError"}},"src":"1286:35:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3097,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"1325:9:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3098,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1338:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1325:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1286:58:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3104,"nodeType":"IfStatement","src":"1282:100:30","trueBody":{"id":3103,"nodeType":"Block","src":"1346:36:30","statements":[{"expression":{"hexValue":"74727565","id":3101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1367:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3080,"id":3102,"nodeType":"Return","src":"1360:11:30"}]}},{"assignments":[3106,3108],"declarations":[{"constant":false,"id":3106,"mutability":"mutable","name":"success","nameLocation":"1398:7:30","nodeType":"VariableDeclaration","scope":3144,"src":"1393:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3105,"name":"bool","nodeType":"ElementaryTypeName","src":"1393:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3108,"mutability":"mutable","name":"result","nameLocation":"1420:6:30","nodeType":"VariableDeclaration","scope":3144,"src":"1407:19:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3107,"name":"bytes","nodeType":"ElementaryTypeName","src":"1407:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3120,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":3113,"name":"IERC1271","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1484:8:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271_$2115_$","typeString":"type(contract IERC1271)"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1493:16:30","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":2114,"src":"1484:25:30","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1510:8:30","memberName":"selector","nodeType":"MemberAccess","src":"1484:34:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3116,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"1520:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3117,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1526:9:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3111,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1461:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1465:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1461:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1461:75:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3109,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1430:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1437:10:30","memberName":"staticcall","nodeType":"MemberAccess","src":"1430:17:30","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1430:116:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1392:154:30"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3121,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"1564:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3122,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"1587:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1594:6:30","memberName":"length","nodeType":"MemberAccess","src":"1587:13:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3332","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1604:2:30","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1587:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1564:42:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"1633:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1642:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1642:7:30","typeDescriptions":{}}}],"id":3132,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1641:9:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"}],"expression":{"id":3127,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1622:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1626:6:30","memberName":"decode","nodeType":"MemberAccess","src":"1622:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1622:29:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"expression":{"id":3136,"name":"IERC1271","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1663:8:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271_$2115_$","typeString":"type(contract IERC1271)"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1672:16:30","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":2114,"src":"1663:25:30","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1689:8:30","memberName":"selector","nodeType":"MemberAccess","src":"1663:34:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1655:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3134,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1655:7:30","typeDescriptions":{}}},"id":3139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:43:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1622:76:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1564:134:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3142,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1563:136:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3080,"id":3143,"nodeType":"Return","src":"1556:143:30"}]},"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"562:472:30","text":" @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n change through time. It could return true at block N and false at block N+1 (or the opposite)."},"id":3145,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignatureNow","nameLocation":"1048:19:30","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"signer","nameLocation":"1085:6:30","nodeType":"VariableDeclaration","scope":3145,"src":"1077:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"1077:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"hash","nameLocation":"1109:4:30","nodeType":"VariableDeclaration","scope":3145,"src":"1101:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3073,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1101:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"signature","nameLocation":"1136:9:30","nodeType":"VariableDeclaration","scope":3145,"src":"1123:22:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3075,"name":"bytes","nodeType":"ElementaryTypeName","src":"1123:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1067:84:30"},"returnParameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3145,"src":"1175:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3078,"name":"bool","nodeType":"ElementaryTypeName","src":"1175:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1174:6:30"},"scope":3146,"src":"1039:667:30","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3147,"src":"531:1177:30","usedErrors":[],"usedEvents":[]}],"src":"123:1586:30"},"id":30},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4011]},"id":4012,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3148,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:31"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3149,"nodeType":"StructuredDocumentation","src":"128:73:31","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4011,"linearizedBaseContracts":[4011],"name":"Math","nameLocation":"210:4:31","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":3153,"members":[{"id":3150,"name":"Down","nameLocation":"245:4:31","nodeType":"EnumValue","src":"245:4:31"},{"id":3151,"name":"Up","nameLocation":"287:2:31","nodeType":"EnumValue","src":"287:2:31"},{"id":3152,"name":"Zero","nameLocation":"318:4:31","nodeType":"EnumValue","src":"318:4:31"}],"name":"Rounding","nameLocation":"226:8:31","nodeType":"EnumDefinition","src":"221:122:31"},{"body":{"id":3170,"nodeType":"Block","src":"480:37:31","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3163,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"497:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3164,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"501:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3167,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"509:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:31","trueExpression":{"id":3166,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"505:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3162,"id":3169,"nodeType":"Return","src":"490:20:31"}]},"documentation":{"id":3154,"nodeType":"StructuredDocumentation","src":"349:59:31","text":" @dev Returns the largest of two numbers."},"id":3171,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:31","nodeType":"FunctionDefinition","parameters":{"id":3159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3156,"mutability":"mutable","name":"a","nameLocation":"434:1:31","nodeType":"VariableDeclaration","scope":3171,"src":"426:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3155,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3158,"mutability":"mutable","name":"b","nameLocation":"445:1:31","nodeType":"VariableDeclaration","scope":3171,"src":"437:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3157,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:31"},"returnParameters":{"id":3162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3171,"src":"471:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3160,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:31"},"scope":4011,"src":"413:104:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3188,"nodeType":"Block","src":"655:37:31","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"672:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3182,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"676:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3185,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"684:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:31","trueExpression":{"id":3184,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"680:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3180,"id":3187,"nodeType":"Return","src":"665:20:31"}]},"documentation":{"id":3172,"nodeType":"StructuredDocumentation","src":"523:60:31","text":" @dev Returns the smallest of two numbers."},"id":3189,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:31","nodeType":"FunctionDefinition","parameters":{"id":3177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3174,"mutability":"mutable","name":"a","nameLocation":"609:1:31","nodeType":"VariableDeclaration","scope":3189,"src":"601:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3173,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3176,"mutability":"mutable","name":"b","nameLocation":"620:1:31","nodeType":"VariableDeclaration","scope":3189,"src":"612:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3175,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:31"},"returnParameters":{"id":3180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3189,"src":"646:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:31"},"scope":4011,"src":"588:104:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3211,"nodeType":"Block","src":"876:82:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3199,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"931:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3200,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"935:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3202,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3203,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"941:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3204,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"945:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3206,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3198,"id":3210,"nodeType":"Return","src":"923:28:31"}]},"documentation":{"id":3190,"nodeType":"StructuredDocumentation","src":"698:102:31","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3212,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:31","nodeType":"FunctionDefinition","parameters":{"id":3195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3192,"mutability":"mutable","name":"a","nameLocation":"830:1:31","nodeType":"VariableDeclaration","scope":3212,"src":"822:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3191,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3194,"mutability":"mutable","name":"b","nameLocation":"841:1:31","nodeType":"VariableDeclaration","scope":3212,"src":"833:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3193,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:31"},"returnParameters":{"id":3198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3212,"src":"867:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3196,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:31"},"scope":4011,"src":"805:153:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3236,"nodeType":"Block","src":"1228:123:31","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3222,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"1316:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"1330:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3229,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3230,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"1339:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:31","trueExpression":{"hexValue":"30","id":3225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3221,"id":3235,"nodeType":"Return","src":"1309:35:31"}]},"documentation":{"id":3213,"nodeType":"StructuredDocumentation","src":"964:188:31","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3237,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:31","nodeType":"FunctionDefinition","parameters":{"id":3218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3215,"mutability":"mutable","name":"a","nameLocation":"1182:1:31","nodeType":"VariableDeclaration","scope":3237,"src":"1174:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3217,"mutability":"mutable","name":"b","nameLocation":"1193:1:31","nodeType":"VariableDeclaration","scope":3237,"src":"1185:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3216,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:31"},"returnParameters":{"id":3221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3237,"src":"1219:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3219,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:31"},"scope":4011,"src":"1157:194:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3358,"nodeType":"Block","src":"1795:3797:31","statements":[{"id":3357,"nodeType":"UncheckedBlock","src":"1805:3781:31","statements":[{"assignments":[3250],"declarations":[{"constant":false,"id":3250,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:31","nodeType":"VariableDeclaration","scope":3357,"src":"2126:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3249,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3251,"nodeType":"VariableDeclarationStatement","src":"2126:13:31"},{"assignments":[3253],"declarations":[{"constant":false,"id":3253,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:31","nodeType":"VariableDeclaration","scope":3357,"src":"2198:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3252,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3254,"nodeType":"VariableDeclarationStatement","src":"2198:13:31"},{"AST":{"nativeSrc":"2278:157:31","nodeType":"YulBlock","src":"2278:157:31","statements":[{"nativeSrc":"2296:30:31","nodeType":"YulVariableDeclaration","src":"2296:30:31","value":{"arguments":[{"name":"x","nativeSrc":"2313:1:31","nodeType":"YulIdentifier","src":"2313:1:31"},{"name":"y","nativeSrc":"2316:1:31","nodeType":"YulIdentifier","src":"2316:1:31"},{"arguments":[{"kind":"number","nativeSrc":"2323:1:31","nodeType":"YulLiteral","src":"2323:1:31","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2319:3:31","nodeType":"YulIdentifier","src":"2319:3:31"},"nativeSrc":"2319:6:31","nodeType":"YulFunctionCall","src":"2319:6:31"}],"functionName":{"name":"mulmod","nativeSrc":"2306:6:31","nodeType":"YulIdentifier","src":"2306:6:31"},"nativeSrc":"2306:20:31","nodeType":"YulFunctionCall","src":"2306:20:31"},"variables":[{"name":"mm","nativeSrc":"2300:2:31","nodeType":"YulTypedName","src":"2300:2:31","type":""}]},{"nativeSrc":"2343:18:31","nodeType":"YulAssignment","src":"2343:18:31","value":{"arguments":[{"name":"x","nativeSrc":"2356:1:31","nodeType":"YulIdentifier","src":"2356:1:31"},{"name":"y","nativeSrc":"2359:1:31","nodeType":"YulIdentifier","src":"2359:1:31"}],"functionName":{"name":"mul","nativeSrc":"2352:3:31","nodeType":"YulIdentifier","src":"2352:3:31"},"nativeSrc":"2352:9:31","nodeType":"YulFunctionCall","src":"2352:9:31"},"variableNames":[{"name":"prod0","nativeSrc":"2343:5:31","nodeType":"YulIdentifier","src":"2343:5:31"}]},{"nativeSrc":"2378:43:31","nodeType":"YulAssignment","src":"2378:43:31","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2395:2:31","nodeType":"YulIdentifier","src":"2395:2:31"},{"name":"prod0","nativeSrc":"2399:5:31","nodeType":"YulIdentifier","src":"2399:5:31"}],"functionName":{"name":"sub","nativeSrc":"2391:3:31","nodeType":"YulIdentifier","src":"2391:3:31"},"nativeSrc":"2391:14:31","nodeType":"YulFunctionCall","src":"2391:14:31"},{"arguments":[{"name":"mm","nativeSrc":"2410:2:31","nodeType":"YulIdentifier","src":"2410:2:31"},{"name":"prod0","nativeSrc":"2414:5:31","nodeType":"YulIdentifier","src":"2414:5:31"}],"functionName":{"name":"lt","nativeSrc":"2407:2:31","nodeType":"YulIdentifier","src":"2407:2:31"},"nativeSrc":"2407:13:31","nodeType":"YulFunctionCall","src":"2407:13:31"}],"functionName":{"name":"sub","nativeSrc":"2387:3:31","nodeType":"YulIdentifier","src":"2387:3:31"},"nativeSrc":"2387:34:31","nodeType":"YulFunctionCall","src":"2387:34:31"},"variableNames":[{"name":"prod1","nativeSrc":"2378:5:31","nodeType":"YulIdentifier","src":"2378:5:31"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3250,"isOffset":false,"isSlot":false,"src":"2343:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"2399:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"2414:5:31","valueSize":1},{"declaration":3253,"isOffset":false,"isSlot":false,"src":"2378:5:31","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"2313:1:31","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"2356:1:31","valueSize":1},{"declaration":3242,"isOffset":false,"isSlot":false,"src":"2316:1:31","valueSize":1},{"declaration":3242,"isOffset":false,"isSlot":false,"src":"2359:1:31","valueSize":1}],"id":3255,"nodeType":"InlineAssembly","src":"2269:166:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3256,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"2516:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3264,"nodeType":"IfStatement","src":"2512:75:31","trueBody":{"id":3263,"nodeType":"Block","src":"2528:59:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3259,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"2553:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3260,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"2561:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3248,"id":3262,"nodeType":"Return","src":"2546:26:31"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3266,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"2697:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3267,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"2711:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3265,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3270,"nodeType":"ExpressionStatement","src":"2689:28:31"},{"assignments":[3272],"declarations":[{"constant":false,"id":3272,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:31","nodeType":"VariableDeclaration","scope":3357,"src":"2973:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3271,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3273,"nodeType":"VariableDeclarationStatement","src":"2973:17:31"},{"AST":{"nativeSrc":"3013:291:31","nodeType":"YulBlock","src":"3013:291:31","statements":[{"nativeSrc":"3082:38:31","nodeType":"YulAssignment","src":"3082:38:31","value":{"arguments":[{"name":"x","nativeSrc":"3102:1:31","nodeType":"YulIdentifier","src":"3102:1:31"},{"name":"y","nativeSrc":"3105:1:31","nodeType":"YulIdentifier","src":"3105:1:31"},{"name":"denominator","nativeSrc":"3108:11:31","nodeType":"YulIdentifier","src":"3108:11:31"}],"functionName":{"name":"mulmod","nativeSrc":"3095:6:31","nodeType":"YulIdentifier","src":"3095:6:31"},"nativeSrc":"3095:25:31","nodeType":"YulFunctionCall","src":"3095:25:31"},"variableNames":[{"name":"remainder","nativeSrc":"3082:9:31","nodeType":"YulIdentifier","src":"3082:9:31"}]},{"nativeSrc":"3202:41:31","nodeType":"YulAssignment","src":"3202:41:31","value":{"arguments":[{"name":"prod1","nativeSrc":"3215:5:31","nodeType":"YulIdentifier","src":"3215:5:31"},{"arguments":[{"name":"remainder","nativeSrc":"3225:9:31","nodeType":"YulIdentifier","src":"3225:9:31"},{"name":"prod0","nativeSrc":"3236:5:31","nodeType":"YulIdentifier","src":"3236:5:31"}],"functionName":{"name":"gt","nativeSrc":"3222:2:31","nodeType":"YulIdentifier","src":"3222:2:31"},"nativeSrc":"3222:20:31","nodeType":"YulFunctionCall","src":"3222:20:31"}],"functionName":{"name":"sub","nativeSrc":"3211:3:31","nodeType":"YulIdentifier","src":"3211:3:31"},"nativeSrc":"3211:32:31","nodeType":"YulFunctionCall","src":"3211:32:31"},"variableNames":[{"name":"prod1","nativeSrc":"3202:5:31","nodeType":"YulIdentifier","src":"3202:5:31"}]},{"nativeSrc":"3260:30:31","nodeType":"YulAssignment","src":"3260:30:31","value":{"arguments":[{"name":"prod0","nativeSrc":"3273:5:31","nodeType":"YulIdentifier","src":"3273:5:31"},{"name":"remainder","nativeSrc":"3280:9:31","nodeType":"YulIdentifier","src":"3280:9:31"}],"functionName":{"name":"sub","nativeSrc":"3269:3:31","nodeType":"YulIdentifier","src":"3269:3:31"},"nativeSrc":"3269:21:31","nodeType":"YulFunctionCall","src":"3269:21:31"},"variableNames":[{"name":"prod0","nativeSrc":"3260:5:31","nodeType":"YulIdentifier","src":"3260:5:31"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3244,"isOffset":false,"isSlot":false,"src":"3108:11:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"3236:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"3260:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"3273:5:31","valueSize":1},{"declaration":3253,"isOffset":false,"isSlot":false,"src":"3202:5:31","valueSize":1},{"declaration":3253,"isOffset":false,"isSlot":false,"src":"3215:5:31","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"3082:9:31","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"3225:9:31","valueSize":1},{"declaration":3272,"isOffset":false,"isSlot":false,"src":"3280:9:31","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"3102:1:31","valueSize":1},{"declaration":3242,"isOffset":false,"isSlot":false,"src":"3105:1:31","valueSize":1}],"id":3274,"nodeType":"InlineAssembly","src":"3004:300:31"},{"assignments":[3276],"declarations":[{"constant":false,"id":3276,"mutability":"mutable","name":"twos","nameLocation":"3619:4:31","nodeType":"VariableDeclaration","scope":3357,"src":"3611:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3275,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3284,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3277,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"3626:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:31","subExpression":{"id":3278,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"3642:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3282,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:31"},{"AST":{"nativeSrc":"3681:362:31","nodeType":"YulBlock","src":"3681:362:31","statements":[{"nativeSrc":"3746:37:31","nodeType":"YulAssignment","src":"3746:37:31","value":{"arguments":[{"name":"denominator","nativeSrc":"3765:11:31","nodeType":"YulIdentifier","src":"3765:11:31"},{"name":"twos","nativeSrc":"3778:4:31","nodeType":"YulIdentifier","src":"3778:4:31"}],"functionName":{"name":"div","nativeSrc":"3761:3:31","nodeType":"YulIdentifier","src":"3761:3:31"},"nativeSrc":"3761:22:31","nodeType":"YulFunctionCall","src":"3761:22:31"},"variableNames":[{"name":"denominator","nativeSrc":"3746:11:31","nodeType":"YulIdentifier","src":"3746:11:31"}]},{"nativeSrc":"3850:25:31","nodeType":"YulAssignment","src":"3850:25:31","value":{"arguments":[{"name":"prod0","nativeSrc":"3863:5:31","nodeType":"YulIdentifier","src":"3863:5:31"},{"name":"twos","nativeSrc":"3870:4:31","nodeType":"YulIdentifier","src":"3870:4:31"}],"functionName":{"name":"div","nativeSrc":"3859:3:31","nodeType":"YulIdentifier","src":"3859:3:31"},"nativeSrc":"3859:16:31","nodeType":"YulFunctionCall","src":"3859:16:31"},"variableNames":[{"name":"prod0","nativeSrc":"3850:5:31","nodeType":"YulIdentifier","src":"3850:5:31"}]},{"nativeSrc":"3990:39:31","nodeType":"YulAssignment","src":"3990:39:31","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4010:1:31","nodeType":"YulLiteral","src":"4010:1:31","type":"","value":"0"},{"name":"twos","nativeSrc":"4013:4:31","nodeType":"YulIdentifier","src":"4013:4:31"}],"functionName":{"name":"sub","nativeSrc":"4006:3:31","nodeType":"YulIdentifier","src":"4006:3:31"},"nativeSrc":"4006:12:31","nodeType":"YulFunctionCall","src":"4006:12:31"},{"name":"twos","nativeSrc":"4020:4:31","nodeType":"YulIdentifier","src":"4020:4:31"}],"functionName":{"name":"div","nativeSrc":"4002:3:31","nodeType":"YulIdentifier","src":"4002:3:31"},"nativeSrc":"4002:23:31","nodeType":"YulFunctionCall","src":"4002:23:31"},{"kind":"number","nativeSrc":"4027:1:31","nodeType":"YulLiteral","src":"4027:1:31","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3998:3:31","nodeType":"YulIdentifier","src":"3998:3:31"},"nativeSrc":"3998:31:31","nodeType":"YulFunctionCall","src":"3998:31:31"},"variableNames":[{"name":"twos","nativeSrc":"3990:4:31","nodeType":"YulIdentifier","src":"3990:4:31"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3244,"isOffset":false,"isSlot":false,"src":"3746:11:31","valueSize":1},{"declaration":3244,"isOffset":false,"isSlot":false,"src":"3765:11:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"3850:5:31","valueSize":1},{"declaration":3250,"isOffset":false,"isSlot":false,"src":"3863:5:31","valueSize":1},{"declaration":3276,"isOffset":false,"isSlot":false,"src":"3778:4:31","valueSize":1},{"declaration":3276,"isOffset":false,"isSlot":false,"src":"3870:4:31","valueSize":1},{"declaration":3276,"isOffset":false,"isSlot":false,"src":"3990:4:31","valueSize":1},{"declaration":3276,"isOffset":false,"isSlot":false,"src":"4013:4:31","valueSize":1},{"declaration":3276,"isOffset":false,"isSlot":false,"src":"4020:4:31","valueSize":1}],"id":3285,"nodeType":"InlineAssembly","src":"3672:371:31"},{"expression":{"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3286,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"4109:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3287,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"4118:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3288,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4126:4:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3291,"nodeType":"ExpressionStatement","src":"4109:21:31"},{"assignments":[3293],"declarations":[{"constant":false,"id":3293,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:31","nodeType":"VariableDeclaration","scope":3357,"src":"4448:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3292,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3300,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:31","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3295,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"4471:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3297,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:31"},{"expression":{"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3301,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4704:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3303,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"4719:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3304,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4733:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3308,"nodeType":"ExpressionStatement","src":"4704:36:31"},{"expression":{"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3309,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4773:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3311,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"4788:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3312,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4802:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3316,"nodeType":"ExpressionStatement","src":"4773:36:31"},{"expression":{"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3317,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4843:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3319,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"4858:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3320,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4872:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3324,"nodeType":"ExpressionStatement","src":"4843:36:31"},{"expression":{"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3325,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4913:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3327,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"4928:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3328,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4942:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3332,"nodeType":"ExpressionStatement","src":"4913:36:31"},{"expression":{"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3333,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4983:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3335,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"4998:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3336,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"5012:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3340,"nodeType":"ExpressionStatement","src":"4983:36:31"},{"expression":{"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3341,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"5054:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3343,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"5069:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3344,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"5083:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3348,"nodeType":"ExpressionStatement","src":"5054:36:31"},{"expression":{"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3349,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"5524:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3350,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"5533:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3351,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"5541:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3354,"nodeType":"ExpressionStatement","src":"5524:24:31"},{"expression":{"id":3355,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"5569:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3248,"id":3356,"nodeType":"Return","src":"5562:13:31"}]}]},"documentation":{"id":3238,"nodeType":"StructuredDocumentation","src":"1357:305:31","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3359,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:31","nodeType":"FunctionDefinition","parameters":{"id":3245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"x","nameLocation":"1700:1:31","nodeType":"VariableDeclaration","scope":3359,"src":"1692:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3242,"mutability":"mutable","name":"y","nameLocation":"1719:1:31","nodeType":"VariableDeclaration","scope":3359,"src":"1711:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3241,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3244,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:31","nodeType":"VariableDeclaration","scope":3359,"src":"1730:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:31"},"returnParameters":{"id":3248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3247,"mutability":"mutable","name":"result","nameLocation":"1787:6:31","nodeType":"VariableDeclaration","scope":3359,"src":"1779:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3246,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:31"},"scope":4011,"src":"1667:3925:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3402,"nodeType":"Block","src":"5872:189:31","statements":[{"assignments":[3375],"declarations":[{"constant":false,"id":3375,"mutability":"mutable","name":"result","nameLocation":"5890:6:31","nodeType":"VariableDeclaration","scope":3402,"src":"5882:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3381,"initialValue":{"arguments":[{"id":3377,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"5906:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3378,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3364,"src":"5909:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3379,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"5912:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3376,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3359,3403],"referencedDeclaration":3359,"src":"5899:6:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3382,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"5938:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3383,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"5950:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3153_$","typeString":"type(enum Math.Rounding)"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:31","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3151,"src":"5950:11:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"src":"5938:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3387,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"5972:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3388,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3364,"src":"5975:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3389,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"5978:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3386,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:31","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3399,"nodeType":"IfStatement","src":"5934:98:31","trueBody":{"id":3398,"nodeType":"Block","src":"5996:36:31","statements":[{"expression":{"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3394,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"6010:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3397,"nodeType":"ExpressionStatement","src":"6010:11:31"}]}},{"expression":{"id":3400,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"6048:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3373,"id":3401,"nodeType":"Return","src":"6041:13:31"}]},"documentation":{"id":3360,"nodeType":"StructuredDocumentation","src":"5598:121:31","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3403,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:31","nodeType":"FunctionDefinition","parameters":{"id":3370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3362,"mutability":"mutable","name":"x","nameLocation":"5757:1:31","nodeType":"VariableDeclaration","scope":3403,"src":"5749:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3361,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3364,"mutability":"mutable","name":"y","nameLocation":"5776:1:31","nodeType":"VariableDeclaration","scope":3403,"src":"5768:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3363,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3366,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:31","nodeType":"VariableDeclaration","scope":3403,"src":"5787:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3365,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:31","nodeType":"VariableDeclaration","scope":3403,"src":"5816:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"typeName":{"id":3368,"nodeType":"UserDefinedTypeName","pathNode":{"id":3367,"name":"Rounding","nameLocations":["5816:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"5816:8:31"},"referencedDeclaration":3153,"src":"5816:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:31"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3403,"src":"5863:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3371,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:31"},"scope":4011,"src":"5724:337:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3514,"nodeType":"Block","src":"6337:1585:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3411,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"6351:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3417,"nodeType":"IfStatement","src":"6347:45:31","trueBody":{"id":3416,"nodeType":"Block","src":"6359:33:31","statements":[{"expression":{"hexValue":"30","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3410,"id":3415,"nodeType":"Return","src":"6373:8:31"}]}},{"assignments":[3419],"declarations":[{"constant":false,"id":3419,"mutability":"mutable","name":"result","nameLocation":"7079:6:31","nodeType":"VariableDeclaration","scope":3514,"src":"7071:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3418,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3428,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3422,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7099:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3421,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3683,3719],"referencedDeclaration":3683,"src":"7094:4:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3426,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:31"},{"id":3513,"nodeType":"UncheckedBlock","src":"7508:408:31","statements":[{"expression":{"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3429,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7532:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3430,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7542:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3431,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7551:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3432,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7555:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3435,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3439,"nodeType":"ExpressionStatement","src":"7532:35:31"},{"expression":{"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3440,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7581:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3441,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7591:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3442,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7600:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3443,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7604:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3450,"nodeType":"ExpressionStatement","src":"7581:35:31"},{"expression":{"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7630:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3452,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7640:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3453,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7649:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3454,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7653:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3461,"nodeType":"ExpressionStatement","src":"7630:35:31"},{"expression":{"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3462,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7679:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3463,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7689:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3464,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7698:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3465,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7702:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3468,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3472,"nodeType":"ExpressionStatement","src":"7679:35:31"},{"expression":{"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7728:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3474,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7738:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3475,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7747:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3476,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7751:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3479,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3483,"nodeType":"ExpressionStatement","src":"7728:35:31"},{"expression":{"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3484,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7777:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3485,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7787:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3486,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7796:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3487,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7800:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3494,"nodeType":"ExpressionStatement","src":"7777:35:31"},{"expression":{"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3495,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7826:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3496,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7836:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3497,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7845:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3498,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7849:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3501,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3505,"nodeType":"ExpressionStatement","src":"7826:35:31"},{"expression":{"arguments":[{"id":3507,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7886:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3508,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"7894:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7898:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3506,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"7882:3:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3410,"id":3512,"nodeType":"Return","src":"7875:30:31"}]}]},"documentation":{"id":3404,"nodeType":"StructuredDocumentation","src":"6067:208:31","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3515,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:31","nodeType":"FunctionDefinition","parameters":{"id":3407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3406,"mutability":"mutable","name":"a","nameLocation":"6302:1:31","nodeType":"VariableDeclaration","scope":3515,"src":"6294:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3405,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:31"},"returnParameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3515,"src":"6328:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3408,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:31"},"scope":4011,"src":"6280:1642:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3550,"nodeType":"Block","src":"8098:161:31","statements":[{"id":3549,"nodeType":"UncheckedBlock","src":"8108:145:31","statements":[{"assignments":[3527],"declarations":[{"constant":false,"id":3527,"mutability":"mutable","name":"result","nameLocation":"8140:6:31","nodeType":"VariableDeclaration","scope":3549,"src":"8132:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3526,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3531,"initialValue":{"arguments":[{"id":3529,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"8154:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3528,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3515,3551],"referencedDeclaration":3515,"src":"8149:4:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3532,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"8177:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3533,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"8187:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3534,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"8199:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3153_$","typeString":"type(enum Math.Rounding)"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:31","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3151,"src":"8199:11:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"src":"8187:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"8214:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3538,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"8223:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3540,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"8232:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:31","trueExpression":{"hexValue":"31","id":3543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3546,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3525,"id":3548,"nodeType":"Return","src":"8170:72:31"}]}]},"documentation":{"id":3516,"nodeType":"StructuredDocumentation","src":"7928:89:31","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3551,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:31","nodeType":"FunctionDefinition","parameters":{"id":3522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3518,"mutability":"mutable","name":"a","nameLocation":"8044:1:31","nodeType":"VariableDeclaration","scope":3551,"src":"8036:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3517,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3521,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:31","nodeType":"VariableDeclaration","scope":3551,"src":"8047:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"typeName":{"id":3520,"nodeType":"UserDefinedTypeName","pathNode":{"id":3519,"name":"Rounding","nameLocations":["8047:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"8047:8:31"},"referencedDeclaration":3153,"src":"8047:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:31"},"returnParameters":{"id":3525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3551,"src":"8089:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3523,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:31"},"scope":4011,"src":"8022:237:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3682,"nodeType":"Block","src":"8444:922:31","statements":[{"assignments":[3560],"declarations":[{"constant":false,"id":3560,"mutability":"mutable","name":"result","nameLocation":"8462:6:31","nodeType":"VariableDeclaration","scope":3682,"src":"8454:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3559,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3562,"initialValue":{"hexValue":"30","id":3561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:31"},{"id":3679,"nodeType":"UncheckedBlock","src":"8482:855:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8510:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3577,"nodeType":"IfStatement","src":"8506:99:31","trueBody":{"id":3576,"nodeType":"Block","src":"8528:77:31","statements":[{"expression":{"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8546:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3571,"nodeType":"ExpressionStatement","src":"8546:13:31"},{"expression":{"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3572,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"8577:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3575,"nodeType":"ExpressionStatement","src":"8577:13:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8622:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3592,"nodeType":"IfStatement","src":"8618:96:31","trueBody":{"id":3591,"nodeType":"Block","src":"8639:75:31","statements":[{"expression":{"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8657:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3586,"nodeType":"ExpressionStatement","src":"8657:12:31"},{"expression":{"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3587,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"8687:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3590,"nodeType":"ExpressionStatement","src":"8687:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8731:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3607,"nodeType":"IfStatement","src":"8727:96:31","trueBody":{"id":3606,"nodeType":"Block","src":"8748:75:31","statements":[{"expression":{"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8766:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3601,"nodeType":"ExpressionStatement","src":"8766:12:31"},{"expression":{"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"8796:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3605,"nodeType":"ExpressionStatement","src":"8796:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8840:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3622,"nodeType":"IfStatement","src":"8836:96:31","trueBody":{"id":3621,"nodeType":"Block","src":"8857:75:31","statements":[{"expression":{"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8875:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3616,"nodeType":"ExpressionStatement","src":"8875:12:31"},{"expression":{"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3617,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"8905:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3620,"nodeType":"ExpressionStatement","src":"8905:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8949:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3637,"nodeType":"IfStatement","src":"8945:93:31","trueBody":{"id":3636,"nodeType":"Block","src":"8965:73:31","statements":[{"expression":{"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3628,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"8983:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3631,"nodeType":"ExpressionStatement","src":"8983:11:31"},{"expression":{"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3632,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"9012:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3635,"nodeType":"ExpressionStatement","src":"9012:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"9055:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3652,"nodeType":"IfStatement","src":"9051:93:31","trueBody":{"id":3651,"nodeType":"Block","src":"9071:73:31","statements":[{"expression":{"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"9089:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3646,"nodeType":"ExpressionStatement","src":"9089:11:31"},{"expression":{"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3647,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"9118:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3650,"nodeType":"ExpressionStatement","src":"9118:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"9161:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3667,"nodeType":"IfStatement","src":"9157:93:31","trueBody":{"id":3666,"nodeType":"Block","src":"9177:73:31","statements":[{"expression":{"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"9195:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3661,"nodeType":"ExpressionStatement","src":"9195:11:31"},{"expression":{"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3662,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"9224:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3665,"nodeType":"ExpressionStatement","src":"9224:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"9267:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3678,"nodeType":"IfStatement","src":"9263:64:31","trueBody":{"id":3677,"nodeType":"Block","src":"9283:44:31","statements":[{"expression":{"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"9301:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3676,"nodeType":"ExpressionStatement","src":"9301:11:31"}]}}]},{"expression":{"id":3680,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"9353:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3558,"id":3681,"nodeType":"Return","src":"9346:13:31"}]},"documentation":{"id":3552,"nodeType":"StructuredDocumentation","src":"8265:113:31","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3683,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:31","nodeType":"FunctionDefinition","parameters":{"id":3555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3554,"mutability":"mutable","name":"value","nameLocation":"8405:5:31","nodeType":"VariableDeclaration","scope":3683,"src":"8397:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3553,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:31"},"returnParameters":{"id":3558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3683,"src":"8435:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3556,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:31"},"scope":4011,"src":"8383:983:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3718,"nodeType":"Block","src":"9599:165:31","statements":[{"id":3717,"nodeType":"UncheckedBlock","src":"9609:149:31","statements":[{"assignments":[3695],"declarations":[{"constant":false,"id":3695,"mutability":"mutable","name":"result","nameLocation":"9641:6:31","nodeType":"VariableDeclaration","scope":3717,"src":"9633:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3694,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3699,"initialValue":{"arguments":[{"id":3697,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"9655:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3696,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3683,3719],"referencedDeclaration":3683,"src":"9650:4:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3700,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"9682:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3701,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"9692:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3702,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"9704:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3153_$","typeString":"type(enum Math.Rounding)"}},"id":3703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:31","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3151,"src":"9704:11:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"src":"9692:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3706,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"9724:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"9733:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:31","trueExpression":{"hexValue":"31","id":3711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3714,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3693,"id":3716,"nodeType":"Return","src":"9675:72:31"}]}]},"documentation":{"id":3684,"nodeType":"StructuredDocumentation","src":"9372:142:31","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3719,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:31","nodeType":"FunctionDefinition","parameters":{"id":3690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3686,"mutability":"mutable","name":"value","nameLocation":"9541:5:31","nodeType":"VariableDeclaration","scope":3719,"src":"9533:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3685,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3689,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:31","nodeType":"VariableDeclaration","scope":3719,"src":"9548:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"typeName":{"id":3688,"nodeType":"UserDefinedTypeName","pathNode":{"id":3687,"name":"Rounding","nameLocations":["9548:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"9548:8:31"},"referencedDeclaration":3153,"src":"9548:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:31"},"returnParameters":{"id":3693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3719,"src":"9590:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3691,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:31"},"scope":4011,"src":"9519:245:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3847,"nodeType":"Block","src":"9951:828:31","statements":[{"assignments":[3728],"declarations":[{"constant":false,"id":3728,"mutability":"mutable","name":"result","nameLocation":"9969:6:31","nodeType":"VariableDeclaration","scope":3847,"src":"9961:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3727,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3730,"initialValue":{"hexValue":"30","id":3729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:31"},{"id":3844,"nodeType":"UncheckedBlock","src":"9989:761:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3731,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10017:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3747,"nodeType":"IfStatement","src":"10013:99:31","trueBody":{"id":3746,"nodeType":"Block","src":"10034:78:31","statements":[{"expression":{"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10052:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3741,"nodeType":"ExpressionStatement","src":"10052:15:31"},{"expression":{"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3742,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10085:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3745,"nodeType":"ExpressionStatement","src":"10085:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10129:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3764,"nodeType":"IfStatement","src":"10125:99:31","trueBody":{"id":3763,"nodeType":"Block","src":"10146:78:31","statements":[{"expression":{"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10164:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3758,"nodeType":"ExpressionStatement","src":"10164:15:31"},{"expression":{"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3759,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10197:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3762,"nodeType":"ExpressionStatement","src":"10197:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10241:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3781,"nodeType":"IfStatement","src":"10237:99:31","trueBody":{"id":3780,"nodeType":"Block","src":"10258:78:31","statements":[{"expression":{"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10276:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3775,"nodeType":"ExpressionStatement","src":"10276:15:31"},{"expression":{"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3776,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10309:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3779,"nodeType":"ExpressionStatement","src":"10309:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10353:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3798,"nodeType":"IfStatement","src":"10349:96:31","trueBody":{"id":3797,"nodeType":"Block","src":"10369:76:31","statements":[{"expression":{"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10387:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3792,"nodeType":"ExpressionStatement","src":"10387:14:31"},{"expression":{"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3793,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10419:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3796,"nodeType":"ExpressionStatement","src":"10419:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10462:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:31","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3815,"nodeType":"IfStatement","src":"10458:96:31","trueBody":{"id":3814,"nodeType":"Block","src":"10478:76:31","statements":[{"expression":{"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10496:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:31","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3809,"nodeType":"ExpressionStatement","src":"10496:14:31"},{"expression":{"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3810,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10528:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3813,"nodeType":"ExpressionStatement","src":"10528:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10571:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3832,"nodeType":"IfStatement","src":"10567:96:31","trueBody":{"id":3831,"nodeType":"Block","src":"10587:76:31","statements":[{"expression":{"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10605:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3826,"nodeType":"ExpressionStatement","src":"10605:14:31"},{"expression":{"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3827,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10637:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3830,"nodeType":"ExpressionStatement","src":"10637:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10680:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3843,"nodeType":"IfStatement","src":"10676:64:31","trueBody":{"id":3842,"nodeType":"Block","src":"10696:44:31","statements":[{"expression":{"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10714:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3841,"nodeType":"ExpressionStatement","src":"10714:11:31"}]}}]},{"expression":{"id":3845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"10766:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3726,"id":3846,"nodeType":"Return","src":"10759:13:31"}]},"documentation":{"id":3720,"nodeType":"StructuredDocumentation","src":"9770:114:31","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3848,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:31","nodeType":"FunctionDefinition","parameters":{"id":3723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"mutability":"mutable","name":"value","nameLocation":"9912:5:31","nodeType":"VariableDeclaration","scope":3848,"src":"9904:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3721,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:31"},"returnParameters":{"id":3726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3725,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3848,"src":"9942:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3724,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:31"},"scope":4011,"src":"9889:890:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3883,"nodeType":"Block","src":"11014:165:31","statements":[{"id":3882,"nodeType":"UncheckedBlock","src":"11024:149:31","statements":[{"assignments":[3860],"declarations":[{"constant":false,"id":3860,"mutability":"mutable","name":"result","nameLocation":"11056:6:31","nodeType":"VariableDeclaration","scope":3882,"src":"11048:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3859,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3864,"initialValue":{"arguments":[{"id":3862,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"11071:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3861,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3848,3884],"referencedDeclaration":3848,"src":"11065:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3865,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"11098:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3866,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3854,"src":"11108:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3867,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"11120:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3153_$","typeString":"type(enum Math.Rounding)"}},"id":3868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:31","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3151,"src":"11120:11:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"src":"11108:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3871,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"11139:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"11148:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:31","trueExpression":{"hexValue":"31","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3858,"id":3881,"nodeType":"Return","src":"11091:71:31"}]}]},"documentation":{"id":3849,"nodeType":"StructuredDocumentation","src":"10785:143:31","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3884,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:31","nodeType":"FunctionDefinition","parameters":{"id":3855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3851,"mutability":"mutable","name":"value","nameLocation":"10956:5:31","nodeType":"VariableDeclaration","scope":3884,"src":"10948:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3850,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3854,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:31","nodeType":"VariableDeclaration","scope":3884,"src":"10963:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"typeName":{"id":3853,"nodeType":"UserDefinedTypeName","pathNode":{"id":3852,"name":"Rounding","nameLocations":["10963:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"10963:8:31"},"referencedDeclaration":3153,"src":"10963:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:31"},"returnParameters":{"id":3858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3857,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3884,"src":"11005:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3856,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:31"},"scope":4011,"src":"10933:246:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3970,"nodeType":"Block","src":"11493:600:31","statements":[{"assignments":[3893],"declarations":[{"constant":false,"id":3893,"mutability":"mutable","name":"result","nameLocation":"11511:6:31","nodeType":"VariableDeclaration","scope":3970,"src":"11503:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3892,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3895,"initialValue":{"hexValue":"30","id":3894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:31"},{"id":3967,"nodeType":"UncheckedBlock","src":"11531:533:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3896,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11559:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3910,"nodeType":"IfStatement","src":"11555:98:31","trueBody":{"id":3909,"nodeType":"Block","src":"11577:76:31","statements":[{"expression":{"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11595:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:31","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3904,"nodeType":"ExpressionStatement","src":"11595:13:31"},{"expression":{"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3905,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11626:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3908,"nodeType":"ExpressionStatement","src":"11626:12:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11670:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3925,"nodeType":"IfStatement","src":"11666:95:31","trueBody":{"id":3924,"nodeType":"Block","src":"11687:74:31","statements":[{"expression":{"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11705:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:31","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3919,"nodeType":"ExpressionStatement","src":"11705:12:31"},{"expression":{"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3920,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11735:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3923,"nodeType":"ExpressionStatement","src":"11735:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11778:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3940,"nodeType":"IfStatement","src":"11774:95:31","trueBody":{"id":3939,"nodeType":"Block","src":"11795:74:31","statements":[{"expression":{"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11813:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:31","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3934,"nodeType":"ExpressionStatement","src":"11813:12:31"},{"expression":{"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3935,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11843:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:31","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3938,"nodeType":"ExpressionStatement","src":"11843:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3941,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11886:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3955,"nodeType":"IfStatement","src":"11882:95:31","trueBody":{"id":3954,"nodeType":"Block","src":"11903:74:31","statements":[{"expression":{"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3946,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11921:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:31","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3949,"nodeType":"ExpressionStatement","src":"11921:12:31"},{"expression":{"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11951:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3953,"nodeType":"ExpressionStatement","src":"11951:11:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3956,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"11994:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3966,"nodeType":"IfStatement","src":"11990:64:31","trueBody":{"id":3965,"nodeType":"Block","src":"12010:44:31","statements":[{"expression":{"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"12028:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3964,"nodeType":"ExpressionStatement","src":"12028:11:31"}]}}]},{"expression":{"id":3968,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"12080:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3891,"id":3969,"nodeType":"Return","src":"12073:13:31"}]},"documentation":{"id":3885,"nodeType":"StructuredDocumentation","src":"11185:240:31","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3971,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:31","nodeType":"FunctionDefinition","parameters":{"id":3888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"value","nameLocation":"11454:5:31","nodeType":"VariableDeclaration","scope":3971,"src":"11446:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3886,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:31"},"returnParameters":{"id":3891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3971,"src":"11484:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3889,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:31"},"scope":4011,"src":"11430:663:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4009,"nodeType":"Block","src":"12329:173:31","statements":[{"id":4008,"nodeType":"UncheckedBlock","src":"12339:157:31","statements":[{"assignments":[3983],"declarations":[{"constant":false,"id":3983,"mutability":"mutable","name":"result","nameLocation":"12371:6:31","nodeType":"VariableDeclaration","scope":4008,"src":"12363:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3982,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3987,"initialValue":{"arguments":[{"id":3985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"12387:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3984,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3971,4010],"referencedDeclaration":3971,"src":"12380:6:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:31"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3988,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"12414:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3989,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"12424:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3990,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"12436:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3153_$","typeString":"type(enum Math.Rounding)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:31","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3151,"src":"12436:11:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"src":"12424:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3994,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"12457:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:31","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3997,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"12471:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:31","trueExpression":{"hexValue":"31","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:31","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4005,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:31","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3981,"id":4007,"nodeType":"Return","src":"12407:78:31"}]}]},"documentation":{"id":3972,"nodeType":"StructuredDocumentation","src":"12099:143:31","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4010,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:31","nodeType":"FunctionDefinition","parameters":{"id":3978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3974,"mutability":"mutable","name":"value","nameLocation":"12271:5:31","nodeType":"VariableDeclaration","scope":4010,"src":"12263:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3973,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3977,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:31","nodeType":"VariableDeclaration","scope":4010,"src":"12278:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"},"typeName":{"id":3976,"nodeType":"UserDefinedTypeName","pathNode":{"id":3975,"name":"Rounding","nameLocations":["12278:8:31"],"nodeType":"IdentifierPath","referencedDeclaration":3153,"src":"12278:8:31"},"referencedDeclaration":3153,"src":"12278:8:31","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3153","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:31"},"returnParameters":{"id":3981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4010,"src":"12320:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3979,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:31"},"scope":4011,"src":"12247:255:31","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4012,"src":"202:12302:31","usedErrors":[],"usedEvents":[]}],"src":"103:12402:31"},"id":31},"contracts/RealmPoints/RealmPoints.sol":{"ast":{"absolutePath":"contracts/RealmPoints/RealmPoints.sol","exportedSymbols":{"AccessControlBase":[123],"AccessControlStorage":[555],"ContractOwnershipBase":[171],"ContractOwnershipStorage":[817],"IRealmId":[5006],"Initializable":[1525],"RealmPoints":[4980],"SignatureChecker":[3146],"UUPSUpgradeable":[1661]},"id":4981,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4013,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:32"},{"absolutePath":"contracts/RealmPoints/interface/IRealmId.sol","file":"./interface/IRealmId.sol","id":4015,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":5007,"src":"57:50:32","symbolAliases":[{"foreign":{"id":4014,"name":"IRealmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"65:8:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","file":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","id":4017,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":3147,"src":"108:97:32","symbolAliases":[{"foreign":{"id":4016,"name":"SignatureChecker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"116:16:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","id":4019,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":556,"src":"206:117:32","symbolAliases":[{"foreign":{"id":4018,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"214:20:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","id":4021,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":124,"src":"324:106:32","symbolAliases":[{"foreign":{"id":4020,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"332:17:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","id":4023,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":172,"src":"431:114:32","symbolAliases":[{"foreign":{"id":4022,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"439:21:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":4025,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":818,"src":"546:125:32","symbolAliases":[{"foreign":{"id":4024,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"554:24:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":4027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":1526,"src":"672:96:32","symbolAliases":[{"foreign":{"id":4026,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"680:13:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":4029,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4981,"sourceUnit":1662,"src":"769:100:32","symbolAliases":[{"foreign":{"id":4028,"name":"UUPSUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"777:15:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4031,"name":"Initializable","nameLocations":["1283:13:32"],"nodeType":"IdentifierPath","referencedDeclaration":1525,"src":"1283:13:32"},"id":4032,"nodeType":"InheritanceSpecifier","src":"1283:13:32"},{"baseName":{"id":4033,"name":"AccessControlBase","nameLocations":["1298:17:32"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"1298:17:32"},"id":4034,"nodeType":"InheritanceSpecifier","src":"1298:17:32"},{"baseName":{"id":4035,"name":"ContractOwnershipBase","nameLocations":["1317:21:32"],"nodeType":"IdentifierPath","referencedDeclaration":171,"src":"1317:21:32"},"id":4036,"nodeType":"InheritanceSpecifier","src":"1317:21:32"},{"baseName":{"id":4037,"name":"UUPSUpgradeable","nameLocations":["1340:15:32"],"nodeType":"IdentifierPath","referencedDeclaration":1661,"src":"1340:15:32"},"id":4038,"nodeType":"InheritanceSpecifier","src":"1340:15:32"}],"canonicalName":"RealmPoints","contractDependencies":[],"contractKind":"contract","documentation":{"id":4030,"nodeType":"StructuredDocumentation","src":"871:388:32","text":"@title RealmPoints\n @notice This contract is designed for managing the point balances of RealmId.\n @notice Point balances are registered by realmId (verioned) by season.\n @notice Methods apply to the current version of the realmId if realmId version is not specified.\n @notice Methods support identifying the realmId by the realmId itself, or by its parent node and name."},"fullyImplemented":true,"id":4980,"linearizedBaseContracts":[4980,1661,1346,1012,1022,171,123,1525,2467,287,243,267,232],"name":"RealmPoints","nameLocation":"1268:11:32","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4042,"libraryName":{"id":4039,"name":"ContractOwnershipStorage","nameLocations":["1368:24:32"],"nodeType":"IdentifierPath","referencedDeclaration":817,"src":"1368:24:32"},"nodeType":"UsingForDirective","src":"1362:67:32","typeName":{"id":4041,"nodeType":"UserDefinedTypeName","pathNode":{"id":4040,"name":"ContractOwnershipStorage.Layout","nameLocations":["1397:24:32","1422:6:32"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"1397:31:32"},"referencedDeclaration":586,"src":"1397:31:32","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":4046,"libraryName":{"id":4043,"name":"AccessControlStorage","nameLocations":["1440:20:32"],"nodeType":"IdentifierPath","referencedDeclaration":555,"src":"1440:20:32"},"nodeType":"UsingForDirective","src":"1434:59:32","typeName":{"id":4045,"nodeType":"UserDefinedTypeName","pathNode":{"id":4044,"name":"AccessControlStorage.Layout","nameLocations":["1465:20:32","1486:6:32"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"1465:27:32"},"referencedDeclaration":314,"src":"1465:27:32","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"constant":true,"functionSelector":"75b238fc","id":4051,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"1523:10:32","nodeType":"VariableDeclaration","scope":4980,"src":"1499:60:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4047,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1499:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":4049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1546:12:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":4048,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1536:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"a3b0b5a3","id":4056,"mutability":"constant","name":"DEPOSITOR_ROLE","nameLocation":"1589:14:32","nodeType":"VariableDeclaration","scope":4980,"src":"1565:68:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1565:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4445504f5349544f525f524f4c45","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1616:16:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9","typeString":"literal_string \"DEPOSITOR_ROLE\""},"value":"DEPOSITOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9","typeString":"literal_string \"DEPOSITOR_ROLE\""}],"id":4053,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1606:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1606:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":4057,"nodeType":"StructuredDocumentation","src":"1640:61:32","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable"},"functionSelector":"2681a28a","id":4060,"mutability":"immutable","name":"REALM_ID_CONTRACT","nameLocation":"1732:17:32","nodeType":"VariableDeclaration","scope":4980,"src":"1706:43:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"},"typeName":{"id":4059,"nodeType":"UserDefinedTypeName","pathNode":{"id":4058,"name":"IRealmId","nameLocations":["1706:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":5006,"src":"1706:8:32"},"referencedDeclaration":5006,"src":"1706:8:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"visibility":"public"},{"constant":false,"functionSelector":"bcb39621","id":4062,"mutability":"mutable","name":"currentSeason","nameLocation":"1771:13:32","nodeType":"VariableDeclaration","scope":4980,"src":"1756:28:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4061,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1756:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"4529cc1b","id":4066,"mutability":"mutable","name":"seasons","nameLocation":"1822:7:32","nodeType":"VariableDeclaration","scope":4980,"src":"1790:39:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":4065,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1798:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1790:24:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4064,"name":"bool","nodeType":"ElementaryTypeName","src":"1809:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"51955dfc","id":4074,"mutability":"mutable","name":"balances","nameLocation":"1911:8:32","nodeType":"VariableDeclaration","scope":4980,"src":"1836:83:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"},"typeName":{"id":4073,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1844:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1836:67:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4072,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4068,"name":"uint256","nodeType":"ElementaryTypeName","src":"1863:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1855:47:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4071,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4069,"name":"uint256","nodeType":"ElementaryTypeName","src":"1882:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1874:27:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4070,"name":"uint256","nodeType":"ElementaryTypeName","src":"1893:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}}},"visibility":"public"},{"constant":false,"functionSelector":"141a468c","id":4078,"mutability":"mutable","name":"nonces","nameLocation":"2011:6:32","nodeType":"VariableDeclaration","scope":4980,"src":"1976:41:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":4077,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1984:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1976:27:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4076,"name":"uint256","nodeType":"ElementaryTypeName","src":"1995:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"f9515962","id":4082,"mutability":"mutable","name":"allowedConsumeReasonCodes","nameLocation":"2076:25:32","nodeType":"VariableDeclaration","scope":4980,"src":"2044:57:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":4081,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4079,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2052:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2044:24:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4080,"name":"bool","nodeType":"ElementaryTypeName","src":"2063:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":4083,"nodeType":"StructuredDocumentation","src":"2108:99:32","text":"@notice Emitted when the current season is set.\n @param season The new season being set."},"eventSelector":"61228c895f8ba06548597d3e34a23bc0ecb6d1e62a1eb3fa30be04883a17ef31","id":4087,"name":"SetCurrentSeason","nameLocation":"2218:16:32","nodeType":"EventDefinition","parameters":{"id":4086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4085,"indexed":false,"mutability":"mutable","name":"season","nameLocation":"2243:6:32","nodeType":"VariableDeclaration","scope":4087,"src":"2235:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4084,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2235:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2234:16:32"},"src":"2212:39:32"},{"anonymous":false,"documentation":{"id":4088,"nodeType":"StructuredDocumentation","src":"2257:163:32","text":"@notice Emitted when one or more reason code(s) are added to the comsume reason code mapping.\n @param reasonCodes The reason codes added to the mapping."},"eventSelector":"0d8c56a8918ec09c2fe3c4d9fcc00ece66df217a1ab3ad768dd0a71620da5b4e","id":4093,"name":"BatchAddedConsumeReasonCode","nameLocation":"2431:27:32","nodeType":"EventDefinition","parameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4091,"indexed":false,"mutability":"mutable","name":"reasonCodes","nameLocation":"2469:11:32","nodeType":"VariableDeclaration","scope":4093,"src":"2459:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4089,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4090,"nodeType":"ArrayTypeName","src":"2459:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2458:23:32"},"src":"2425:57:32"},{"anonymous":false,"documentation":{"id":4094,"nodeType":"StructuredDocumentation","src":"2488:171:32","text":"@notice Emitted when one or more reason code(s) are removed from the comsume reason code mapping.\n @param reasonCodes The reason codes removed from the mapping."},"eventSelector":"5b2c9fcbb27d48bdbfc59f0564b5ba81539309ebf09a940fad64d171bcfb9ff9","id":4099,"name":"BatchRemovedConsumeReasonCode","nameLocation":"2670:29:32","nodeType":"EventDefinition","parameters":{"id":4098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"indexed":false,"mutability":"mutable","name":"reasonCodes","nameLocation":"2710:11:32","nodeType":"VariableDeclaration","scope":4099,"src":"2700:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4095,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2700:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4096,"nodeType":"ArrayTypeName","src":"2700:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2699:23:32"},"src":"2664:59:32"},{"anonymous":false,"documentation":{"id":4100,"nodeType":"StructuredDocumentation","src":"2729:389:32","text":"@notice Emitted when an amount is deposited to a balance.\n @param sender The sender of the deposit.\n @param season The season of the balance deposited to.\n @param reasonCode The reason code of the deposit.\n @param realmId The realmId of the balance deposited to.\n @param realmIdVersion The realmId version.\n @param amount The amount deposited."},"eventSelector":"9092bf6bd1cf7db4fcf41aedc7c0333b51c57f5b80b429bc3d9caa5587c6ad82","id":4114,"name":"Deposited","nameLocation":"3129:9:32","nodeType":"EventDefinition","parameters":{"id":4113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4102,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"3164:6:32","nodeType":"VariableDeclaration","scope":4114,"src":"3148:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4101,"name":"address","nodeType":"ElementaryTypeName","src":"3148:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4104,"indexed":true,"mutability":"mutable","name":"season","nameLocation":"3196:6:32","nodeType":"VariableDeclaration","scope":4114,"src":"3180:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3180:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4106,"indexed":true,"mutability":"mutable","name":"reasonCode","nameLocation":"3228:10:32","nodeType":"VariableDeclaration","scope":4114,"src":"3212:26:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4105,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3212:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4108,"indexed":false,"mutability":"mutable","name":"realmId","nameLocation":"3256:7:32","nodeType":"VariableDeclaration","scope":4114,"src":"3248:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4107,"name":"uint256","nodeType":"ElementaryTypeName","src":"3248:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4110,"indexed":false,"mutability":"mutable","name":"realmIdVersion","nameLocation":"3281:14:32","nodeType":"VariableDeclaration","scope":4114,"src":"3273:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4109,"name":"uint256","nodeType":"ElementaryTypeName","src":"3273:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4112,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3313:6:32","nodeType":"VariableDeclaration","scope":4114,"src":"3305:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4111,"name":"uint256","nodeType":"ElementaryTypeName","src":"3305:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3138:187:32"},"src":"3123:203:32"},{"anonymous":false,"documentation":{"id":4115,"nodeType":"StructuredDocumentation","src":"3332:458:32","text":"@notice Emitted when an amount is consumed from a balance.\n @param realmId The realmId of the balance consumed from.\n @param season The season of the balance consumed from.\n @param reasonCode The reason code of the consumption.\n @param operator The sender of the consumption.\n @param realmIdVersion The realmId version.\n @param amount The amount consumed.\n @param realmIdOwner The realmId owner's address."},"eventSelector":"e514533875fbd3f8f396088d636e746599d8b5c3ba77e9ccfa9fc01ff7064601","id":4131,"name":"Consumed","nameLocation":"3801:8:32","nodeType":"EventDefinition","parameters":{"id":4130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4117,"indexed":true,"mutability":"mutable","name":"realmId","nameLocation":"3835:7:32","nodeType":"VariableDeclaration","scope":4131,"src":"3819:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4116,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4119,"indexed":true,"mutability":"mutable","name":"season","nameLocation":"3868:6:32","nodeType":"VariableDeclaration","scope":4131,"src":"3852:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4118,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3852:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4121,"indexed":true,"mutability":"mutable","name":"reasonCode","nameLocation":"3900:10:32","nodeType":"VariableDeclaration","scope":4131,"src":"3884:26:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3884:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4123,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"3928:8:32","nodeType":"VariableDeclaration","scope":4131,"src":"3920:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4122,"name":"address","nodeType":"ElementaryTypeName","src":"3920:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4125,"indexed":false,"mutability":"mutable","name":"realmIdVersion","nameLocation":"3954:14:32","nodeType":"VariableDeclaration","scope":4131,"src":"3946:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4124,"name":"uint256","nodeType":"ElementaryTypeName","src":"3946:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4127,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3986:6:32","nodeType":"VariableDeclaration","scope":4131,"src":"3978:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4126,"name":"uint256","nodeType":"ElementaryTypeName","src":"3978:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4129,"indexed":false,"mutability":"mutable","name":"realmIdOwner","nameLocation":"4010:12:32","nodeType":"VariableDeclaration","scope":4131,"src":"4002:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4128,"name":"address","nodeType":"ElementaryTypeName","src":"4002:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3809:219:32"},"src":"3795:234:32"},{"documentation":{"id":4132,"nodeType":"StructuredDocumentation","src":"4035:144:32","text":"@notice Thrown at construction when the given realmId contract address is invalid.\n @param addr The invalid realmId contract address."},"errorSelector":"82dd9ba3","id":4136,"name":"InvalidRealmIdContractAddress","nameLocation":"4190:29:32","nodeType":"ErrorDefinition","parameters":{"id":4135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4134,"mutability":"mutable","name":"addr","nameLocation":"4228:4:32","nodeType":"VariableDeclaration","scope":4136,"src":"4220:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4133,"name":"address","nodeType":"ElementaryTypeName","src":"4220:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4219:14:32"},"src":"4184:50:32"},{"documentation":{"id":4137,"nodeType":"StructuredDocumentation","src":"4240:131:32","text":"@notice Thrown when the given season has already been set.\n @param season The season that already exists in the mapping."},"errorSelector":"796c3e9a","id":4141,"name":"SeasonAlreadySet","nameLocation":"4382:16:32","nodeType":"ErrorDefinition","parameters":{"id":4140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4139,"mutability":"mutable","name":"season","nameLocation":"4407:6:32","nodeType":"VariableDeclaration","scope":4141,"src":"4399:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4399:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4398:16:32"},"src":"4376:39:32"},{"documentation":{"id":4142,"nodeType":"StructuredDocumentation","src":"4421:70:32","text":"@notice Thrown when the given consume reason codes array is empty."},"errorSelector":"3fb46086","id":4144,"name":"ConsumeReasonCodesArrayEmpty","nameLocation":"4502:28:32","nodeType":"ErrorDefinition","parameters":{"id":4143,"nodeType":"ParameterList","parameters":[],"src":"4530:2:32"},"src":"4496:37:32"},{"documentation":{"id":4145,"nodeType":"StructuredDocumentation","src":"4539:162:32","text":"@notice Thrown when the given consume reason code already exists in the mapping.\n @param reasonCode The reason code that already exists in the mapping."},"errorSelector":"b6421242","id":4149,"name":"ConsumeReasonCodeAlreadyExists","nameLocation":"4712:30:32","nodeType":"ErrorDefinition","parameters":{"id":4148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4147,"mutability":"mutable","name":"reasonCode","nameLocation":"4751:10:32","nodeType":"VariableDeclaration","scope":4149,"src":"4743:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4743:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4742:20:32"},"src":"4706:57:32"},{"documentation":{"id":4150,"nodeType":"StructuredDocumentation","src":"4769:154:32","text":"@notice Thrown when the given reason code does not exist in the mapping.\n @param reasonCode The reason code that does not exist in the mapping."},"errorSelector":"a89513e1","id":4154,"name":"ConsumeReasonCodeDoesNotExist","nameLocation":"4934:29:32","nodeType":"ErrorDefinition","parameters":{"id":4153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4152,"mutability":"mutable","name":"reasonCode","nameLocation":"4972:10:32","nodeType":"VariableDeclaration","scope":4154,"src":"4964:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4151,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4964:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4963:20:32"},"src":"4928:56:32"},{"documentation":{"id":4155,"nodeType":"StructuredDocumentation","src":"4990:192:32","text":"@notice Thrown when the given realmId version does not match the current realmId version.\n @param realmId The given realmId.\n @param realmIdVersion The given realmId version."},"errorSelector":"b196cc77","id":4161,"name":"InvalidRealmIdVersion","nameLocation":"5193:21:32","nodeType":"ErrorDefinition","parameters":{"id":4160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4157,"mutability":"mutable","name":"realmId","nameLocation":"5223:7:32","nodeType":"VariableDeclaration","scope":4161,"src":"5215:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"5215:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4159,"mutability":"mutable","name":"realmIdVersion","nameLocation":"5240:14:32","nodeType":"VariableDeclaration","scope":4161,"src":"5232:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4158,"name":"uint256","nodeType":"ElementaryTypeName","src":"5232:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5214:41:32"},"src":"5187:69:32"},{"documentation":{"id":4162,"nodeType":"StructuredDocumentation","src":"5262:159:32","text":"@notice Thrown when the realmId does not have enough balance\n @param realmId The given realmId.\n @param requiredBalance The required balance."},"errorSelector":"cf479181","id":4168,"name":"InsufficientBalance","nameLocation":"5432:19:32","nodeType":"ErrorDefinition","parameters":{"id":4167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4164,"mutability":"mutable","name":"realmId","nameLocation":"5460:7:32","nodeType":"VariableDeclaration","scope":4168,"src":"5452:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4163,"name":"uint256","nodeType":"ElementaryTypeName","src":"5452:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4166,"mutability":"mutable","name":"requiredBalance","nameLocation":"5477:15:32","nodeType":"VariableDeclaration","scope":4168,"src":"5469:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4165,"name":"uint256","nodeType":"ElementaryTypeName","src":"5469:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5451:42:32"},"src":"5426:68:32"},{"documentation":{"id":4169,"nodeType":"StructuredDocumentation","src":"5500:104:32","text":"@notice Thrown when the signer is not the realmId owner.\n @param signer The incorrect signer."},"errorSelector":"33ffff9b","id":4173,"name":"IncorrectSigner","nameLocation":"5615:15:32","nodeType":"ErrorDefinition","parameters":{"id":4172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4171,"mutability":"mutable","name":"signer","nameLocation":"5639:6:32","nodeType":"VariableDeclaration","scope":4173,"src":"5631:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4170,"name":"address","nodeType":"ElementaryTypeName","src":"5631:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5630:16:32"},"src":"5609:38:32"},{"documentation":{"id":4174,"nodeType":"StructuredDocumentation","src":"5653:49:32","text":"@notice Thrown when the signature is invalid."},"errorSelector":"8baa579f","id":4176,"name":"InvalidSignature","nameLocation":"5713:16:32","nodeType":"ErrorDefinition","parameters":{"id":4175,"nodeType":"ParameterList","parameters":[],"src":"5729:2:32"},"src":"5707:25:32"},{"body":{"id":4203,"nodeType":"Block","src":"5980:237:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4182,"name":"realmIdContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4179,"src":"5994:22:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6028:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6020:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4183,"name":"address","nodeType":"ElementaryTypeName","src":"6020:7:32","typeDescriptions":{}}},"id":4186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6020:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5994:36:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4193,"nodeType":"IfStatement","src":"5990:127:32","trueBody":{"id":4192,"nodeType":"Block","src":"6032:85:32","statements":[{"errorCall":{"arguments":[{"id":4189,"name":"realmIdContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4179,"src":"6083:22:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4188,"name":"InvalidRealmIdContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"6053:29:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6053:53:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4191,"nodeType":"RevertStatement","src":"6046:60:32"}]}},{"expression":{"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4194,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"6126:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4196,"name":"realmIdContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4179,"src":"6155:22:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4195,"name":"IRealmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"6146:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRealmId_$5006_$","typeString":"type(contract IRealmId)"}},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6146:32:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"src":"6126:52:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4199,"nodeType":"ExpressionStatement","src":"6126:52:32"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4200,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"6188:20:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6188:22:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4202,"nodeType":"ExpressionStatement","src":"6188:22:32"}]},"documentation":{"id":4177,"nodeType":"StructuredDocumentation","src":"5738:193:32","text":"@param realmIdContractAddress The realmId contract address.\n @dev Reverts if the given address is invalid (equal to ZeroAddress).\n @custom:oz-upgrades-unsafe-allow constructor"},"id":4204,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4179,"mutability":"mutable","name":"realmIdContractAddress","nameLocation":"5956:22:32","nodeType":"VariableDeclaration","scope":4204,"src":"5948:30:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4178,"name":"address","nodeType":"ElementaryTypeName","src":"5948:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5947:32:32"},"returnParameters":{"id":4181,"nodeType":"ParameterList","parameters":[],"src":"5980:0:32"},"scope":4980,"src":"5936:281:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4222,"nodeType":"Block","src":"6349:108:32","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4210,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"6359:22:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6359:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4212,"nodeType":"ExpressionStatement","src":"6359:24:32"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4218,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6437:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6437:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4213,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"6393:24:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$817_$","typeString":"type(library ContractOwnershipStorage)"}},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6418:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":816,"src":"6393:31:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6393:33:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":4217,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6427:9:32","memberName":"proxyInit","nodeType":"MemberAccess","referencedDeclaration":681,"src":"6393:43:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$586_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6393:57:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4221,"nodeType":"ExpressionStatement","src":"6393:57:32"}]},"documentation":{"id":4205,"nodeType":"StructuredDocumentation","src":"6223:80:32","text":"@notice Initializes the contract with the provided realmId contract address."},"functionSelector":"8129fc1c","id":4223,"implemented":true,"kind":"function","modifiers":[{"id":4208,"kind":"modifierInvocation","modifierName":{"id":4207,"name":"initializer","nameLocations":["6337:11:32"],"nodeType":"IdentifierPath","referencedDeclaration":1427,"src":"6337:11:32"},"nodeType":"ModifierInvocation","src":"6337:11:32"}],"name":"initialize","nameLocation":"6317:10:32","nodeType":"FunctionDefinition","parameters":{"id":4206,"nodeType":"ParameterList","parameters":[],"src":"6327:2:32"},"returnParameters":{"id":4209,"nodeType":"ParameterList","parameters":[],"src":"6349:0:32"},"scope":4980,"src":"6308:149:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1655],"body":{"id":4239,"nodeType":"Block","src":"6661:87:32","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4235,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6728:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6728:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4230,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"6671:24:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$817_$","typeString":"type(library ContractOwnershipStorage)"}},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6696:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":816,"src":"6671:31:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6671:33:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$586_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":4234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6705:22:32","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":784,"src":"6671:56:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$586_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$586_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6671:70:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4238,"nodeType":"ExpressionStatement","src":"6671:70:32"}]},"documentation":{"id":4224,"nodeType":"StructuredDocumentation","src":"6463:134:32","text":"@notice Checks whether the sender is authorized to upgrade the contract.\n @dev Reverts if sender is not the contract owner."},"id":4240,"implemented":true,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"6611:17:32","nodeType":"FunctionDefinition","overrides":{"id":4228,"nodeType":"OverrideSpecifier","overrides":[],"src":"6652:8:32"},"parameters":{"id":4227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4240,"src":"6629:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4225,"name":"address","nodeType":"ElementaryTypeName","src":"6629:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6628:9:32"},"returnParameters":{"id":4229,"nodeType":"ParameterList","parameters":[],"src":"6661:0:32"},"scope":4980,"src":"6602:146:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4279,"nodeType":"Block","src":"7075:277:32","statements":[{"expression":{"arguments":[{"id":4251,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"7130:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4252,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"7142:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7142:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4246,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"7085:20:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7106:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"7085:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7085:29:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7115:14:32","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":518,"src":"7085:44:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7085:70:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4255,"nodeType":"ExpressionStatement","src":"7085:70:32"},{"condition":{"baseExpression":{"id":4256,"name":"seasons","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"7169:7:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4258,"indexExpression":{"id":4257,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"7177:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7169:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4264,"nodeType":"IfStatement","src":"7165:77:32","trueBody":{"id":4263,"nodeType":"Block","src":"7186:56:32","statements":[{"errorCall":{"arguments":[{"id":4260,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"7224:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4259,"name":"SeasonAlreadySet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"7207:16:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7207:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4262,"nodeType":"RevertStatement","src":"7200:31:32"}]}},{"expression":{"id":4267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4265,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"7252:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4266,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"7268:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7252:22:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4268,"nodeType":"ExpressionStatement","src":"7252:22:32"},{"expression":{"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4269,"name":"seasons","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"7284:7:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4271,"indexExpression":{"id":4270,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"7292:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7284:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7302:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7284:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4274,"nodeType":"ExpressionStatement","src":"7284:22:32"},{"eventCall":{"arguments":[{"id":4276,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"7338:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4275,"name":"SetCurrentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"7321:16:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7321:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4278,"nodeType":"EmitStatement","src":"7316:29:32"}]},"documentation":{"id":4241,"nodeType":"StructuredDocumentation","src":"6754:265:32","text":"@notice Sets the current season.\n @dev Reverts if sender does not have Admin role.\n @dev Reverts if the given season has already been set before.\n @dev Emits a {SetCurrentSeason} event if successful.\n @param season The season to set."},"functionSelector":"86a8e98a","id":4280,"implemented":true,"kind":"function","modifiers":[],"name":"setCurrentSeason","nameLocation":"7033:16:32","nodeType":"FunctionDefinition","parameters":{"id":4244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4243,"mutability":"mutable","name":"season","nameLocation":"7058:6:32","nodeType":"VariableDeclaration","scope":4280,"src":"7050:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7050:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7049:16:32"},"returnParameters":{"id":4245,"nodeType":"ParameterList","parameters":[],"src":"7075:0:32"},"scope":4980,"src":"7024:328:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4344,"nodeType":"Block","src":"7892:520:32","statements":[{"expression":{"arguments":[{"id":4292,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"7947:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4293,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"7959:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4287,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"7902:20:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7923:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"7902:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7902:29:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7932:14:32","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":518,"src":"7902:44:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7902:70:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4296,"nodeType":"ExpressionStatement","src":"7902:70:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4297,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"7986:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7998:6:32","memberName":"length","nodeType":"MemberAccess","src":"7986:18:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":4299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8008:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7986:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4305,"nodeType":"IfStatement","src":"7982:91:32","trueBody":{"id":4304,"nodeType":"Block","src":"8011:62:32","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4301,"name":"ConsumeReasonCodesArrayEmpty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"8032:28:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8032:30:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4303,"nodeType":"RevertStatement","src":"8025:37:32"}]}},{"body":{"id":4338,"nodeType":"Block","src":"8132:219:32","statements":[{"condition":{"baseExpression":{"id":4317,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"8150:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4321,"indexExpression":{"baseExpression":{"id":4318,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8176:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4320,"indexExpression":{"id":4319,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"8188:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8176:14:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8150:41:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4329,"nodeType":"IfStatement","src":"8146:133:32","trueBody":{"id":4328,"nodeType":"Block","src":"8193:86:32","statements":[{"errorCall":{"arguments":[{"baseExpression":{"id":4323,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8249:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4325,"indexExpression":{"id":4324,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"8261:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8249:14:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4322,"name":"ConsumeReasonCodeAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4149,"src":"8218:30:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8218:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4327,"nodeType":"RevertStatement","src":"8211:53:32"}]}},{"expression":{"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4330,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"8292:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4334,"indexExpression":{"baseExpression":{"id":4331,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8318:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4333,"indexExpression":{"id":4332,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"8330:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8318:14:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8292:41:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8336:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8292:48:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4337,"nodeType":"ExpressionStatement","src":"8292:48:32"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"8103:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4311,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8107:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8119:6:32","memberName":"length","nodeType":"MemberAccess","src":"8107:18:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8103:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4339,"initializationExpression":{"assignments":[4307],"declarations":[{"constant":false,"id":4307,"mutability":"mutable","name":"i","nameLocation":"8096:1:32","nodeType":"VariableDeclaration","scope":4339,"src":"8088:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"8088:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4309,"initialValue":{"hexValue":"30","id":4308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8100:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8088:13:32"},"loopExpression":{"expression":{"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8127:3:32","subExpression":{"id":4314,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"8127:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4316,"nodeType":"ExpressionStatement","src":"8127:3:32"},"nodeType":"ForStatement","src":"8083:268:32"},{"eventCall":{"arguments":[{"id":4341,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"8393:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}],"id":4340,"name":"BatchAddedConsumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4093,"src":"8365:27:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32[] memory)"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8365:40:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4343,"nodeType":"EmitStatement","src":"8360:45:32"}]},"documentation":{"id":4281,"nodeType":"StructuredDocumentation","src":"7358:452:32","text":"@notice Adds one or more reason code(s) to the consume reason code mapping.\n @dev Reverts if sender does not have Admin role.\n @dev Reverts if the given reason codes array is empty.\n @dev Reverts if any of the given reason codes already exists in the mapping.\n @dev Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.\n @param reasonCodes Array of reason codes to add."},"functionSelector":"3f30b00f","id":4345,"implemented":true,"kind":"function","modifiers":[],"name":"batchAddConsumeReasonCodes","nameLocation":"7824:26:32","nodeType":"FunctionDefinition","parameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4284,"mutability":"mutable","name":"reasonCodes","nameLocation":"7870:11:32","nodeType":"VariableDeclaration","scope":4345,"src":"7851:30:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7851:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4283,"nodeType":"ArrayTypeName","src":"7851:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7850:32:32"},"returnParameters":{"id":4286,"nodeType":"ParameterList","parameters":[],"src":"7892:0:32"},"scope":4980,"src":"7815:597:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4409,"nodeType":"Block","src":"8965:522:32","statements":[{"expression":{"arguments":[{"id":4357,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"9020:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4358,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"9032:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9032:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4352,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"8975:20:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8996:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"8975:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8975:29:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9005:14:32","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":518,"src":"8975:44:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8975:70:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4361,"nodeType":"ExpressionStatement","src":"8975:70:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4362,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9059:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9071:6:32","memberName":"length","nodeType":"MemberAccess","src":"9059:18:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":4364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9081:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9059:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4370,"nodeType":"IfStatement","src":"9055:91:32","trueBody":{"id":4369,"nodeType":"Block","src":"9084:62:32","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4366,"name":"ConsumeReasonCodesArrayEmpty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"9105:28:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9105:30:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4368,"nodeType":"RevertStatement","src":"9098:37:32"}]}},{"body":{"id":4403,"nodeType":"Block","src":"9205:219:32","statements":[{"condition":{"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9223:42:32","subExpression":{"baseExpression":{"id":4382,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9224:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4386,"indexExpression":{"baseExpression":{"id":4383,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9250:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4385,"indexExpression":{"id":4384,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"9262:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9250:14:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9224:41:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4395,"nodeType":"IfStatement","src":"9219:133:32","trueBody":{"id":4394,"nodeType":"Block","src":"9267:85:32","statements":[{"errorCall":{"arguments":[{"baseExpression":{"id":4389,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9322:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4391,"indexExpression":{"id":4390,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"9334:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9322:14:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4388,"name":"ConsumeReasonCodeDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"9292:29:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9292:45:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4393,"nodeType":"RevertStatement","src":"9285:52:32"}]}},{"expression":{"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"9365:48:32","subExpression":{"baseExpression":{"id":4396,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"9372:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4400,"indexExpression":{"baseExpression":{"id":4397,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9398:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4399,"indexExpression":{"id":4398,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"9410:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9398:14:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9372:41:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4402,"nodeType":"ExpressionStatement","src":"9365:48:32"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4375,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"9176:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4376,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9180:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9192:6:32","memberName":"length","nodeType":"MemberAccess","src":"9180:18:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9176:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4404,"initializationExpression":{"assignments":[4372],"declarations":[{"constant":false,"id":4372,"mutability":"mutable","name":"i","nameLocation":"9169:1:32","nodeType":"VariableDeclaration","scope":4404,"src":"9161:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4371,"name":"uint256","nodeType":"ElementaryTypeName","src":"9161:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4374,"initialValue":{"hexValue":"30","id":4373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9173:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9161:13:32"},"loopExpression":{"expression":{"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9200:3:32","subExpression":{"id":4379,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"9200:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4381,"nodeType":"ExpressionStatement","src":"9200:3:32"},"nodeType":"ForStatement","src":"9156:268:32"},{"eventCall":{"arguments":[{"id":4406,"name":"reasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9468:11:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}],"id":4405,"name":"BatchRemovedConsumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"9438:29:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32[] memory)"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9438:42:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4408,"nodeType":"EmitStatement","src":"9433:47:32"}]},"documentation":{"id":4346,"nodeType":"StructuredDocumentation","src":"8418:462:32","text":"@notice Removes one or more reason code(s) from the consume reason code mapping.\n @dev Reverts if sender does not have Admin role.\n @dev Reverts if the given reason codes array is empty.\n @dev Reverts if any of the given reason codes do not exist in the mapping.\n @dev Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.\n @param reasonCodes Array of reason codes to remove."},"functionSelector":"906405a3","id":4410,"implemented":true,"kind":"function","modifiers":[],"name":"batchRemoveConsumeReasonCodes","nameLocation":"8894:29:32","nodeType":"FunctionDefinition","parameters":{"id":4350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4349,"mutability":"mutable","name":"reasonCodes","nameLocation":"8943:11:32","nodeType":"VariableDeclaration","scope":4410,"src":"8924:30:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8924:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4348,"nodeType":"ArrayTypeName","src":"8924:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"8923:32:32"},"returnParameters":{"id":4351,"nodeType":"ParameterList","parameters":[],"src":"8965:0:32"},"scope":4980,"src":"8885:602:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4477,"nodeType":"Block","src":"10259:499:32","statements":[{"expression":{"arguments":[{"id":4429,"name":"DEPOSITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4056,"src":"10314:14:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4430,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"10330:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10330:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4424,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"10269:20:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$555_$","typeString":"type(library AccessControlStorage)"}},"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10290:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"10269:27:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10269:29:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$314_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10299:14:32","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":518,"src":"10269:44:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$314_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$314_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10269:74:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4433,"nodeType":"ExpressionStatement","src":"10269:74:32"},{"expression":{"arguments":[{"id":4437,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"10380:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4434,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"10354:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10372:7:32","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":5005,"src":"10354:25:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10354:34:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4439,"nodeType":"ExpressionStatement","src":"10354:34:32"},{"assignments":[4441],"declarations":[{"constant":false,"id":4441,"mutability":"mutable","name":"curRealmIdVersion","nameLocation":"10406:17:32","nodeType":"VariableDeclaration","scope":4477,"src":"10398:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4440,"name":"uint256","nodeType":"ElementaryTypeName","src":"10398:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4446,"initialValue":{"arguments":[{"id":4444,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"10455:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4442,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"10426:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10444:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"10426:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10426:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10398:65:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4447,"name":"curRealmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"10477:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4448,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4417,"src":"10498:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10477:35:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4456,"nodeType":"IfStatement","src":"10473:119:32","trueBody":{"id":4455,"nodeType":"Block","src":"10514:78:32","statements":[{"errorCall":{"arguments":[{"id":4451,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"10557:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4452,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4417,"src":"10566:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4450,"name":"InvalidRealmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"10535:21:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10535:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4454,"nodeType":"RevertStatement","src":"10528:53:32"}]}},{"expression":{"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4457,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"10602:8:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":4461,"indexExpression":{"id":4458,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"10611:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10602:16:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":4462,"indexExpression":{"id":4459,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"10619:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10602:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4463,"indexExpression":{"id":4460,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4417,"src":"10628:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10602:41:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4464,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"10647:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10602:51:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4466,"nodeType":"ExpressionStatement","src":"10602:51:32"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4468,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"10678:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10678:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4470,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"10692:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4471,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"10700:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4472,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"10719:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4473,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4417,"src":"10728:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4474,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"10744:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4467,"name":"Deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"10668:9:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,bytes32,uint256,uint256,uint256)"}},"id":4475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10668:83:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4476,"nodeType":"EmitStatement","src":"10663:88:32"}]},"documentation":{"id":4411,"nodeType":"StructuredDocumentation","src":"9493:637:32","text":"@notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\n @dev Reverts if sender does not have Depositor role.\n @dev Reverts if the realmId does not exist.\n @dev Reverts if the given realmId version does not match the current realmId version.\n @dev Emits a {Deposited} event if successful.\n @param season The season to deposit to.\n @param realmId The realmId to deposit to.\n @param realmIdVersion The realmId version.\n @param amount The amount to deposit.\n @param depositReasonCode The reason code of the deposit."},"functionSelector":"18ee89f0","id":4478,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"10144:7:32","nodeType":"FunctionDefinition","parameters":{"id":4422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4413,"mutability":"mutable","name":"season","nameLocation":"10160:6:32","nodeType":"VariableDeclaration","scope":4478,"src":"10152:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10152:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4415,"mutability":"mutable","name":"realmId","nameLocation":"10176:7:32","nodeType":"VariableDeclaration","scope":4478,"src":"10168:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4414,"name":"uint256","nodeType":"ElementaryTypeName","src":"10168:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4417,"mutability":"mutable","name":"realmIdVersion","nameLocation":"10193:14:32","nodeType":"VariableDeclaration","scope":4478,"src":"10185:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4416,"name":"uint256","nodeType":"ElementaryTypeName","src":"10185:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4419,"mutability":"mutable","name":"amount","nameLocation":"10217:6:32","nodeType":"VariableDeclaration","scope":4478,"src":"10209:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4418,"name":"uint256","nodeType":"ElementaryTypeName","src":"10209:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4421,"mutability":"mutable","name":"depositReasonCode","nameLocation":"10233:17:32","nodeType":"VariableDeclaration","scope":4478,"src":"10225:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4420,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10225:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10151:100:32"},"returnParameters":{"id":4423,"nodeType":"ParameterList","parameters":[],"src":"10259:0:32"},"scope":4980,"src":"10135:623:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4510,"nodeType":"Block","src":"11783:158:32","statements":[{"assignments":[4495],"declarations":[{"constant":false,"id":4495,"mutability":"mutable","name":"realmId","nameLocation":"11801:7:32","nodeType":"VariableDeclaration","scope":4510,"src":"11793:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4494,"name":"uint256","nodeType":"ElementaryTypeName","src":"11793:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4501,"initialValue":{"arguments":[{"id":4498,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4485,"src":"11840:4:32","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4499,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"11846:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4496,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"11811:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11829:10:32","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":4998,"src":"11811:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11811:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11793:64:32"},{"expression":{"arguments":[{"id":4503,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"11875:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4504,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"11883:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4505,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4487,"src":"11892:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4506,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"11908:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4507,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4491,"src":"11916:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4502,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"11867:7:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (bytes32,uint256,uint256,uint256,bytes32)"}},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11867:67:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4509,"nodeType":"ExpressionStatement","src":"11867:67:32"}]},"documentation":{"id":4479,"nodeType":"StructuredDocumentation","src":"10764:809:32","text":"@notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\n @notice The realmId is resolved from the given parent node and name.\n @dev Reverts if sender does not have Depositor role.\n @dev Reverts if the realmId does not exist.\n @dev Reverts if the given realmId version does not match the current realmId version.\n @dev Emits a {Deposited} event with msg.sender as the sender.\n @param season The season to deposit to.\n @param parentNode The parent node associated with the realmId.\n @param name The name associated with the realmId.\n @param realmIdVersion The realmId version.\n @param amount The amount to deposit.\n @param depositReasonCode The reason code of the deposit."},"functionSelector":"9d70b005","id":4511,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"11587:7:32","nodeType":"FunctionDefinition","parameters":{"id":4492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4481,"mutability":"mutable","name":"season","nameLocation":"11612:6:32","nodeType":"VariableDeclaration","scope":4511,"src":"11604:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11604:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4483,"mutability":"mutable","name":"parentNode","nameLocation":"11636:10:32","nodeType":"VariableDeclaration","scope":4511,"src":"11628:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11628:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4485,"mutability":"mutable","name":"name","nameLocation":"11672:4:32","nodeType":"VariableDeclaration","scope":4511,"src":"11656:20:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4484,"name":"string","nodeType":"ElementaryTypeName","src":"11656:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4487,"mutability":"mutable","name":"realmIdVersion","nameLocation":"11694:14:32","nodeType":"VariableDeclaration","scope":4511,"src":"11686:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4486,"name":"uint256","nodeType":"ElementaryTypeName","src":"11686:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4489,"mutability":"mutable","name":"amount","nameLocation":"11726:6:32","nodeType":"VariableDeclaration","scope":4511,"src":"11718:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4488,"name":"uint256","nodeType":"ElementaryTypeName","src":"11718:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4491,"mutability":"mutable","name":"depositReasonCode","nameLocation":"11750:17:32","nodeType":"VariableDeclaration","scope":4511,"src":"11742:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4490,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11742:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11594:179:32"},"returnParameters":{"id":4493,"nodeType":"ParameterList","parameters":[],"src":"11783:0:32"},"scope":4980,"src":"11578:363:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4578,"nodeType":"Block","src":"12697:512:32","statements":[{"assignments":[4526],"declarations":[{"constant":false,"id":4526,"mutability":"mutable","name":"balance","nameLocation":"12715:7:32","nodeType":"VariableDeclaration","scope":4578,"src":"12707:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4525,"name":"uint256","nodeType":"ElementaryTypeName","src":"12707:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4534,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4527,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"12725:8:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":4529,"indexExpression":{"id":4528,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"12734:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12725:23:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":4531,"indexExpression":{"id":4530,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"12749:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12725:32:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4533,"indexExpression":{"id":4532,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"12758:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12725:48:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12707:66:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4535,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4526,"src":"12787:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4536,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"12797:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12787:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4544,"nodeType":"IfStatement","src":"12783:90:32","trueBody":{"id":4543,"nodeType":"Block","src":"12805:68:32","statements":[{"errorCall":{"arguments":[{"id":4539,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"12846:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4540,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"12855:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4538,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"12826:19:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12826:36:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4542,"nodeType":"RevertStatement","src":"12819:43:32"}]}},{"condition":{"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12886:45:32","subExpression":{"baseExpression":{"id":4545,"name":"allowedConsumeReasonCodes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"12887:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4547,"indexExpression":{"id":4546,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"12913:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12887:44:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4554,"nodeType":"IfStatement","src":"12882:131:32","trueBody":{"id":4553,"nodeType":"Block","src":"12933:80:32","statements":[{"errorCall":{"arguments":[{"id":4550,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"12984:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4549,"name":"ConsumeReasonCodeDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"12954:29:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12954:48:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4552,"nodeType":"RevertStatement","src":"12947:55:32"}]}},{"expression":{"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4555,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"13023:8:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":4559,"indexExpression":{"id":4556,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"13032:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13023:23:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":4560,"indexExpression":{"id":4557,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"13047:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13023:32:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4561,"indexExpression":{"id":4558,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"13056:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13023:48:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4562,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4526,"src":"13074:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4563,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"13084:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13074:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13023:67:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4566,"nodeType":"ExpressionStatement","src":"13023:67:32"},{"eventCall":{"arguments":[{"id":4568,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"13115:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4569,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"13124:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4570,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"13139:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4571,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"13158:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13158:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4573,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"13172:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4574,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4518,"src":"13188:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4575,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"13196:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4567,"name":"Consumed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"13106:8:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,bytes32,bytes32,address,uint256,uint256,address)"}},"id":4576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13106:96:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4577,"nodeType":"EmitStatement","src":"13101:101:32"}]},"documentation":{"id":4512,"nodeType":"StructuredDocumentation","src":"11947:619:32","text":"@notice Called by other public functions to consume a given amount from the balance of a given realmId and version.\n @notice Applies to the current season.\n @dev Reverts if balance is insufficient.\n @dev Reverts if the consume reason code is not allowed.\n @dev Emits a {Consumed} event if the consumption is successful.\n @param realmId The realmId to deposit to.\n @param realmIdVersion The realmId version.\n @param amount The amount to consume.\n @param consumeReasonCode The reason code of the consumption.\n @param owner Address of the realmId's owner."},"id":4579,"implemented":true,"kind":"function","modifiers":[],"name":"_consume","nameLocation":"12580:8:32","nodeType":"FunctionDefinition","parameters":{"id":4523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4514,"mutability":"mutable","name":"realmId","nameLocation":"12597:7:32","nodeType":"VariableDeclaration","scope":4579,"src":"12589:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4513,"name":"uint256","nodeType":"ElementaryTypeName","src":"12589:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4516,"mutability":"mutable","name":"realmIdVersion","nameLocation":"12614:14:32","nodeType":"VariableDeclaration","scope":4579,"src":"12606:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4515,"name":"uint256","nodeType":"ElementaryTypeName","src":"12606:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4518,"mutability":"mutable","name":"amount","nameLocation":"12638:6:32","nodeType":"VariableDeclaration","scope":4579,"src":"12630:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4517,"name":"uint256","nodeType":"ElementaryTypeName","src":"12630:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4520,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"12654:17:32","nodeType":"VariableDeclaration","scope":4579,"src":"12646:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12646:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4522,"mutability":"mutable","name":"owner","nameLocation":"12681:5:32","nodeType":"VariableDeclaration","scope":4579,"src":"12673:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4521,"name":"address","nodeType":"ElementaryTypeName","src":"12673:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12588:99:32"},"returnParameters":{"id":4524,"nodeType":"ParameterList","parameters":[],"src":"12697:0:32"},"scope":4980,"src":"12571:638:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4614,"nodeType":"Block","src":"14484:143:32","statements":[{"assignments":[4598],"declarations":[{"constant":false,"id":4598,"mutability":"mutable","name":"realmId","nameLocation":"14502:7:32","nodeType":"VariableDeclaration","scope":4614,"src":"14494:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4597,"name":"uint256","nodeType":"ElementaryTypeName","src":"14494:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4604,"initialValue":{"arguments":[{"id":4601,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"14541:4:32","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4602,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4582,"src":"14547:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4599,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"14512:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14530:10:32","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":4998,"src":"14512:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14512:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14494:64:32"},{"expression":{"arguments":[{"id":4606,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4598,"src":"14576:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4607,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4586,"src":"14585:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4608,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"14593:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4609,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"14612:1:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4610,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4592,"src":"14615:1:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4611,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"14618:1:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4605,"name":"consume","nodeType":"Identifier","overloadedDeclarations":[4715,4786],"referencedDeclaration":4715,"src":"14568:7:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (uint256,uint256,bytes32,uint8,bytes32,bytes32)"}},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14568:52:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4613,"nodeType":"ExpressionStatement","src":"14568:52:32"}]},"documentation":{"id":4580,"nodeType":"StructuredDocumentation","src":"13215:1122:32","text":"@notice Called with a signature to consume a given amount from the balance of a realmId.\n @notice The realmId is resolved from the given parent node and name.\n @notice Applies to the current version of the realmId.\n @notice Applies to the current season.\n @dev Reverts if fails to resolve realmId from the given parent node and name.\n @dev Reverts if fails to resolve realmId's version.\n @dev Reverts if signature is invalid.\n @dev Reverts if fails to resolve owner of the realmId.\n @dev Reverts if signer is not the realmId owner.\n @dev Reverts if balance is insufficient.\n @dev Reverts if the consume reason code is not allowed.\n @dev Emits a {Consumed} event if the consumption is successful.\n @param parentNode The parent node of the realmId.\n @param name The name of the realmId.\n @param amount The amount to consume.\n @param consumeReasonCode The reason code of the consumption.\n @param v v value of the signature.\n @param s s value of the signature.\n @param r r value of the signature."},"functionSelector":"99d342ac","id":4615,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"14351:7:32","nodeType":"FunctionDefinition","parameters":{"id":4595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4582,"mutability":"mutable","name":"parentNode","nameLocation":"14367:10:32","nodeType":"VariableDeclaration","scope":4615,"src":"14359:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4581,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14359:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4584,"mutability":"mutable","name":"name","nameLocation":"14395:4:32","nodeType":"VariableDeclaration","scope":4615,"src":"14379:20:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4583,"name":"string","nodeType":"ElementaryTypeName","src":"14379:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4586,"mutability":"mutable","name":"amount","nameLocation":"14409:6:32","nodeType":"VariableDeclaration","scope":4615,"src":"14401:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4585,"name":"uint256","nodeType":"ElementaryTypeName","src":"14401:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4588,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"14425:17:32","nodeType":"VariableDeclaration","scope":4615,"src":"14417:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14417:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4590,"mutability":"mutable","name":"v","nameLocation":"14450:1:32","nodeType":"VariableDeclaration","scope":4615,"src":"14444:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4589,"name":"uint8","nodeType":"ElementaryTypeName","src":"14444:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4592,"mutability":"mutable","name":"r","nameLocation":"14461:1:32","nodeType":"VariableDeclaration","scope":4615,"src":"14453:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14453:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4594,"mutability":"mutable","name":"s","nameLocation":"14472:1:32","nodeType":"VariableDeclaration","scope":4615,"src":"14464:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14464:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14358:116:32"},"returnParameters":{"id":4596,"nodeType":"ParameterList","parameters":[],"src":"14484:0:32"},"scope":4980,"src":"14342:285:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4714,"nodeType":"Block","src":"15668:753:32","statements":[{"assignments":[4632],"declarations":[{"constant":false,"id":4632,"mutability":"mutable","name":"nonce","nameLocation":"15686:5:32","nodeType":"VariableDeclaration","scope":4714,"src":"15678:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4631,"name":"uint256","nodeType":"ElementaryTypeName","src":"15678:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4636,"initialValue":{"baseExpression":{"id":4633,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4078,"src":"15694:6:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4635,"indexExpression":{"id":4634,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"15701:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15694:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15678:31:32"},{"assignments":[4638],"declarations":[{"constant":false,"id":4638,"mutability":"mutable","name":"realmIdVersion","nameLocation":"15727:14:32","nodeType":"VariableDeclaration","scope":4714,"src":"15719:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4637,"name":"uint256","nodeType":"ElementaryTypeName","src":"15719:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4643,"initialValue":{"arguments":[{"id":4641,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"15773:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4639,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"15744:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15762:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"15744:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15744:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15719:62:32"},{"assignments":[4645],"declarations":[{"constant":false,"id":4645,"mutability":"mutable","name":"messageHash","nameLocation":"15799:11:32","nodeType":"VariableDeclaration","scope":4714,"src":"15791:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15791:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4655,"initialValue":{"arguments":[{"id":4647,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"15829:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4648,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4638,"src":"15838:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4649,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"15854:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15854:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4651,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"15868:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4652,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"15876:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4653,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4622,"src":"15883:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4646,"name":"_preparePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"15813:15:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (uint256,uint256,address,uint256,uint256,bytes32) view returns (bytes32)"}},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15813:88:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15791:110:32"},{"assignments":[4657],"declarations":[{"constant":false,"id":4657,"mutability":"mutable","name":"messageDigest","nameLocation":"15919:13:32","nodeType":"VariableDeclaration","scope":4714,"src":"15911:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4656,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15911:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4665,"initialValue":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":4661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15962:34:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":4662,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"15998:11:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4659,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"15945:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15949:12:32","memberName":"encodePacked","nodeType":"MemberAccess","src":"15945:16:32","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15945:65:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4658,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"15935:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15935:76:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15911:100:32"},{"assignments":[4667],"declarations":[{"constant":false,"id":4667,"mutability":"mutable","name":"owner","nameLocation":"16030:5:32","nodeType":"VariableDeclaration","scope":4714,"src":"16022:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4666,"name":"address","nodeType":"ElementaryTypeName","src":"16022:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4672,"initialValue":{"arguments":[{"id":4670,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"16064:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4668,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"16038:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16056:7:32","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":5005,"src":"16038:25:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16038:34:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16022:50:32"},{"assignments":[4674],"declarations":[{"constant":false,"id":4674,"mutability":"mutable","name":"signature","nameLocation":"16095:9:32","nodeType":"VariableDeclaration","scope":4714,"src":"16082:22:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4673,"name":"bytes","nodeType":"ElementaryTypeName","src":"16082:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4681,"initialValue":{"arguments":[{"id":4677,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"16124:1:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4678,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"16127:1:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4679,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"16130:1:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":4675,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"16107:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16111:12:32","memberName":"encodePacked","nodeType":"MemberAccess","src":"16107:16:32","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16107:25:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"16082:50:32"},{"assignments":[4683],"declarations":[{"constant":false,"id":4683,"mutability":"mutable","name":"isValid","nameLocation":"16147:7:32","nodeType":"VariableDeclaration","scope":4714,"src":"16142:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4682,"name":"bool","nodeType":"ElementaryTypeName","src":"16142:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4690,"initialValue":{"arguments":[{"id":4686,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"16194:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4687,"name":"messageDigest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"16201:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4688,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"16216:9:32","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4684,"name":"SignatureChecker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"16157:16:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignatureChecker_$3146_$","typeString":"type(library SignatureChecker)"}},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16174:19:32","memberName":"isValidSignatureNow","nodeType":"MemberAccess","referencedDeclaration":3145,"src":"16157:36:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,bytes32,bytes memory) view returns (bool)"}},"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16157:69:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"16142:84:32"},{"condition":{"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16240:8:32","subExpression":{"id":4691,"name":"isValid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"16241:7:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4697,"nodeType":"IfStatement","src":"16236:64:32","trueBody":{"id":4696,"nodeType":"Block","src":"16250:50:32","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4693,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"16271:16:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16271:18:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4695,"nodeType":"RevertStatement","src":"16264:25:32"}]}},{"expression":{"arguments":[{"id":4699,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"16319:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4700,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4638,"src":"16328:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4701,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4620,"src":"16344:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4702,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4622,"src":"16352:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4703,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"16371:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4698,"name":"_consume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"16310:8:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (uint256,uint256,uint256,bytes32,address)"}},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16310:67:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4705,"nodeType":"ExpressionStatement","src":"16310:67:32"},{"expression":{"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4706,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4078,"src":"16387:6:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4708,"indexExpression":{"id":4707,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"16394:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16387:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4709,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"16405:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16413:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"16405:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16387:27:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4713,"nodeType":"ExpressionStatement","src":"16387:27:32"}]},"documentation":{"id":4616,"nodeType":"StructuredDocumentation","src":"14633:915:32","text":"@notice Called with a signature to consume a given amount from the balance of a given realmId.\n @notice Applies to the current version of the realmId.\n @notice Applies to the current season.\n @dev Reverts if failes to resolve realmId's version.\n @dev Reverts if signature is invalid.\n @dev Reverts if fails to resolve owner of the realmId.\n @dev Reverts if signer is not the realmId owner.\n @dev Reverts if balance is insufficient.\n @dev Reverts if the consume reason code is not allowed.\n @dev Emits a {Consumed} event if the consumption is successful.\n @param realmId The realmId to consume from.\n @param amount The amount to consume.\n @param consumeReasonCode The reason code of the consumption.\n @param v v value of the signature.\n @param s s value of the signature.\n @param r r value of the signature."},"functionSelector":"dc893ce4","id":4715,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"15562:7:32","nodeType":"FunctionDefinition","parameters":{"id":4629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4618,"mutability":"mutable","name":"realmId","nameLocation":"15578:7:32","nodeType":"VariableDeclaration","scope":4715,"src":"15570:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4617,"name":"uint256","nodeType":"ElementaryTypeName","src":"15570:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4620,"mutability":"mutable","name":"amount","nameLocation":"15595:6:32","nodeType":"VariableDeclaration","scope":4715,"src":"15587:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4619,"name":"uint256","nodeType":"ElementaryTypeName","src":"15587:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4622,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"15611:17:32","nodeType":"VariableDeclaration","scope":4715,"src":"15603:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4621,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15603:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4624,"mutability":"mutable","name":"v","nameLocation":"15636:1:32","nodeType":"VariableDeclaration","scope":4715,"src":"15630:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4623,"name":"uint8","nodeType":"ElementaryTypeName","src":"15630:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4626,"mutability":"mutable","name":"r","nameLocation":"15647:1:32","nodeType":"VariableDeclaration","scope":4715,"src":"15639:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15639:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4628,"mutability":"mutable","name":"s","nameLocation":"15658:1:32","nodeType":"VariableDeclaration","scope":4715,"src":"15650:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4627,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15650:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15569:91:32"},"returnParameters":{"id":4630,"nodeType":"ParameterList","parameters":[],"src":"15668:0:32"},"scope":4980,"src":"15553:868:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4741,"nodeType":"Block","src":"17502:134:32","statements":[{"assignments":[4728],"declarations":[{"constant":false,"id":4728,"mutability":"mutable","name":"realmId","nameLocation":"17520:7:32","nodeType":"VariableDeclaration","scope":4741,"src":"17512:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4727,"name":"uint256","nodeType":"ElementaryTypeName","src":"17512:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4734,"initialValue":{"arguments":[{"id":4731,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4720,"src":"17559:4:32","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4732,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"17565:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4729,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"17530:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17548:10:32","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":4998,"src":"17530:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17530:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17512:64:32"},{"expression":{"arguments":[{"id":4736,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"17594:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4737,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"17603:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4738,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"17611:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4735,"name":"consume","nodeType":"Identifier","overloadedDeclarations":[4715,4786],"referencedDeclaration":4786,"src":"17586:7:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (uint256,uint256,bytes32)"}},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17586:43:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4740,"nodeType":"ExpressionStatement","src":"17586:43:32"}]},"documentation":{"id":4716,"nodeType":"StructuredDocumentation","src":"16427:959:32","text":"@notice Called by the realmId owner to consume a given amount from the realmId's balance.\n @notice The realmId is resolved from the given parent node and name.\n @notice Applies to the current version of the realmId.\n @notice Applies to the current season.\n @dev Reverts if fails to resolve realmId from the given parent node and name.\n @dev Reverts if fails to resolve owner of the realmId.\n @dev Reverts if the sender is not the owner of the realmId.\n @dev Reverts if fails to resolve realmId's version.\n @dev Reverts if balance is insufficient.\n @dev Reverts if the consume reason code is not allowed.\n @dev Emits a {Consumed} event if the consumption is successful.\n @param parentNode The parent node of the realmId.\n @param name The name of the realmId.\n @param amount The amount to consume.\n @param consumeReasonCode The reason code of the consumption."},"functionSelector":"e564a0e2","id":4742,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"17400:7:32","nodeType":"FunctionDefinition","parameters":{"id":4725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4718,"mutability":"mutable","name":"parentNode","nameLocation":"17416:10:32","nodeType":"VariableDeclaration","scope":4742,"src":"17408:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17408:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4720,"mutability":"mutable","name":"name","nameLocation":"17444:4:32","nodeType":"VariableDeclaration","scope":4742,"src":"17428:20:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4719,"name":"string","nodeType":"ElementaryTypeName","src":"17428:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4722,"mutability":"mutable","name":"amount","nameLocation":"17458:6:32","nodeType":"VariableDeclaration","scope":4742,"src":"17450:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4721,"name":"uint256","nodeType":"ElementaryTypeName","src":"17450:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4724,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"17474:17:32","nodeType":"VariableDeclaration","scope":4742,"src":"17466:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4723,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17466:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17407:85:32"},"returnParameters":{"id":4726,"nodeType":"ParameterList","parameters":[],"src":"17502:0:32"},"scope":4980,"src":"17391:245:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4785,"nodeType":"Block","src":"18480:314:32","statements":[{"assignments":[4753],"declarations":[{"constant":false,"id":4753,"mutability":"mutable","name":"owner","nameLocation":"18498:5:32","nodeType":"VariableDeclaration","scope":4785,"src":"18490:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4752,"name":"address","nodeType":"ElementaryTypeName","src":"18490:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4758,"initialValue":{"arguments":[{"id":4756,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4745,"src":"18532:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4754,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"18506:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18524:7:32","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":5005,"src":"18506:25:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18506:34:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"18490:50:32"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4759,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"18554:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18554:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4761,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4753,"src":"18570:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18554:21:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4769,"nodeType":"IfStatement","src":"18550:88:32","trueBody":{"id":4768,"nodeType":"Block","src":"18577:61:32","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4764,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"18614:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18614:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4763,"name":"IncorrectSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"18598:15:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18598:29:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4767,"nodeType":"RevertStatement","src":"18591:36:32"}]}},{"assignments":[4771],"declarations":[{"constant":false,"id":4771,"mutability":"mutable","name":"realmIdVersion","nameLocation":"18656:14:32","nodeType":"VariableDeclaration","scope":4785,"src":"18648:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4770,"name":"uint256","nodeType":"ElementaryTypeName","src":"18648:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4776,"initialValue":{"arguments":[{"id":4774,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4745,"src":"18702:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4772,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"18673:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18691:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"18673:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18673:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18648:62:32"},{"expression":{"arguments":[{"id":4778,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4745,"src":"18729:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4779,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4771,"src":"18738:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4780,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4747,"src":"18754:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4781,"name":"consumeReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"18762:17:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4782,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4753,"src":"18781:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4777,"name":"_consume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"18720:8:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (uint256,uint256,uint256,bytes32,address)"}},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18720:67:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4784,"nodeType":"ExpressionStatement","src":"18720:67:32"}]},"documentation":{"id":4743,"nodeType":"StructuredDocumentation","src":"17642:749:32","text":"@notice Called by the realmId owner to consume a given amount from the given realmId's balance.\n @notice Applies to the current version of the realmId.\n @notice Applies to the current season.\n @dev Reverts if fails to resolve owner of the realmId.\n @dev Reverts if the sender is not the owner of the realmId.\n @dev Reverts if fails to resolve realmId's version.\n @dev Reverts if balance is insufficient.\n @dev Reverts if the consume reason code is not allowed.\n @dev Emits a {Consumed} event if the consumption is successful.\n @param realmId The realmId to deposit to.\n @param amount The amount to consume.\n @param consumeReasonCode The reason code of the consumption."},"functionSelector":"d14a5c71","id":4786,"implemented":true,"kind":"function","modifiers":[],"name":"consume","nameLocation":"18405:7:32","nodeType":"FunctionDefinition","parameters":{"id":4750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4745,"mutability":"mutable","name":"realmId","nameLocation":"18421:7:32","nodeType":"VariableDeclaration","scope":4786,"src":"18413:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4744,"name":"uint256","nodeType":"ElementaryTypeName","src":"18413:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4747,"mutability":"mutable","name":"amount","nameLocation":"18438:6:32","nodeType":"VariableDeclaration","scope":4786,"src":"18430:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4746,"name":"uint256","nodeType":"ElementaryTypeName","src":"18430:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4749,"mutability":"mutable","name":"consumeReasonCode","nameLocation":"18454:17:32","nodeType":"VariableDeclaration","scope":4786,"src":"18446:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18446:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18412:60:32"},"returnParameters":{"id":4751,"nodeType":"ParameterList","parameters":[],"src":"18480:0:32"},"scope":4980,"src":"18396:398:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4811,"nodeType":"Block","src":"19182:137:32","statements":[{"assignments":[4797],"declarations":[{"constant":false,"id":4797,"mutability":"mutable","name":"realmIdVersion","nameLocation":"19200:14:32","nodeType":"VariableDeclaration","scope":4811,"src":"19192:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4796,"name":"uint256","nodeType":"ElementaryTypeName","src":"19192:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4802,"initialValue":{"arguments":[{"id":4800,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"19246:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4798,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"19217:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19235:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"19217:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19217:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19192:62:32"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4803,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"19271:8:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":4805,"indexExpression":{"id":4804,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"19280:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19271:16:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":4807,"indexExpression":{"id":4806,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"19288:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19271:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4809,"indexExpression":{"id":4808,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"19297:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19271:41:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4795,"id":4810,"nodeType":"Return","src":"19264:48:32"}]},"documentation":{"id":4787,"nodeType":"StructuredDocumentation","src":"18800:293:32","text":"@notice Gets the balance of a given realmId for a specified season.\n @notice Applies to the current version of the realmId.\n @dev Reverts if fails to resolve realmId's version.\n @param season The season.\n @param realmId The realmId.\n @return The balance."},"functionSelector":"ad3b1d48","id":4812,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"19107:9:32","nodeType":"FunctionDefinition","parameters":{"id":4792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"season","nameLocation":"19125:6:32","nodeType":"VariableDeclaration","scope":4812,"src":"19117:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19117:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4791,"mutability":"mutable","name":"realmId","nameLocation":"19141:7:32","nodeType":"VariableDeclaration","scope":4812,"src":"19133:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4790,"name":"uint256","nodeType":"ElementaryTypeName","src":"19133:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19116:33:32"},"returnParameters":{"id":4795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4812,"src":"19173:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4793,"name":"uint256","nodeType":"ElementaryTypeName","src":"19173:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19172:9:32"},"scope":4980,"src":"19098:221:32","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4847,"nodeType":"Block","src":"19956:211:32","statements":[{"assignments":[4825],"declarations":[{"constant":false,"id":4825,"mutability":"mutable","name":"realmId","nameLocation":"19974:7:32","nodeType":"VariableDeclaration","scope":4847,"src":"19966:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4824,"name":"uint256","nodeType":"ElementaryTypeName","src":"19966:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4831,"initialValue":{"arguments":[{"id":4828,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"20013:4:32","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4829,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4817,"src":"20019:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4826,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"19984:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20002:10:32","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":4998,"src":"19984:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":4830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19984:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19966:64:32"},{"assignments":[4833],"declarations":[{"constant":false,"id":4833,"mutability":"mutable","name":"realmIdVersion","nameLocation":"20048:14:32","nodeType":"VariableDeclaration","scope":4847,"src":"20040:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4832,"name":"uint256","nodeType":"ElementaryTypeName","src":"20040:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4838,"initialValue":{"arguments":[{"id":4836,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"20094:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4834,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"20065:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20083:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"20065:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20065:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20040:62:32"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4839,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"20119:8:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":4841,"indexExpression":{"id":4840,"name":"season","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4815,"src":"20128:6:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20119:16:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":4843,"indexExpression":{"id":4842,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"20136:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20119:25:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4845,"indexExpression":{"id":4844,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"20145:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20119:41:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4823,"id":4846,"nodeType":"Return","src":"20112:48:32"}]},"documentation":{"id":4813,"nodeType":"StructuredDocumentation","src":"19325:517:32","text":"@notice Gets the balance of a realmId for a specified season.\n @notice The realmId is resolved from the given parent node and name.\n @notice Applies to the current version of the realmId.\n @dev Reverts if fails to resolve realmId from the given parent node and name.\n @dev Reverts if fails to resolve realmId's version.\n @param season The season.\n @param parentNode The parent node of the realmId.\n @param name The name of the realmId.\n @return The balance."},"functionSelector":"098b6419","id":4848,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"19856:9:32","nodeType":"FunctionDefinition","parameters":{"id":4820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4815,"mutability":"mutable","name":"season","nameLocation":"19874:6:32","nodeType":"VariableDeclaration","scope":4848,"src":"19866:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19866:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4817,"mutability":"mutable","name":"parentNode","nameLocation":"19890:10:32","nodeType":"VariableDeclaration","scope":4848,"src":"19882:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4816,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19882:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4819,"mutability":"mutable","name":"name","nameLocation":"19918:4:32","nodeType":"VariableDeclaration","scope":4848,"src":"19902:20:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4818,"name":"string","nodeType":"ElementaryTypeName","src":"19902:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"19865:58:32"},"returnParameters":{"id":4823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4848,"src":"19947:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4821,"name":"uint256","nodeType":"ElementaryTypeName","src":"19947:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19946:9:32"},"scope":4980,"src":"19847:320:32","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4871,"nodeType":"Block","src":"20529:144:32","statements":[{"assignments":[4857],"declarations":[{"constant":false,"id":4857,"mutability":"mutable","name":"realmIdVersion","nameLocation":"20547:14:32","nodeType":"VariableDeclaration","scope":4871,"src":"20539:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4856,"name":"uint256","nodeType":"ElementaryTypeName","src":"20539:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4862,"initialValue":{"arguments":[{"id":4860,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"20593:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4858,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"20564:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20582:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"20564:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20564:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20539:62:32"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4863,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"20618:8:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":4865,"indexExpression":{"id":4864,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"20627:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20618:23:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":4867,"indexExpression":{"id":4866,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"20642:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20618:32:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4869,"indexExpression":{"id":4868,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"20651:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20618:48:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4855,"id":4870,"nodeType":"Return","src":"20611:55:32"}]},"documentation":{"id":4849,"nodeType":"StructuredDocumentation","src":"20173:283:32","text":"@notice Gets the balance of a given realmId.\n @notice Applies to the current version of the realmId.\n @notice Applies to the current season.\n @dev Reverts if fails to resolve realmId's version.\n @param realmId The realmId.\n @return The balance."},"functionSelector":"9cc7f708","id":4872,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"20470:9:32","nodeType":"FunctionDefinition","parameters":{"id":4852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4851,"mutability":"mutable","name":"realmId","nameLocation":"20488:7:32","nodeType":"VariableDeclaration","scope":4872,"src":"20480:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4850,"name":"uint256","nodeType":"ElementaryTypeName","src":"20480:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20479:17:32"},"returnParameters":{"id":4855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4872,"src":"20520:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4853,"name":"uint256","nodeType":"ElementaryTypeName","src":"20520:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20519:9:32"},"scope":4980,"src":"20461:212:32","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4905,"nodeType":"Block","src":"21284:218:32","statements":[{"assignments":[4883],"declarations":[{"constant":false,"id":4883,"mutability":"mutable","name":"realmId","nameLocation":"21302:7:32","nodeType":"VariableDeclaration","scope":4905,"src":"21294:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4882,"name":"uint256","nodeType":"ElementaryTypeName","src":"21294:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4889,"initialValue":{"arguments":[{"id":4886,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"21341:4:32","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4887,"name":"parentNode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4875,"src":"21347:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4884,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"21312:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21330:10:32","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":4998,"src":"21312:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (string memory,bytes32) pure external returns (uint256)"}},"id":4888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21312:46:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21294:64:32"},{"assignments":[4891],"declarations":[{"constant":false,"id":4891,"mutability":"mutable","name":"realmIdVersion","nameLocation":"21376:14:32","nodeType":"VariableDeclaration","scope":4905,"src":"21368:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4890,"name":"uint256","nodeType":"ElementaryTypeName","src":"21368:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4896,"initialValue":{"arguments":[{"id":4894,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"21422:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4892,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"21393:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21411:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"21393:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21393:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21368:62:32"},{"expression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4897,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"21447:8:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":4899,"indexExpression":{"id":4898,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"21456:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21447:23:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":4901,"indexExpression":{"id":4900,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"21471:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21447:32:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4903,"indexExpression":{"id":4902,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"21480:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21447:48:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4881,"id":4904,"nodeType":"Return","src":"21440:55:32"}]},"documentation":{"id":4873,"nodeType":"StructuredDocumentation","src":"20679:507:32","text":"@notice Gets the balance of a realmId.\n @notice The realmId is resolved from the given parent node and name.\n @notice Applies to the current version of the realmId.\n @notice Applies to the current season.\n @dev Reverts if fails to resolve realmId from the given parent node and name.\n @dev Reverts if fails to resolve realmId's version.\n @param parentNode The parent node of the realmId.\n @param name The name of the realmId.\n @return The balance."},"functionSelector":"794459be","id":4906,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"21200:9:32","nodeType":"FunctionDefinition","parameters":{"id":4878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4875,"mutability":"mutable","name":"parentNode","nameLocation":"21218:10:32","nodeType":"VariableDeclaration","scope":4906,"src":"21210:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4874,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21210:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4877,"mutability":"mutable","name":"name","nameLocation":"21246:4:32","nodeType":"VariableDeclaration","scope":4906,"src":"21230:20:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4876,"name":"string","nodeType":"ElementaryTypeName","src":"21230:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"21209:42:32"},"returnParameters":{"id":4881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4906,"src":"21275:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4879,"name":"uint256","nodeType":"ElementaryTypeName","src":"21275:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21274:9:32"},"scope":4980,"src":"21191:311:32","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4941,"nodeType":"Block","src":"22040:162:32","statements":[{"assignments":[4925],"declarations":[{"constant":false,"id":4925,"mutability":"mutable","name":"payload","nameLocation":"22058:7:32","nodeType":"VariableDeclaration","scope":4941,"src":"22050:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4924,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22050:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4938,"initialValue":{"arguments":[{"arguments":[{"id":4929,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"22095:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4930,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4911,"src":"22104:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4931,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"22120:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4932,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"22129:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4933,"name":"currentSeason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"22137:13:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4934,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"22152:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4935,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"22164:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4927,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"22078:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"22082:12:32","memberName":"encodePacked","nodeType":"MemberAccess","src":"22078:16:32","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22078:92:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4926,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"22068:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22068:103:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"22050:121:32"},{"expression":{"id":4939,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"22188:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4923,"id":4940,"nodeType":"Return","src":"22181:14:32"}]},"documentation":{"id":4907,"nodeType":"StructuredDocumentation","src":"21508:307:32","text":"@notice Returns a payload generated from the arguments and the current season.\n @param realmId The realmId.\n @param realmIdVersion The realmId version.\n @param amount The amount.\n @param nonce The nonce.\n @param reasonCode The reason code.\n @return The payload."},"id":4942,"implemented":true,"kind":"function","modifiers":[],"name":"_preparePayload","nameLocation":"21829:15:32","nodeType":"FunctionDefinition","parameters":{"id":4920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4909,"mutability":"mutable","name":"realmId","nameLocation":"21862:7:32","nodeType":"VariableDeclaration","scope":4942,"src":"21854:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4908,"name":"uint256","nodeType":"ElementaryTypeName","src":"21854:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4911,"mutability":"mutable","name":"realmIdVersion","nameLocation":"21887:14:32","nodeType":"VariableDeclaration","scope":4942,"src":"21879:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4910,"name":"uint256","nodeType":"ElementaryTypeName","src":"21879:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4913,"mutability":"mutable","name":"spender","nameLocation":"21919:7:32","nodeType":"VariableDeclaration","scope":4942,"src":"21911:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4912,"name":"address","nodeType":"ElementaryTypeName","src":"21911:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4915,"mutability":"mutable","name":"amount","nameLocation":"21944:6:32","nodeType":"VariableDeclaration","scope":4942,"src":"21936:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4914,"name":"uint256","nodeType":"ElementaryTypeName","src":"21936:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4917,"mutability":"mutable","name":"nonce","nameLocation":"21968:5:32","nodeType":"VariableDeclaration","scope":4942,"src":"21960:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4916,"name":"uint256","nodeType":"ElementaryTypeName","src":"21960:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4919,"mutability":"mutable","name":"reasonCode","nameLocation":"21991:10:32","nodeType":"VariableDeclaration","scope":4942,"src":"21983:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21983:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"21844:163:32"},"returnParameters":{"id":4923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4922,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4942,"src":"22031:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22031:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22030:9:32"},"scope":4980,"src":"21820:382:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4978,"nodeType":"Block","src":"22676:217:32","statements":[{"assignments":[4957],"declarations":[{"constant":false,"id":4957,"mutability":"mutable","name":"realmIdVersion","nameLocation":"22694:14:32","nodeType":"VariableDeclaration","scope":4978,"src":"22686:22:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4956,"name":"uint256","nodeType":"ElementaryTypeName","src":"22686:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4962,"initialValue":{"arguments":[{"id":4960,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"22740:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4958,"name":"REALM_ID_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"22711:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IRealmId_$5006","typeString":"contract IRealmId"}},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22729:10:32","memberName":"burnCounts","nodeType":"MemberAccess","referencedDeclaration":4989,"src":"22711:28:32","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22711:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22686:62:32"},{"assignments":[4964],"declarations":[{"constant":false,"id":4964,"mutability":"mutable","name":"payload","nameLocation":"22766:7:32","nodeType":"VariableDeclaration","scope":4978,"src":"22758:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22758:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4975,"initialValue":{"arguments":[{"id":4966,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"22792:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4967,"name":"realmIdVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"22801:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4968,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4947,"src":"22817:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4969,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4949,"src":"22826:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":4970,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4078,"src":"22834:6:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4972,"indexExpression":{"id":4971,"name":"realmId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"22841:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22834:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4973,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"22851:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4965,"name":"_preparePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"22776:15:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (uint256,uint256,address,uint256,uint256,bytes32) view returns (bytes32)"}},"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22776:86:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"22758:104:32"},{"expression":{"id":4976,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"22879:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4955,"id":4977,"nodeType":"Return","src":"22872:14:32"}]},"documentation":{"id":4943,"nodeType":"StructuredDocumentation","src":"22208:337:32","text":"@notice Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version.\n @dev Reverts if fails to resolve the realmId's version.\n @param realmId The realmId.\n @param amount The amount.\n @param reasonCode The reason code.\n @return The payload."},"functionSelector":"4519eb1d","id":4979,"implemented":true,"kind":"function","modifiers":[],"name":"preparePayload","nameLocation":"22559:14:32","nodeType":"FunctionDefinition","parameters":{"id":4952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4945,"mutability":"mutable","name":"realmId","nameLocation":"22582:7:32","nodeType":"VariableDeclaration","scope":4979,"src":"22574:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4944,"name":"uint256","nodeType":"ElementaryTypeName","src":"22574:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4947,"mutability":"mutable","name":"spender","nameLocation":"22599:7:32","nodeType":"VariableDeclaration","scope":4979,"src":"22591:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4946,"name":"address","nodeType":"ElementaryTypeName","src":"22591:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4949,"mutability":"mutable","name":"amount","nameLocation":"22616:6:32","nodeType":"VariableDeclaration","scope":4979,"src":"22608:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4948,"name":"uint256","nodeType":"ElementaryTypeName","src":"22608:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4951,"mutability":"mutable","name":"reasonCode","nameLocation":"22632:10:32","nodeType":"VariableDeclaration","scope":4979,"src":"22624:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4950,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22624:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22573:70:32"},"returnParameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4979,"src":"22667:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4953,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22667:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22666:9:32"},"scope":4980,"src":"22550:343:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4981,"src":"1259:21636:32","usedErrors":[180,203,822,944,4136,4141,4144,4149,4154,4161,4168,4173,4176],"usedEvents":[222,231,242,999,1006,1011,1371,4087,4093,4099,4114,4131]}],"src":"32:22864:32"},"id":32},"contracts/RealmPoints/interface/IRealmId.sol":{"ast":{"absolutePath":"contracts/RealmPoints/interface/IRealmId.sol","exportedSymbols":{"IRealmId":[5006]},"id":5007,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4982,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"45:23:33"},{"abstract":false,"baseContracts":[],"canonicalName":"IRealmId","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5006,"linearizedBaseContracts":[5006],"name":"IRealmId","nameLocation":"140:8:33","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a9735f94","id":4989,"implemented":false,"kind":"function","modifiers":[],"name":"burnCounts","nameLocation":"164:10:33","nodeType":"FunctionDefinition","parameters":{"id":4985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4984,"mutability":"mutable","name":"realmId","nameLocation":"183:7:33","nodeType":"VariableDeclaration","scope":4989,"src":"175:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4983,"name":"uint256","nodeType":"ElementaryTypeName","src":"175:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"174:17:33"},"returnParameters":{"id":4988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4987,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4989,"src":"215:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4986,"name":"uint256","nodeType":"ElementaryTypeName","src":"215:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"214:9:33"},"scope":5006,"src":"155:69:33","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cad6b901","id":4998,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"239:10:33","nodeType":"FunctionDefinition","parameters":{"id":4994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4991,"mutability":"mutable","name":"name","nameLocation":"266:4:33","nodeType":"VariableDeclaration","scope":4998,"src":"250:20:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4990,"name":"string","nodeType":"ElementaryTypeName","src":"250:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4993,"mutability":"mutable","name":"parentNode","nameLocation":"280:10:33","nodeType":"VariableDeclaration","scope":4998,"src":"272:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"272:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"249:42:33"},"returnParameters":{"id":4997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4998,"src":"315:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4995,"name":"uint256","nodeType":"ElementaryTypeName","src":"315:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"314:9:33"},"scope":5006,"src":"230:94:33","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"6352211e","id":5005,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"339:7:33","nodeType":"FunctionDefinition","parameters":{"id":5001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"realmId","nameLocation":"355:7:33","nodeType":"VariableDeclaration","scope":5005,"src":"347:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4999,"name":"uint256","nodeType":"ElementaryTypeName","src":"347:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"346:17:33"},"returnParameters":{"id":5004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5005,"src":"387:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5002,"name":"address","nodeType":"ElementaryTypeName","src":"387:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"386:9:33"},"scope":5006,"src":"330:66:33","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5007,"src":"130:268:33","usedErrors":[],"usedEvents":[]}],"src":"45:354:33"},"id":33},"contracts/RealmPoints/mock/realmIdContract/MockRealmId.sol":{"ast":{"absolutePath":"contracts/RealmPoints/mock/realmIdContract/MockRealmId.sol","exportedSymbols":{"MockRealmId":[5044]},"id":5045,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5008,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:34"},{"abstract":false,"baseContracts":[],"canonicalName":"MockRealmId","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5044,"linearizedBaseContracts":[5044],"name":"MockRealmId","nameLocation":"66:11:34","nodeType":"ContractDefinition","nodes":[{"body":{"id":5017,"nodeType":"Block","src":"143:25:34","statements":[{"expression":{"hexValue":"30","id":5015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"160:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5014,"id":5016,"nodeType":"Return","src":"153:8:34"}]},"functionSelector":"a9735f94","id":5018,"implemented":true,"kind":"function","modifiers":[],"name":"burnCounts","nameLocation":"93:10:34","nodeType":"FunctionDefinition","parameters":{"id":5011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5018,"src":"104:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5009,"name":"uint256","nodeType":"ElementaryTypeName","src":"104:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"103:9:34"},"returnParameters":{"id":5014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5018,"src":"134:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5012,"name":"uint256","nodeType":"ElementaryTypeName","src":"134:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"133:9:34"},"scope":5044,"src":"84:84:34","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":5029,"nodeType":"Block","src":"250:26:34","statements":[{"expression":{"hexValue":"3130","id":5027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"267:2:34","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"functionReturnParameters":5026,"id":5028,"nodeType":"Return","src":"260:9:34"}]},"functionSelector":"cad6b901","id":5030,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"183:10:34","nodeType":"FunctionDefinition","parameters":{"id":5023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5030,"src":"194:15:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5019,"name":"string","nodeType":"ElementaryTypeName","src":"194:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5030,"src":"211:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5021,"name":"bytes32","nodeType":"ElementaryTypeName","src":"211:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"193:26:34"},"returnParameters":{"id":5026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5025,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5030,"src":"241:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5024,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"240:9:34"},"scope":5044,"src":"174:102:34","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":5042,"nodeType":"Block","src":"338:75:34","statements":[{"expression":{"arguments":[{"hexValue":"307839304637396266364542326334663837303336354537383539383245316631303145393362393036","id":5039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"363:42:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x90F79bf6EB2c4f870365E785982E1f101E93b906"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"355:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5037,"name":"address","nodeType":"ElementaryTypeName","src":"355:7:34","typeDescriptions":{}}},"id":5040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"355:51:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5036,"id":5041,"nodeType":"Return","src":"348:58:34"}]},"functionSelector":"6352211e","id":5043,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"291:7:34","nodeType":"FunctionDefinition","parameters":{"id":5033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5043,"src":"299:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5031,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"298:9:34"},"returnParameters":{"id":5036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5043,"src":"329:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5034,"name":"address","nodeType":"ElementaryTypeName","src":"329:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"328:9:34"},"scope":5044,"src":"282:131:34","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":5045,"src":"57:358:34","usedErrors":[],"usedEvents":[]}],"src":"32:384:34"},"id":34},"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol":{"ast":{"absolutePath":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol","exportedSymbols":{"MockRealmPointsUpgrade":[5076],"RealmPoints":[4980]},"id":5077,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5046,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:35"},{"absolutePath":"contracts/RealmPoints/RealmPoints.sol","file":"../../RealmPoints.sol","id":5048,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5077,"sourceUnit":4981,"src":"57:50:35","symbolAliases":[{"foreign":{"id":5047,"name":"RealmPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4980,"src":"65:11:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5049,"name":"RealmPoints","nameLocations":["144:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":4980,"src":"144:11:35"},"id":5050,"nodeType":"InheritanceSpecifier","src":"144:11:35"}],"canonicalName":"MockRealmPointsUpgrade","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5076,"linearizedBaseContracts":[5076,4980,1661,1346,1012,1022,171,123,1525,2467,287,243,267,232],"name":"MockRealmPointsUpgrade","nameLocation":"118:22:35","nodeType":"ContractDefinition","nodes":[{"body":{"id":5059,"nodeType":"Block","src":"281:2:35","statements":[]},"documentation":{"id":5051,"nodeType":"StructuredDocumentation","src":"162:48:35","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":5060,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5056,"name":"realmIdContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"264:15:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5057,"kind":"baseConstructorSpecifier","modifierName":{"id":5055,"name":"RealmPoints","nameLocations":["252:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":4980,"src":"252:11:35"},"nodeType":"ModifierInvocation","src":"252:28:35"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5053,"mutability":"mutable","name":"realmIdContract","nameLocation":"235:15:35","nodeType":"VariableDeclaration","scope":5060,"src":"227:23:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5052,"name":"address","nodeType":"ElementaryTypeName","src":"227:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"226:25:35"},"returnParameters":{"id":5058,"nodeType":"ParameterList","parameters":[],"src":"281:0:35"},"scope":5076,"src":"215:68:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5072,"nodeType":"Block","src":"352:30:35","statements":[{"expression":{"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5068,"name":"val","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5075,"src":"362:3:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5069,"name":"_newVal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5062,"src":"368:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"362:13:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5071,"nodeType":"ExpressionStatement","src":"362:13:35"}]},"functionSelector":"5b4e128c","id":5073,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"hexValue":"32","id":5065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"349:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"id":5066,"kind":"modifierInvocation","modifierName":{"id":5064,"name":"reinitializer","nameLocations":["335:13:35"],"nodeType":"IdentifierPath","referencedDeclaration":1460,"src":"335:13:35"},"nodeType":"ModifierInvocation","src":"335:16:35"}],"name":"initializeV2","nameLocation":"298:12:35","nodeType":"FunctionDefinition","parameters":{"id":5063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5062,"mutability":"mutable","name":"_newVal","nameLocation":"319:7:35","nodeType":"VariableDeclaration","scope":5073,"src":"311:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5061,"name":"uint256","nodeType":"ElementaryTypeName","src":"311:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"310:17:35"},"returnParameters":{"id":5067,"nodeType":"ParameterList","parameters":[],"src":"352:0:35"},"scope":5076,"src":"289:93:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"constant":false,"functionSelector":"3c6bb436","id":5075,"mutability":"mutable","name":"val","nameLocation":"403:3:35","nodeType":"VariableDeclaration","scope":5076,"src":"388:18:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5074,"name":"uint256","nodeType":"ElementaryTypeName","src":"388:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"}],"scope":5077,"src":"109:300:35","usedErrors":[180,203,822,944,4136,4141,4144,4149,4154,4161,4168,4173,4176],"usedEvents":[222,231,242,999,1006,1011,1371,4087,4093,4099,4114,4131]}],"src":"32:378:35"},"id":35}},"contracts":{"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x922cf4abb506400feb78edab23e1cacddbd50541d345f460004e73a5eef182dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1ae6db61ce87a6f7bd1ba3467520f4171f950719a0fa3439c073254e7c385d8d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol":{"IAccessControlEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"}],"devdoc":{"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{},"title":"Access control via roles management (events)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Access control via roles management (events)\",\"version\":1},\"userdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":\"IAccessControlEvents\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"IERC173Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{},"title":"ERC-173 Contract Ownership Standard (events)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC-173 Contract Ownership Standard (events)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":\"IERC173Events\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}}},"title":"Access control via roles management (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}}},\"title\":\"Access control via roles management (functions)\",\"version\":1},\"userdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b178e38eba2e5bd0181bdf25278e6dacabdb02f4ffb8132d36faadbeb7395c3764736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 PUSH25 0xE38EBA2E5BD0181BDF25278E6DACABDB02F4FFB8132D36FAAD 0xBE 0xB7 CODECOPY 0x5C CALLDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"425:4192:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;425:4192:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b178e38eba2e5bd0181bdf25278e6dacabdb02f4ffb8132d36faadbeb7395c3764736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 PUSH25 0xE38EBA2E5BD0181BDF25278E6DACABDB02F4FFB8132D36FAAD 0xBE 0xB7 CODECOPY 0x5C CALLDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"425:4192:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","enforceHasTargetContractRole(address,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","hasTargetContractRole(address,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1ae6db61ce87a6f7bd1ba3467520f4171f950719a0fa3439c073254e7c385d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e42a5dba46811e92e408e2fe9877716adacdd1052e479a95bab5cd357620f4d664736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0x2A 0x5D 0xBA CHAINID DUP2 0x1E SWAP3 0xE4 ADDMOD 0xE2 INVALID SWAP9 PUSH24 0x716ADACDD1052E479A95BAB5CD357620F4D664736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"589:4674:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;589:4674:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e42a5dba46811e92e408e2fe9877716adacdd1052e479a95bab5cd357620f4d664736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 0x2A 0x5D 0xBA CHAINID DUP2 0x1E SWAP3 0xE4 ADDMOD 0xE2 INVALID SWAP9 PUSH24 0x716ADACDD1052E479A95BAB5CD357620F4D664736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"589:4674:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220abd2a005c4507c98ccd917ab1fbd496bab7c55873eb067513adf485da2b2866e64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xD2 LOG0 SDIV 0xC4 POP PUSH29 0x98CCD917AB1FBD496BAB7C55873EB067513ADF485DA2B2866E64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"189:1692:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220abd2a005c4507c98ccd917ab1fbd496bab7c55873eb067513adf485da2b2866e64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xD2 LOG0 SDIV 0xC4 POP PUSH29 0x98CCD917AB1FBD496BAB7C55873EB067513ADF485DA2B2866E64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"189:1692:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207163aad0d24dfbf938674c77a52d35ddf2388f2140eef8a65b17a332babca60c64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x63AAD0D24DFBF938674C77A52D35DDF2388F 0x21 BLOCKHASH 0xEE 0xF8 0xA6 JUMPDEST OR LOG3 ORIGIN 0xBA 0xBC 0xA6 0xC PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"319:712:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207163aad0d24dfbf938674c77a52d35ddf2388f2140eef8a65b17a332babca60c64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x63AAD0D24DFBF938674C77A52D35DDF2388F 0x21 BLOCKHASH 0xEE 0xF8 0xA6 JUMPDEST OR LOG3 ORIGIN 0xBA 0xBC 0xA6 0xC PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"319:712:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1363,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1366,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1345,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1363,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1366,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1363,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1366,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1345,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1660,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087cb31f628dc53824618bcdd91cfac0e52ee53f1c35546a3d7a7fb8c665163e164736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xCB BALANCE 0xF6 0x28 0xDC MSTORE8 DUP3 CHAINID XOR 0xBC 0xDD SWAP2 0xCF 0xAC 0xE MSTORE 0xEE MSTORE8 CALL 0xC3 SSTORE CHAINID LOG3 0xD7 0xA7 0xFB DUP13 PUSH7 0x5163E164736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"194:9180:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087cb31f628dc53824618bcdd91cfac0e52ee53f1c35546a3d7a7fb8c665163e164736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xCB BALANCE 0xF6 0x28 0xDC MSTORE8 DUP3 CHAINID XOR 0xBC 0xDD SWAP2 0xCF 0xAC 0xE MSTORE 0xEE MSTORE8 CALL 0xC3 SSTORE CHAINID LOG3 0xD7 0xA7 0xFB DUP13 PUSH7 0x5163E164736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"194:9180:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0ecf4356b24fee3bd2e88da538377bfd2055e56b4a363f13686d739505a08ce64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xEC DELEGATECALL CALLDATALOAD PUSH12 0x24FEE3BD2E88DA538377BFD2 SDIV 0x5E JUMP 0xB4 LOG3 PUSH4 0xF13686D7 CODECOPY POP GAS ADDMOD 0xCE PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1420:2696:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2696:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0ecf4356b24fee3bd2e88da538377bfd2055e56b4a363f13686d739505a08ce64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xEC DELEGATECALL CALLDATALOAD PUSH12 0x24FEE3BD2E88DA538377BFD2 SDIV 0x5E JUMP 0xB4 LOG3 PUSH4 0xF13686D7 CODECOPY POP GAS ADDMOD 0xCE PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1420:2696:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"IERC1271":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._","kind":"dev","methods":{"isValidSignature(bytes32,bytes)":{"details":"Should return whether the signature provided is valid for the provided data","params":{"hash":"Hash of the data to be signed","signature":"Signature byte array associated with _data"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isValidSignature(bytes32,bytes)":"1626ba7e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":\"IERC1271\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220321f3a618dd43ace719079c39f253d2c2276a964234e934c1d8d7cfe736a4f1a64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x1F GASPRICE PUSH2 0x8DD4 GASPRICE 0xCE PUSH18 0x9079C39F253D2C2276A964234E934C1D8D7C INVALID PUSH20 0x6A4F1A64736F6C63430008150033000000000000 ","sourceMap":"194:8964:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220321f3a618dd43ace719079c39f253d2c2276a964234e934c1d8d7cfe736a4f1a64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x1F GASPRICE PUSH2 0x8DD4 GASPRICE 0xCE PUSH18 0x9079C39F253D2C2276A964234E934C1D8D7C INVALID PUSH20 0x6A4F1A64736F6C63430008150033000000000000 ","sourceMap":"194:8964:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4e2e1478ff6765d2946223f1e2b16165eaba9ab3b7c3b88700d949de47f2e9364736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xE2 0xE1 SELFBALANCE DUP16 0xF6 PUSH23 0x5D2946223F1E2B16165EABA9AB3B7C3B88700D949DE47F 0x2E SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1279:1391:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4e2e1478ff6765d2946223f1e2b16165eaba9ab3b7c3b88700d949de47f2e9364736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xE2 0xE1 SELFBALANCE DUP16 0xF6 PUSH23 0x5D2946223F1E2B16165EABA9AB3B7C3B88700D949DE47F 0x2E SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1279:1391:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220947e4cb1c01206d0106be284d8e64ee7ff53367819ae5e2be4c2ad079bfbc30164736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 PUSH31 0x4CB1C01206D0106BE284D8E64EE7FF53367819AE5E2BE4C2AD079BFBC30164 PUSH20 0x6F6C634300081500330000000000000000000000 ","sourceMap":"188:2065:28:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:28;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220947e4cb1c01206d0106be284d8e64ee7ff53367819ae5e2be4c2ad079bfbc30164736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 PUSH31 0x4CB1C01206D0106BE284D8E64EE7FF53367819AE5E2BE4C2AD079BFBC30164 PUSH20 0x6F6C634300081500330000000000000000000000 ","sourceMap":"188:2065:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ee85f7bfc84bdf1bb0b1ba673445b7aa076db4cd445f3b0089cda5ca75e704b64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0xE8 PUSH0 PUSH28 0xFC84BDF1BB0B1BA673445B7AA076DB4CD445F3B0089CDA5CA75E704B PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"369:8168:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8168:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ee85f7bfc84bdf1bb0b1ba673445b7aa076db4cd445f3b0089cda5ca75e704b64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0xE8 PUSH0 PUSH28 0xFC84BDF1BB0B1BA673445B7AA076DB4CD445F3B0089CDA5CA75E704B PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"369:8168:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol":{"SignatureChecker":{"abi":[],"devdoc":{"details":"Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like Argent and Gnosis Safe. _Available since v4.1._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220417e6c80afebf85f8ad3fe9c5006f481c27fe7c723e33bf75d579972a0255dc064736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE PUSH31 0x6C80AFEBF85F8AD3FE9C5006F481C27FE7C723E33BF75D579972A0255DC064 PUSH20 0x6F6C634300081500330000000000000000000000 ","sourceMap":"531:1177:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;531:1177:30;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220417e6c80afebf85f8ad3fe9c5006f481c27fe7c723e33bf75d579972a0255dc064736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE PUSH31 0x6C80AFEBF85F8AD3FE9C5006F481C27FE7C723E33BF75D579972A0255DC064 PUSH20 0x6F6C634300081500330000000000000000000000 ","sourceMap":"531:1177:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"isValidSignatureNow(address,bytes32,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like Argent and Gnosis Safe. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":\"SignatureChecker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204a2c4772ab5c46c1321ab65e2284e76c7d20b6c3c26826be6236ad2728108dbc64736f6c63430008150033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0x2C SELFBALANCE PUSH19 0xAB5C46C1321AB65E2284E76C7D20B6C3C26826 0xBE PUSH3 0x36AD27 0x28 LT DUP14 0xBC PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"202:12302:31:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:31;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204a2c4772ab5c46c1321ab65e2284e76c7d20b6c3c26826be6236ad2728108dbc64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0x2C SELFBALANCE PUSH19 0xAB5C46C1321AB65E2284E76C7D20B6C3C26826 0xBE PUSH3 0x36AD27 0x28 LT DUP14 0xBC PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"202:12302:31:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/RealmPoints/RealmPoints.sol":{"RealmPoints":{"abi":[{"inputs":[{"internalType":"address","name":"realmIdContractAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"reasonCode","type":"bytes32"}],"name":"ConsumeReasonCodeAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"reasonCode","type":"bytes32"}],"name":"ConsumeReasonCodeDoesNotExist","type":"error"},{"inputs":[],"name":"ConsumeReasonCodesArrayEmpty","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"signer","type":"address"}],"name":"IncorrectSigner","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentPhase","type":"uint256"},{"internalType":"uint256","name":"newPhase","type":"uint256"}],"name":"InitializationPhaseAlreadyReached","type":"error"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"requiredBalance","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"InvalidRealmIdContractAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"}],"name":"InvalidRealmIdVersion","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"SeasonAlreadySet","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"BatchAddedConsumeReasonCode","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"BatchRemovedConsumeReasonCode","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"realmId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"realmIdOwner","type":"address"}],"name":"Consumed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"realmId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"SetCurrentSeason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEPOSITOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REALM_ID_CONTRACT","outputs":[{"internalType":"contract IRealmId","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"allowedConsumeReasonCodes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"batchAddConsumeReasonCodes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"batchRemoveConsumeReasonCodes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentSeason","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"}],"name":"preparePayload","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"seasons","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"setCurrentSeason","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"errors":{"ConsumeReasonCodeAlreadyExists(bytes32)":[{"params":{"reasonCode":"The reason code that already exists in the mapping."}}],"ConsumeReasonCodeDoesNotExist(bytes32)":[{"params":{"reasonCode":"The reason code that does not exist in the mapping."}}],"IncorrectSigner(address)":[{"params":{"signer":"The incorrect signer."}}],"InitializationPhaseAlreadyReached(uint256,uint256)":[{"params":{"currentPhase":"The current phase.","newPhase":"The new phase trying to be set."}}],"InsufficientBalance(uint256,uint256)":[{"params":{"realmId":"The given realmId.","requiredBalance":"The required balance."}}],"InvalidRealmIdContractAddress(address)":[{"params":{"addr":"The invalid realmId contract address."}}],"InvalidRealmIdVersion(uint256,uint256)":[{"params":{"realmId":"The given realmId.","realmIdVersion":"The given realmId version."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"SeasonAlreadySet(bytes32)":[{"params":{"season":"The season that already exists in the mapping."}}]},"events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BatchAddedConsumeReasonCode(bytes32[])":{"params":{"reasonCodes":"The reason codes added to the mapping."}},"BatchRemovedConsumeReasonCode(bytes32[])":{"params":{"reasonCodes":"The reason codes removed from the mapping."}},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)":{"params":{"amount":"The amount consumed.","operator":"The sender of the consumption.","realmId":"The realmId of the balance consumed from.","realmIdOwner":"The realmId owner's address.","realmIdVersion":"The realmId version.","reasonCode":"The reason code of the consumption.","season":"The season of the balance consumed from."}},"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)":{"params":{"amount":"The amount deposited.","realmId":"The realmId of the balance deposited to.","realmIdVersion":"The realmId version.","reasonCode":"The reason code of the deposit.","season":"The season of the balance deposited to.","sender":"The sender of the deposit."}},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}},"SetCurrentSeason(bytes32)":{"params":{"season":"The new season being set."}},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"balanceOf(bytes32,bytes32,string)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.","params":{"name":"The name of the realmId.","parentNode":"The parent node of the realmId.","season":"The season."},"returns":{"_0":"The balance."}},"balanceOf(bytes32,string)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.","params":{"name":"The name of the realmId.","parentNode":"The parent node of the realmId."},"returns":{"_0":"The balance."}},"balanceOf(bytes32,uint256)":{"details":"Reverts if fails to resolve realmId's version.","params":{"realmId":"The realmId.","season":"The season."},"returns":{"_0":"The balance."}},"balanceOf(uint256)":{"details":"Reverts if fails to resolve realmId's version.","params":{"realmId":"The realmId."},"returns":{"_0":"The balance."}},"batchAddConsumeReasonCodes(bytes32[])":{"details":"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes already exists in the mapping.Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.","params":{"reasonCodes":"Array of reason codes to add."}},"batchRemoveConsumeReasonCodes(bytes32[])":{"details":"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes do not exist in the mapping.Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.","params":{"reasonCodes":"Array of reason codes to remove."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor","details":"Reverts if the given address is invalid (equal to ZeroAddress).","params":{"realmIdContractAddress":"The realmId contract address."}},"consume(bytes32,string,uint256,bytes32)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","name":"The name of the realmId.","parentNode":"The parent node of the realmId."}},"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","name":"The name of the realmId.","parentNode":"The parent node of the realmId.","r":"r value of the signature.","s":"s value of the signature.","v":"v value of the signature."}},"consume(uint256,uint256,bytes32)":{"details":"Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","realmId":"The realmId to deposit to."}},"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":{"details":"Reverts if failes to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","r":"r value of the signature.","realmId":"The realmId to consume from.","s":"s value of the signature.","v":"v value of the signature."}},"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":{"details":"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event with msg.sender as the sender.","params":{"amount":"The amount to deposit.","depositReasonCode":"The reason code of the deposit.","name":"The name associated with the realmId.","parentNode":"The parent node associated with the realmId.","realmIdVersion":"The realmId version.","season":"The season to deposit to."}},"deposit(bytes32,uint256,uint256,uint256,bytes32)":{"details":"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event if successful.","params":{"amount":"The amount to deposit.","depositReasonCode":"The reason code of the deposit.","realmId":"The realmId to deposit to.","realmIdVersion":"The realmId version.","season":"The season to deposit to."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"preparePayload(uint256,address,uint256,bytes32)":{"details":"Reverts if fails to resolve the realmId's version.","params":{"amount":"The amount.","realmId":"The realmId.","reasonCode":"The reason code."},"returns":{"_0":"The payload."}},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"setCurrentSeason(bytes32)":{"details":"Reverts if sender does not have Admin role.Reverts if the given season has already been set before.Emits a {SetCurrentSeason} event if successful.","params":{"season":"The season to set."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"REALM_ID_CONTRACT":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable"}},"title":"RealmPoints","version":1},"evm":{"bytecode":{"functionDebugData":{"@_4204":{"entryPoint":null,"id":4204,"parameterSlots":1,"returnSlots":0},"@_disableInitializers_1506":{"entryPoint":142,"id":1506,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":332,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1111:36","nodeType":"YulBlock","src":"0:1111:36","statements":[{"nativeSrc":"6:3:36","nodeType":"YulBlock","src":"6:3:36","statements":[]},{"body":{"nativeSrc":"95:209:36","nodeType":"YulBlock","src":"95:209:36","statements":[{"body":{"nativeSrc":"141:16:36","nodeType":"YulBlock","src":"141:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:36","nodeType":"YulLiteral","src":"150:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:36","nodeType":"YulLiteral","src":"153:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:36","nodeType":"YulIdentifier","src":"143:6:36"},"nativeSrc":"143:12:36","nodeType":"YulFunctionCall","src":"143:12:36"},"nativeSrc":"143:12:36","nodeType":"YulExpressionStatement","src":"143:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"116:7:36","nodeType":"YulIdentifier","src":"116:7:36"},{"name":"headStart","nativeSrc":"125:9:36","nodeType":"YulIdentifier","src":"125:9:36"}],"functionName":{"name":"sub","nativeSrc":"112:3:36","nodeType":"YulIdentifier","src":"112:3:36"},"nativeSrc":"112:23:36","nodeType":"YulFunctionCall","src":"112:23:36"},{"kind":"number","nativeSrc":"137:2:36","nodeType":"YulLiteral","src":"137:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"108:3:36","nodeType":"YulIdentifier","src":"108:3:36"},"nativeSrc":"108:32:36","nodeType":"YulFunctionCall","src":"108:32:36"},"nativeSrc":"105:52:36","nodeType":"YulIf","src":"105:52:36"},{"nativeSrc":"166:29:36","nodeType":"YulVariableDeclaration","src":"166:29:36","value":{"arguments":[{"name":"headStart","nativeSrc":"185:9:36","nodeType":"YulIdentifier","src":"185:9:36"}],"functionName":{"name":"mload","nativeSrc":"179:5:36","nodeType":"YulIdentifier","src":"179:5:36"},"nativeSrc":"179:16:36","nodeType":"YulFunctionCall","src":"179:16:36"},"variables":[{"name":"value","nativeSrc":"170:5:36","nodeType":"YulTypedName","src":"170:5:36","type":""}]},{"body":{"nativeSrc":"258:16:36","nodeType":"YulBlock","src":"258:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"267:1:36","nodeType":"YulLiteral","src":"267:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"270:1:36","nodeType":"YulLiteral","src":"270:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"260:6:36","nodeType":"YulIdentifier","src":"260:6:36"},"nativeSrc":"260:12:36","nodeType":"YulFunctionCall","src":"260:12:36"},"nativeSrc":"260:12:36","nodeType":"YulExpressionStatement","src":"260:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"217:5:36","nodeType":"YulIdentifier","src":"217:5:36"},{"arguments":[{"name":"value","nativeSrc":"228:5:36","nodeType":"YulIdentifier","src":"228:5:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"243:3:36","nodeType":"YulLiteral","src":"243:3:36","type":"","value":"160"},{"kind":"number","nativeSrc":"248:1:36","nodeType":"YulLiteral","src":"248:1:36","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"239:3:36","nodeType":"YulIdentifier","src":"239:3:36"},"nativeSrc":"239:11:36","nodeType":"YulFunctionCall","src":"239:11:36"},{"kind":"number","nativeSrc":"252:1:36","nodeType":"YulLiteral","src":"252:1:36","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"235:3:36","nodeType":"YulIdentifier","src":"235:3:36"},"nativeSrc":"235:19:36","nodeType":"YulFunctionCall","src":"235:19:36"}],"functionName":{"name":"and","nativeSrc":"224:3:36","nodeType":"YulIdentifier","src":"224:3:36"},"nativeSrc":"224:31:36","nodeType":"YulFunctionCall","src":"224:31:36"}],"functionName":{"name":"eq","nativeSrc":"214:2:36","nodeType":"YulIdentifier","src":"214:2:36"},"nativeSrc":"214:42:36","nodeType":"YulFunctionCall","src":"214:42:36"}],"functionName":{"name":"iszero","nativeSrc":"207:6:36","nodeType":"YulIdentifier","src":"207:6:36"},"nativeSrc":"207:50:36","nodeType":"YulFunctionCall","src":"207:50:36"},"nativeSrc":"204:70:36","nodeType":"YulIf","src":"204:70:36"},{"nativeSrc":"283:15:36","nodeType":"YulAssignment","src":"283:15:36","value":{"name":"value","nativeSrc":"293:5:36","nodeType":"YulIdentifier","src":"293:5:36"},"variableNames":[{"name":"value0","nativeSrc":"283:6:36","nodeType":"YulIdentifier","src":"283:6:36"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"14:290:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"61:9:36","nodeType":"YulTypedName","src":"61:9:36","type":""},{"name":"dataEnd","nativeSrc":"72:7:36","nodeType":"YulTypedName","src":"72:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"84:6:36","nodeType":"YulTypedName","src":"84:6:36","type":""}],"src":"14:290:36"},{"body":{"nativeSrc":"410:102:36","nodeType":"YulBlock","src":"410:102:36","statements":[{"nativeSrc":"420:26:36","nodeType":"YulAssignment","src":"420:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"432:9:36","nodeType":"YulIdentifier","src":"432:9:36"},{"kind":"number","nativeSrc":"443:2:36","nodeType":"YulLiteral","src":"443:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"428:3:36","nodeType":"YulIdentifier","src":"428:3:36"},"nativeSrc":"428:18:36","nodeType":"YulFunctionCall","src":"428:18:36"},"variableNames":[{"name":"tail","nativeSrc":"420:4:36","nodeType":"YulIdentifier","src":"420:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"462:9:36","nodeType":"YulIdentifier","src":"462:9:36"},{"arguments":[{"name":"value0","nativeSrc":"477:6:36","nodeType":"YulIdentifier","src":"477:6:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"493:3:36","nodeType":"YulLiteral","src":"493:3:36","type":"","value":"160"},{"kind":"number","nativeSrc":"498:1:36","nodeType":"YulLiteral","src":"498:1:36","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"489:3:36","nodeType":"YulIdentifier","src":"489:3:36"},"nativeSrc":"489:11:36","nodeType":"YulFunctionCall","src":"489:11:36"},{"kind":"number","nativeSrc":"502:1:36","nodeType":"YulLiteral","src":"502:1:36","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"485:3:36","nodeType":"YulIdentifier","src":"485:3:36"},"nativeSrc":"485:19:36","nodeType":"YulFunctionCall","src":"485:19:36"}],"functionName":{"name":"and","nativeSrc":"473:3:36","nodeType":"YulIdentifier","src":"473:3:36"},"nativeSrc":"473:32:36","nodeType":"YulFunctionCall","src":"473:32:36"}],"functionName":{"name":"mstore","nativeSrc":"455:6:36","nodeType":"YulIdentifier","src":"455:6:36"},"nativeSrc":"455:51:36","nodeType":"YulFunctionCall","src":"455:51:36"},"nativeSrc":"455:51:36","nodeType":"YulExpressionStatement","src":"455:51:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"309:203:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"379:9:36","nodeType":"YulTypedName","src":"379:9:36","type":""},{"name":"value0","nativeSrc":"390:6:36","nodeType":"YulTypedName","src":"390:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"401:4:36","nodeType":"YulTypedName","src":"401:4:36","type":""}],"src":"309:203:36"},{"body":{"nativeSrc":"691:229:36","nodeType":"YulBlock","src":"691:229:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"708:9:36","nodeType":"YulIdentifier","src":"708:9:36"},{"kind":"number","nativeSrc":"719:2:36","nodeType":"YulLiteral","src":"719:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"701:6:36","nodeType":"YulIdentifier","src":"701:6:36"},"nativeSrc":"701:21:36","nodeType":"YulFunctionCall","src":"701:21:36"},"nativeSrc":"701:21:36","nodeType":"YulExpressionStatement","src":"701:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"742:9:36","nodeType":"YulIdentifier","src":"742:9:36"},{"kind":"number","nativeSrc":"753:2:36","nodeType":"YulLiteral","src":"753:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"738:3:36","nodeType":"YulIdentifier","src":"738:3:36"},"nativeSrc":"738:18:36","nodeType":"YulFunctionCall","src":"738:18:36"},{"kind":"number","nativeSrc":"758:2:36","nodeType":"YulLiteral","src":"758:2:36","type":"","value":"39"}],"functionName":{"name":"mstore","nativeSrc":"731:6:36","nodeType":"YulIdentifier","src":"731:6:36"},"nativeSrc":"731:30:36","nodeType":"YulFunctionCall","src":"731:30:36"},"nativeSrc":"731:30:36","nodeType":"YulExpressionStatement","src":"731:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"781:9:36","nodeType":"YulIdentifier","src":"781:9:36"},{"kind":"number","nativeSrc":"792:2:36","nodeType":"YulLiteral","src":"792:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"777:3:36","nodeType":"YulIdentifier","src":"777:3:36"},"nativeSrc":"777:18:36","nodeType":"YulFunctionCall","src":"777:18:36"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nativeSrc":"797:34:36","nodeType":"YulLiteral","src":"797:34:36","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nativeSrc":"770:6:36","nodeType":"YulIdentifier","src":"770:6:36"},"nativeSrc":"770:62:36","nodeType":"YulFunctionCall","src":"770:62:36"},"nativeSrc":"770:62:36","nodeType":"YulExpressionStatement","src":"770:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"852:9:36","nodeType":"YulIdentifier","src":"852:9:36"},{"kind":"number","nativeSrc":"863:2:36","nodeType":"YulLiteral","src":"863:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"848:3:36","nodeType":"YulIdentifier","src":"848:3:36"},"nativeSrc":"848:18:36","nodeType":"YulFunctionCall","src":"848:18:36"},{"hexValue":"616c697a696e67","kind":"string","nativeSrc":"868:9:36","nodeType":"YulLiteral","src":"868:9:36","type":"","value":"alizing"}],"functionName":{"name":"mstore","nativeSrc":"841:6:36","nodeType":"YulIdentifier","src":"841:6:36"},"nativeSrc":"841:37:36","nodeType":"YulFunctionCall","src":"841:37:36"},"nativeSrc":"841:37:36","nodeType":"YulExpressionStatement","src":"841:37:36"},{"nativeSrc":"887:27:36","nodeType":"YulAssignment","src":"887:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"899:9:36","nodeType":"YulIdentifier","src":"899:9:36"},{"kind":"number","nativeSrc":"910:3:36","nodeType":"YulLiteral","src":"910:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"895:3:36","nodeType":"YulIdentifier","src":"895:3:36"},"nativeSrc":"895:19:36","nodeType":"YulFunctionCall","src":"895:19:36"},"variableNames":[{"name":"tail","nativeSrc":"887:4:36","nodeType":"YulIdentifier","src":"887:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"517:403:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"668:9:36","nodeType":"YulTypedName","src":"668:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"682:4:36","nodeType":"YulTypedName","src":"682:4:36","type":""}],"src":"517:403:36"},{"body":{"nativeSrc":"1022:87:36","nodeType":"YulBlock","src":"1022:87:36","statements":[{"nativeSrc":"1032:26:36","nodeType":"YulAssignment","src":"1032:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1044:9:36","nodeType":"YulIdentifier","src":"1044:9:36"},{"kind":"number","nativeSrc":"1055:2:36","nodeType":"YulLiteral","src":"1055:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1040:3:36","nodeType":"YulIdentifier","src":"1040:3:36"},"nativeSrc":"1040:18:36","nodeType":"YulFunctionCall","src":"1040:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1032:4:36","nodeType":"YulIdentifier","src":"1032:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1074:9:36","nodeType":"YulIdentifier","src":"1074:9:36"},{"arguments":[{"name":"value0","nativeSrc":"1089:6:36","nodeType":"YulIdentifier","src":"1089:6:36"},{"kind":"number","nativeSrc":"1097:4:36","nodeType":"YulLiteral","src":"1097:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"1085:3:36","nodeType":"YulIdentifier","src":"1085:3:36"},"nativeSrc":"1085:17:36","nodeType":"YulFunctionCall","src":"1085:17:36"}],"functionName":{"name":"mstore","nativeSrc":"1067:6:36","nodeType":"YulIdentifier","src":"1067:6:36"},"nativeSrc":"1067:36:36","nodeType":"YulFunctionCall","src":"1067:36:36"},"nativeSrc":"1067:36:36","nodeType":"YulExpressionStatement","src":"1067:36:36"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"925:184:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"991:9:36","nodeType":"YulTypedName","src":"991:9:36","type":""},{"name":"value0","nativeSrc":"1002:6:36","nodeType":"YulTypedName","src":"1002:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1013:4:36","nodeType":"YulTypedName","src":"1013:4:36","type":""}],"src":"925:184:36"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":36,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3D40 CODESIZE SUB DUP1 PUSH3 0x3D40 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x38 SWAP2 PUSH3 0x14C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x82DD9BA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0xA0 MSTORE PUSH3 0x87 PUSH3 0x8E JUMP JUMPDEST POP PUSH3 0x17E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0xF8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x67 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH3 0x14A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x3B10 PUSH3 0x230 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x27C ADD MSTORE DUP2 DUP2 PUSH2 0x686 ADD MSTORE DUP2 DUP2 PUSH2 0x76C ADD MSTORE DUP2 DUP2 PUSH2 0x86D ADD MSTORE DUP2 DUP2 PUSH2 0x920 ADD MSTORE DUP2 DUP2 PUSH2 0xE73 ADD MSTORE DUP2 DUP2 PUSH2 0x1256 ADD MSTORE DUP2 DUP2 PUSH2 0x133C ADD MSTORE DUP2 DUP2 PUSH2 0x18BA ADD MSTORE DUP2 DUP2 PUSH2 0x1998 ADD MSTORE DUP2 DUP2 PUSH2 0x1A72 ADD MSTORE DUP2 DUP2 PUSH2 0x1B4E ADD MSTORE DUP2 DUP2 PUSH2 0x1C11 ADD MSTORE DUP2 DUP2 PUSH2 0x1D16 ADD MSTORE DUP2 DUP2 PUSH2 0x1E10 ADD MSTORE DUP2 DUP2 PUSH2 0x1FC2 ADD MSTORE PUSH2 0x213E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xAB5 ADD MSTORE DUP2 DUP2 PUSH2 0xB65 ADD MSTORE DUP2 DUP2 PUSH2 0xF86 ADD MSTORE DUP2 DUP2 PUSH2 0x1036 ADD MSTORE PUSH2 0x117F ADD MSTORE PUSH2 0x3B10 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xAD3B1D48 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDC893CE4 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDC893CE4 EQ PUSH2 0x5F1 JUMPI DUP1 PUSH4 0xE564A0E2 EQ PUSH2 0x611 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x631 JUMPI DUP1 PUSH4 0xF9515962 EQ PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAD3B1D48 EQ PUSH2 0x57B JUMPI DUP1 PUSH4 0xBCB39621 EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0xD14A5C71 EQ PUSH2 0x5B1 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x99D342AC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x99D342AC EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x9CC7F708 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0x9D70B005 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xA3B0B5A3 EQ PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0x906405A3 EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4529CC1B GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x75B238FC GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x794459BE EQ PUSH2 0x41D JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x86A8E98A EQ PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4529CC1B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x51955DFC EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x3F30B00F EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x4519EB1D EQ PUSH2 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98B6419 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x141A468C EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x18EE89F0 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x2681A28A EQ PUSH2 0x26A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x330A JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3376 JUMP JUMPDEST PUSH2 0x809 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x212 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x33D3 JUMP JUMPDEST PUSH2 0xA70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x3403 JUMP JUMPDEST PUSH2 0xA9E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x3420 JUMP JUMPDEST PUSH2 0xCA3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x3495 JUMP JUMPDEST PUSH2 0xE2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x373 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x212 JUMP JUMPDEST PUSH2 0x268 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x3501 JUMP JUMPDEST PUSH2 0xF6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x35E3 JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x1165 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x360F JUMP JUMPDEST PUSH2 0x1251 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x13DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH2 0x157F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x48D CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH2 0x1663 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x1677 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3420 JUMP JUMPDEST PUSH2 0x16A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x373 PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x33D3 JUMP JUMPDEST PUSH2 0x182D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x3671 JUMP JUMPDEST PUSH2 0x187A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x522 CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH2 0x194F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x542 CALLDATASIZE PUSH1 0x4 PUSH2 0x36F4 JUMP JUMPDEST PUSH2 0x1A32 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x553 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x596 CALLDATASIZE PUSH1 0x4 PUSH2 0x3762 JUMP JUMPDEST PUSH2 0x1B05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x5CC CALLDATASIZE PUSH1 0x4 PUSH2 0x35E3 JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x5EC CALLDATASIZE PUSH1 0x4 PUSH2 0x33D3 JUMP JUMPDEST PUSH2 0x1DAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x60C CALLDATASIZE PUSH1 0x4 PUSH2 0x3784 JUMP JUMPDEST PUSH2 0x1DCF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x62C CALLDATASIZE PUSH1 0x4 PUSH2 0x37D5 JUMP JUMPDEST PUSH2 0x20FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x64C CALLDATASIZE PUSH1 0x4 PUSH2 0x3403 JUMP JUMPDEST PUSH2 0x21CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x373 PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x722 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7D7 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x83E PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 CALLER JUMPDEST PUSH2 0x837 PUSH2 0x21E1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8ED SWAP2 SWAP1 PUSH2 0x38A3 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9A0 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP DUP4 DUP2 EQ PUSH2 0x9EA JUMPI PUSH1 0x40 MLOAD PUSH32 0xB196CC7700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xA1B SWAP1 DUP5 SWAP1 PUSH2 0x38EF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP3 SWAP1 DUP8 SWAP1 CALLER SWAP1 PUSH32 0x9092BF6BD1CF7DB4FCF41AEDC7C0333B51C57F5B80B429BC3D9CAA5587C6AD82 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0xA83 DUP2 PUSH2 0xA7D PUSH2 0x2295 JUMP JUMPDEST SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH2 0xA99 DUP4 DUP4 DUP4 PUSH2 0xA91 PUSH2 0x21E1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x232E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xB63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBD8 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0xC84 DUP2 PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xCA0 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x2411 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xCCD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x82F JUMP JUMPDEST DUP1 PUSH2 0xD04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0xD25 JUMPI PUSH2 0xD25 PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD95 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0xD59 JUMPI PUSH2 0xD59 PUSH2 0x3902 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xB642124200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x69 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0xDAD JUMPI PUSH2 0xDAD PUSH2 0x3902 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xDE4 SWAP1 PUSH2 0x3931 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD07 JUMP JUMPDEST POP PUSH32 0xD8C56A8918EC09C2FE3C4D9FCC00ECE66DF217A1AB3AD768DD0A71620DA5B4E DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE1E SWAP3 SWAP2 SWAP1 PUSH2 0x3969 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEBA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDE SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x65 SLOAD DUP3 MLOAD DUP1 DUP6 ADD DUP14 SWAP1 MSTORE DUP1 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP13 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x74 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x94 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xB4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP1 DUP3 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0xF4 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 SWAP3 POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x10A9 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x114C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x1155 DUP3 PUSH2 0x2405 JUMP JUMPDEST PUSH2 0x1161 DUP3 DUP3 PUSH1 0x1 PUSH2 0x2411 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x122C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12B1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12F2 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1383 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A7 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x13FB JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1415 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1415 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x14A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1507 PUSH2 0x2610 JUMP JUMPDEST PUSH2 0x1519 CALLER PUSH2 0x1513 PUSH2 0x2295 JUMP JUMPDEST SWAP1 PUSH2 0x26A9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x15A9 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x796C3E9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x65 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x61228C895F8BA06548597D3E34A23BC0ECB6D1E62A1EB3FA30BE04883A17EF31 SWAP1 PUSH2 0x1574 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xCA0 CALLER DUP3 PUSH2 0x1670 PUSH2 0x21E1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x26E8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x169E PUSH2 0x1684 PUSH2 0x2295 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x16CD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x82F JUMP JUMPDEST DUP1 PUSH2 0x1704 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17FB JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1725 JUMPI PUSH2 0x1725 PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1794 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x1758 JUMPI PUSH2 0x1758 PUSH2 0x3902 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x17AA JUMPI PUSH2 0x17AA PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 PUSH2 0x17F3 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1707 JUMP JUMPDEST POP PUSH32 0x5B2C9FCBB27D48BDBFC59F0564B5BA81539309EBF09A940FAD64D171BCFB9FF9 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE1E SWAP3 SWAP2 SWAP1 PUSH2 0x3969 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1871 DUP4 DUP4 PUSH2 0x183C PUSH2 0x21E1 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x18F3 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1910 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1934 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x1944 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1DCF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A03 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 DUP2 MSTORE DUP6 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1AAB SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AEC SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x1AFB DUP9 DUP3 DUP7 DUP7 DUP7 PUSH2 0x809 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB9 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP7 KECCAK256 SWAP2 DUP7 MSTORE MSTORE POP POP SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C91 SWAP2 SWAP1 PUSH2 0x38A3 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x1CE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x33FFFF9B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D96 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x1DA5 DUP6 DUP3 DUP7 DUP7 DUP7 PUSH2 0x278C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x1DB9 DUP2 PUSH2 0xA7D PUSH2 0x2295 JUMP JUMPDEST PUSH2 0xA99 DUP4 DUP4 DUP4 PUSH2 0x1DC7 PUSH2 0x21E1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x28D1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E90 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP14 SWAP1 MSTORE DUP2 DUP4 ADD DUP6 SWAP1 MSTORE CALLER PUSH1 0x60 SWAP1 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x74 DUP3 ADD DUP13 SWAP1 MSTORE PUSH1 0x94 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xB4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF4 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP13 SWAP1 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2009 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x202D SWAP2 SWAP1 PUSH2 0x38A3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xF8 DUP12 SWAP1 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x60 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x41 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x61 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 PUSH2 0x208C DUP4 DUP6 DUP5 PUSH2 0x299B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20D2 DUP14 DUP8 DUP15 DUP15 DUP8 PUSH2 0x278C JUMP JUMPDEST PUSH2 0x20DD DUP8 PUSH1 0x1 PUSH2 0x38EF JUMP JUMPDEST PUSH1 0x0 SWAP14 DUP15 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP14 KECCAK256 SWAP13 SWAP1 SWAP13 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x2177 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2194 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21B8 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x21C5 DUP2 DUP5 DUP5 PUSH2 0x1BDF JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xCA0 CALLER DUP3 PUSH2 0x21DA PUSH2 0x2295 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2B68 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1874 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA99 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1874 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x39BB JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1161 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x23FF JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xCA0 CALLER PUSH2 0xA7D PUSH2 0x2295 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2444 JUMPI PUSH2 0xA99 DUP4 PUSH2 0x2C7C JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24C9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24C6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2555 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x2604 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH2 0xA99 DUP4 DUP4 DUP4 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x26A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x26DE PUSH2 0x26D7 PUSH1 0x1 PUSH32 0x5B388D90DC1312BA799F321972F13311234FA1163BCABEC7CF66101C4876EB84 PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x1 PUSH2 0x2DAB JUMP JUMPDEST PUSH2 0x1161 DUP3 DUP3 PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x26F3 DUP4 DUP3 DUP5 PUSH2 0x220F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x27F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2840 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x284A DUP5 DUP3 PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MLOAD CALLER DUP2 MSTORE SWAP3 DUP4 ADD DUP9 SWAP1 MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 SWAP2 DUP9 SWAP1 PUSH32 0xE514533875FBD3F8F396088D636E746599D8B5C3BA77E9CCFA9FC01FF7064601 SWAP1 PUSH1 0x80 ADD PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x23FF JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x29AA DUP6 DUP6 PUSH2 0x2EB4 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x29C3 JUMPI PUSH2 0x29C3 PUSH2 0x39CE JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x29FB JUMPI POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2A0B JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x13D4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E PUSH1 0xE0 SHL DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2A40 SWAP3 SWAP2 SWAP1 PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2AC9 SWAP2 SWAP1 PUSH2 0x3A84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B04 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B09 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2B1C JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x2B5C JUMPI POP DUP1 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2B5A SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x388A JUMP JUMPDEST EQ JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x2BD5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x23FF JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x2D20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2D8F DUP4 PUSH2 0x2EF9 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2D9C JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xA99 JUMPI PUSH2 0x23FF DUP4 DUP4 PUSH2 0x2F46 JUMP JUMPDEST DUP2 SLOAD DUP3 SWAP1 DUP3 DUP2 LT PUSH2 0x2DF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBF0C18EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x9E1 JUMP JUMPDEST POP SSTORE POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x2E7F JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x1161 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x2EAD PUSH2 0x2F6B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2F99 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x2EEA JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x2EDE DUP8 DUP3 DUP6 DUP6 PUSH2 0x3075 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x2EF2 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F02 DUP2 PUSH2 0x2C7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1871 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3AB4 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x3164 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1874 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x39BB JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x3011 JUMPI PUSH1 0x40 MLOAD PUSH32 0x72C683BB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x30AC JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x315B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3100 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x3154 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x315B JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x318E SWAP2 SWAP1 PUSH2 0x3A84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x31DF DUP7 DUP4 DUP4 DUP8 PUSH2 0x31E9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x327F JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x3278 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x3278 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST POP DUP2 PUSH2 0x801 JUMP JUMPDEST PUSH2 0x801 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3294 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 SWAP1 PUSH2 0x3AA0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x32DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x32F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3351 DUP8 DUP3 DUP9 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x336F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x338E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x33F8 DUP2 PUSH2 0x33B1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13D4 DUP2 PUSH2 0x33B1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x344B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x345F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x346E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x3483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x34AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x34BD DUP2 PUSH2 0x33B1 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x351F DUP2 PUSH2 0x33B1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x353C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3562 JUMPI PUSH2 0x3562 PUSH2 0x34D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x35A8 JUMPI PUSH2 0x35A8 PUSH2 0x34D2 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x35C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x35F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3624 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3642 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x364E DUP7 DUP3 DUP8 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x366C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x368D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x36AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36B7 DUP12 DUP3 DUP13 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x36D7 PUSH1 0x80 DUP11 ADD PUSH2 0x365B JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x370F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3734 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3740 DUP11 DUP3 DUP12 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP9 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP8 PUSH1 0x80 DUP3 ADD CALLDATALOAD SWAP8 POP PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x379D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x37BB PUSH1 0x60 DUP9 ADD PUSH2 0x365B JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x37ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x380B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3817 DUP9 DUP3 DUP10 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP7 SWAP10 SWAP1 SWAP9 POP SWAP6 SWAP7 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP7 PUSH1 0x60 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP5 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x60 DUP5 DUP4 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP4 ADD ADD SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x389C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13D4 DUP2 PUSH2 0x33B1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1874 JUMPI PUSH2 0x1874 PUSH2 0x38C0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3962 JUMPI PUSH2 0x3962 PUSH2 0x38C0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x39A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1874 JUMPI PUSH2 0x1874 PUSH2 0x38C0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3A18 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3A00 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3A39 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x39FD JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x801 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3A21 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3A96 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x39FD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1871 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3A21 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122099EEC9 CALLDATACOPY MLOAD GT PUSH0 0xD0 0x2C 0xB5 CODECOPY 0x1E MUL 0xE PUSH27 0x71EBBA7951E79AA7CA38E5B3B21B6CFD4564736F6C634300081500 CALLER ","sourceMap":"1259:21636:32:-:0;;;1332:4:21;1289:48;;5936:281:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5994:36:32;;5990:127;;6053:53;;-1:-1:-1;;;6053:53:32;;-1:-1:-1;;;;;473:32:36;;6053:53:32;;;455:51:36;428:18;;6053:53:32;;;;;;;;5990:127;-1:-1:-1;;;;;6126:52:32;;;;6188:22;:20;:22::i;:::-;5936:281;1259:21636;;5939:280:20;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:20;;719:2:36;5998:66:20;;;701:21:36;758:2;738:18;;;731:30;797:34;777:18;;;770:62;-1:-1:-1;;;848:18:36;;;841:37;895:19;;5998:66:20;517:403:36;5998:66:20;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:20;6140:15;6125:30;;;;;;6174:28;;1067:36:36;;;6174:28:20;;1055:2:36;1040:18;6174:28:20;;;;;;;6074:139;5939:280::o;14:290:36:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:36;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:36:o;925:184::-;1259:21636:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4051":{"entryPoint":null,"id":4051,"parameterSlots":0,"returnSlots":0},"@DEPOSITOR_ROLE_4056":{"entryPoint":null,"id":4056,"parameterSlots":0,"returnSlots":0},"@REALM_ID_CONTRACT_4060":{"entryPoint":null,"id":4060,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_1543":{"entryPoint":9744,"id":1543,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_4240":{"entryPoint":9221,"id":4240,"parameterSlots":1,"returnSlots":0},"@_consume_4579":{"entryPoint":10124,"id":4579,"parameterSlots":5,"returnSlots":0},"@_getImplementation_1067":{"entryPoint":null,"id":1067,"parameterSlots":0,"returnSlots":1},"@_msgSender_2457":{"entryPoint":null,"id":2457,"parameterSlots":0,"returnSlots":1},"@_preparePayload_4942":{"entryPoint":null,"id":4942,"parameterSlots":6,"returnSlots":1},"@_revert_1990":{"entryPoint":null,"id":1990,"parameterSlots":2,"returnSlots":0},"@_setImplementation_1091":{"entryPoint":11388,"id":1091,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_1189":{"entryPoint":9233,"id":1189,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_1136":{"entryPoint":11654,"id":1136,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_1106":{"entryPoint":12025,"id":1106,"parameterSlots":1,"returnSlots":0},"@allowedConsumeReasonCodes_4082":{"entryPoint":null,"id":4082,"parameterSlots":0,"returnSlots":0},"@balanceOf_4812":{"entryPoint":6917,"id":4812,"parameterSlots":2,"returnSlots":1},"@balanceOf_4848":{"entryPoint":1665,"id":4848,"parameterSlots":4,"returnSlots":1},"@balanceOf_4872":{"entryPoint":6479,"id":4872,"parameterSlots":1,"returnSlots":1},"@balanceOf_4906":{"entryPoint":4689,"id":4906,"parameterSlots":3,"returnSlots":1},"@balances_4074":{"entryPoint":null,"id":4074,"parameterSlots":0,"returnSlots":0},"@batchAddConsumeReasonCodes_4345":{"entryPoint":3235,"id":4345,"parameterSlots":2,"returnSlots":0},"@batchRemoveConsumeReasonCodes_4410":{"entryPoint":5795,"id":4410,"parameterSlots":2,"returnSlots":0},"@constructorInit_658":{"entryPoint":11767,"id":658,"parameterSlots":2,"returnSlots":0},"@consume_4615":{"entryPoint":6266,"id":4615,"parameterSlots":8,"returnSlots":0},"@consume_4715":{"entryPoint":7631,"id":4715,"parameterSlots":6,"returnSlots":0},"@consume_4742":{"entryPoint":8446,"id":4742,"parameterSlots":5,"returnSlots":0},"@consume_4786":{"entryPoint":7135,"id":4786,"parameterSlots":3,"returnSlots":0},"@currentSeason_4062":{"entryPoint":null,"id":4062,"parameterSlots":0,"returnSlots":0},"@deposit_4478":{"entryPoint":2057,"id":4478,"parameterSlots":5,"returnSlots":0},"@deposit_4511":{"entryPoint":6706,"id":4511,"parameterSlots":7,"returnSlots":0},"@enforceHasRole_518":{"entryPoint":8719,"id":518,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_784":{"entryPoint":8899,"id":784,"parameterSlots":2,"returnSlots":0},"@functionDelegateCall_1878":{"entryPoint":12102,"id":1878,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1907":{"entryPoint":12644,"id":1907,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_2023":{"entryPoint":null,"id":2023,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2034":{"entryPoint":null,"id":2034,"parameterSlots":1,"returnSlots":1},"@getUint256Slot_2526":{"entryPoint":null,"id":2526,"parameterSlots":1,"returnSlots":1},"@grantRole_367":{"entryPoint":9006,"id":367,"parameterSlots":4,"returnSlots":0},"@grantRole_54":{"entryPoint":2672,"id":54,"parameterSlots":2,"returnSlots":0},"@hasRole_122":{"entryPoint":6189,"id":122,"parameterSlots":2,"returnSlots":1},"@hasRole_464":{"entryPoint":null,"id":464,"parameterSlots":3,"returnSlots":1},"@initialize_4223":{"entryPoint":5083,"id":4223,"parameterSlots":0,"returnSlots":0},"@isContract_1679":{"entryPoint":null,"id":1679,"parameterSlots":1,"returnSlots":1},"@isValidSignatureNow_3145":{"entryPoint":10651,"id":3145,"parameterSlots":3,"returnSlots":1},"@layout_554":{"entryPoint":8673,"id":554,"parameterSlots":0,"returnSlots":1},"@layout_816":{"entryPoint":8853,"id":816,"parameterSlots":0,"returnSlots":1},"@layout_934":{"entryPoint":12139,"id":934,"parameterSlots":0,"returnSlots":1},"@nonces_4078":{"entryPoint":null,"id":4078,"parameterSlots":0,"returnSlots":0},"@owner_153":{"entryPoint":5751,"id":153,"parameterSlots":0,"returnSlots":1},"@owner_737":{"entryPoint":null,"id":737,"parameterSlots":1,"returnSlots":1},"@preparePayload_4979":{"entryPoint":3626,"id":4979,"parameterSlots":4,"returnSlots":1},"@proxiableUUID_1606":{"entryPoint":4453,"id":1606,"parameterSlots":0,"returnSlots":1},"@proxyInit_681":{"entryPoint":9897,"id":681,"parameterSlots":2,"returnSlots":0},"@renounceRole_103":{"entryPoint":5731,"id":103,"parameterSlots":1,"returnSlots":0},"@renounceRole_443":{"entryPoint":9960,"id":443,"parameterSlots":3,"returnSlots":0},"@revokeRole_406":{"entryPoint":10449,"id":406,"parameterSlots":4,"returnSlots":0},"@revokeRole_86":{"entryPoint":7596,"id":86,"parameterSlots":2,"returnSlots":0},"@seasons_4066":{"entryPoint":null,"id":4066,"parameterSlots":0,"returnSlots":0},"@setCurrentSeason_4280":{"entryPoint":5503,"id":4280,"parameterSlots":1,"returnSlots":0},"@setPhase_990":{"entryPoint":11691,"id":990,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_888":{"entryPoint":12185,"id":888,"parameterSlots":3,"returnSlots":0},"@transferOwnership_170":{"entryPoint":8653,"id":170,"parameterSlots":1,"returnSlots":0},"@transferOwnership_724":{"entryPoint":11112,"id":724,"parameterSlots":3,"returnSlots":0},"@tryRecover_2802":{"entryPoint":11956,"id":2802,"parameterSlots":2,"returnSlots":2},"@tryRecover_2970":{"entryPoint":12405,"id":2970,"parameterSlots":4,"returnSlots":2},"@upgradeToAndCall_1649":{"entryPoint":3951,"id":1649,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1628":{"entryPoint":2718,"id":1628,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1946":{"entryPoint":12777,"id":1946,"parameterSlots":4,"returnSlots":1},"abi_decode_string_calldata":{"entryPoint":13000,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":13315,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":14499,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":13569,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":13344,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":13267,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptr":{"entryPoint":13066,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptrt_uint256t_uint256t_bytes32":{"entryPoint":14068,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_bytes32t_string_calldata_ptr":{"entryPoint":13839,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32":{"entryPoint":14293,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32":{"entryPoint":13937,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":14178,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_uint256":{"entryPoint":13795,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32":{"entryPoint":13174,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256":{"entryPoint":13149,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":14474,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32":{"entryPoint":13461,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256t_uint256t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32":{"entryPoint":14212,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_uint8":{"entryPoint":13915,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes":{"entryPoint":14881,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14980,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":14697,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14955,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_contract$_IRealmId_$5006__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed":{"entryPoint":14387,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15008,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":14575,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":14779,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":14845,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":14641,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":14528,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":14798,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":14594,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13522,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":13233,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:21739:36","nodeType":"YulBlock","src":"0:21739:36","statements":[{"nativeSrc":"6:3:36","nodeType":"YulBlock","src":"6:3:36","statements":[]},{"body":{"nativeSrc":"87:275:36","nodeType":"YulBlock","src":"87:275:36","statements":[{"body":{"nativeSrc":"136:16:36","nodeType":"YulBlock","src":"136:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"145:1:36","nodeType":"YulLiteral","src":"145:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"148:1:36","nodeType":"YulLiteral","src":"148:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"138:6:36","nodeType":"YulIdentifier","src":"138:6:36"},"nativeSrc":"138:12:36","nodeType":"YulFunctionCall","src":"138:12:36"},"nativeSrc":"138:12:36","nodeType":"YulExpressionStatement","src":"138:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"115:6:36","nodeType":"YulIdentifier","src":"115:6:36"},{"kind":"number","nativeSrc":"123:4:36","nodeType":"YulLiteral","src":"123:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"111:3:36","nodeType":"YulIdentifier","src":"111:3:36"},"nativeSrc":"111:17:36","nodeType":"YulFunctionCall","src":"111:17:36"},{"name":"end","nativeSrc":"130:3:36","nodeType":"YulIdentifier","src":"130:3:36"}],"functionName":{"name":"slt","nativeSrc":"107:3:36","nodeType":"YulIdentifier","src":"107:3:36"},"nativeSrc":"107:27:36","nodeType":"YulFunctionCall","src":"107:27:36"}],"functionName":{"name":"iszero","nativeSrc":"100:6:36","nodeType":"YulIdentifier","src":"100:6:36"},"nativeSrc":"100:35:36","nodeType":"YulFunctionCall","src":"100:35:36"},"nativeSrc":"97:55:36","nodeType":"YulIf","src":"97:55:36"},{"nativeSrc":"161:30:36","nodeType":"YulAssignment","src":"161:30:36","value":{"arguments":[{"name":"offset","nativeSrc":"184:6:36","nodeType":"YulIdentifier","src":"184:6:36"}],"functionName":{"name":"calldataload","nativeSrc":"171:12:36","nodeType":"YulIdentifier","src":"171:12:36"},"nativeSrc":"171:20:36","nodeType":"YulFunctionCall","src":"171:20:36"},"variableNames":[{"name":"length","nativeSrc":"161:6:36","nodeType":"YulIdentifier","src":"161:6:36"}]},{"body":{"nativeSrc":"234:16:36","nodeType":"YulBlock","src":"234:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"243:1:36","nodeType":"YulLiteral","src":"243:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"246:1:36","nodeType":"YulLiteral","src":"246:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"236:6:36","nodeType":"YulIdentifier","src":"236:6:36"},"nativeSrc":"236:12:36","nodeType":"YulFunctionCall","src":"236:12:36"},"nativeSrc":"236:12:36","nodeType":"YulExpressionStatement","src":"236:12:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"206:6:36","nodeType":"YulIdentifier","src":"206:6:36"},{"kind":"number","nativeSrc":"214:18:36","nodeType":"YulLiteral","src":"214:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"203:2:36","nodeType":"YulIdentifier","src":"203:2:36"},"nativeSrc":"203:30:36","nodeType":"YulFunctionCall","src":"203:30:36"},"nativeSrc":"200:50:36","nodeType":"YulIf","src":"200:50:36"},{"nativeSrc":"259:29:36","nodeType":"YulAssignment","src":"259:29:36","value":{"arguments":[{"name":"offset","nativeSrc":"275:6:36","nodeType":"YulIdentifier","src":"275:6:36"},{"kind":"number","nativeSrc":"283:4:36","nodeType":"YulLiteral","src":"283:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"271:3:36","nodeType":"YulIdentifier","src":"271:3:36"},"nativeSrc":"271:17:36","nodeType":"YulFunctionCall","src":"271:17:36"},"variableNames":[{"name":"arrayPos","nativeSrc":"259:8:36","nodeType":"YulIdentifier","src":"259:8:36"}]},{"body":{"nativeSrc":"340:16:36","nodeType":"YulBlock","src":"340:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"349:1:36","nodeType":"YulLiteral","src":"349:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"352:1:36","nodeType":"YulLiteral","src":"352:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"342:6:36","nodeType":"YulIdentifier","src":"342:6:36"},"nativeSrc":"342:12:36","nodeType":"YulFunctionCall","src":"342:12:36"},"nativeSrc":"342:12:36","nodeType":"YulExpressionStatement","src":"342:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"311:6:36","nodeType":"YulIdentifier","src":"311:6:36"},{"name":"length","nativeSrc":"319:6:36","nodeType":"YulIdentifier","src":"319:6:36"}],"functionName":{"name":"add","nativeSrc":"307:3:36","nodeType":"YulIdentifier","src":"307:3:36"},"nativeSrc":"307:19:36","nodeType":"YulFunctionCall","src":"307:19:36"},{"kind":"number","nativeSrc":"328:4:36","nodeType":"YulLiteral","src":"328:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"303:3:36","nodeType":"YulIdentifier","src":"303:3:36"},"nativeSrc":"303:30:36","nodeType":"YulFunctionCall","src":"303:30:36"},{"name":"end","nativeSrc":"335:3:36","nodeType":"YulIdentifier","src":"335:3:36"}],"functionName":{"name":"gt","nativeSrc":"300:2:36","nodeType":"YulIdentifier","src":"300:2:36"},"nativeSrc":"300:39:36","nodeType":"YulFunctionCall","src":"300:39:36"},"nativeSrc":"297:59:36","nodeType":"YulIf","src":"297:59:36"}]},"name":"abi_decode_string_calldata","nativeSrc":"14:348:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"50:6:36","nodeType":"YulTypedName","src":"50:6:36","type":""},{"name":"end","nativeSrc":"58:3:36","nodeType":"YulTypedName","src":"58:3:36","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"66:8:36","nodeType":"YulTypedName","src":"66:8:36","type":""},{"name":"length","nativeSrc":"76:6:36","nodeType":"YulTypedName","src":"76:6:36","type":""}],"src":"14:348:36"},{"body":{"nativeSrc":"491:423:36","nodeType":"YulBlock","src":"491:423:36","statements":[{"body":{"nativeSrc":"537:16:36","nodeType":"YulBlock","src":"537:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"546:1:36","nodeType":"YulLiteral","src":"546:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"549:1:36","nodeType":"YulLiteral","src":"549:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"539:6:36","nodeType":"YulIdentifier","src":"539:6:36"},"nativeSrc":"539:12:36","nodeType":"YulFunctionCall","src":"539:12:36"},"nativeSrc":"539:12:36","nodeType":"YulExpressionStatement","src":"539:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"512:7:36","nodeType":"YulIdentifier","src":"512:7:36"},{"name":"headStart","nativeSrc":"521:9:36","nodeType":"YulIdentifier","src":"521:9:36"}],"functionName":{"name":"sub","nativeSrc":"508:3:36","nodeType":"YulIdentifier","src":"508:3:36"},"nativeSrc":"508:23:36","nodeType":"YulFunctionCall","src":"508:23:36"},{"kind":"number","nativeSrc":"533:2:36","nodeType":"YulLiteral","src":"533:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"504:3:36","nodeType":"YulIdentifier","src":"504:3:36"},"nativeSrc":"504:32:36","nodeType":"YulFunctionCall","src":"504:32:36"},"nativeSrc":"501:52:36","nodeType":"YulIf","src":"501:52:36"},{"nativeSrc":"562:33:36","nodeType":"YulAssignment","src":"562:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"585:9:36","nodeType":"YulIdentifier","src":"585:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"572:12:36","nodeType":"YulIdentifier","src":"572:12:36"},"nativeSrc":"572:23:36","nodeType":"YulFunctionCall","src":"572:23:36"},"variableNames":[{"name":"value0","nativeSrc":"562:6:36","nodeType":"YulIdentifier","src":"562:6:36"}]},{"nativeSrc":"604:42:36","nodeType":"YulAssignment","src":"604:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"631:9:36","nodeType":"YulIdentifier","src":"631:9:36"},{"kind":"number","nativeSrc":"642:2:36","nodeType":"YulLiteral","src":"642:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"627:3:36","nodeType":"YulIdentifier","src":"627:3:36"},"nativeSrc":"627:18:36","nodeType":"YulFunctionCall","src":"627:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"614:12:36","nodeType":"YulIdentifier","src":"614:12:36"},"nativeSrc":"614:32:36","nodeType":"YulFunctionCall","src":"614:32:36"},"variableNames":[{"name":"value1","nativeSrc":"604:6:36","nodeType":"YulIdentifier","src":"604:6:36"}]},{"nativeSrc":"655:46:36","nodeType":"YulVariableDeclaration","src":"655:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"686:9:36","nodeType":"YulIdentifier","src":"686:9:36"},{"kind":"number","nativeSrc":"697:2:36","nodeType":"YulLiteral","src":"697:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"682:3:36","nodeType":"YulIdentifier","src":"682:3:36"},"nativeSrc":"682:18:36","nodeType":"YulFunctionCall","src":"682:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"669:12:36","nodeType":"YulIdentifier","src":"669:12:36"},"nativeSrc":"669:32:36","nodeType":"YulFunctionCall","src":"669:32:36"},"variables":[{"name":"offset","nativeSrc":"659:6:36","nodeType":"YulTypedName","src":"659:6:36","type":""}]},{"body":{"nativeSrc":"744:16:36","nodeType":"YulBlock","src":"744:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"753:1:36","nodeType":"YulLiteral","src":"753:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"756:1:36","nodeType":"YulLiteral","src":"756:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"746:6:36","nodeType":"YulIdentifier","src":"746:6:36"},"nativeSrc":"746:12:36","nodeType":"YulFunctionCall","src":"746:12:36"},"nativeSrc":"746:12:36","nodeType":"YulExpressionStatement","src":"746:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"716:6:36","nodeType":"YulIdentifier","src":"716:6:36"},{"kind":"number","nativeSrc":"724:18:36","nodeType":"YulLiteral","src":"724:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"713:2:36","nodeType":"YulIdentifier","src":"713:2:36"},"nativeSrc":"713:30:36","nodeType":"YulFunctionCall","src":"713:30:36"},"nativeSrc":"710:50:36","nodeType":"YulIf","src":"710:50:36"},{"nativeSrc":"769:85:36","nodeType":"YulVariableDeclaration","src":"769:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"826:9:36","nodeType":"YulIdentifier","src":"826:9:36"},{"name":"offset","nativeSrc":"837:6:36","nodeType":"YulIdentifier","src":"837:6:36"}],"functionName":{"name":"add","nativeSrc":"822:3:36","nodeType":"YulIdentifier","src":"822:3:36"},"nativeSrc":"822:22:36","nodeType":"YulFunctionCall","src":"822:22:36"},{"name":"dataEnd","nativeSrc":"846:7:36","nodeType":"YulIdentifier","src":"846:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"795:26:36","nodeType":"YulIdentifier","src":"795:26:36"},"nativeSrc":"795:59:36","nodeType":"YulFunctionCall","src":"795:59:36"},"variables":[{"name":"value2_1","nativeSrc":"773:8:36","nodeType":"YulTypedName","src":"773:8:36","type":""},{"name":"value3_1","nativeSrc":"783:8:36","nodeType":"YulTypedName","src":"783:8:36","type":""}]},{"nativeSrc":"863:18:36","nodeType":"YulAssignment","src":"863:18:36","value":{"name":"value2_1","nativeSrc":"873:8:36","nodeType":"YulIdentifier","src":"873:8:36"},"variableNames":[{"name":"value2","nativeSrc":"863:6:36","nodeType":"YulIdentifier","src":"863:6:36"}]},{"nativeSrc":"890:18:36","nodeType":"YulAssignment","src":"890:18:36","value":{"name":"value3_1","nativeSrc":"900:8:36","nodeType":"YulIdentifier","src":"900:8:36"},"variableNames":[{"name":"value3","nativeSrc":"890:6:36","nodeType":"YulIdentifier","src":"890:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptr","nativeSrc":"367:547:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"433:9:36","nodeType":"YulTypedName","src":"433:9:36","type":""},{"name":"dataEnd","nativeSrc":"444:7:36","nodeType":"YulTypedName","src":"444:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"456:6:36","nodeType":"YulTypedName","src":"456:6:36","type":""},{"name":"value1","nativeSrc":"464:6:36","nodeType":"YulTypedName","src":"464:6:36","type":""},{"name":"value2","nativeSrc":"472:6:36","nodeType":"YulTypedName","src":"472:6:36","type":""},{"name":"value3","nativeSrc":"480:6:36","nodeType":"YulTypedName","src":"480:6:36","type":""}],"src":"367:547:36"},{"body":{"nativeSrc":"1020:76:36","nodeType":"YulBlock","src":"1020:76:36","statements":[{"nativeSrc":"1030:26:36","nodeType":"YulAssignment","src":"1030:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1042:9:36","nodeType":"YulIdentifier","src":"1042:9:36"},{"kind":"number","nativeSrc":"1053:2:36","nodeType":"YulLiteral","src":"1053:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1038:3:36","nodeType":"YulIdentifier","src":"1038:3:36"},"nativeSrc":"1038:18:36","nodeType":"YulFunctionCall","src":"1038:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1030:4:36","nodeType":"YulIdentifier","src":"1030:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1072:9:36","nodeType":"YulIdentifier","src":"1072:9:36"},{"name":"value0","nativeSrc":"1083:6:36","nodeType":"YulIdentifier","src":"1083:6:36"}],"functionName":{"name":"mstore","nativeSrc":"1065:6:36","nodeType":"YulIdentifier","src":"1065:6:36"},"nativeSrc":"1065:25:36","nodeType":"YulFunctionCall","src":"1065:25:36"},"nativeSrc":"1065:25:36","nodeType":"YulExpressionStatement","src":"1065:25:36"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"919:177:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"989:9:36","nodeType":"YulTypedName","src":"989:9:36","type":""},{"name":"value0","nativeSrc":"1000:6:36","nodeType":"YulTypedName","src":"1000:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1011:4:36","nodeType":"YulTypedName","src":"1011:4:36","type":""}],"src":"919:177:36"},{"body":{"nativeSrc":"1171:110:36","nodeType":"YulBlock","src":"1171:110:36","statements":[{"body":{"nativeSrc":"1217:16:36","nodeType":"YulBlock","src":"1217:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1226:1:36","nodeType":"YulLiteral","src":"1226:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1229:1:36","nodeType":"YulLiteral","src":"1229:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1219:6:36","nodeType":"YulIdentifier","src":"1219:6:36"},"nativeSrc":"1219:12:36","nodeType":"YulFunctionCall","src":"1219:12:36"},"nativeSrc":"1219:12:36","nodeType":"YulExpressionStatement","src":"1219:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1192:7:36","nodeType":"YulIdentifier","src":"1192:7:36"},{"name":"headStart","nativeSrc":"1201:9:36","nodeType":"YulIdentifier","src":"1201:9:36"}],"functionName":{"name":"sub","nativeSrc":"1188:3:36","nodeType":"YulIdentifier","src":"1188:3:36"},"nativeSrc":"1188:23:36","nodeType":"YulFunctionCall","src":"1188:23:36"},{"kind":"number","nativeSrc":"1213:2:36","nodeType":"YulLiteral","src":"1213:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1184:3:36","nodeType":"YulIdentifier","src":"1184:3:36"},"nativeSrc":"1184:32:36","nodeType":"YulFunctionCall","src":"1184:32:36"},"nativeSrc":"1181:52:36","nodeType":"YulIf","src":"1181:52:36"},{"nativeSrc":"1242:33:36","nodeType":"YulAssignment","src":"1242:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1265:9:36","nodeType":"YulIdentifier","src":"1265:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"1252:12:36","nodeType":"YulIdentifier","src":"1252:12:36"},"nativeSrc":"1252:23:36","nodeType":"YulFunctionCall","src":"1252:23:36"},"variableNames":[{"name":"value0","nativeSrc":"1242:6:36","nodeType":"YulIdentifier","src":"1242:6:36"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1101:180:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1137:9:36","nodeType":"YulTypedName","src":"1137:9:36","type":""},{"name":"dataEnd","nativeSrc":"1148:7:36","nodeType":"YulTypedName","src":"1148:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1160:6:36","nodeType":"YulTypedName","src":"1160:6:36","type":""}],"src":"1101:180:36"},{"body":{"nativeSrc":"1424:316:36","nodeType":"YulBlock","src":"1424:316:36","statements":[{"body":{"nativeSrc":"1471:16:36","nodeType":"YulBlock","src":"1471:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1480:1:36","nodeType":"YulLiteral","src":"1480:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1483:1:36","nodeType":"YulLiteral","src":"1483:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1473:6:36","nodeType":"YulIdentifier","src":"1473:6:36"},"nativeSrc":"1473:12:36","nodeType":"YulFunctionCall","src":"1473:12:36"},"nativeSrc":"1473:12:36","nodeType":"YulExpressionStatement","src":"1473:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1445:7:36","nodeType":"YulIdentifier","src":"1445:7:36"},{"name":"headStart","nativeSrc":"1454:9:36","nodeType":"YulIdentifier","src":"1454:9:36"}],"functionName":{"name":"sub","nativeSrc":"1441:3:36","nodeType":"YulIdentifier","src":"1441:3:36"},"nativeSrc":"1441:23:36","nodeType":"YulFunctionCall","src":"1441:23:36"},{"kind":"number","nativeSrc":"1466:3:36","nodeType":"YulLiteral","src":"1466:3:36","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"1437:3:36","nodeType":"YulIdentifier","src":"1437:3:36"},"nativeSrc":"1437:33:36","nodeType":"YulFunctionCall","src":"1437:33:36"},"nativeSrc":"1434:53:36","nodeType":"YulIf","src":"1434:53:36"},{"nativeSrc":"1496:33:36","nodeType":"YulAssignment","src":"1496:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1519:9:36","nodeType":"YulIdentifier","src":"1519:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"1506:12:36","nodeType":"YulIdentifier","src":"1506:12:36"},"nativeSrc":"1506:23:36","nodeType":"YulFunctionCall","src":"1506:23:36"},"variableNames":[{"name":"value0","nativeSrc":"1496:6:36","nodeType":"YulIdentifier","src":"1496:6:36"}]},{"nativeSrc":"1538:42:36","nodeType":"YulAssignment","src":"1538:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1565:9:36","nodeType":"YulIdentifier","src":"1565:9:36"},{"kind":"number","nativeSrc":"1576:2:36","nodeType":"YulLiteral","src":"1576:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1561:3:36","nodeType":"YulIdentifier","src":"1561:3:36"},"nativeSrc":"1561:18:36","nodeType":"YulFunctionCall","src":"1561:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1548:12:36","nodeType":"YulIdentifier","src":"1548:12:36"},"nativeSrc":"1548:32:36","nodeType":"YulFunctionCall","src":"1548:32:36"},"variableNames":[{"name":"value1","nativeSrc":"1538:6:36","nodeType":"YulIdentifier","src":"1538:6:36"}]},{"nativeSrc":"1589:42:36","nodeType":"YulAssignment","src":"1589:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1616:9:36","nodeType":"YulIdentifier","src":"1616:9:36"},{"kind":"number","nativeSrc":"1627:2:36","nodeType":"YulLiteral","src":"1627:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1612:3:36","nodeType":"YulIdentifier","src":"1612:3:36"},"nativeSrc":"1612:18:36","nodeType":"YulFunctionCall","src":"1612:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1599:12:36","nodeType":"YulIdentifier","src":"1599:12:36"},"nativeSrc":"1599:32:36","nodeType":"YulFunctionCall","src":"1599:32:36"},"variableNames":[{"name":"value2","nativeSrc":"1589:6:36","nodeType":"YulIdentifier","src":"1589:6:36"}]},{"nativeSrc":"1640:42:36","nodeType":"YulAssignment","src":"1640:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1667:9:36","nodeType":"YulIdentifier","src":"1667:9:36"},{"kind":"number","nativeSrc":"1678:2:36","nodeType":"YulLiteral","src":"1678:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1663:3:36","nodeType":"YulIdentifier","src":"1663:3:36"},"nativeSrc":"1663:18:36","nodeType":"YulFunctionCall","src":"1663:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1650:12:36","nodeType":"YulIdentifier","src":"1650:12:36"},"nativeSrc":"1650:32:36","nodeType":"YulFunctionCall","src":"1650:32:36"},"variableNames":[{"name":"value3","nativeSrc":"1640:6:36","nodeType":"YulIdentifier","src":"1640:6:36"}]},{"nativeSrc":"1691:43:36","nodeType":"YulAssignment","src":"1691:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1718:9:36","nodeType":"YulIdentifier","src":"1718:9:36"},{"kind":"number","nativeSrc":"1729:3:36","nodeType":"YulLiteral","src":"1729:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1714:3:36","nodeType":"YulIdentifier","src":"1714:3:36"},"nativeSrc":"1714:19:36","nodeType":"YulFunctionCall","src":"1714:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"1701:12:36","nodeType":"YulIdentifier","src":"1701:12:36"},"nativeSrc":"1701:33:36","nodeType":"YulFunctionCall","src":"1701:33:36"},"variableNames":[{"name":"value4","nativeSrc":"1691:6:36","nodeType":"YulIdentifier","src":"1691:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32","nativeSrc":"1286:454:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1358:9:36","nodeType":"YulTypedName","src":"1358:9:36","type":""},{"name":"dataEnd","nativeSrc":"1369:7:36","nodeType":"YulTypedName","src":"1369:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1381:6:36","nodeType":"YulTypedName","src":"1381:6:36","type":""},{"name":"value1","nativeSrc":"1389:6:36","nodeType":"YulTypedName","src":"1389:6:36","type":""},{"name":"value2","nativeSrc":"1397:6:36","nodeType":"YulTypedName","src":"1397:6:36","type":""},{"name":"value3","nativeSrc":"1405:6:36","nodeType":"YulTypedName","src":"1405:6:36","type":""},{"name":"value4","nativeSrc":"1413:6:36","nodeType":"YulTypedName","src":"1413:6:36","type":""}],"src":"1286:454:36"},{"body":{"nativeSrc":"1863:125:36","nodeType":"YulBlock","src":"1863:125:36","statements":[{"nativeSrc":"1873:26:36","nodeType":"YulAssignment","src":"1873:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1885:9:36","nodeType":"YulIdentifier","src":"1885:9:36"},{"kind":"number","nativeSrc":"1896:2:36","nodeType":"YulLiteral","src":"1896:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1881:3:36","nodeType":"YulIdentifier","src":"1881:3:36"},"nativeSrc":"1881:18:36","nodeType":"YulFunctionCall","src":"1881:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1873:4:36","nodeType":"YulIdentifier","src":"1873:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1915:9:36","nodeType":"YulIdentifier","src":"1915:9:36"},{"arguments":[{"name":"value0","nativeSrc":"1930:6:36","nodeType":"YulIdentifier","src":"1930:6:36"},{"kind":"number","nativeSrc":"1938:42:36","nodeType":"YulLiteral","src":"1938:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1926:3:36","nodeType":"YulIdentifier","src":"1926:3:36"},"nativeSrc":"1926:55:36","nodeType":"YulFunctionCall","src":"1926:55:36"}],"functionName":{"name":"mstore","nativeSrc":"1908:6:36","nodeType":"YulIdentifier","src":"1908:6:36"},"nativeSrc":"1908:74:36","nodeType":"YulFunctionCall","src":"1908:74:36"},"nativeSrc":"1908:74:36","nodeType":"YulExpressionStatement","src":"1908:74:36"}]},"name":"abi_encode_tuple_t_contract$_IRealmId_$5006__to_t_address__fromStack_reversed","nativeSrc":"1745:243:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1832:9:36","nodeType":"YulTypedName","src":"1832:9:36","type":""},{"name":"value0","nativeSrc":"1843:6:36","nodeType":"YulTypedName","src":"1843:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1854:4:36","nodeType":"YulTypedName","src":"1854:4:36","type":""}],"src":"1745:243:36"},{"body":{"nativeSrc":"2038:109:36","nodeType":"YulBlock","src":"2038:109:36","statements":[{"body":{"nativeSrc":"2125:16:36","nodeType":"YulBlock","src":"2125:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2134:1:36","nodeType":"YulLiteral","src":"2134:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2137:1:36","nodeType":"YulLiteral","src":"2137:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2127:6:36","nodeType":"YulIdentifier","src":"2127:6:36"},"nativeSrc":"2127:12:36","nodeType":"YulFunctionCall","src":"2127:12:36"},"nativeSrc":"2127:12:36","nodeType":"YulExpressionStatement","src":"2127:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2061:5:36","nodeType":"YulIdentifier","src":"2061:5:36"},{"arguments":[{"name":"value","nativeSrc":"2072:5:36","nodeType":"YulIdentifier","src":"2072:5:36"},{"kind":"number","nativeSrc":"2079:42:36","nodeType":"YulLiteral","src":"2079:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2068:3:36","nodeType":"YulIdentifier","src":"2068:3:36"},"nativeSrc":"2068:54:36","nodeType":"YulFunctionCall","src":"2068:54:36"}],"functionName":{"name":"eq","nativeSrc":"2058:2:36","nodeType":"YulIdentifier","src":"2058:2:36"},"nativeSrc":"2058:65:36","nodeType":"YulFunctionCall","src":"2058:65:36"}],"functionName":{"name":"iszero","nativeSrc":"2051:6:36","nodeType":"YulIdentifier","src":"2051:6:36"},"nativeSrc":"2051:73:36","nodeType":"YulFunctionCall","src":"2051:73:36"},"nativeSrc":"2048:93:36","nodeType":"YulIf","src":"2048:93:36"}]},"name":"validator_revert_address","nativeSrc":"1993:154:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2027:5:36","nodeType":"YulTypedName","src":"2027:5:36","type":""}],"src":"1993:154:36"},{"body":{"nativeSrc":"2239:228:36","nodeType":"YulBlock","src":"2239:228:36","statements":[{"body":{"nativeSrc":"2285:16:36","nodeType":"YulBlock","src":"2285:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2294:1:36","nodeType":"YulLiteral","src":"2294:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2297:1:36","nodeType":"YulLiteral","src":"2297:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2287:6:36","nodeType":"YulIdentifier","src":"2287:6:36"},"nativeSrc":"2287:12:36","nodeType":"YulFunctionCall","src":"2287:12:36"},"nativeSrc":"2287:12:36","nodeType":"YulExpressionStatement","src":"2287:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2260:7:36","nodeType":"YulIdentifier","src":"2260:7:36"},{"name":"headStart","nativeSrc":"2269:9:36","nodeType":"YulIdentifier","src":"2269:9:36"}],"functionName":{"name":"sub","nativeSrc":"2256:3:36","nodeType":"YulIdentifier","src":"2256:3:36"},"nativeSrc":"2256:23:36","nodeType":"YulFunctionCall","src":"2256:23:36"},{"kind":"number","nativeSrc":"2281:2:36","nodeType":"YulLiteral","src":"2281:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2252:3:36","nodeType":"YulIdentifier","src":"2252:3:36"},"nativeSrc":"2252:32:36","nodeType":"YulFunctionCall","src":"2252:32:36"},"nativeSrc":"2249:52:36","nodeType":"YulIf","src":"2249:52:36"},{"nativeSrc":"2310:33:36","nodeType":"YulAssignment","src":"2310:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2333:9:36","nodeType":"YulIdentifier","src":"2333:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"2320:12:36","nodeType":"YulIdentifier","src":"2320:12:36"},"nativeSrc":"2320:23:36","nodeType":"YulFunctionCall","src":"2320:23:36"},"variableNames":[{"name":"value0","nativeSrc":"2310:6:36","nodeType":"YulIdentifier","src":"2310:6:36"}]},{"nativeSrc":"2352:45:36","nodeType":"YulVariableDeclaration","src":"2352:45:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2382:9:36","nodeType":"YulIdentifier","src":"2382:9:36"},{"kind":"number","nativeSrc":"2393:2:36","nodeType":"YulLiteral","src":"2393:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2378:3:36","nodeType":"YulIdentifier","src":"2378:3:36"},"nativeSrc":"2378:18:36","nodeType":"YulFunctionCall","src":"2378:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"2365:12:36","nodeType":"YulIdentifier","src":"2365:12:36"},"nativeSrc":"2365:32:36","nodeType":"YulFunctionCall","src":"2365:32:36"},"variables":[{"name":"value","nativeSrc":"2356:5:36","nodeType":"YulTypedName","src":"2356:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2431:5:36","nodeType":"YulIdentifier","src":"2431:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2406:24:36","nodeType":"YulIdentifier","src":"2406:24:36"},"nativeSrc":"2406:31:36","nodeType":"YulFunctionCall","src":"2406:31:36"},"nativeSrc":"2406:31:36","nodeType":"YulExpressionStatement","src":"2406:31:36"},{"nativeSrc":"2446:15:36","nodeType":"YulAssignment","src":"2446:15:36","value":{"name":"value","nativeSrc":"2456:5:36","nodeType":"YulIdentifier","src":"2456:5:36"},"variableNames":[{"name":"value1","nativeSrc":"2446:6:36","nodeType":"YulIdentifier","src":"2446:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2152:315:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2197:9:36","nodeType":"YulTypedName","src":"2197:9:36","type":""},{"name":"dataEnd","nativeSrc":"2208:7:36","nodeType":"YulTypedName","src":"2208:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2220:6:36","nodeType":"YulTypedName","src":"2220:6:36","type":""},{"name":"value1","nativeSrc":"2228:6:36","nodeType":"YulTypedName","src":"2228:6:36","type":""}],"src":"2152:315:36"},{"body":{"nativeSrc":"2542:177:36","nodeType":"YulBlock","src":"2542:177:36","statements":[{"body":{"nativeSrc":"2588:16:36","nodeType":"YulBlock","src":"2588:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2597:1:36","nodeType":"YulLiteral","src":"2597:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2600:1:36","nodeType":"YulLiteral","src":"2600:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2590:6:36","nodeType":"YulIdentifier","src":"2590:6:36"},"nativeSrc":"2590:12:36","nodeType":"YulFunctionCall","src":"2590:12:36"},"nativeSrc":"2590:12:36","nodeType":"YulExpressionStatement","src":"2590:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2563:7:36","nodeType":"YulIdentifier","src":"2563:7:36"},{"name":"headStart","nativeSrc":"2572:9:36","nodeType":"YulIdentifier","src":"2572:9:36"}],"functionName":{"name":"sub","nativeSrc":"2559:3:36","nodeType":"YulIdentifier","src":"2559:3:36"},"nativeSrc":"2559:23:36","nodeType":"YulFunctionCall","src":"2559:23:36"},{"kind":"number","nativeSrc":"2584:2:36","nodeType":"YulLiteral","src":"2584:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2555:3:36","nodeType":"YulIdentifier","src":"2555:3:36"},"nativeSrc":"2555:32:36","nodeType":"YulFunctionCall","src":"2555:32:36"},"nativeSrc":"2552:52:36","nodeType":"YulIf","src":"2552:52:36"},{"nativeSrc":"2613:36:36","nodeType":"YulVariableDeclaration","src":"2613:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2639:9:36","nodeType":"YulIdentifier","src":"2639:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"2626:12:36","nodeType":"YulIdentifier","src":"2626:12:36"},"nativeSrc":"2626:23:36","nodeType":"YulFunctionCall","src":"2626:23:36"},"variables":[{"name":"value","nativeSrc":"2617:5:36","nodeType":"YulTypedName","src":"2617:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2683:5:36","nodeType":"YulIdentifier","src":"2683:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2658:24:36","nodeType":"YulIdentifier","src":"2658:24:36"},"nativeSrc":"2658:31:36","nodeType":"YulFunctionCall","src":"2658:31:36"},"nativeSrc":"2658:31:36","nodeType":"YulExpressionStatement","src":"2658:31:36"},{"nativeSrc":"2698:15:36","nodeType":"YulAssignment","src":"2698:15:36","value":{"name":"value","nativeSrc":"2708:5:36","nodeType":"YulIdentifier","src":"2708:5:36"},"variableNames":[{"name":"value0","nativeSrc":"2698:6:36","nodeType":"YulIdentifier","src":"2698:6:36"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2472:247:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2508:9:36","nodeType":"YulTypedName","src":"2508:9:36","type":""},{"name":"dataEnd","nativeSrc":"2519:7:36","nodeType":"YulTypedName","src":"2519:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2531:6:36","nodeType":"YulTypedName","src":"2531:6:36","type":""}],"src":"2472:247:36"},{"body":{"nativeSrc":"2829:510:36","nodeType":"YulBlock","src":"2829:510:36","statements":[{"body":{"nativeSrc":"2875:16:36","nodeType":"YulBlock","src":"2875:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2884:1:36","nodeType":"YulLiteral","src":"2884:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2887:1:36","nodeType":"YulLiteral","src":"2887:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2877:6:36","nodeType":"YulIdentifier","src":"2877:6:36"},"nativeSrc":"2877:12:36","nodeType":"YulFunctionCall","src":"2877:12:36"},"nativeSrc":"2877:12:36","nodeType":"YulExpressionStatement","src":"2877:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2850:7:36","nodeType":"YulIdentifier","src":"2850:7:36"},{"name":"headStart","nativeSrc":"2859:9:36","nodeType":"YulIdentifier","src":"2859:9:36"}],"functionName":{"name":"sub","nativeSrc":"2846:3:36","nodeType":"YulIdentifier","src":"2846:3:36"},"nativeSrc":"2846:23:36","nodeType":"YulFunctionCall","src":"2846:23:36"},{"kind":"number","nativeSrc":"2871:2:36","nodeType":"YulLiteral","src":"2871:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2842:3:36","nodeType":"YulIdentifier","src":"2842:3:36"},"nativeSrc":"2842:32:36","nodeType":"YulFunctionCall","src":"2842:32:36"},"nativeSrc":"2839:52:36","nodeType":"YulIf","src":"2839:52:36"},{"nativeSrc":"2900:37:36","nodeType":"YulVariableDeclaration","src":"2900:37:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2927:9:36","nodeType":"YulIdentifier","src":"2927:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"2914:12:36","nodeType":"YulIdentifier","src":"2914:12:36"},"nativeSrc":"2914:23:36","nodeType":"YulFunctionCall","src":"2914:23:36"},"variables":[{"name":"offset","nativeSrc":"2904:6:36","nodeType":"YulTypedName","src":"2904:6:36","type":""}]},{"nativeSrc":"2946:28:36","nodeType":"YulVariableDeclaration","src":"2946:28:36","value":{"kind":"number","nativeSrc":"2956:18:36","nodeType":"YulLiteral","src":"2956:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2950:2:36","nodeType":"YulTypedName","src":"2950:2:36","type":""}]},{"body":{"nativeSrc":"3001:16:36","nodeType":"YulBlock","src":"3001:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3010:1:36","nodeType":"YulLiteral","src":"3010:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3013:1:36","nodeType":"YulLiteral","src":"3013:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3003:6:36","nodeType":"YulIdentifier","src":"3003:6:36"},"nativeSrc":"3003:12:36","nodeType":"YulFunctionCall","src":"3003:12:36"},"nativeSrc":"3003:12:36","nodeType":"YulExpressionStatement","src":"3003:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2989:6:36","nodeType":"YulIdentifier","src":"2989:6:36"},{"name":"_1","nativeSrc":"2997:2:36","nodeType":"YulIdentifier","src":"2997:2:36"}],"functionName":{"name":"gt","nativeSrc":"2986:2:36","nodeType":"YulIdentifier","src":"2986:2:36"},"nativeSrc":"2986:14:36","nodeType":"YulFunctionCall","src":"2986:14:36"},"nativeSrc":"2983:34:36","nodeType":"YulIf","src":"2983:34:36"},{"nativeSrc":"3026:32:36","nodeType":"YulVariableDeclaration","src":"3026:32:36","value":{"arguments":[{"name":"headStart","nativeSrc":"3040:9:36","nodeType":"YulIdentifier","src":"3040:9:36"},{"name":"offset","nativeSrc":"3051:6:36","nodeType":"YulIdentifier","src":"3051:6:36"}],"functionName":{"name":"add","nativeSrc":"3036:3:36","nodeType":"YulIdentifier","src":"3036:3:36"},"nativeSrc":"3036:22:36","nodeType":"YulFunctionCall","src":"3036:22:36"},"variables":[{"name":"_2","nativeSrc":"3030:2:36","nodeType":"YulTypedName","src":"3030:2:36","type":""}]},{"body":{"nativeSrc":"3106:16:36","nodeType":"YulBlock","src":"3106:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3115:1:36","nodeType":"YulLiteral","src":"3115:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3118:1:36","nodeType":"YulLiteral","src":"3118:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3108:6:36","nodeType":"YulIdentifier","src":"3108:6:36"},"nativeSrc":"3108:12:36","nodeType":"YulFunctionCall","src":"3108:12:36"},"nativeSrc":"3108:12:36","nodeType":"YulExpressionStatement","src":"3108:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3085:2:36","nodeType":"YulIdentifier","src":"3085:2:36"},{"kind":"number","nativeSrc":"3089:4:36","nodeType":"YulLiteral","src":"3089:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3081:3:36","nodeType":"YulIdentifier","src":"3081:3:36"},"nativeSrc":"3081:13:36","nodeType":"YulFunctionCall","src":"3081:13:36"},{"name":"dataEnd","nativeSrc":"3096:7:36","nodeType":"YulIdentifier","src":"3096:7:36"}],"functionName":{"name":"slt","nativeSrc":"3077:3:36","nodeType":"YulIdentifier","src":"3077:3:36"},"nativeSrc":"3077:27:36","nodeType":"YulFunctionCall","src":"3077:27:36"}],"functionName":{"name":"iszero","nativeSrc":"3070:6:36","nodeType":"YulIdentifier","src":"3070:6:36"},"nativeSrc":"3070:35:36","nodeType":"YulFunctionCall","src":"3070:35:36"},"nativeSrc":"3067:55:36","nodeType":"YulIf","src":"3067:55:36"},{"nativeSrc":"3131:30:36","nodeType":"YulVariableDeclaration","src":"3131:30:36","value":{"arguments":[{"name":"_2","nativeSrc":"3158:2:36","nodeType":"YulIdentifier","src":"3158:2:36"}],"functionName":{"name":"calldataload","nativeSrc":"3145:12:36","nodeType":"YulIdentifier","src":"3145:12:36"},"nativeSrc":"3145:16:36","nodeType":"YulFunctionCall","src":"3145:16:36"},"variables":[{"name":"length","nativeSrc":"3135:6:36","nodeType":"YulTypedName","src":"3135:6:36","type":""}]},{"body":{"nativeSrc":"3188:16:36","nodeType":"YulBlock","src":"3188:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3197:1:36","nodeType":"YulLiteral","src":"3197:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3200:1:36","nodeType":"YulLiteral","src":"3200:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3190:6:36","nodeType":"YulIdentifier","src":"3190:6:36"},"nativeSrc":"3190:12:36","nodeType":"YulFunctionCall","src":"3190:12:36"},"nativeSrc":"3190:12:36","nodeType":"YulExpressionStatement","src":"3190:12:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3176:6:36","nodeType":"YulIdentifier","src":"3176:6:36"},{"name":"_1","nativeSrc":"3184:2:36","nodeType":"YulIdentifier","src":"3184:2:36"}],"functionName":{"name":"gt","nativeSrc":"3173:2:36","nodeType":"YulIdentifier","src":"3173:2:36"},"nativeSrc":"3173:14:36","nodeType":"YulFunctionCall","src":"3173:14:36"},"nativeSrc":"3170:34:36","nodeType":"YulIf","src":"3170:34:36"},{"body":{"nativeSrc":"3262:16:36","nodeType":"YulBlock","src":"3262:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3271:1:36","nodeType":"YulLiteral","src":"3271:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3274:1:36","nodeType":"YulLiteral","src":"3274:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3264:6:36","nodeType":"YulIdentifier","src":"3264:6:36"},"nativeSrc":"3264:12:36","nodeType":"YulFunctionCall","src":"3264:12:36"},"nativeSrc":"3264:12:36","nodeType":"YulExpressionStatement","src":"3264:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3227:2:36","nodeType":"YulIdentifier","src":"3227:2:36"},{"arguments":[{"kind":"number","nativeSrc":"3235:1:36","nodeType":"YulLiteral","src":"3235:1:36","type":"","value":"5"},{"name":"length","nativeSrc":"3238:6:36","nodeType":"YulIdentifier","src":"3238:6:36"}],"functionName":{"name":"shl","nativeSrc":"3231:3:36","nodeType":"YulIdentifier","src":"3231:3:36"},"nativeSrc":"3231:14:36","nodeType":"YulFunctionCall","src":"3231:14:36"}],"functionName":{"name":"add","nativeSrc":"3223:3:36","nodeType":"YulIdentifier","src":"3223:3:36"},"nativeSrc":"3223:23:36","nodeType":"YulFunctionCall","src":"3223:23:36"},{"kind":"number","nativeSrc":"3248:2:36","nodeType":"YulLiteral","src":"3248:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3219:3:36","nodeType":"YulIdentifier","src":"3219:3:36"},"nativeSrc":"3219:32:36","nodeType":"YulFunctionCall","src":"3219:32:36"},{"name":"dataEnd","nativeSrc":"3253:7:36","nodeType":"YulIdentifier","src":"3253:7:36"}],"functionName":{"name":"gt","nativeSrc":"3216:2:36","nodeType":"YulIdentifier","src":"3216:2:36"},"nativeSrc":"3216:45:36","nodeType":"YulFunctionCall","src":"3216:45:36"},"nativeSrc":"3213:65:36","nodeType":"YulIf","src":"3213:65:36"},{"nativeSrc":"3287:21:36","nodeType":"YulAssignment","src":"3287:21:36","value":{"arguments":[{"name":"_2","nativeSrc":"3301:2:36","nodeType":"YulIdentifier","src":"3301:2:36"},{"kind":"number","nativeSrc":"3305:2:36","nodeType":"YulLiteral","src":"3305:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3297:3:36","nodeType":"YulIdentifier","src":"3297:3:36"},"nativeSrc":"3297:11:36","nodeType":"YulFunctionCall","src":"3297:11:36"},"variableNames":[{"name":"value0","nativeSrc":"3287:6:36","nodeType":"YulIdentifier","src":"3287:6:36"}]},{"nativeSrc":"3317:16:36","nodeType":"YulAssignment","src":"3317:16:36","value":{"name":"length","nativeSrc":"3327:6:36","nodeType":"YulIdentifier","src":"3327:6:36"},"variableNames":[{"name":"value1","nativeSrc":"3317:6:36","nodeType":"YulIdentifier","src":"3317:6:36"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"2724:615:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2787:9:36","nodeType":"YulTypedName","src":"2787:9:36","type":""},{"name":"dataEnd","nativeSrc":"2798:7:36","nodeType":"YulTypedName","src":"2798:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2810:6:36","nodeType":"YulTypedName","src":"2810:6:36","type":""},{"name":"value1","nativeSrc":"2818:6:36","nodeType":"YulTypedName","src":"2818:6:36","type":""}],"src":"2724:615:36"},{"body":{"nativeSrc":"3465:331:36","nodeType":"YulBlock","src":"3465:331:36","statements":[{"body":{"nativeSrc":"3512:16:36","nodeType":"YulBlock","src":"3512:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3521:1:36","nodeType":"YulLiteral","src":"3521:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3524:1:36","nodeType":"YulLiteral","src":"3524:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3514:6:36","nodeType":"YulIdentifier","src":"3514:6:36"},"nativeSrc":"3514:12:36","nodeType":"YulFunctionCall","src":"3514:12:36"},"nativeSrc":"3514:12:36","nodeType":"YulExpressionStatement","src":"3514:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3486:7:36","nodeType":"YulIdentifier","src":"3486:7:36"},{"name":"headStart","nativeSrc":"3495:9:36","nodeType":"YulIdentifier","src":"3495:9:36"}],"functionName":{"name":"sub","nativeSrc":"3482:3:36","nodeType":"YulIdentifier","src":"3482:3:36"},"nativeSrc":"3482:23:36","nodeType":"YulFunctionCall","src":"3482:23:36"},{"kind":"number","nativeSrc":"3507:3:36","nodeType":"YulLiteral","src":"3507:3:36","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3478:3:36","nodeType":"YulIdentifier","src":"3478:3:36"},"nativeSrc":"3478:33:36","nodeType":"YulFunctionCall","src":"3478:33:36"},"nativeSrc":"3475:53:36","nodeType":"YulIf","src":"3475:53:36"},{"nativeSrc":"3537:33:36","nodeType":"YulAssignment","src":"3537:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"3560:9:36","nodeType":"YulIdentifier","src":"3560:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"3547:12:36","nodeType":"YulIdentifier","src":"3547:12:36"},"nativeSrc":"3547:23:36","nodeType":"YulFunctionCall","src":"3547:23:36"},"variableNames":[{"name":"value0","nativeSrc":"3537:6:36","nodeType":"YulIdentifier","src":"3537:6:36"}]},{"nativeSrc":"3579:45:36","nodeType":"YulVariableDeclaration","src":"3579:45:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3609:9:36","nodeType":"YulIdentifier","src":"3609:9:36"},{"kind":"number","nativeSrc":"3620:2:36","nodeType":"YulLiteral","src":"3620:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3605:3:36","nodeType":"YulIdentifier","src":"3605:3:36"},"nativeSrc":"3605:18:36","nodeType":"YulFunctionCall","src":"3605:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"3592:12:36","nodeType":"YulIdentifier","src":"3592:12:36"},"nativeSrc":"3592:32:36","nodeType":"YulFunctionCall","src":"3592:32:36"},"variables":[{"name":"value","nativeSrc":"3583:5:36","nodeType":"YulTypedName","src":"3583:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3658:5:36","nodeType":"YulIdentifier","src":"3658:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3633:24:36","nodeType":"YulIdentifier","src":"3633:24:36"},"nativeSrc":"3633:31:36","nodeType":"YulFunctionCall","src":"3633:31:36"},"nativeSrc":"3633:31:36","nodeType":"YulExpressionStatement","src":"3633:31:36"},{"nativeSrc":"3673:15:36","nodeType":"YulAssignment","src":"3673:15:36","value":{"name":"value","nativeSrc":"3683:5:36","nodeType":"YulIdentifier","src":"3683:5:36"},"variableNames":[{"name":"value1","nativeSrc":"3673:6:36","nodeType":"YulIdentifier","src":"3673:6:36"}]},{"nativeSrc":"3697:42:36","nodeType":"YulAssignment","src":"3697:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3724:9:36","nodeType":"YulIdentifier","src":"3724:9:36"},{"kind":"number","nativeSrc":"3735:2:36","nodeType":"YulLiteral","src":"3735:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3720:3:36","nodeType":"YulIdentifier","src":"3720:3:36"},"nativeSrc":"3720:18:36","nodeType":"YulFunctionCall","src":"3720:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"3707:12:36","nodeType":"YulIdentifier","src":"3707:12:36"},"nativeSrc":"3707:32:36","nodeType":"YulFunctionCall","src":"3707:32:36"},"variableNames":[{"name":"value2","nativeSrc":"3697:6:36","nodeType":"YulIdentifier","src":"3697:6:36"}]},{"nativeSrc":"3748:42:36","nodeType":"YulAssignment","src":"3748:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3775:9:36","nodeType":"YulIdentifier","src":"3775:9:36"},{"kind":"number","nativeSrc":"3786:2:36","nodeType":"YulLiteral","src":"3786:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3771:3:36","nodeType":"YulIdentifier","src":"3771:3:36"},"nativeSrc":"3771:18:36","nodeType":"YulFunctionCall","src":"3771:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"3758:12:36","nodeType":"YulIdentifier","src":"3758:12:36"},"nativeSrc":"3758:32:36","nodeType":"YulFunctionCall","src":"3758:32:36"},"variableNames":[{"name":"value3","nativeSrc":"3748:6:36","nodeType":"YulIdentifier","src":"3748:6:36"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32","nativeSrc":"3344:452:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3407:9:36","nodeType":"YulTypedName","src":"3407:9:36","type":""},{"name":"dataEnd","nativeSrc":"3418:7:36","nodeType":"YulTypedName","src":"3418:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3430:6:36","nodeType":"YulTypedName","src":"3430:6:36","type":""},{"name":"value1","nativeSrc":"3438:6:36","nodeType":"YulTypedName","src":"3438:6:36","type":""},{"name":"value2","nativeSrc":"3446:6:36","nodeType":"YulTypedName","src":"3446:6:36","type":""},{"name":"value3","nativeSrc":"3454:6:36","nodeType":"YulTypedName","src":"3454:6:36","type":""}],"src":"3344:452:36"},{"body":{"nativeSrc":"3902:76:36","nodeType":"YulBlock","src":"3902:76:36","statements":[{"nativeSrc":"3912:26:36","nodeType":"YulAssignment","src":"3912:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"3924:9:36","nodeType":"YulIdentifier","src":"3924:9:36"},{"kind":"number","nativeSrc":"3935:2:36","nodeType":"YulLiteral","src":"3935:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3920:3:36","nodeType":"YulIdentifier","src":"3920:3:36"},"nativeSrc":"3920:18:36","nodeType":"YulFunctionCall","src":"3920:18:36"},"variableNames":[{"name":"tail","nativeSrc":"3912:4:36","nodeType":"YulIdentifier","src":"3912:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3954:9:36","nodeType":"YulIdentifier","src":"3954:9:36"},{"name":"value0","nativeSrc":"3965:6:36","nodeType":"YulIdentifier","src":"3965:6:36"}],"functionName":{"name":"mstore","nativeSrc":"3947:6:36","nodeType":"YulIdentifier","src":"3947:6:36"},"nativeSrc":"3947:25:36","nodeType":"YulFunctionCall","src":"3947:25:36"},"nativeSrc":"3947:25:36","nodeType":"YulExpressionStatement","src":"3947:25:36"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3801:177:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3871:9:36","nodeType":"YulTypedName","src":"3871:9:36","type":""},{"name":"value0","nativeSrc":"3882:6:36","nodeType":"YulTypedName","src":"3882:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3893:4:36","nodeType":"YulTypedName","src":"3893:4:36","type":""}],"src":"3801:177:36"},{"body":{"nativeSrc":"4053:110:36","nodeType":"YulBlock","src":"4053:110:36","statements":[{"body":{"nativeSrc":"4099:16:36","nodeType":"YulBlock","src":"4099:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4108:1:36","nodeType":"YulLiteral","src":"4108:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4111:1:36","nodeType":"YulLiteral","src":"4111:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4101:6:36","nodeType":"YulIdentifier","src":"4101:6:36"},"nativeSrc":"4101:12:36","nodeType":"YulFunctionCall","src":"4101:12:36"},"nativeSrc":"4101:12:36","nodeType":"YulExpressionStatement","src":"4101:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4074:7:36","nodeType":"YulIdentifier","src":"4074:7:36"},{"name":"headStart","nativeSrc":"4083:9:36","nodeType":"YulIdentifier","src":"4083:9:36"}],"functionName":{"name":"sub","nativeSrc":"4070:3:36","nodeType":"YulIdentifier","src":"4070:3:36"},"nativeSrc":"4070:23:36","nodeType":"YulFunctionCall","src":"4070:23:36"},{"kind":"number","nativeSrc":"4095:2:36","nodeType":"YulLiteral","src":"4095:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4066:3:36","nodeType":"YulIdentifier","src":"4066:3:36"},"nativeSrc":"4066:32:36","nodeType":"YulFunctionCall","src":"4066:32:36"},"nativeSrc":"4063:52:36","nodeType":"YulIf","src":"4063:52:36"},{"nativeSrc":"4124:33:36","nodeType":"YulAssignment","src":"4124:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4147:9:36","nodeType":"YulIdentifier","src":"4147:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"4134:12:36","nodeType":"YulIdentifier","src":"4134:12:36"},"nativeSrc":"4134:23:36","nodeType":"YulFunctionCall","src":"4134:23:36"},"variableNames":[{"name":"value0","nativeSrc":"4124:6:36","nodeType":"YulIdentifier","src":"4124:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"3983:180:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4019:9:36","nodeType":"YulTypedName","src":"4019:9:36","type":""},{"name":"dataEnd","nativeSrc":"4030:7:36","nodeType":"YulTypedName","src":"4030:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4042:6:36","nodeType":"YulTypedName","src":"4042:6:36","type":""}],"src":"3983:180:36"},{"body":{"nativeSrc":"4263:92:36","nodeType":"YulBlock","src":"4263:92:36","statements":[{"nativeSrc":"4273:26:36","nodeType":"YulAssignment","src":"4273:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4285:9:36","nodeType":"YulIdentifier","src":"4285:9:36"},{"kind":"number","nativeSrc":"4296:2:36","nodeType":"YulLiteral","src":"4296:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4281:3:36","nodeType":"YulIdentifier","src":"4281:3:36"},"nativeSrc":"4281:18:36","nodeType":"YulFunctionCall","src":"4281:18:36"},"variableNames":[{"name":"tail","nativeSrc":"4273:4:36","nodeType":"YulIdentifier","src":"4273:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4315:9:36","nodeType":"YulIdentifier","src":"4315:9:36"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4340:6:36","nodeType":"YulIdentifier","src":"4340:6:36"}],"functionName":{"name":"iszero","nativeSrc":"4333:6:36","nodeType":"YulIdentifier","src":"4333:6:36"},"nativeSrc":"4333:14:36","nodeType":"YulFunctionCall","src":"4333:14:36"}],"functionName":{"name":"iszero","nativeSrc":"4326:6:36","nodeType":"YulIdentifier","src":"4326:6:36"},"nativeSrc":"4326:22:36","nodeType":"YulFunctionCall","src":"4326:22:36"}],"functionName":{"name":"mstore","nativeSrc":"4308:6:36","nodeType":"YulIdentifier","src":"4308:6:36"},"nativeSrc":"4308:41:36","nodeType":"YulFunctionCall","src":"4308:41:36"},"nativeSrc":"4308:41:36","nodeType":"YulExpressionStatement","src":"4308:41:36"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"4168:187:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4232:9:36","nodeType":"YulTypedName","src":"4232:9:36","type":""},{"name":"value0","nativeSrc":"4243:6:36","nodeType":"YulTypedName","src":"4243:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4254:4:36","nodeType":"YulTypedName","src":"4254:4:36","type":""}],"src":"4168:187:36"},{"body":{"nativeSrc":"4392:152:36","nodeType":"YulBlock","src":"4392:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4409:1:36","nodeType":"YulLiteral","src":"4409:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4412:77:36","nodeType":"YulLiteral","src":"4412:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4402:6:36","nodeType":"YulIdentifier","src":"4402:6:36"},"nativeSrc":"4402:88:36","nodeType":"YulFunctionCall","src":"4402:88:36"},"nativeSrc":"4402:88:36","nodeType":"YulExpressionStatement","src":"4402:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4506:1:36","nodeType":"YulLiteral","src":"4506:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"4509:4:36","nodeType":"YulLiteral","src":"4509:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"4499:6:36","nodeType":"YulIdentifier","src":"4499:6:36"},"nativeSrc":"4499:15:36","nodeType":"YulFunctionCall","src":"4499:15:36"},"nativeSrc":"4499:15:36","nodeType":"YulExpressionStatement","src":"4499:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4530:1:36","nodeType":"YulLiteral","src":"4530:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4533:4:36","nodeType":"YulLiteral","src":"4533:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4523:6:36","nodeType":"YulIdentifier","src":"4523:6:36"},"nativeSrc":"4523:15:36","nodeType":"YulFunctionCall","src":"4523:15:36"},"nativeSrc":"4523:15:36","nodeType":"YulExpressionStatement","src":"4523:15:36"}]},"name":"panic_error_0x41","nativeSrc":"4360:184:36","nodeType":"YulFunctionDefinition","src":"4360:184:36"},{"body":{"nativeSrc":"4645:1019:36","nodeType":"YulBlock","src":"4645:1019:36","statements":[{"body":{"nativeSrc":"4691:16:36","nodeType":"YulBlock","src":"4691:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4700:1:36","nodeType":"YulLiteral","src":"4700:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4703:1:36","nodeType":"YulLiteral","src":"4703:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4693:6:36","nodeType":"YulIdentifier","src":"4693:6:36"},"nativeSrc":"4693:12:36","nodeType":"YulFunctionCall","src":"4693:12:36"},"nativeSrc":"4693:12:36","nodeType":"YulExpressionStatement","src":"4693:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4666:7:36","nodeType":"YulIdentifier","src":"4666:7:36"},{"name":"headStart","nativeSrc":"4675:9:36","nodeType":"YulIdentifier","src":"4675:9:36"}],"functionName":{"name":"sub","nativeSrc":"4662:3:36","nodeType":"YulIdentifier","src":"4662:3:36"},"nativeSrc":"4662:23:36","nodeType":"YulFunctionCall","src":"4662:23:36"},{"kind":"number","nativeSrc":"4687:2:36","nodeType":"YulLiteral","src":"4687:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4658:3:36","nodeType":"YulIdentifier","src":"4658:3:36"},"nativeSrc":"4658:32:36","nodeType":"YulFunctionCall","src":"4658:32:36"},"nativeSrc":"4655:52:36","nodeType":"YulIf","src":"4655:52:36"},{"nativeSrc":"4716:36:36","nodeType":"YulVariableDeclaration","src":"4716:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4742:9:36","nodeType":"YulIdentifier","src":"4742:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"4729:12:36","nodeType":"YulIdentifier","src":"4729:12:36"},"nativeSrc":"4729:23:36","nodeType":"YulFunctionCall","src":"4729:23:36"},"variables":[{"name":"value","nativeSrc":"4720:5:36","nodeType":"YulTypedName","src":"4720:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4786:5:36","nodeType":"YulIdentifier","src":"4786:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4761:24:36","nodeType":"YulIdentifier","src":"4761:24:36"},"nativeSrc":"4761:31:36","nodeType":"YulFunctionCall","src":"4761:31:36"},"nativeSrc":"4761:31:36","nodeType":"YulExpressionStatement","src":"4761:31:36"},{"nativeSrc":"4801:15:36","nodeType":"YulAssignment","src":"4801:15:36","value":{"name":"value","nativeSrc":"4811:5:36","nodeType":"YulIdentifier","src":"4811:5:36"},"variableNames":[{"name":"value0","nativeSrc":"4801:6:36","nodeType":"YulIdentifier","src":"4801:6:36"}]},{"nativeSrc":"4825:46:36","nodeType":"YulVariableDeclaration","src":"4825:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4856:9:36","nodeType":"YulIdentifier","src":"4856:9:36"},{"kind":"number","nativeSrc":"4867:2:36","nodeType":"YulLiteral","src":"4867:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4852:3:36","nodeType":"YulIdentifier","src":"4852:3:36"},"nativeSrc":"4852:18:36","nodeType":"YulFunctionCall","src":"4852:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"4839:12:36","nodeType":"YulIdentifier","src":"4839:12:36"},"nativeSrc":"4839:32:36","nodeType":"YulFunctionCall","src":"4839:32:36"},"variables":[{"name":"offset","nativeSrc":"4829:6:36","nodeType":"YulTypedName","src":"4829:6:36","type":""}]},{"nativeSrc":"4880:28:36","nodeType":"YulVariableDeclaration","src":"4880:28:36","value":{"kind":"number","nativeSrc":"4890:18:36","nodeType":"YulLiteral","src":"4890:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4884:2:36","nodeType":"YulTypedName","src":"4884:2:36","type":""}]},{"body":{"nativeSrc":"4935:16:36","nodeType":"YulBlock","src":"4935:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4944:1:36","nodeType":"YulLiteral","src":"4944:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4947:1:36","nodeType":"YulLiteral","src":"4947:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4937:6:36","nodeType":"YulIdentifier","src":"4937:6:36"},"nativeSrc":"4937:12:36","nodeType":"YulFunctionCall","src":"4937:12:36"},"nativeSrc":"4937:12:36","nodeType":"YulExpressionStatement","src":"4937:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4923:6:36","nodeType":"YulIdentifier","src":"4923:6:36"},{"name":"_1","nativeSrc":"4931:2:36","nodeType":"YulIdentifier","src":"4931:2:36"}],"functionName":{"name":"gt","nativeSrc":"4920:2:36","nodeType":"YulIdentifier","src":"4920:2:36"},"nativeSrc":"4920:14:36","nodeType":"YulFunctionCall","src":"4920:14:36"},"nativeSrc":"4917:34:36","nodeType":"YulIf","src":"4917:34:36"},{"nativeSrc":"4960:32:36","nodeType":"YulVariableDeclaration","src":"4960:32:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4974:9:36","nodeType":"YulIdentifier","src":"4974:9:36"},{"name":"offset","nativeSrc":"4985:6:36","nodeType":"YulIdentifier","src":"4985:6:36"}],"functionName":{"name":"add","nativeSrc":"4970:3:36","nodeType":"YulIdentifier","src":"4970:3:36"},"nativeSrc":"4970:22:36","nodeType":"YulFunctionCall","src":"4970:22:36"},"variables":[{"name":"_2","nativeSrc":"4964:2:36","nodeType":"YulTypedName","src":"4964:2:36","type":""}]},{"body":{"nativeSrc":"5040:16:36","nodeType":"YulBlock","src":"5040:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5049:1:36","nodeType":"YulLiteral","src":"5049:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5052:1:36","nodeType":"YulLiteral","src":"5052:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5042:6:36","nodeType":"YulIdentifier","src":"5042:6:36"},"nativeSrc":"5042:12:36","nodeType":"YulFunctionCall","src":"5042:12:36"},"nativeSrc":"5042:12:36","nodeType":"YulExpressionStatement","src":"5042:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5019:2:36","nodeType":"YulIdentifier","src":"5019:2:36"},{"kind":"number","nativeSrc":"5023:4:36","nodeType":"YulLiteral","src":"5023:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"5015:3:36","nodeType":"YulIdentifier","src":"5015:3:36"},"nativeSrc":"5015:13:36","nodeType":"YulFunctionCall","src":"5015:13:36"},{"name":"dataEnd","nativeSrc":"5030:7:36","nodeType":"YulIdentifier","src":"5030:7:36"}],"functionName":{"name":"slt","nativeSrc":"5011:3:36","nodeType":"YulIdentifier","src":"5011:3:36"},"nativeSrc":"5011:27:36","nodeType":"YulFunctionCall","src":"5011:27:36"}],"functionName":{"name":"iszero","nativeSrc":"5004:6:36","nodeType":"YulIdentifier","src":"5004:6:36"},"nativeSrc":"5004:35:36","nodeType":"YulFunctionCall","src":"5004:35:36"},"nativeSrc":"5001:55:36","nodeType":"YulIf","src":"5001:55:36"},{"nativeSrc":"5065:26:36","nodeType":"YulVariableDeclaration","src":"5065:26:36","value":{"arguments":[{"name":"_2","nativeSrc":"5088:2:36","nodeType":"YulIdentifier","src":"5088:2:36"}],"functionName":{"name":"calldataload","nativeSrc":"5075:12:36","nodeType":"YulIdentifier","src":"5075:12:36"},"nativeSrc":"5075:16:36","nodeType":"YulFunctionCall","src":"5075:16:36"},"variables":[{"name":"_3","nativeSrc":"5069:2:36","nodeType":"YulTypedName","src":"5069:2:36","type":""}]},{"body":{"nativeSrc":"5114:22:36","nodeType":"YulBlock","src":"5114:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"5116:16:36","nodeType":"YulIdentifier","src":"5116:16:36"},"nativeSrc":"5116:18:36","nodeType":"YulFunctionCall","src":"5116:18:36"},"nativeSrc":"5116:18:36","nodeType":"YulExpressionStatement","src":"5116:18:36"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"5106:2:36","nodeType":"YulIdentifier","src":"5106:2:36"},{"name":"_1","nativeSrc":"5110:2:36","nodeType":"YulIdentifier","src":"5110:2:36"}],"functionName":{"name":"gt","nativeSrc":"5103:2:36","nodeType":"YulIdentifier","src":"5103:2:36"},"nativeSrc":"5103:10:36","nodeType":"YulFunctionCall","src":"5103:10:36"},"nativeSrc":"5100:36:36","nodeType":"YulIf","src":"5100:36:36"},{"nativeSrc":"5145:76:36","nodeType":"YulVariableDeclaration","src":"5145:76:36","value":{"kind":"number","nativeSrc":"5155:66:36","nodeType":"YulLiteral","src":"5155:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nativeSrc":"5149:2:36","nodeType":"YulTypedName","src":"5149:2:36","type":""}]},{"nativeSrc":"5230:23:36","nodeType":"YulVariableDeclaration","src":"5230:23:36","value":{"arguments":[{"kind":"number","nativeSrc":"5250:2:36","nodeType":"YulLiteral","src":"5250:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"5244:5:36","nodeType":"YulIdentifier","src":"5244:5:36"},"nativeSrc":"5244:9:36","nodeType":"YulFunctionCall","src":"5244:9:36"},"variables":[{"name":"memPtr","nativeSrc":"5234:6:36","nodeType":"YulTypedName","src":"5234:6:36","type":""}]},{"nativeSrc":"5262:71:36","nodeType":"YulVariableDeclaration","src":"5262:71:36","value":{"arguments":[{"name":"memPtr","nativeSrc":"5284:6:36","nodeType":"YulIdentifier","src":"5284:6:36"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"5308:2:36","nodeType":"YulIdentifier","src":"5308:2:36"},{"kind":"number","nativeSrc":"5312:4:36","nodeType":"YulLiteral","src":"5312:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"5304:3:36","nodeType":"YulIdentifier","src":"5304:3:36"},"nativeSrc":"5304:13:36","nodeType":"YulFunctionCall","src":"5304:13:36"},{"name":"_4","nativeSrc":"5319:2:36","nodeType":"YulIdentifier","src":"5319:2:36"}],"functionName":{"name":"and","nativeSrc":"5300:3:36","nodeType":"YulIdentifier","src":"5300:3:36"},"nativeSrc":"5300:22:36","nodeType":"YulFunctionCall","src":"5300:22:36"},{"kind":"number","nativeSrc":"5324:2:36","nodeType":"YulLiteral","src":"5324:2:36","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"5296:3:36","nodeType":"YulIdentifier","src":"5296:3:36"},"nativeSrc":"5296:31:36","nodeType":"YulFunctionCall","src":"5296:31:36"},{"name":"_4","nativeSrc":"5329:2:36","nodeType":"YulIdentifier","src":"5329:2:36"}],"functionName":{"name":"and","nativeSrc":"5292:3:36","nodeType":"YulIdentifier","src":"5292:3:36"},"nativeSrc":"5292:40:36","nodeType":"YulFunctionCall","src":"5292:40:36"}],"functionName":{"name":"add","nativeSrc":"5280:3:36","nodeType":"YulIdentifier","src":"5280:3:36"},"nativeSrc":"5280:53:36","nodeType":"YulFunctionCall","src":"5280:53:36"},"variables":[{"name":"newFreePtr","nativeSrc":"5266:10:36","nodeType":"YulTypedName","src":"5266:10:36","type":""}]},{"body":{"nativeSrc":"5392:22:36","nodeType":"YulBlock","src":"5392:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"5394:16:36","nodeType":"YulIdentifier","src":"5394:16:36"},"nativeSrc":"5394:18:36","nodeType":"YulFunctionCall","src":"5394:18:36"},"nativeSrc":"5394:18:36","nodeType":"YulExpressionStatement","src":"5394:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"5351:10:36","nodeType":"YulIdentifier","src":"5351:10:36"},{"name":"_1","nativeSrc":"5363:2:36","nodeType":"YulIdentifier","src":"5363:2:36"}],"functionName":{"name":"gt","nativeSrc":"5348:2:36","nodeType":"YulIdentifier","src":"5348:2:36"},"nativeSrc":"5348:18:36","nodeType":"YulFunctionCall","src":"5348:18:36"},{"arguments":[{"name":"newFreePtr","nativeSrc":"5371:10:36","nodeType":"YulIdentifier","src":"5371:10:36"},{"name":"memPtr","nativeSrc":"5383:6:36","nodeType":"YulIdentifier","src":"5383:6:36"}],"functionName":{"name":"lt","nativeSrc":"5368:2:36","nodeType":"YulIdentifier","src":"5368:2:36"},"nativeSrc":"5368:22:36","nodeType":"YulFunctionCall","src":"5368:22:36"}],"functionName":{"name":"or","nativeSrc":"5345:2:36","nodeType":"YulIdentifier","src":"5345:2:36"},"nativeSrc":"5345:46:36","nodeType":"YulFunctionCall","src":"5345:46:36"},"nativeSrc":"5342:72:36","nodeType":"YulIf","src":"5342:72:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5430:2:36","nodeType":"YulLiteral","src":"5430:2:36","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"5434:10:36","nodeType":"YulIdentifier","src":"5434:10:36"}],"functionName":{"name":"mstore","nativeSrc":"5423:6:36","nodeType":"YulIdentifier","src":"5423:6:36"},"nativeSrc":"5423:22:36","nodeType":"YulFunctionCall","src":"5423:22:36"},"nativeSrc":"5423:22:36","nodeType":"YulExpressionStatement","src":"5423:22:36"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"5461:6:36","nodeType":"YulIdentifier","src":"5461:6:36"},{"name":"_3","nativeSrc":"5469:2:36","nodeType":"YulIdentifier","src":"5469:2:36"}],"functionName":{"name":"mstore","nativeSrc":"5454:6:36","nodeType":"YulIdentifier","src":"5454:6:36"},"nativeSrc":"5454:18:36","nodeType":"YulFunctionCall","src":"5454:18:36"},"nativeSrc":"5454:18:36","nodeType":"YulExpressionStatement","src":"5454:18:36"},{"body":{"nativeSrc":"5518:16:36","nodeType":"YulBlock","src":"5518:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5527:1:36","nodeType":"YulLiteral","src":"5527:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5530:1:36","nodeType":"YulLiteral","src":"5530:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5520:6:36","nodeType":"YulIdentifier","src":"5520:6:36"},"nativeSrc":"5520:12:36","nodeType":"YulFunctionCall","src":"5520:12:36"},"nativeSrc":"5520:12:36","nodeType":"YulExpressionStatement","src":"5520:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5495:2:36","nodeType":"YulIdentifier","src":"5495:2:36"},{"name":"_3","nativeSrc":"5499:2:36","nodeType":"YulIdentifier","src":"5499:2:36"}],"functionName":{"name":"add","nativeSrc":"5491:3:36","nodeType":"YulIdentifier","src":"5491:3:36"},"nativeSrc":"5491:11:36","nodeType":"YulFunctionCall","src":"5491:11:36"},{"kind":"number","nativeSrc":"5504:2:36","nodeType":"YulLiteral","src":"5504:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5487:3:36","nodeType":"YulIdentifier","src":"5487:3:36"},"nativeSrc":"5487:20:36","nodeType":"YulFunctionCall","src":"5487:20:36"},{"name":"dataEnd","nativeSrc":"5509:7:36","nodeType":"YulIdentifier","src":"5509:7:36"}],"functionName":{"name":"gt","nativeSrc":"5484:2:36","nodeType":"YulIdentifier","src":"5484:2:36"},"nativeSrc":"5484:33:36","nodeType":"YulFunctionCall","src":"5484:33:36"},"nativeSrc":"5481:53:36","nodeType":"YulIf","src":"5481:53:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"5560:6:36","nodeType":"YulIdentifier","src":"5560:6:36"},{"kind":"number","nativeSrc":"5568:2:36","nodeType":"YulLiteral","src":"5568:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5556:3:36","nodeType":"YulIdentifier","src":"5556:3:36"},"nativeSrc":"5556:15:36","nodeType":"YulFunctionCall","src":"5556:15:36"},{"arguments":[{"name":"_2","nativeSrc":"5577:2:36","nodeType":"YulIdentifier","src":"5577:2:36"},{"kind":"number","nativeSrc":"5581:2:36","nodeType":"YulLiteral","src":"5581:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5573:3:36","nodeType":"YulIdentifier","src":"5573:3:36"},"nativeSrc":"5573:11:36","nodeType":"YulFunctionCall","src":"5573:11:36"},{"name":"_3","nativeSrc":"5586:2:36","nodeType":"YulIdentifier","src":"5586:2:36"}],"functionName":{"name":"calldatacopy","nativeSrc":"5543:12:36","nodeType":"YulIdentifier","src":"5543:12:36"},"nativeSrc":"5543:46:36","nodeType":"YulFunctionCall","src":"5543:46:36"},"nativeSrc":"5543:46:36","nodeType":"YulExpressionStatement","src":"5543:46:36"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"5613:6:36","nodeType":"YulIdentifier","src":"5613:6:36"},{"name":"_3","nativeSrc":"5621:2:36","nodeType":"YulIdentifier","src":"5621:2:36"}],"functionName":{"name":"add","nativeSrc":"5609:3:36","nodeType":"YulIdentifier","src":"5609:3:36"},"nativeSrc":"5609:15:36","nodeType":"YulFunctionCall","src":"5609:15:36"},{"kind":"number","nativeSrc":"5626:2:36","nodeType":"YulLiteral","src":"5626:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5605:3:36","nodeType":"YulIdentifier","src":"5605:3:36"},"nativeSrc":"5605:24:36","nodeType":"YulFunctionCall","src":"5605:24:36"},{"kind":"number","nativeSrc":"5631:1:36","nodeType":"YulLiteral","src":"5631:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5598:6:36","nodeType":"YulIdentifier","src":"5598:6:36"},"nativeSrc":"5598:35:36","nodeType":"YulFunctionCall","src":"5598:35:36"},"nativeSrc":"5598:35:36","nodeType":"YulExpressionStatement","src":"5598:35:36"},{"nativeSrc":"5642:16:36","nodeType":"YulAssignment","src":"5642:16:36","value":{"name":"memPtr","nativeSrc":"5652:6:36","nodeType":"YulIdentifier","src":"5652:6:36"},"variableNames":[{"name":"value1","nativeSrc":"5642:6:36","nodeType":"YulIdentifier","src":"5642:6:36"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nativeSrc":"4549:1115:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4603:9:36","nodeType":"YulTypedName","src":"4603:9:36","type":""},{"name":"dataEnd","nativeSrc":"4614:7:36","nodeType":"YulTypedName","src":"4614:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4626:6:36","nodeType":"YulTypedName","src":"4626:6:36","type":""},{"name":"value1","nativeSrc":"4634:6:36","nodeType":"YulTypedName","src":"4634:6:36","type":""}],"src":"4549:1115:36"},{"body":{"nativeSrc":"5773:212:36","nodeType":"YulBlock","src":"5773:212:36","statements":[{"body":{"nativeSrc":"5819:16:36","nodeType":"YulBlock","src":"5819:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5828:1:36","nodeType":"YulLiteral","src":"5828:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5831:1:36","nodeType":"YulLiteral","src":"5831:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5821:6:36","nodeType":"YulIdentifier","src":"5821:6:36"},"nativeSrc":"5821:12:36","nodeType":"YulFunctionCall","src":"5821:12:36"},"nativeSrc":"5821:12:36","nodeType":"YulExpressionStatement","src":"5821:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5794:7:36","nodeType":"YulIdentifier","src":"5794:7:36"},{"name":"headStart","nativeSrc":"5803:9:36","nodeType":"YulIdentifier","src":"5803:9:36"}],"functionName":{"name":"sub","nativeSrc":"5790:3:36","nodeType":"YulIdentifier","src":"5790:3:36"},"nativeSrc":"5790:23:36","nodeType":"YulFunctionCall","src":"5790:23:36"},{"kind":"number","nativeSrc":"5815:2:36","nodeType":"YulLiteral","src":"5815:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5786:3:36","nodeType":"YulIdentifier","src":"5786:3:36"},"nativeSrc":"5786:32:36","nodeType":"YulFunctionCall","src":"5786:32:36"},"nativeSrc":"5783:52:36","nodeType":"YulIf","src":"5783:52:36"},{"nativeSrc":"5844:33:36","nodeType":"YulAssignment","src":"5844:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"5867:9:36","nodeType":"YulIdentifier","src":"5867:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"5854:12:36","nodeType":"YulIdentifier","src":"5854:12:36"},"nativeSrc":"5854:23:36","nodeType":"YulFunctionCall","src":"5854:23:36"},"variableNames":[{"name":"value0","nativeSrc":"5844:6:36","nodeType":"YulIdentifier","src":"5844:6:36"}]},{"nativeSrc":"5886:42:36","nodeType":"YulAssignment","src":"5886:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5913:9:36","nodeType":"YulIdentifier","src":"5913:9:36"},{"kind":"number","nativeSrc":"5924:2:36","nodeType":"YulLiteral","src":"5924:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5909:3:36","nodeType":"YulIdentifier","src":"5909:3:36"},"nativeSrc":"5909:18:36","nodeType":"YulFunctionCall","src":"5909:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"5896:12:36","nodeType":"YulIdentifier","src":"5896:12:36"},"nativeSrc":"5896:32:36","nodeType":"YulFunctionCall","src":"5896:32:36"},"variableNames":[{"name":"value1","nativeSrc":"5886:6:36","nodeType":"YulIdentifier","src":"5886:6:36"}]},{"nativeSrc":"5937:42:36","nodeType":"YulAssignment","src":"5937:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5964:9:36","nodeType":"YulIdentifier","src":"5964:9:36"},{"kind":"number","nativeSrc":"5975:2:36","nodeType":"YulLiteral","src":"5975:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5960:3:36","nodeType":"YulIdentifier","src":"5960:3:36"},"nativeSrc":"5960:18:36","nodeType":"YulFunctionCall","src":"5960:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"5947:12:36","nodeType":"YulIdentifier","src":"5947:12:36"},"nativeSrc":"5947:32:36","nodeType":"YulFunctionCall","src":"5947:32:36"},"variableNames":[{"name":"value2","nativeSrc":"5937:6:36","nodeType":"YulIdentifier","src":"5937:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256","nativeSrc":"5669:316:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5723:9:36","nodeType":"YulTypedName","src":"5723:9:36","type":""},{"name":"dataEnd","nativeSrc":"5734:7:36","nodeType":"YulTypedName","src":"5734:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5746:6:36","nodeType":"YulTypedName","src":"5746:6:36","type":""},{"name":"value1","nativeSrc":"5754:6:36","nodeType":"YulTypedName","src":"5754:6:36","type":""},{"name":"value2","nativeSrc":"5762:6:36","nodeType":"YulTypedName","src":"5762:6:36","type":""}],"src":"5669:316:36"},{"body":{"nativeSrc":"6097:372:36","nodeType":"YulBlock","src":"6097:372:36","statements":[{"body":{"nativeSrc":"6143:16:36","nodeType":"YulBlock","src":"6143:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6152:1:36","nodeType":"YulLiteral","src":"6152:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6155:1:36","nodeType":"YulLiteral","src":"6155:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6145:6:36","nodeType":"YulIdentifier","src":"6145:6:36"},"nativeSrc":"6145:12:36","nodeType":"YulFunctionCall","src":"6145:12:36"},"nativeSrc":"6145:12:36","nodeType":"YulExpressionStatement","src":"6145:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6118:7:36","nodeType":"YulIdentifier","src":"6118:7:36"},{"name":"headStart","nativeSrc":"6127:9:36","nodeType":"YulIdentifier","src":"6127:9:36"}],"functionName":{"name":"sub","nativeSrc":"6114:3:36","nodeType":"YulIdentifier","src":"6114:3:36"},"nativeSrc":"6114:23:36","nodeType":"YulFunctionCall","src":"6114:23:36"},{"kind":"number","nativeSrc":"6139:2:36","nodeType":"YulLiteral","src":"6139:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6110:3:36","nodeType":"YulIdentifier","src":"6110:3:36"},"nativeSrc":"6110:32:36","nodeType":"YulFunctionCall","src":"6110:32:36"},"nativeSrc":"6107:52:36","nodeType":"YulIf","src":"6107:52:36"},{"nativeSrc":"6168:33:36","nodeType":"YulAssignment","src":"6168:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"6191:9:36","nodeType":"YulIdentifier","src":"6191:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"6178:12:36","nodeType":"YulIdentifier","src":"6178:12:36"},"nativeSrc":"6178:23:36","nodeType":"YulFunctionCall","src":"6178:23:36"},"variableNames":[{"name":"value0","nativeSrc":"6168:6:36","nodeType":"YulIdentifier","src":"6168:6:36"}]},{"nativeSrc":"6210:46:36","nodeType":"YulVariableDeclaration","src":"6210:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6241:9:36","nodeType":"YulIdentifier","src":"6241:9:36"},{"kind":"number","nativeSrc":"6252:2:36","nodeType":"YulLiteral","src":"6252:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6237:3:36","nodeType":"YulIdentifier","src":"6237:3:36"},"nativeSrc":"6237:18:36","nodeType":"YulFunctionCall","src":"6237:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"6224:12:36","nodeType":"YulIdentifier","src":"6224:12:36"},"nativeSrc":"6224:32:36","nodeType":"YulFunctionCall","src":"6224:32:36"},"variables":[{"name":"offset","nativeSrc":"6214:6:36","nodeType":"YulTypedName","src":"6214:6:36","type":""}]},{"body":{"nativeSrc":"6299:16:36","nodeType":"YulBlock","src":"6299:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6308:1:36","nodeType":"YulLiteral","src":"6308:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6311:1:36","nodeType":"YulLiteral","src":"6311:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6301:6:36","nodeType":"YulIdentifier","src":"6301:6:36"},"nativeSrc":"6301:12:36","nodeType":"YulFunctionCall","src":"6301:12:36"},"nativeSrc":"6301:12:36","nodeType":"YulExpressionStatement","src":"6301:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6271:6:36","nodeType":"YulIdentifier","src":"6271:6:36"},{"kind":"number","nativeSrc":"6279:18:36","nodeType":"YulLiteral","src":"6279:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6268:2:36","nodeType":"YulIdentifier","src":"6268:2:36"},"nativeSrc":"6268:30:36","nodeType":"YulFunctionCall","src":"6268:30:36"},"nativeSrc":"6265:50:36","nodeType":"YulIf","src":"6265:50:36"},{"nativeSrc":"6324:85:36","nodeType":"YulVariableDeclaration","src":"6324:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6381:9:36","nodeType":"YulIdentifier","src":"6381:9:36"},{"name":"offset","nativeSrc":"6392:6:36","nodeType":"YulIdentifier","src":"6392:6:36"}],"functionName":{"name":"add","nativeSrc":"6377:3:36","nodeType":"YulIdentifier","src":"6377:3:36"},"nativeSrc":"6377:22:36","nodeType":"YulFunctionCall","src":"6377:22:36"},{"name":"dataEnd","nativeSrc":"6401:7:36","nodeType":"YulIdentifier","src":"6401:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"6350:26:36","nodeType":"YulIdentifier","src":"6350:26:36"},"nativeSrc":"6350:59:36","nodeType":"YulFunctionCall","src":"6350:59:36"},"variables":[{"name":"value1_1","nativeSrc":"6328:8:36","nodeType":"YulTypedName","src":"6328:8:36","type":""},{"name":"value2_1","nativeSrc":"6338:8:36","nodeType":"YulTypedName","src":"6338:8:36","type":""}]},{"nativeSrc":"6418:18:36","nodeType":"YulAssignment","src":"6418:18:36","value":{"name":"value1_1","nativeSrc":"6428:8:36","nodeType":"YulIdentifier","src":"6428:8:36"},"variableNames":[{"name":"value1","nativeSrc":"6418:6:36","nodeType":"YulIdentifier","src":"6418:6:36"}]},{"nativeSrc":"6445:18:36","nodeType":"YulAssignment","src":"6445:18:36","value":{"name":"value2_1","nativeSrc":"6455:8:36","nodeType":"YulIdentifier","src":"6455:8:36"},"variableNames":[{"name":"value2","nativeSrc":"6445:6:36","nodeType":"YulIdentifier","src":"6445:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptr","nativeSrc":"5990:479:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6047:9:36","nodeType":"YulTypedName","src":"6047:9:36","type":""},{"name":"dataEnd","nativeSrc":"6058:7:36","nodeType":"YulTypedName","src":"6058:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6070:6:36","nodeType":"YulTypedName","src":"6070:6:36","type":""},{"name":"value1","nativeSrc":"6078:6:36","nodeType":"YulTypedName","src":"6078:6:36","type":""},{"name":"value2","nativeSrc":"6086:6:36","nodeType":"YulTypedName","src":"6086:6:36","type":""}],"src":"5990:479:36"},{"body":{"nativeSrc":"6575:125:36","nodeType":"YulBlock","src":"6575:125:36","statements":[{"nativeSrc":"6585:26:36","nodeType":"YulAssignment","src":"6585:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"6597:9:36","nodeType":"YulIdentifier","src":"6597:9:36"},{"kind":"number","nativeSrc":"6608:2:36","nodeType":"YulLiteral","src":"6608:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6593:3:36","nodeType":"YulIdentifier","src":"6593:3:36"},"nativeSrc":"6593:18:36","nodeType":"YulFunctionCall","src":"6593:18:36"},"variableNames":[{"name":"tail","nativeSrc":"6585:4:36","nodeType":"YulIdentifier","src":"6585:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6627:9:36","nodeType":"YulIdentifier","src":"6627:9:36"},{"arguments":[{"name":"value0","nativeSrc":"6642:6:36","nodeType":"YulIdentifier","src":"6642:6:36"},{"kind":"number","nativeSrc":"6650:42:36","nodeType":"YulLiteral","src":"6650:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6638:3:36","nodeType":"YulIdentifier","src":"6638:3:36"},"nativeSrc":"6638:55:36","nodeType":"YulFunctionCall","src":"6638:55:36"}],"functionName":{"name":"mstore","nativeSrc":"6620:6:36","nodeType":"YulIdentifier","src":"6620:6:36"},"nativeSrc":"6620:74:36","nodeType":"YulFunctionCall","src":"6620:74:36"},"nativeSrc":"6620:74:36","nodeType":"YulExpressionStatement","src":"6620:74:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"6474:226:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6544:9:36","nodeType":"YulTypedName","src":"6544:9:36","type":""},{"name":"value0","nativeSrc":"6555:6:36","nodeType":"YulTypedName","src":"6555:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6566:4:36","nodeType":"YulTypedName","src":"6566:4:36","type":""}],"src":"6474:226:36"},{"body":{"nativeSrc":"6752:109:36","nodeType":"YulBlock","src":"6752:109:36","statements":[{"nativeSrc":"6762:29:36","nodeType":"YulAssignment","src":"6762:29:36","value":{"arguments":[{"name":"offset","nativeSrc":"6784:6:36","nodeType":"YulIdentifier","src":"6784:6:36"}],"functionName":{"name":"calldataload","nativeSrc":"6771:12:36","nodeType":"YulIdentifier","src":"6771:12:36"},"nativeSrc":"6771:20:36","nodeType":"YulFunctionCall","src":"6771:20:36"},"variableNames":[{"name":"value","nativeSrc":"6762:5:36","nodeType":"YulIdentifier","src":"6762:5:36"}]},{"body":{"nativeSrc":"6839:16:36","nodeType":"YulBlock","src":"6839:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6848:1:36","nodeType":"YulLiteral","src":"6848:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6851:1:36","nodeType":"YulLiteral","src":"6851:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6841:6:36","nodeType":"YulIdentifier","src":"6841:6:36"},"nativeSrc":"6841:12:36","nodeType":"YulFunctionCall","src":"6841:12:36"},"nativeSrc":"6841:12:36","nodeType":"YulExpressionStatement","src":"6841:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6813:5:36","nodeType":"YulIdentifier","src":"6813:5:36"},{"arguments":[{"name":"value","nativeSrc":"6824:5:36","nodeType":"YulIdentifier","src":"6824:5:36"},{"kind":"number","nativeSrc":"6831:4:36","nodeType":"YulLiteral","src":"6831:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"6820:3:36","nodeType":"YulIdentifier","src":"6820:3:36"},"nativeSrc":"6820:16:36","nodeType":"YulFunctionCall","src":"6820:16:36"}],"functionName":{"name":"eq","nativeSrc":"6810:2:36","nodeType":"YulIdentifier","src":"6810:2:36"},"nativeSrc":"6810:27:36","nodeType":"YulFunctionCall","src":"6810:27:36"}],"functionName":{"name":"iszero","nativeSrc":"6803:6:36","nodeType":"YulIdentifier","src":"6803:6:36"},"nativeSrc":"6803:35:36","nodeType":"YulFunctionCall","src":"6803:35:36"},"nativeSrc":"6800:55:36","nodeType":"YulIf","src":"6800:55:36"}]},"name":"abi_decode_uint8","nativeSrc":"6705:156:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"6731:6:36","nodeType":"YulTypedName","src":"6731:6:36","type":""}],"returnVariables":[{"name":"value","nativeSrc":"6742:5:36","nodeType":"YulTypedName","src":"6742:5:36","type":""}],"src":"6705:156:36"},{"body":{"nativeSrc":"7056:635:36","nodeType":"YulBlock","src":"7056:635:36","statements":[{"body":{"nativeSrc":"7103:16:36","nodeType":"YulBlock","src":"7103:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7112:1:36","nodeType":"YulLiteral","src":"7112:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7115:1:36","nodeType":"YulLiteral","src":"7115:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7105:6:36","nodeType":"YulIdentifier","src":"7105:6:36"},"nativeSrc":"7105:12:36","nodeType":"YulFunctionCall","src":"7105:12:36"},"nativeSrc":"7105:12:36","nodeType":"YulExpressionStatement","src":"7105:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7077:7:36","nodeType":"YulIdentifier","src":"7077:7:36"},{"name":"headStart","nativeSrc":"7086:9:36","nodeType":"YulIdentifier","src":"7086:9:36"}],"functionName":{"name":"sub","nativeSrc":"7073:3:36","nodeType":"YulIdentifier","src":"7073:3:36"},"nativeSrc":"7073:23:36","nodeType":"YulFunctionCall","src":"7073:23:36"},{"kind":"number","nativeSrc":"7098:3:36","nodeType":"YulLiteral","src":"7098:3:36","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"7069:3:36","nodeType":"YulIdentifier","src":"7069:3:36"},"nativeSrc":"7069:33:36","nodeType":"YulFunctionCall","src":"7069:33:36"},"nativeSrc":"7066:53:36","nodeType":"YulIf","src":"7066:53:36"},{"nativeSrc":"7128:33:36","nodeType":"YulAssignment","src":"7128:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"7151:9:36","nodeType":"YulIdentifier","src":"7151:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"7138:12:36","nodeType":"YulIdentifier","src":"7138:12:36"},"nativeSrc":"7138:23:36","nodeType":"YulFunctionCall","src":"7138:23:36"},"variableNames":[{"name":"value0","nativeSrc":"7128:6:36","nodeType":"YulIdentifier","src":"7128:6:36"}]},{"nativeSrc":"7170:46:36","nodeType":"YulVariableDeclaration","src":"7170:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7201:9:36","nodeType":"YulIdentifier","src":"7201:9:36"},{"kind":"number","nativeSrc":"7212:2:36","nodeType":"YulLiteral","src":"7212:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7197:3:36","nodeType":"YulIdentifier","src":"7197:3:36"},"nativeSrc":"7197:18:36","nodeType":"YulFunctionCall","src":"7197:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7184:12:36","nodeType":"YulIdentifier","src":"7184:12:36"},"nativeSrc":"7184:32:36","nodeType":"YulFunctionCall","src":"7184:32:36"},"variables":[{"name":"offset","nativeSrc":"7174:6:36","nodeType":"YulTypedName","src":"7174:6:36","type":""}]},{"body":{"nativeSrc":"7259:16:36","nodeType":"YulBlock","src":"7259:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7268:1:36","nodeType":"YulLiteral","src":"7268:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7271:1:36","nodeType":"YulLiteral","src":"7271:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7261:6:36","nodeType":"YulIdentifier","src":"7261:6:36"},"nativeSrc":"7261:12:36","nodeType":"YulFunctionCall","src":"7261:12:36"},"nativeSrc":"7261:12:36","nodeType":"YulExpressionStatement","src":"7261:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7231:6:36","nodeType":"YulIdentifier","src":"7231:6:36"},{"kind":"number","nativeSrc":"7239:18:36","nodeType":"YulLiteral","src":"7239:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7228:2:36","nodeType":"YulIdentifier","src":"7228:2:36"},"nativeSrc":"7228:30:36","nodeType":"YulFunctionCall","src":"7228:30:36"},"nativeSrc":"7225:50:36","nodeType":"YulIf","src":"7225:50:36"},{"nativeSrc":"7284:85:36","nodeType":"YulVariableDeclaration","src":"7284:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7341:9:36","nodeType":"YulIdentifier","src":"7341:9:36"},{"name":"offset","nativeSrc":"7352:6:36","nodeType":"YulIdentifier","src":"7352:6:36"}],"functionName":{"name":"add","nativeSrc":"7337:3:36","nodeType":"YulIdentifier","src":"7337:3:36"},"nativeSrc":"7337:22:36","nodeType":"YulFunctionCall","src":"7337:22:36"},{"name":"dataEnd","nativeSrc":"7361:7:36","nodeType":"YulIdentifier","src":"7361:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"7310:26:36","nodeType":"YulIdentifier","src":"7310:26:36"},"nativeSrc":"7310:59:36","nodeType":"YulFunctionCall","src":"7310:59:36"},"variables":[{"name":"value1_1","nativeSrc":"7288:8:36","nodeType":"YulTypedName","src":"7288:8:36","type":""},{"name":"value2_1","nativeSrc":"7298:8:36","nodeType":"YulTypedName","src":"7298:8:36","type":""}]},{"nativeSrc":"7378:18:36","nodeType":"YulAssignment","src":"7378:18:36","value":{"name":"value1_1","nativeSrc":"7388:8:36","nodeType":"YulIdentifier","src":"7388:8:36"},"variableNames":[{"name":"value1","nativeSrc":"7378:6:36","nodeType":"YulIdentifier","src":"7378:6:36"}]},{"nativeSrc":"7405:18:36","nodeType":"YulAssignment","src":"7405:18:36","value":{"name":"value2_1","nativeSrc":"7415:8:36","nodeType":"YulIdentifier","src":"7415:8:36"},"variableNames":[{"name":"value2","nativeSrc":"7405:6:36","nodeType":"YulIdentifier","src":"7405:6:36"}]},{"nativeSrc":"7432:42:36","nodeType":"YulAssignment","src":"7432:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7459:9:36","nodeType":"YulIdentifier","src":"7459:9:36"},{"kind":"number","nativeSrc":"7470:2:36","nodeType":"YulLiteral","src":"7470:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7455:3:36","nodeType":"YulIdentifier","src":"7455:3:36"},"nativeSrc":"7455:18:36","nodeType":"YulFunctionCall","src":"7455:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7442:12:36","nodeType":"YulIdentifier","src":"7442:12:36"},"nativeSrc":"7442:32:36","nodeType":"YulFunctionCall","src":"7442:32:36"},"variableNames":[{"name":"value3","nativeSrc":"7432:6:36","nodeType":"YulIdentifier","src":"7432:6:36"}]},{"nativeSrc":"7483:42:36","nodeType":"YulAssignment","src":"7483:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7510:9:36","nodeType":"YulIdentifier","src":"7510:9:36"},{"kind":"number","nativeSrc":"7521:2:36","nodeType":"YulLiteral","src":"7521:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7506:3:36","nodeType":"YulIdentifier","src":"7506:3:36"},"nativeSrc":"7506:18:36","nodeType":"YulFunctionCall","src":"7506:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7493:12:36","nodeType":"YulIdentifier","src":"7493:12:36"},"nativeSrc":"7493:32:36","nodeType":"YulFunctionCall","src":"7493:32:36"},"variableNames":[{"name":"value4","nativeSrc":"7483:6:36","nodeType":"YulIdentifier","src":"7483:6:36"}]},{"nativeSrc":"7534:47:36","nodeType":"YulAssignment","src":"7534:47:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7565:9:36","nodeType":"YulIdentifier","src":"7565:9:36"},{"kind":"number","nativeSrc":"7576:3:36","nodeType":"YulLiteral","src":"7576:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7561:3:36","nodeType":"YulIdentifier","src":"7561:3:36"},"nativeSrc":"7561:19:36","nodeType":"YulFunctionCall","src":"7561:19:36"}],"functionName":{"name":"abi_decode_uint8","nativeSrc":"7544:16:36","nodeType":"YulIdentifier","src":"7544:16:36"},"nativeSrc":"7544:37:36","nodeType":"YulFunctionCall","src":"7544:37:36"},"variableNames":[{"name":"value5","nativeSrc":"7534:6:36","nodeType":"YulIdentifier","src":"7534:6:36"}]},{"nativeSrc":"7590:43:36","nodeType":"YulAssignment","src":"7590:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7617:9:36","nodeType":"YulIdentifier","src":"7617:9:36"},{"kind":"number","nativeSrc":"7628:3:36","nodeType":"YulLiteral","src":"7628:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7613:3:36","nodeType":"YulIdentifier","src":"7613:3:36"},"nativeSrc":"7613:19:36","nodeType":"YulFunctionCall","src":"7613:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"7600:12:36","nodeType":"YulIdentifier","src":"7600:12:36"},"nativeSrc":"7600:33:36","nodeType":"YulFunctionCall","src":"7600:33:36"},"variableNames":[{"name":"value6","nativeSrc":"7590:6:36","nodeType":"YulIdentifier","src":"7590:6:36"}]},{"nativeSrc":"7642:43:36","nodeType":"YulAssignment","src":"7642:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7669:9:36","nodeType":"YulIdentifier","src":"7669:9:36"},{"kind":"number","nativeSrc":"7680:3:36","nodeType":"YulLiteral","src":"7680:3:36","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"7665:3:36","nodeType":"YulIdentifier","src":"7665:3:36"},"nativeSrc":"7665:19:36","nodeType":"YulFunctionCall","src":"7665:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"7652:12:36","nodeType":"YulIdentifier","src":"7652:12:36"},"nativeSrc":"7652:33:36","nodeType":"YulFunctionCall","src":"7652:33:36"},"variableNames":[{"name":"value7","nativeSrc":"7642:6:36","nodeType":"YulIdentifier","src":"7642:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32","nativeSrc":"6866:825:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6966:9:36","nodeType":"YulTypedName","src":"6966:9:36","type":""},{"name":"dataEnd","nativeSrc":"6977:7:36","nodeType":"YulTypedName","src":"6977:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6989:6:36","nodeType":"YulTypedName","src":"6989:6:36","type":""},{"name":"value1","nativeSrc":"6997:6:36","nodeType":"YulTypedName","src":"6997:6:36","type":""},{"name":"value2","nativeSrc":"7005:6:36","nodeType":"YulTypedName","src":"7005:6:36","type":""},{"name":"value3","nativeSrc":"7013:6:36","nodeType":"YulTypedName","src":"7013:6:36","type":""},{"name":"value4","nativeSrc":"7021:6:36","nodeType":"YulTypedName","src":"7021:6:36","type":""},{"name":"value5","nativeSrc":"7029:6:36","nodeType":"YulTypedName","src":"7029:6:36","type":""},{"name":"value6","nativeSrc":"7037:6:36","nodeType":"YulTypedName","src":"7037:6:36","type":""},{"name":"value7","nativeSrc":"7045:6:36","nodeType":"YulTypedName","src":"7045:6:36","type":""}],"src":"6866:825:36"},{"body":{"nativeSrc":"7871:579:36","nodeType":"YulBlock","src":"7871:579:36","statements":[{"body":{"nativeSrc":"7918:16:36","nodeType":"YulBlock","src":"7918:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7927:1:36","nodeType":"YulLiteral","src":"7927:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7930:1:36","nodeType":"YulLiteral","src":"7930:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7920:6:36","nodeType":"YulIdentifier","src":"7920:6:36"},"nativeSrc":"7920:12:36","nodeType":"YulFunctionCall","src":"7920:12:36"},"nativeSrc":"7920:12:36","nodeType":"YulExpressionStatement","src":"7920:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7892:7:36","nodeType":"YulIdentifier","src":"7892:7:36"},{"name":"headStart","nativeSrc":"7901:9:36","nodeType":"YulIdentifier","src":"7901:9:36"}],"functionName":{"name":"sub","nativeSrc":"7888:3:36","nodeType":"YulIdentifier","src":"7888:3:36"},"nativeSrc":"7888:23:36","nodeType":"YulFunctionCall","src":"7888:23:36"},{"kind":"number","nativeSrc":"7913:3:36","nodeType":"YulLiteral","src":"7913:3:36","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"7884:3:36","nodeType":"YulIdentifier","src":"7884:3:36"},"nativeSrc":"7884:33:36","nodeType":"YulFunctionCall","src":"7884:33:36"},"nativeSrc":"7881:53:36","nodeType":"YulIf","src":"7881:53:36"},{"nativeSrc":"7943:33:36","nodeType":"YulAssignment","src":"7943:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"7966:9:36","nodeType":"YulIdentifier","src":"7966:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"7953:12:36","nodeType":"YulIdentifier","src":"7953:12:36"},"nativeSrc":"7953:23:36","nodeType":"YulFunctionCall","src":"7953:23:36"},"variableNames":[{"name":"value0","nativeSrc":"7943:6:36","nodeType":"YulIdentifier","src":"7943:6:36"}]},{"nativeSrc":"7985:42:36","nodeType":"YulAssignment","src":"7985:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8012:9:36","nodeType":"YulIdentifier","src":"8012:9:36"},{"kind":"number","nativeSrc":"8023:2:36","nodeType":"YulLiteral","src":"8023:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8008:3:36","nodeType":"YulIdentifier","src":"8008:3:36"},"nativeSrc":"8008:18:36","nodeType":"YulFunctionCall","src":"8008:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7995:12:36","nodeType":"YulIdentifier","src":"7995:12:36"},"nativeSrc":"7995:32:36","nodeType":"YulFunctionCall","src":"7995:32:36"},"variableNames":[{"name":"value1","nativeSrc":"7985:6:36","nodeType":"YulIdentifier","src":"7985:6:36"}]},{"nativeSrc":"8036:46:36","nodeType":"YulVariableDeclaration","src":"8036:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8067:9:36","nodeType":"YulIdentifier","src":"8067:9:36"},{"kind":"number","nativeSrc":"8078:2:36","nodeType":"YulLiteral","src":"8078:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8063:3:36","nodeType":"YulIdentifier","src":"8063:3:36"},"nativeSrc":"8063:18:36","nodeType":"YulFunctionCall","src":"8063:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8050:12:36","nodeType":"YulIdentifier","src":"8050:12:36"},"nativeSrc":"8050:32:36","nodeType":"YulFunctionCall","src":"8050:32:36"},"variables":[{"name":"offset","nativeSrc":"8040:6:36","nodeType":"YulTypedName","src":"8040:6:36","type":""}]},{"body":{"nativeSrc":"8125:16:36","nodeType":"YulBlock","src":"8125:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8134:1:36","nodeType":"YulLiteral","src":"8134:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8137:1:36","nodeType":"YulLiteral","src":"8137:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8127:6:36","nodeType":"YulIdentifier","src":"8127:6:36"},"nativeSrc":"8127:12:36","nodeType":"YulFunctionCall","src":"8127:12:36"},"nativeSrc":"8127:12:36","nodeType":"YulExpressionStatement","src":"8127:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8097:6:36","nodeType":"YulIdentifier","src":"8097:6:36"},{"kind":"number","nativeSrc":"8105:18:36","nodeType":"YulLiteral","src":"8105:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8094:2:36","nodeType":"YulIdentifier","src":"8094:2:36"},"nativeSrc":"8094:30:36","nodeType":"YulFunctionCall","src":"8094:30:36"},"nativeSrc":"8091:50:36","nodeType":"YulIf","src":"8091:50:36"},{"nativeSrc":"8150:85:36","nodeType":"YulVariableDeclaration","src":"8150:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8207:9:36","nodeType":"YulIdentifier","src":"8207:9:36"},{"name":"offset","nativeSrc":"8218:6:36","nodeType":"YulIdentifier","src":"8218:6:36"}],"functionName":{"name":"add","nativeSrc":"8203:3:36","nodeType":"YulIdentifier","src":"8203:3:36"},"nativeSrc":"8203:22:36","nodeType":"YulFunctionCall","src":"8203:22:36"},{"name":"dataEnd","nativeSrc":"8227:7:36","nodeType":"YulIdentifier","src":"8227:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"8176:26:36","nodeType":"YulIdentifier","src":"8176:26:36"},"nativeSrc":"8176:59:36","nodeType":"YulFunctionCall","src":"8176:59:36"},"variables":[{"name":"value2_1","nativeSrc":"8154:8:36","nodeType":"YulTypedName","src":"8154:8:36","type":""},{"name":"value3_1","nativeSrc":"8164:8:36","nodeType":"YulTypedName","src":"8164:8:36","type":""}]},{"nativeSrc":"8244:18:36","nodeType":"YulAssignment","src":"8244:18:36","value":{"name":"value2_1","nativeSrc":"8254:8:36","nodeType":"YulIdentifier","src":"8254:8:36"},"variableNames":[{"name":"value2","nativeSrc":"8244:6:36","nodeType":"YulIdentifier","src":"8244:6:36"}]},{"nativeSrc":"8271:18:36","nodeType":"YulAssignment","src":"8271:18:36","value":{"name":"value3_1","nativeSrc":"8281:8:36","nodeType":"YulIdentifier","src":"8281:8:36"},"variableNames":[{"name":"value3","nativeSrc":"8271:6:36","nodeType":"YulIdentifier","src":"8271:6:36"}]},{"nativeSrc":"8298:42:36","nodeType":"YulAssignment","src":"8298:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8325:9:36","nodeType":"YulIdentifier","src":"8325:9:36"},{"kind":"number","nativeSrc":"8336:2:36","nodeType":"YulLiteral","src":"8336:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8321:3:36","nodeType":"YulIdentifier","src":"8321:3:36"},"nativeSrc":"8321:18:36","nodeType":"YulFunctionCall","src":"8321:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8308:12:36","nodeType":"YulIdentifier","src":"8308:12:36"},"nativeSrc":"8308:32:36","nodeType":"YulFunctionCall","src":"8308:32:36"},"variableNames":[{"name":"value4","nativeSrc":"8298:6:36","nodeType":"YulIdentifier","src":"8298:6:36"}]},{"nativeSrc":"8349:43:36","nodeType":"YulAssignment","src":"8349:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8376:9:36","nodeType":"YulIdentifier","src":"8376:9:36"},{"kind":"number","nativeSrc":"8387:3:36","nodeType":"YulLiteral","src":"8387:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8372:3:36","nodeType":"YulIdentifier","src":"8372:3:36"},"nativeSrc":"8372:19:36","nodeType":"YulFunctionCall","src":"8372:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"8359:12:36","nodeType":"YulIdentifier","src":"8359:12:36"},"nativeSrc":"8359:33:36","nodeType":"YulFunctionCall","src":"8359:33:36"},"variableNames":[{"name":"value5","nativeSrc":"8349:6:36","nodeType":"YulIdentifier","src":"8349:6:36"}]},{"nativeSrc":"8401:43:36","nodeType":"YulAssignment","src":"8401:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8428:9:36","nodeType":"YulIdentifier","src":"8428:9:36"},{"kind":"number","nativeSrc":"8439:3:36","nodeType":"YulLiteral","src":"8439:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"8424:3:36","nodeType":"YulIdentifier","src":"8424:3:36"},"nativeSrc":"8424:19:36","nodeType":"YulFunctionCall","src":"8424:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"8411:12:36","nodeType":"YulIdentifier","src":"8411:12:36"},"nativeSrc":"8411:33:36","nodeType":"YulFunctionCall","src":"8411:33:36"},"variableNames":[{"name":"value6","nativeSrc":"8401:6:36","nodeType":"YulIdentifier","src":"8401:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptrt_uint256t_uint256t_bytes32","nativeSrc":"7696:754:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7789:9:36","nodeType":"YulTypedName","src":"7789:9:36","type":""},{"name":"dataEnd","nativeSrc":"7800:7:36","nodeType":"YulTypedName","src":"7800:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7812:6:36","nodeType":"YulTypedName","src":"7812:6:36","type":""},{"name":"value1","nativeSrc":"7820:6:36","nodeType":"YulTypedName","src":"7820:6:36","type":""},{"name":"value2","nativeSrc":"7828:6:36","nodeType":"YulTypedName","src":"7828:6:36","type":""},{"name":"value3","nativeSrc":"7836:6:36","nodeType":"YulTypedName","src":"7836:6:36","type":""},{"name":"value4","nativeSrc":"7844:6:36","nodeType":"YulTypedName","src":"7844:6:36","type":""},{"name":"value5","nativeSrc":"7852:6:36","nodeType":"YulTypedName","src":"7852:6:36","type":""},{"name":"value6","nativeSrc":"7860:6:36","nodeType":"YulTypedName","src":"7860:6:36","type":""}],"src":"7696:754:36"},{"body":{"nativeSrc":"8542:161:36","nodeType":"YulBlock","src":"8542:161:36","statements":[{"body":{"nativeSrc":"8588:16:36","nodeType":"YulBlock","src":"8588:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8597:1:36","nodeType":"YulLiteral","src":"8597:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8600:1:36","nodeType":"YulLiteral","src":"8600:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8590:6:36","nodeType":"YulIdentifier","src":"8590:6:36"},"nativeSrc":"8590:12:36","nodeType":"YulFunctionCall","src":"8590:12:36"},"nativeSrc":"8590:12:36","nodeType":"YulExpressionStatement","src":"8590:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8563:7:36","nodeType":"YulIdentifier","src":"8563:7:36"},{"name":"headStart","nativeSrc":"8572:9:36","nodeType":"YulIdentifier","src":"8572:9:36"}],"functionName":{"name":"sub","nativeSrc":"8559:3:36","nodeType":"YulIdentifier","src":"8559:3:36"},"nativeSrc":"8559:23:36","nodeType":"YulFunctionCall","src":"8559:23:36"},{"kind":"number","nativeSrc":"8584:2:36","nodeType":"YulLiteral","src":"8584:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8555:3:36","nodeType":"YulIdentifier","src":"8555:3:36"},"nativeSrc":"8555:32:36","nodeType":"YulFunctionCall","src":"8555:32:36"},"nativeSrc":"8552:52:36","nodeType":"YulIf","src":"8552:52:36"},{"nativeSrc":"8613:33:36","nodeType":"YulAssignment","src":"8613:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"8636:9:36","nodeType":"YulIdentifier","src":"8636:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"8623:12:36","nodeType":"YulIdentifier","src":"8623:12:36"},"nativeSrc":"8623:23:36","nodeType":"YulFunctionCall","src":"8623:23:36"},"variableNames":[{"name":"value0","nativeSrc":"8613:6:36","nodeType":"YulIdentifier","src":"8613:6:36"}]},{"nativeSrc":"8655:42:36","nodeType":"YulAssignment","src":"8655:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8682:9:36","nodeType":"YulIdentifier","src":"8682:9:36"},{"kind":"number","nativeSrc":"8693:2:36","nodeType":"YulLiteral","src":"8693:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8678:3:36","nodeType":"YulIdentifier","src":"8678:3:36"},"nativeSrc":"8678:18:36","nodeType":"YulFunctionCall","src":"8678:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8665:12:36","nodeType":"YulIdentifier","src":"8665:12:36"},"nativeSrc":"8665:32:36","nodeType":"YulFunctionCall","src":"8665:32:36"},"variableNames":[{"name":"value1","nativeSrc":"8655:6:36","nodeType":"YulIdentifier","src":"8655:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nativeSrc":"8455:248:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8500:9:36","nodeType":"YulTypedName","src":"8500:9:36","type":""},{"name":"dataEnd","nativeSrc":"8511:7:36","nodeType":"YulTypedName","src":"8511:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8523:6:36","nodeType":"YulTypedName","src":"8523:6:36","type":""},{"name":"value1","nativeSrc":"8531:6:36","nodeType":"YulTypedName","src":"8531:6:36","type":""}],"src":"8455:248:36"},{"body":{"nativeSrc":"8812:212:36","nodeType":"YulBlock","src":"8812:212:36","statements":[{"body":{"nativeSrc":"8858:16:36","nodeType":"YulBlock","src":"8858:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8867:1:36","nodeType":"YulLiteral","src":"8867:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8870:1:36","nodeType":"YulLiteral","src":"8870:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8860:6:36","nodeType":"YulIdentifier","src":"8860:6:36"},"nativeSrc":"8860:12:36","nodeType":"YulFunctionCall","src":"8860:12:36"},"nativeSrc":"8860:12:36","nodeType":"YulExpressionStatement","src":"8860:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8833:7:36","nodeType":"YulIdentifier","src":"8833:7:36"},{"name":"headStart","nativeSrc":"8842:9:36","nodeType":"YulIdentifier","src":"8842:9:36"}],"functionName":{"name":"sub","nativeSrc":"8829:3:36","nodeType":"YulIdentifier","src":"8829:3:36"},"nativeSrc":"8829:23:36","nodeType":"YulFunctionCall","src":"8829:23:36"},{"kind":"number","nativeSrc":"8854:2:36","nodeType":"YulLiteral","src":"8854:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"8825:3:36","nodeType":"YulIdentifier","src":"8825:3:36"},"nativeSrc":"8825:32:36","nodeType":"YulFunctionCall","src":"8825:32:36"},"nativeSrc":"8822:52:36","nodeType":"YulIf","src":"8822:52:36"},{"nativeSrc":"8883:33:36","nodeType":"YulAssignment","src":"8883:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"8906:9:36","nodeType":"YulIdentifier","src":"8906:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"8893:12:36","nodeType":"YulIdentifier","src":"8893:12:36"},"nativeSrc":"8893:23:36","nodeType":"YulFunctionCall","src":"8893:23:36"},"variableNames":[{"name":"value0","nativeSrc":"8883:6:36","nodeType":"YulIdentifier","src":"8883:6:36"}]},{"nativeSrc":"8925:42:36","nodeType":"YulAssignment","src":"8925:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8952:9:36","nodeType":"YulIdentifier","src":"8952:9:36"},{"kind":"number","nativeSrc":"8963:2:36","nodeType":"YulLiteral","src":"8963:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8948:3:36","nodeType":"YulIdentifier","src":"8948:3:36"},"nativeSrc":"8948:18:36","nodeType":"YulFunctionCall","src":"8948:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8935:12:36","nodeType":"YulIdentifier","src":"8935:12:36"},"nativeSrc":"8935:32:36","nodeType":"YulFunctionCall","src":"8935:32:36"},"variableNames":[{"name":"value1","nativeSrc":"8925:6:36","nodeType":"YulIdentifier","src":"8925:6:36"}]},{"nativeSrc":"8976:42:36","nodeType":"YulAssignment","src":"8976:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9003:9:36","nodeType":"YulIdentifier","src":"9003:9:36"},{"kind":"number","nativeSrc":"9014:2:36","nodeType":"YulLiteral","src":"9014:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8999:3:36","nodeType":"YulIdentifier","src":"8999:3:36"},"nativeSrc":"8999:18:36","nodeType":"YulFunctionCall","src":"8999:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8986:12:36","nodeType":"YulIdentifier","src":"8986:12:36"},"nativeSrc":"8986:32:36","nodeType":"YulFunctionCall","src":"8986:32:36"},"variableNames":[{"name":"value2","nativeSrc":"8976:6:36","nodeType":"YulIdentifier","src":"8976:6:36"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes32","nativeSrc":"8708:316:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8762:9:36","nodeType":"YulTypedName","src":"8762:9:36","type":""},{"name":"dataEnd","nativeSrc":"8773:7:36","nodeType":"YulTypedName","src":"8773:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8785:6:36","nodeType":"YulTypedName","src":"8785:6:36","type":""},{"name":"value1","nativeSrc":"8793:6:36","nodeType":"YulTypedName","src":"8793:6:36","type":""},{"name":"value2","nativeSrc":"8801:6:36","nodeType":"YulTypedName","src":"8801:6:36","type":""}],"src":"8708:316:36"},{"body":{"nativeSrc":"9182:372:36","nodeType":"YulBlock","src":"9182:372:36","statements":[{"body":{"nativeSrc":"9229:16:36","nodeType":"YulBlock","src":"9229:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9238:1:36","nodeType":"YulLiteral","src":"9238:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9241:1:36","nodeType":"YulLiteral","src":"9241:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9231:6:36","nodeType":"YulIdentifier","src":"9231:6:36"},"nativeSrc":"9231:12:36","nodeType":"YulFunctionCall","src":"9231:12:36"},"nativeSrc":"9231:12:36","nodeType":"YulExpressionStatement","src":"9231:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9203:7:36","nodeType":"YulIdentifier","src":"9203:7:36"},{"name":"headStart","nativeSrc":"9212:9:36","nodeType":"YulIdentifier","src":"9212:9:36"}],"functionName":{"name":"sub","nativeSrc":"9199:3:36","nodeType":"YulIdentifier","src":"9199:3:36"},"nativeSrc":"9199:23:36","nodeType":"YulFunctionCall","src":"9199:23:36"},{"kind":"number","nativeSrc":"9224:3:36","nodeType":"YulLiteral","src":"9224:3:36","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"9195:3:36","nodeType":"YulIdentifier","src":"9195:3:36"},"nativeSrc":"9195:33:36","nodeType":"YulFunctionCall","src":"9195:33:36"},"nativeSrc":"9192:53:36","nodeType":"YulIf","src":"9192:53:36"},{"nativeSrc":"9254:33:36","nodeType":"YulAssignment","src":"9254:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"9277:9:36","nodeType":"YulIdentifier","src":"9277:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"9264:12:36","nodeType":"YulIdentifier","src":"9264:12:36"},"nativeSrc":"9264:23:36","nodeType":"YulFunctionCall","src":"9264:23:36"},"variableNames":[{"name":"value0","nativeSrc":"9254:6:36","nodeType":"YulIdentifier","src":"9254:6:36"}]},{"nativeSrc":"9296:42:36","nodeType":"YulAssignment","src":"9296:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9323:9:36","nodeType":"YulIdentifier","src":"9323:9:36"},{"kind":"number","nativeSrc":"9334:2:36","nodeType":"YulLiteral","src":"9334:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9319:3:36","nodeType":"YulIdentifier","src":"9319:3:36"},"nativeSrc":"9319:18:36","nodeType":"YulFunctionCall","src":"9319:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9306:12:36","nodeType":"YulIdentifier","src":"9306:12:36"},"nativeSrc":"9306:32:36","nodeType":"YulFunctionCall","src":"9306:32:36"},"variableNames":[{"name":"value1","nativeSrc":"9296:6:36","nodeType":"YulIdentifier","src":"9296:6:36"}]},{"nativeSrc":"9347:42:36","nodeType":"YulAssignment","src":"9347:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9374:9:36","nodeType":"YulIdentifier","src":"9374:9:36"},{"kind":"number","nativeSrc":"9385:2:36","nodeType":"YulLiteral","src":"9385:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9370:3:36","nodeType":"YulIdentifier","src":"9370:3:36"},"nativeSrc":"9370:18:36","nodeType":"YulFunctionCall","src":"9370:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9357:12:36","nodeType":"YulIdentifier","src":"9357:12:36"},"nativeSrc":"9357:32:36","nodeType":"YulFunctionCall","src":"9357:32:36"},"variableNames":[{"name":"value2","nativeSrc":"9347:6:36","nodeType":"YulIdentifier","src":"9347:6:36"}]},{"nativeSrc":"9398:46:36","nodeType":"YulAssignment","src":"9398:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9429:9:36","nodeType":"YulIdentifier","src":"9429:9:36"},{"kind":"number","nativeSrc":"9440:2:36","nodeType":"YulLiteral","src":"9440:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9425:3:36","nodeType":"YulIdentifier","src":"9425:3:36"},"nativeSrc":"9425:18:36","nodeType":"YulFunctionCall","src":"9425:18:36"}],"functionName":{"name":"abi_decode_uint8","nativeSrc":"9408:16:36","nodeType":"YulIdentifier","src":"9408:16:36"},"nativeSrc":"9408:36:36","nodeType":"YulFunctionCall","src":"9408:36:36"},"variableNames":[{"name":"value3","nativeSrc":"9398:6:36","nodeType":"YulIdentifier","src":"9398:6:36"}]},{"nativeSrc":"9453:43:36","nodeType":"YulAssignment","src":"9453:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9480:9:36","nodeType":"YulIdentifier","src":"9480:9:36"},{"kind":"number","nativeSrc":"9491:3:36","nodeType":"YulLiteral","src":"9491:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9476:3:36","nodeType":"YulIdentifier","src":"9476:3:36"},"nativeSrc":"9476:19:36","nodeType":"YulFunctionCall","src":"9476:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"9463:12:36","nodeType":"YulIdentifier","src":"9463:12:36"},"nativeSrc":"9463:33:36","nodeType":"YulFunctionCall","src":"9463:33:36"},"variableNames":[{"name":"value4","nativeSrc":"9453:6:36","nodeType":"YulIdentifier","src":"9453:6:36"}]},{"nativeSrc":"9505:43:36","nodeType":"YulAssignment","src":"9505:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9532:9:36","nodeType":"YulIdentifier","src":"9532:9:36"},{"kind":"number","nativeSrc":"9543:3:36","nodeType":"YulLiteral","src":"9543:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"9528:3:36","nodeType":"YulIdentifier","src":"9528:3:36"},"nativeSrc":"9528:19:36","nodeType":"YulFunctionCall","src":"9528:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"9515:12:36","nodeType":"YulIdentifier","src":"9515:12:36"},"nativeSrc":"9515:33:36","nodeType":"YulFunctionCall","src":"9515:33:36"},"variableNames":[{"name":"value5","nativeSrc":"9505:6:36","nodeType":"YulIdentifier","src":"9505:6:36"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32","nativeSrc":"9029:525:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9108:9:36","nodeType":"YulTypedName","src":"9108:9:36","type":""},{"name":"dataEnd","nativeSrc":"9119:7:36","nodeType":"YulTypedName","src":"9119:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9131:6:36","nodeType":"YulTypedName","src":"9131:6:36","type":""},{"name":"value1","nativeSrc":"9139:6:36","nodeType":"YulTypedName","src":"9139:6:36","type":""},{"name":"value2","nativeSrc":"9147:6:36","nodeType":"YulTypedName","src":"9147:6:36","type":""},{"name":"value3","nativeSrc":"9155:6:36","nodeType":"YulTypedName","src":"9155:6:36","type":""},{"name":"value4","nativeSrc":"9163:6:36","nodeType":"YulTypedName","src":"9163:6:36","type":""},{"name":"value5","nativeSrc":"9171:6:36","nodeType":"YulTypedName","src":"9171:6:36","type":""}],"src":"9029:525:36"},{"body":{"nativeSrc":"9700:475:36","nodeType":"YulBlock","src":"9700:475:36","statements":[{"body":{"nativeSrc":"9747:16:36","nodeType":"YulBlock","src":"9747:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9756:1:36","nodeType":"YulLiteral","src":"9756:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9759:1:36","nodeType":"YulLiteral","src":"9759:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9749:6:36","nodeType":"YulIdentifier","src":"9749:6:36"},"nativeSrc":"9749:12:36","nodeType":"YulFunctionCall","src":"9749:12:36"},"nativeSrc":"9749:12:36","nodeType":"YulExpressionStatement","src":"9749:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9721:7:36","nodeType":"YulIdentifier","src":"9721:7:36"},{"name":"headStart","nativeSrc":"9730:9:36","nodeType":"YulIdentifier","src":"9730:9:36"}],"functionName":{"name":"sub","nativeSrc":"9717:3:36","nodeType":"YulIdentifier","src":"9717:3:36"},"nativeSrc":"9717:23:36","nodeType":"YulFunctionCall","src":"9717:23:36"},{"kind":"number","nativeSrc":"9742:3:36","nodeType":"YulLiteral","src":"9742:3:36","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9713:3:36","nodeType":"YulIdentifier","src":"9713:3:36"},"nativeSrc":"9713:33:36","nodeType":"YulFunctionCall","src":"9713:33:36"},"nativeSrc":"9710:53:36","nodeType":"YulIf","src":"9710:53:36"},{"nativeSrc":"9772:33:36","nodeType":"YulAssignment","src":"9772:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"9795:9:36","nodeType":"YulIdentifier","src":"9795:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"9782:12:36","nodeType":"YulIdentifier","src":"9782:12:36"},"nativeSrc":"9782:23:36","nodeType":"YulFunctionCall","src":"9782:23:36"},"variableNames":[{"name":"value0","nativeSrc":"9772:6:36","nodeType":"YulIdentifier","src":"9772:6:36"}]},{"nativeSrc":"9814:46:36","nodeType":"YulVariableDeclaration","src":"9814:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9845:9:36","nodeType":"YulIdentifier","src":"9845:9:36"},{"kind":"number","nativeSrc":"9856:2:36","nodeType":"YulLiteral","src":"9856:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9841:3:36","nodeType":"YulIdentifier","src":"9841:3:36"},"nativeSrc":"9841:18:36","nodeType":"YulFunctionCall","src":"9841:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9828:12:36","nodeType":"YulIdentifier","src":"9828:12:36"},"nativeSrc":"9828:32:36","nodeType":"YulFunctionCall","src":"9828:32:36"},"variables":[{"name":"offset","nativeSrc":"9818:6:36","nodeType":"YulTypedName","src":"9818:6:36","type":""}]},{"body":{"nativeSrc":"9903:16:36","nodeType":"YulBlock","src":"9903:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9912:1:36","nodeType":"YulLiteral","src":"9912:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9915:1:36","nodeType":"YulLiteral","src":"9915:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9905:6:36","nodeType":"YulIdentifier","src":"9905:6:36"},"nativeSrc":"9905:12:36","nodeType":"YulFunctionCall","src":"9905:12:36"},"nativeSrc":"9905:12:36","nodeType":"YulExpressionStatement","src":"9905:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9875:6:36","nodeType":"YulIdentifier","src":"9875:6:36"},{"kind":"number","nativeSrc":"9883:18:36","nodeType":"YulLiteral","src":"9883:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9872:2:36","nodeType":"YulIdentifier","src":"9872:2:36"},"nativeSrc":"9872:30:36","nodeType":"YulFunctionCall","src":"9872:30:36"},"nativeSrc":"9869:50:36","nodeType":"YulIf","src":"9869:50:36"},{"nativeSrc":"9928:85:36","nodeType":"YulVariableDeclaration","src":"9928:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9985:9:36","nodeType":"YulIdentifier","src":"9985:9:36"},{"name":"offset","nativeSrc":"9996:6:36","nodeType":"YulIdentifier","src":"9996:6:36"}],"functionName":{"name":"add","nativeSrc":"9981:3:36","nodeType":"YulIdentifier","src":"9981:3:36"},"nativeSrc":"9981:22:36","nodeType":"YulFunctionCall","src":"9981:22:36"},{"name":"dataEnd","nativeSrc":"10005:7:36","nodeType":"YulIdentifier","src":"10005:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"9954:26:36","nodeType":"YulIdentifier","src":"9954:26:36"},"nativeSrc":"9954:59:36","nodeType":"YulFunctionCall","src":"9954:59:36"},"variables":[{"name":"value1_1","nativeSrc":"9932:8:36","nodeType":"YulTypedName","src":"9932:8:36","type":""},{"name":"value2_1","nativeSrc":"9942:8:36","nodeType":"YulTypedName","src":"9942:8:36","type":""}]},{"nativeSrc":"10022:18:36","nodeType":"YulAssignment","src":"10022:18:36","value":{"name":"value1_1","nativeSrc":"10032:8:36","nodeType":"YulIdentifier","src":"10032:8:36"},"variableNames":[{"name":"value1","nativeSrc":"10022:6:36","nodeType":"YulIdentifier","src":"10022:6:36"}]},{"nativeSrc":"10049:18:36","nodeType":"YulAssignment","src":"10049:18:36","value":{"name":"value2_1","nativeSrc":"10059:8:36","nodeType":"YulIdentifier","src":"10059:8:36"},"variableNames":[{"name":"value2","nativeSrc":"10049:6:36","nodeType":"YulIdentifier","src":"10049:6:36"}]},{"nativeSrc":"10076:42:36","nodeType":"YulAssignment","src":"10076:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10103:9:36","nodeType":"YulIdentifier","src":"10103:9:36"},{"kind":"number","nativeSrc":"10114:2:36","nodeType":"YulLiteral","src":"10114:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10099:3:36","nodeType":"YulIdentifier","src":"10099:3:36"},"nativeSrc":"10099:18:36","nodeType":"YulFunctionCall","src":"10099:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"10086:12:36","nodeType":"YulIdentifier","src":"10086:12:36"},"nativeSrc":"10086:32:36","nodeType":"YulFunctionCall","src":"10086:32:36"},"variableNames":[{"name":"value3","nativeSrc":"10076:6:36","nodeType":"YulIdentifier","src":"10076:6:36"}]},{"nativeSrc":"10127:42:36","nodeType":"YulAssignment","src":"10127:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10154:9:36","nodeType":"YulIdentifier","src":"10154:9:36"},{"kind":"number","nativeSrc":"10165:2:36","nodeType":"YulLiteral","src":"10165:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10150:3:36","nodeType":"YulIdentifier","src":"10150:3:36"},"nativeSrc":"10150:18:36","nodeType":"YulFunctionCall","src":"10150:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"10137:12:36","nodeType":"YulIdentifier","src":"10137:12:36"},"nativeSrc":"10137:32:36","nodeType":"YulFunctionCall","src":"10137:32:36"},"variableNames":[{"name":"value4","nativeSrc":"10127:6:36","nodeType":"YulIdentifier","src":"10127:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32","nativeSrc":"9559:616:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9634:9:36","nodeType":"YulTypedName","src":"9634:9:36","type":""},{"name":"dataEnd","nativeSrc":"9645:7:36","nodeType":"YulTypedName","src":"9645:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9657:6:36","nodeType":"YulTypedName","src":"9657:6:36","type":""},{"name":"value1","nativeSrc":"9665:6:36","nodeType":"YulTypedName","src":"9665:6:36","type":""},{"name":"value2","nativeSrc":"9673:6:36","nodeType":"YulTypedName","src":"9673:6:36","type":""},{"name":"value3","nativeSrc":"9681:6:36","nodeType":"YulTypedName","src":"9681:6:36","type":""},{"name":"value4","nativeSrc":"9689:6:36","nodeType":"YulTypedName","src":"9689:6:36","type":""}],"src":"9559:616:36"},{"body":{"nativeSrc":"10339:363:36","nodeType":"YulBlock","src":"10339:363:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10356:9:36","nodeType":"YulIdentifier","src":"10356:9:36"},{"kind":"number","nativeSrc":"10367:2:36","nodeType":"YulLiteral","src":"10367:2:36","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"10349:6:36","nodeType":"YulIdentifier","src":"10349:6:36"},"nativeSrc":"10349:21:36","nodeType":"YulFunctionCall","src":"10349:21:36"},"nativeSrc":"10349:21:36","nodeType":"YulExpressionStatement","src":"10349:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10390:9:36","nodeType":"YulIdentifier","src":"10390:9:36"},{"kind":"number","nativeSrc":"10401:2:36","nodeType":"YulLiteral","src":"10401:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10386:3:36","nodeType":"YulIdentifier","src":"10386:3:36"},"nativeSrc":"10386:18:36","nodeType":"YulFunctionCall","src":"10386:18:36"},{"name":"value1","nativeSrc":"10406:6:36","nodeType":"YulIdentifier","src":"10406:6:36"}],"functionName":{"name":"mstore","nativeSrc":"10379:6:36","nodeType":"YulIdentifier","src":"10379:6:36"},"nativeSrc":"10379:34:36","nodeType":"YulFunctionCall","src":"10379:34:36"},"nativeSrc":"10379:34:36","nodeType":"YulExpressionStatement","src":"10379:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10439:9:36","nodeType":"YulIdentifier","src":"10439:9:36"},{"kind":"number","nativeSrc":"10450:2:36","nodeType":"YulLiteral","src":"10450:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10435:3:36","nodeType":"YulIdentifier","src":"10435:3:36"},"nativeSrc":"10435:18:36","nodeType":"YulFunctionCall","src":"10435:18:36"},{"name":"value0","nativeSrc":"10455:6:36","nodeType":"YulIdentifier","src":"10455:6:36"},{"name":"value1","nativeSrc":"10463:6:36","nodeType":"YulIdentifier","src":"10463:6:36"}],"functionName":{"name":"calldatacopy","nativeSrc":"10422:12:36","nodeType":"YulIdentifier","src":"10422:12:36"},"nativeSrc":"10422:48:36","nodeType":"YulFunctionCall","src":"10422:48:36"},"nativeSrc":"10422:48:36","nodeType":"YulExpressionStatement","src":"10422:48:36"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10494:9:36","nodeType":"YulIdentifier","src":"10494:9:36"},{"name":"value1","nativeSrc":"10505:6:36","nodeType":"YulIdentifier","src":"10505:6:36"}],"functionName":{"name":"add","nativeSrc":"10490:3:36","nodeType":"YulIdentifier","src":"10490:3:36"},"nativeSrc":"10490:22:36","nodeType":"YulFunctionCall","src":"10490:22:36"},{"kind":"number","nativeSrc":"10514:2:36","nodeType":"YulLiteral","src":"10514:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10486:3:36","nodeType":"YulIdentifier","src":"10486:3:36"},"nativeSrc":"10486:31:36","nodeType":"YulFunctionCall","src":"10486:31:36"},{"kind":"number","nativeSrc":"10519:1:36","nodeType":"YulLiteral","src":"10519:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"10479:6:36","nodeType":"YulIdentifier","src":"10479:6:36"},"nativeSrc":"10479:42:36","nodeType":"YulFunctionCall","src":"10479:42:36"},"nativeSrc":"10479:42:36","nodeType":"YulExpressionStatement","src":"10479:42:36"},{"nativeSrc":"10530:121:36","nodeType":"YulAssignment","src":"10530:121:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10546:9:36","nodeType":"YulIdentifier","src":"10546:9:36"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"10565:6:36","nodeType":"YulIdentifier","src":"10565:6:36"},{"kind":"number","nativeSrc":"10573:2:36","nodeType":"YulLiteral","src":"10573:2:36","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"10561:3:36","nodeType":"YulIdentifier","src":"10561:3:36"},"nativeSrc":"10561:15:36","nodeType":"YulFunctionCall","src":"10561:15:36"},{"kind":"number","nativeSrc":"10578:66:36","nodeType":"YulLiteral","src":"10578:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"10557:3:36","nodeType":"YulIdentifier","src":"10557:3:36"},"nativeSrc":"10557:88:36","nodeType":"YulFunctionCall","src":"10557:88:36"}],"functionName":{"name":"add","nativeSrc":"10542:3:36","nodeType":"YulIdentifier","src":"10542:3:36"},"nativeSrc":"10542:104:36","nodeType":"YulFunctionCall","src":"10542:104:36"},{"kind":"number","nativeSrc":"10648:2:36","nodeType":"YulLiteral","src":"10648:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10538:3:36","nodeType":"YulIdentifier","src":"10538:3:36"},"nativeSrc":"10538:113:36","nodeType":"YulFunctionCall","src":"10538:113:36"},"variableNames":[{"name":"tail","nativeSrc":"10530:4:36","nodeType":"YulIdentifier","src":"10530:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10671:9:36","nodeType":"YulIdentifier","src":"10671:9:36"},{"kind":"number","nativeSrc":"10682:4:36","nodeType":"YulLiteral","src":"10682:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10667:3:36","nodeType":"YulIdentifier","src":"10667:3:36"},"nativeSrc":"10667:20:36","nodeType":"YulFunctionCall","src":"10667:20:36"},{"name":"value2","nativeSrc":"10689:6:36","nodeType":"YulIdentifier","src":"10689:6:36"}],"functionName":{"name":"mstore","nativeSrc":"10660:6:36","nodeType":"YulIdentifier","src":"10660:6:36"},"nativeSrc":"10660:36:36","nodeType":"YulFunctionCall","src":"10660:36:36"},"nativeSrc":"10660:36:36","nodeType":"YulExpressionStatement","src":"10660:36:36"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed","nativeSrc":"10180:522:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10292:9:36","nodeType":"YulTypedName","src":"10292:9:36","type":""},{"name":"value2","nativeSrc":"10303:6:36","nodeType":"YulTypedName","src":"10303:6:36","type":""},{"name":"value1","nativeSrc":"10311:6:36","nodeType":"YulTypedName","src":"10311:6:36","type":""},{"name":"value0","nativeSrc":"10319:6:36","nodeType":"YulTypedName","src":"10319:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10330:4:36","nodeType":"YulTypedName","src":"10330:4:36","type":""}],"src":"10180:522:36"},{"body":{"nativeSrc":"10788:103:36","nodeType":"YulBlock","src":"10788:103:36","statements":[{"body":{"nativeSrc":"10834:16:36","nodeType":"YulBlock","src":"10834:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10843:1:36","nodeType":"YulLiteral","src":"10843:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"10846:1:36","nodeType":"YulLiteral","src":"10846:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10836:6:36","nodeType":"YulIdentifier","src":"10836:6:36"},"nativeSrc":"10836:12:36","nodeType":"YulFunctionCall","src":"10836:12:36"},"nativeSrc":"10836:12:36","nodeType":"YulExpressionStatement","src":"10836:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10809:7:36","nodeType":"YulIdentifier","src":"10809:7:36"},{"name":"headStart","nativeSrc":"10818:9:36","nodeType":"YulIdentifier","src":"10818:9:36"}],"functionName":{"name":"sub","nativeSrc":"10805:3:36","nodeType":"YulIdentifier","src":"10805:3:36"},"nativeSrc":"10805:23:36","nodeType":"YulFunctionCall","src":"10805:23:36"},{"kind":"number","nativeSrc":"10830:2:36","nodeType":"YulLiteral","src":"10830:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10801:3:36","nodeType":"YulIdentifier","src":"10801:3:36"},"nativeSrc":"10801:32:36","nodeType":"YulFunctionCall","src":"10801:32:36"},"nativeSrc":"10798:52:36","nodeType":"YulIf","src":"10798:52:36"},{"nativeSrc":"10859:26:36","nodeType":"YulAssignment","src":"10859:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"10875:9:36","nodeType":"YulIdentifier","src":"10875:9:36"}],"functionName":{"name":"mload","nativeSrc":"10869:5:36","nodeType":"YulIdentifier","src":"10869:5:36"},"nativeSrc":"10869:16:36","nodeType":"YulFunctionCall","src":"10869:16:36"},"variableNames":[{"name":"value0","nativeSrc":"10859:6:36","nodeType":"YulIdentifier","src":"10859:6:36"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"10707:184:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10754:9:36","nodeType":"YulTypedName","src":"10754:9:36","type":""},{"name":"dataEnd","nativeSrc":"10765:7:36","nodeType":"YulTypedName","src":"10765:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10777:6:36","nodeType":"YulTypedName","src":"10777:6:36","type":""}],"src":"10707:184:36"},{"body":{"nativeSrc":"10977:170:36","nodeType":"YulBlock","src":"10977:170:36","statements":[{"body":{"nativeSrc":"11023:16:36","nodeType":"YulBlock","src":"11023:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11032:1:36","nodeType":"YulLiteral","src":"11032:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"11035:1:36","nodeType":"YulLiteral","src":"11035:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11025:6:36","nodeType":"YulIdentifier","src":"11025:6:36"},"nativeSrc":"11025:12:36","nodeType":"YulFunctionCall","src":"11025:12:36"},"nativeSrc":"11025:12:36","nodeType":"YulExpressionStatement","src":"11025:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10998:7:36","nodeType":"YulIdentifier","src":"10998:7:36"},{"name":"headStart","nativeSrc":"11007:9:36","nodeType":"YulIdentifier","src":"11007:9:36"}],"functionName":{"name":"sub","nativeSrc":"10994:3:36","nodeType":"YulIdentifier","src":"10994:3:36"},"nativeSrc":"10994:23:36","nodeType":"YulFunctionCall","src":"10994:23:36"},{"kind":"number","nativeSrc":"11019:2:36","nodeType":"YulLiteral","src":"11019:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10990:3:36","nodeType":"YulIdentifier","src":"10990:3:36"},"nativeSrc":"10990:32:36","nodeType":"YulFunctionCall","src":"10990:32:36"},"nativeSrc":"10987:52:36","nodeType":"YulIf","src":"10987:52:36"},{"nativeSrc":"11048:29:36","nodeType":"YulVariableDeclaration","src":"11048:29:36","value":{"arguments":[{"name":"headStart","nativeSrc":"11067:9:36","nodeType":"YulIdentifier","src":"11067:9:36"}],"functionName":{"name":"mload","nativeSrc":"11061:5:36","nodeType":"YulIdentifier","src":"11061:5:36"},"nativeSrc":"11061:16:36","nodeType":"YulFunctionCall","src":"11061:16:36"},"variables":[{"name":"value","nativeSrc":"11052:5:36","nodeType":"YulTypedName","src":"11052:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11111:5:36","nodeType":"YulIdentifier","src":"11111:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11086:24:36","nodeType":"YulIdentifier","src":"11086:24:36"},"nativeSrc":"11086:31:36","nodeType":"YulFunctionCall","src":"11086:31:36"},"nativeSrc":"11086:31:36","nodeType":"YulExpressionStatement","src":"11086:31:36"},{"nativeSrc":"11126:15:36","nodeType":"YulAssignment","src":"11126:15:36","value":{"name":"value","nativeSrc":"11136:5:36","nodeType":"YulIdentifier","src":"11136:5:36"},"variableNames":[{"name":"value0","nativeSrc":"11126:6:36","nodeType":"YulIdentifier","src":"11126:6:36"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"10896:251:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10943:9:36","nodeType":"YulTypedName","src":"10943:9:36","type":""},{"name":"dataEnd","nativeSrc":"10954:7:36","nodeType":"YulTypedName","src":"10954:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10966:6:36","nodeType":"YulTypedName","src":"10966:6:36","type":""}],"src":"10896:251:36"},{"body":{"nativeSrc":"11281:119:36","nodeType":"YulBlock","src":"11281:119:36","statements":[{"nativeSrc":"11291:26:36","nodeType":"YulAssignment","src":"11291:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"11303:9:36","nodeType":"YulIdentifier","src":"11303:9:36"},{"kind":"number","nativeSrc":"11314:2:36","nodeType":"YulLiteral","src":"11314:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11299:3:36","nodeType":"YulIdentifier","src":"11299:3:36"},"nativeSrc":"11299:18:36","nodeType":"YulFunctionCall","src":"11299:18:36"},"variableNames":[{"name":"tail","nativeSrc":"11291:4:36","nodeType":"YulIdentifier","src":"11291:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11333:9:36","nodeType":"YulIdentifier","src":"11333:9:36"},{"name":"value0","nativeSrc":"11344:6:36","nodeType":"YulIdentifier","src":"11344:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11326:6:36","nodeType":"YulIdentifier","src":"11326:6:36"},"nativeSrc":"11326:25:36","nodeType":"YulFunctionCall","src":"11326:25:36"},"nativeSrc":"11326:25:36","nodeType":"YulExpressionStatement","src":"11326:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11371:9:36","nodeType":"YulIdentifier","src":"11371:9:36"},{"kind":"number","nativeSrc":"11382:2:36","nodeType":"YulLiteral","src":"11382:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11367:3:36","nodeType":"YulIdentifier","src":"11367:3:36"},"nativeSrc":"11367:18:36","nodeType":"YulFunctionCall","src":"11367:18:36"},{"name":"value1","nativeSrc":"11387:6:36","nodeType":"YulIdentifier","src":"11387:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11360:6:36","nodeType":"YulIdentifier","src":"11360:6:36"},"nativeSrc":"11360:34:36","nodeType":"YulFunctionCall","src":"11360:34:36"},"nativeSrc":"11360:34:36","nodeType":"YulExpressionStatement","src":"11360:34:36"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11152:248:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11242:9:36","nodeType":"YulTypedName","src":"11242:9:36","type":""},{"name":"value1","nativeSrc":"11253:6:36","nodeType":"YulTypedName","src":"11253:6:36","type":""},{"name":"value0","nativeSrc":"11261:6:36","nodeType":"YulTypedName","src":"11261:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11272:4:36","nodeType":"YulTypedName","src":"11272:4:36","type":""}],"src":"11152:248:36"},{"body":{"nativeSrc":"11437:152:36","nodeType":"YulBlock","src":"11437:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11454:1:36","nodeType":"YulLiteral","src":"11454:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"11457:77:36","nodeType":"YulLiteral","src":"11457:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11447:6:36","nodeType":"YulIdentifier","src":"11447:6:36"},"nativeSrc":"11447:88:36","nodeType":"YulFunctionCall","src":"11447:88:36"},"nativeSrc":"11447:88:36","nodeType":"YulExpressionStatement","src":"11447:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11551:1:36","nodeType":"YulLiteral","src":"11551:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"11554:4:36","nodeType":"YulLiteral","src":"11554:4:36","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"11544:6:36","nodeType":"YulIdentifier","src":"11544:6:36"},"nativeSrc":"11544:15:36","nodeType":"YulFunctionCall","src":"11544:15:36"},"nativeSrc":"11544:15:36","nodeType":"YulExpressionStatement","src":"11544:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11575:1:36","nodeType":"YulLiteral","src":"11575:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"11578:4:36","nodeType":"YulLiteral","src":"11578:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11568:6:36","nodeType":"YulIdentifier","src":"11568:6:36"},"nativeSrc":"11568:15:36","nodeType":"YulFunctionCall","src":"11568:15:36"},"nativeSrc":"11568:15:36","nodeType":"YulExpressionStatement","src":"11568:15:36"}]},"name":"panic_error_0x11","nativeSrc":"11405:184:36","nodeType":"YulFunctionDefinition","src":"11405:184:36"},{"body":{"nativeSrc":"11642:77:36","nodeType":"YulBlock","src":"11642:77:36","statements":[{"nativeSrc":"11652:16:36","nodeType":"YulAssignment","src":"11652:16:36","value":{"arguments":[{"name":"x","nativeSrc":"11663:1:36","nodeType":"YulIdentifier","src":"11663:1:36"},{"name":"y","nativeSrc":"11666:1:36","nodeType":"YulIdentifier","src":"11666:1:36"}],"functionName":{"name":"add","nativeSrc":"11659:3:36","nodeType":"YulIdentifier","src":"11659:3:36"},"nativeSrc":"11659:9:36","nodeType":"YulFunctionCall","src":"11659:9:36"},"variableNames":[{"name":"sum","nativeSrc":"11652:3:36","nodeType":"YulIdentifier","src":"11652:3:36"}]},{"body":{"nativeSrc":"11691:22:36","nodeType":"YulBlock","src":"11691:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11693:16:36","nodeType":"YulIdentifier","src":"11693:16:36"},"nativeSrc":"11693:18:36","nodeType":"YulFunctionCall","src":"11693:18:36"},"nativeSrc":"11693:18:36","nodeType":"YulExpressionStatement","src":"11693:18:36"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"11683:1:36","nodeType":"YulIdentifier","src":"11683:1:36"},{"name":"sum","nativeSrc":"11686:3:36","nodeType":"YulIdentifier","src":"11686:3:36"}],"functionName":{"name":"gt","nativeSrc":"11680:2:36","nodeType":"YulIdentifier","src":"11680:2:36"},"nativeSrc":"11680:10:36","nodeType":"YulFunctionCall","src":"11680:10:36"},"nativeSrc":"11677:36:36","nodeType":"YulIf","src":"11677:36:36"}]},"name":"checked_add_t_uint256","nativeSrc":"11594:125:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11625:1:36","nodeType":"YulTypedName","src":"11625:1:36","type":""},{"name":"y","nativeSrc":"11628:1:36","nodeType":"YulTypedName","src":"11628:1:36","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"11634:3:36","nodeType":"YulTypedName","src":"11634:3:36","type":""}],"src":"11594:125:36"},{"body":{"nativeSrc":"11881:162:36","nodeType":"YulBlock","src":"11881:162:36","statements":[{"nativeSrc":"11891:26:36","nodeType":"YulAssignment","src":"11891:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"11903:9:36","nodeType":"YulIdentifier","src":"11903:9:36"},{"kind":"number","nativeSrc":"11914:2:36","nodeType":"YulLiteral","src":"11914:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11899:3:36","nodeType":"YulIdentifier","src":"11899:3:36"},"nativeSrc":"11899:18:36","nodeType":"YulFunctionCall","src":"11899:18:36"},"variableNames":[{"name":"tail","nativeSrc":"11891:4:36","nodeType":"YulIdentifier","src":"11891:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11933:9:36","nodeType":"YulIdentifier","src":"11933:9:36"},{"name":"value0","nativeSrc":"11944:6:36","nodeType":"YulIdentifier","src":"11944:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11926:6:36","nodeType":"YulIdentifier","src":"11926:6:36"},"nativeSrc":"11926:25:36","nodeType":"YulFunctionCall","src":"11926:25:36"},"nativeSrc":"11926:25:36","nodeType":"YulExpressionStatement","src":"11926:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11971:9:36","nodeType":"YulIdentifier","src":"11971:9:36"},{"kind":"number","nativeSrc":"11982:2:36","nodeType":"YulLiteral","src":"11982:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11967:3:36","nodeType":"YulIdentifier","src":"11967:3:36"},"nativeSrc":"11967:18:36","nodeType":"YulFunctionCall","src":"11967:18:36"},{"name":"value1","nativeSrc":"11987:6:36","nodeType":"YulIdentifier","src":"11987:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11960:6:36","nodeType":"YulIdentifier","src":"11960:6:36"},"nativeSrc":"11960:34:36","nodeType":"YulFunctionCall","src":"11960:34:36"},"nativeSrc":"11960:34:36","nodeType":"YulExpressionStatement","src":"11960:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12014:9:36","nodeType":"YulIdentifier","src":"12014:9:36"},{"kind":"number","nativeSrc":"12025:2:36","nodeType":"YulLiteral","src":"12025:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12010:3:36","nodeType":"YulIdentifier","src":"12010:3:36"},"nativeSrc":"12010:18:36","nodeType":"YulFunctionCall","src":"12010:18:36"},{"name":"value2","nativeSrc":"12030:6:36","nodeType":"YulIdentifier","src":"12030:6:36"}],"functionName":{"name":"mstore","nativeSrc":"12003:6:36","nodeType":"YulIdentifier","src":"12003:6:36"},"nativeSrc":"12003:34:36","nodeType":"YulFunctionCall","src":"12003:34:36"},"nativeSrc":"12003:34:36","nodeType":"YulExpressionStatement","src":"12003:34:36"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11724:319:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11834:9:36","nodeType":"YulTypedName","src":"11834:9:36","type":""},{"name":"value2","nativeSrc":"11845:6:36","nodeType":"YulTypedName","src":"11845:6:36","type":""},{"name":"value1","nativeSrc":"11853:6:36","nodeType":"YulTypedName","src":"11853:6:36","type":""},{"name":"value0","nativeSrc":"11861:6:36","nodeType":"YulTypedName","src":"11861:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11872:4:36","nodeType":"YulTypedName","src":"11872:4:36","type":""}],"src":"11724:319:36"},{"body":{"nativeSrc":"12222:234:36","nodeType":"YulBlock","src":"12222:234:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12239:9:36","nodeType":"YulIdentifier","src":"12239:9:36"},{"kind":"number","nativeSrc":"12250:2:36","nodeType":"YulLiteral","src":"12250:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12232:6:36","nodeType":"YulIdentifier","src":"12232:6:36"},"nativeSrc":"12232:21:36","nodeType":"YulFunctionCall","src":"12232:21:36"},"nativeSrc":"12232:21:36","nodeType":"YulExpressionStatement","src":"12232:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12273:9:36","nodeType":"YulIdentifier","src":"12273:9:36"},{"kind":"number","nativeSrc":"12284:2:36","nodeType":"YulLiteral","src":"12284:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12269:3:36","nodeType":"YulIdentifier","src":"12269:3:36"},"nativeSrc":"12269:18:36","nodeType":"YulFunctionCall","src":"12269:18:36"},{"kind":"number","nativeSrc":"12289:2:36","nodeType":"YulLiteral","src":"12289:2:36","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"12262:6:36","nodeType":"YulIdentifier","src":"12262:6:36"},"nativeSrc":"12262:30:36","nodeType":"YulFunctionCall","src":"12262:30:36"},"nativeSrc":"12262:30:36","nodeType":"YulExpressionStatement","src":"12262:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12312:9:36","nodeType":"YulIdentifier","src":"12312:9:36"},{"kind":"number","nativeSrc":"12323:2:36","nodeType":"YulLiteral","src":"12323:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12308:3:36","nodeType":"YulIdentifier","src":"12308:3:36"},"nativeSrc":"12308:18:36","nodeType":"YulFunctionCall","src":"12308:18:36"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"12328:34:36","nodeType":"YulLiteral","src":"12328:34:36","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"12301:6:36","nodeType":"YulIdentifier","src":"12301:6:36"},"nativeSrc":"12301:62:36","nodeType":"YulFunctionCall","src":"12301:62:36"},"nativeSrc":"12301:62:36","nodeType":"YulExpressionStatement","src":"12301:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12383:9:36","nodeType":"YulIdentifier","src":"12383:9:36"},{"kind":"number","nativeSrc":"12394:2:36","nodeType":"YulLiteral","src":"12394:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12379:3:36","nodeType":"YulIdentifier","src":"12379:3:36"},"nativeSrc":"12379:18:36","nodeType":"YulFunctionCall","src":"12379:18:36"},{"hexValue":"64656c656761746563616c6c","kind":"string","nativeSrc":"12399:14:36","nodeType":"YulLiteral","src":"12399:14:36","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"12372:6:36","nodeType":"YulIdentifier","src":"12372:6:36"},"nativeSrc":"12372:42:36","nodeType":"YulFunctionCall","src":"12372:42:36"},"nativeSrc":"12372:42:36","nodeType":"YulExpressionStatement","src":"12372:42:36"},{"nativeSrc":"12423:27:36","nodeType":"YulAssignment","src":"12423:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"12435:9:36","nodeType":"YulIdentifier","src":"12435:9:36"},{"kind":"number","nativeSrc":"12446:3:36","nodeType":"YulLiteral","src":"12446:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12431:3:36","nodeType":"YulIdentifier","src":"12431:3:36"},"nativeSrc":"12431:19:36","nodeType":"YulFunctionCall","src":"12431:19:36"},"variableNames":[{"name":"tail","nativeSrc":"12423:4:36","nodeType":"YulIdentifier","src":"12423:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12048:408:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12199:9:36","nodeType":"YulTypedName","src":"12199:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12213:4:36","nodeType":"YulTypedName","src":"12213:4:36","type":""}],"src":"12048:408:36"},{"body":{"nativeSrc":"12635:234:36","nodeType":"YulBlock","src":"12635:234:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12652:9:36","nodeType":"YulIdentifier","src":"12652:9:36"},{"kind":"number","nativeSrc":"12663:2:36","nodeType":"YulLiteral","src":"12663:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12645:6:36","nodeType":"YulIdentifier","src":"12645:6:36"},"nativeSrc":"12645:21:36","nodeType":"YulFunctionCall","src":"12645:21:36"},"nativeSrc":"12645:21:36","nodeType":"YulExpressionStatement","src":"12645:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12686:9:36","nodeType":"YulIdentifier","src":"12686:9:36"},{"kind":"number","nativeSrc":"12697:2:36","nodeType":"YulLiteral","src":"12697:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12682:3:36","nodeType":"YulIdentifier","src":"12682:3:36"},"nativeSrc":"12682:18:36","nodeType":"YulFunctionCall","src":"12682:18:36"},{"kind":"number","nativeSrc":"12702:2:36","nodeType":"YulLiteral","src":"12702:2:36","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"12675:6:36","nodeType":"YulIdentifier","src":"12675:6:36"},"nativeSrc":"12675:30:36","nodeType":"YulFunctionCall","src":"12675:30:36"},"nativeSrc":"12675:30:36","nodeType":"YulExpressionStatement","src":"12675:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12725:9:36","nodeType":"YulIdentifier","src":"12725:9:36"},{"kind":"number","nativeSrc":"12736:2:36","nodeType":"YulLiteral","src":"12736:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12721:3:36","nodeType":"YulIdentifier","src":"12721:3:36"},"nativeSrc":"12721:18:36","nodeType":"YulFunctionCall","src":"12721:18:36"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"12741:34:36","nodeType":"YulLiteral","src":"12741:34:36","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"12714:6:36","nodeType":"YulIdentifier","src":"12714:6:36"},"nativeSrc":"12714:62:36","nodeType":"YulFunctionCall","src":"12714:62:36"},"nativeSrc":"12714:62:36","nodeType":"YulExpressionStatement","src":"12714:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12796:9:36","nodeType":"YulIdentifier","src":"12796:9:36"},{"kind":"number","nativeSrc":"12807:2:36","nodeType":"YulLiteral","src":"12807:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12792:3:36","nodeType":"YulIdentifier","src":"12792:3:36"},"nativeSrc":"12792:18:36","nodeType":"YulFunctionCall","src":"12792:18:36"},{"hexValue":"6163746976652070726f7879","kind":"string","nativeSrc":"12812:14:36","nodeType":"YulLiteral","src":"12812:14:36","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nativeSrc":"12785:6:36","nodeType":"YulIdentifier","src":"12785:6:36"},"nativeSrc":"12785:42:36","nodeType":"YulFunctionCall","src":"12785:42:36"},"nativeSrc":"12785:42:36","nodeType":"YulExpressionStatement","src":"12785:42:36"},{"nativeSrc":"12836:27:36","nodeType":"YulAssignment","src":"12836:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"12848:9:36","nodeType":"YulIdentifier","src":"12848:9:36"},{"kind":"number","nativeSrc":"12859:3:36","nodeType":"YulLiteral","src":"12859:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12844:3:36","nodeType":"YulIdentifier","src":"12844:3:36"},"nativeSrc":"12844:19:36","nodeType":"YulFunctionCall","src":"12844:19:36"},"variableNames":[{"name":"tail","nativeSrc":"12836:4:36","nodeType":"YulIdentifier","src":"12836:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12461:408:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12612:9:36","nodeType":"YulTypedName","src":"12612:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12626:4:36","nodeType":"YulTypedName","src":"12626:4:36","type":""}],"src":"12461:408:36"},{"body":{"nativeSrc":"12906:152:36","nodeType":"YulBlock","src":"12906:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12923:1:36","nodeType":"YulLiteral","src":"12923:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"12926:77:36","nodeType":"YulLiteral","src":"12926:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12916:6:36","nodeType":"YulIdentifier","src":"12916:6:36"},"nativeSrc":"12916:88:36","nodeType":"YulFunctionCall","src":"12916:88:36"},"nativeSrc":"12916:88:36","nodeType":"YulExpressionStatement","src":"12916:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13020:1:36","nodeType":"YulLiteral","src":"13020:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"13023:4:36","nodeType":"YulLiteral","src":"13023:4:36","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"13013:6:36","nodeType":"YulIdentifier","src":"13013:6:36"},"nativeSrc":"13013:15:36","nodeType":"YulFunctionCall","src":"13013:15:36"},"nativeSrc":"13013:15:36","nodeType":"YulExpressionStatement","src":"13013:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13044:1:36","nodeType":"YulLiteral","src":"13044:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"13047:4:36","nodeType":"YulLiteral","src":"13047:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"13037:6:36","nodeType":"YulIdentifier","src":"13037:6:36"},"nativeSrc":"13037:15:36","nodeType":"YulFunctionCall","src":"13037:15:36"},"nativeSrc":"13037:15:36","nodeType":"YulExpressionStatement","src":"13037:15:36"}]},"name":"panic_error_0x32","nativeSrc":"12874:184:36","nodeType":"YulFunctionDefinition","src":"12874:184:36"},{"body":{"nativeSrc":"13110:148:36","nodeType":"YulBlock","src":"13110:148:36","statements":[{"body":{"nativeSrc":"13201:22:36","nodeType":"YulBlock","src":"13201:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"13203:16:36","nodeType":"YulIdentifier","src":"13203:16:36"},"nativeSrc":"13203:18:36","nodeType":"YulFunctionCall","src":"13203:18:36"},"nativeSrc":"13203:18:36","nodeType":"YulExpressionStatement","src":"13203:18:36"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"13126:5:36","nodeType":"YulIdentifier","src":"13126:5:36"},{"kind":"number","nativeSrc":"13133:66:36","nodeType":"YulLiteral","src":"13133:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"13123:2:36","nodeType":"YulIdentifier","src":"13123:2:36"},"nativeSrc":"13123:77:36","nodeType":"YulFunctionCall","src":"13123:77:36"},"nativeSrc":"13120:103:36","nodeType":"YulIf","src":"13120:103:36"},{"nativeSrc":"13232:20:36","nodeType":"YulAssignment","src":"13232:20:36","value":{"arguments":[{"name":"value","nativeSrc":"13243:5:36","nodeType":"YulIdentifier","src":"13243:5:36"},{"kind":"number","nativeSrc":"13250:1:36","nodeType":"YulLiteral","src":"13250:1:36","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13239:3:36","nodeType":"YulIdentifier","src":"13239:3:36"},"nativeSrc":"13239:13:36","nodeType":"YulFunctionCall","src":"13239:13:36"},"variableNames":[{"name":"ret","nativeSrc":"13232:3:36","nodeType":"YulIdentifier","src":"13232:3:36"}]}]},"name":"increment_t_uint256","nativeSrc":"13063:195:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"13092:5:36","nodeType":"YulTypedName","src":"13092:5:36","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"13102:3:36","nodeType":"YulTypedName","src":"13102:3:36","type":""}],"src":"13063:195:36"},{"body":{"nativeSrc":"13424:329:36","nodeType":"YulBlock","src":"13424:329:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13441:9:36","nodeType":"YulIdentifier","src":"13441:9:36"},{"kind":"number","nativeSrc":"13452:2:36","nodeType":"YulLiteral","src":"13452:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13434:6:36","nodeType":"YulIdentifier","src":"13434:6:36"},"nativeSrc":"13434:21:36","nodeType":"YulFunctionCall","src":"13434:21:36"},"nativeSrc":"13434:21:36","nodeType":"YulExpressionStatement","src":"13434:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13475:9:36","nodeType":"YulIdentifier","src":"13475:9:36"},{"kind":"number","nativeSrc":"13486:2:36","nodeType":"YulLiteral","src":"13486:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13471:3:36","nodeType":"YulIdentifier","src":"13471:3:36"},"nativeSrc":"13471:18:36","nodeType":"YulFunctionCall","src":"13471:18:36"},{"name":"value1","nativeSrc":"13491:6:36","nodeType":"YulIdentifier","src":"13491:6:36"}],"functionName":{"name":"mstore","nativeSrc":"13464:6:36","nodeType":"YulIdentifier","src":"13464:6:36"},"nativeSrc":"13464:34:36","nodeType":"YulFunctionCall","src":"13464:34:36"},"nativeSrc":"13464:34:36","nodeType":"YulExpressionStatement","src":"13464:34:36"},{"body":{"nativeSrc":"13589:16:36","nodeType":"YulBlock","src":"13589:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13598:1:36","nodeType":"YulLiteral","src":"13598:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"13601:1:36","nodeType":"YulLiteral","src":"13601:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13591:6:36","nodeType":"YulIdentifier","src":"13591:6:36"},"nativeSrc":"13591:12:36","nodeType":"YulFunctionCall","src":"13591:12:36"},"nativeSrc":"13591:12:36","nodeType":"YulExpressionStatement","src":"13591:12:36"}]},"condition":{"arguments":[{"name":"value1","nativeSrc":"13513:6:36","nodeType":"YulIdentifier","src":"13513:6:36"},{"kind":"number","nativeSrc":"13521:66:36","nodeType":"YulLiteral","src":"13521:66:36","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"13510:2:36","nodeType":"YulIdentifier","src":"13510:2:36"},"nativeSrc":"13510:78:36","nodeType":"YulFunctionCall","src":"13510:78:36"},"nativeSrc":"13507:98:36","nodeType":"YulIf","src":"13507:98:36"},{"nativeSrc":"13614:28:36","nodeType":"YulVariableDeclaration","src":"13614:28:36","value":{"arguments":[{"kind":"number","nativeSrc":"13632:1:36","nodeType":"YulLiteral","src":"13632:1:36","type":"","value":"5"},{"name":"value1","nativeSrc":"13635:6:36","nodeType":"YulIdentifier","src":"13635:6:36"}],"functionName":{"name":"shl","nativeSrc":"13628:3:36","nodeType":"YulIdentifier","src":"13628:3:36"},"nativeSrc":"13628:14:36","nodeType":"YulFunctionCall","src":"13628:14:36"},"variables":[{"name":"length","nativeSrc":"13618:6:36","nodeType":"YulTypedName","src":"13618:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13668:9:36","nodeType":"YulIdentifier","src":"13668:9:36"},{"kind":"number","nativeSrc":"13679:2:36","nodeType":"YulLiteral","src":"13679:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13664:3:36","nodeType":"YulIdentifier","src":"13664:3:36"},"nativeSrc":"13664:18:36","nodeType":"YulFunctionCall","src":"13664:18:36"},{"name":"value0","nativeSrc":"13684:6:36","nodeType":"YulIdentifier","src":"13684:6:36"},{"name":"length","nativeSrc":"13692:6:36","nodeType":"YulIdentifier","src":"13692:6:36"}],"functionName":{"name":"calldatacopy","nativeSrc":"13651:12:36","nodeType":"YulIdentifier","src":"13651:12:36"},"nativeSrc":"13651:48:36","nodeType":"YulFunctionCall","src":"13651:48:36"},"nativeSrc":"13651:48:36","nodeType":"YulExpressionStatement","src":"13651:48:36"},{"nativeSrc":"13708:39:36","nodeType":"YulAssignment","src":"13708:39:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13724:9:36","nodeType":"YulIdentifier","src":"13724:9:36"},{"name":"length","nativeSrc":"13735:6:36","nodeType":"YulIdentifier","src":"13735:6:36"}],"functionName":{"name":"add","nativeSrc":"13720:3:36","nodeType":"YulIdentifier","src":"13720:3:36"},"nativeSrc":"13720:22:36","nodeType":"YulFunctionCall","src":"13720:22:36"},{"kind":"number","nativeSrc":"13744:2:36","nodeType":"YulLiteral","src":"13744:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13716:3:36","nodeType":"YulIdentifier","src":"13716:3:36"},"nativeSrc":"13716:31:36","nodeType":"YulFunctionCall","src":"13716:31:36"},"variableNames":[{"name":"tail","nativeSrc":"13708:4:36","nodeType":"YulIdentifier","src":"13708:4:36"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"13263:490:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13385:9:36","nodeType":"YulTypedName","src":"13385:9:36","type":""},{"name":"value1","nativeSrc":"13396:6:36","nodeType":"YulTypedName","src":"13396:6:36","type":""},{"name":"value0","nativeSrc":"13404:6:36","nodeType":"YulTypedName","src":"13404:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13415:4:36","nodeType":"YulTypedName","src":"13415:4:36","type":""}],"src":"13263:490:36"},{"body":{"nativeSrc":"13932:246:36","nodeType":"YulBlock","src":"13932:246:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13949:9:36","nodeType":"YulIdentifier","src":"13949:9:36"},{"kind":"number","nativeSrc":"13960:2:36","nodeType":"YulLiteral","src":"13960:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13942:6:36","nodeType":"YulIdentifier","src":"13942:6:36"},"nativeSrc":"13942:21:36","nodeType":"YulFunctionCall","src":"13942:21:36"},"nativeSrc":"13942:21:36","nodeType":"YulExpressionStatement","src":"13942:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13983:9:36","nodeType":"YulIdentifier","src":"13983:9:36"},{"kind":"number","nativeSrc":"13994:2:36","nodeType":"YulLiteral","src":"13994:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13979:3:36","nodeType":"YulIdentifier","src":"13979:3:36"},"nativeSrc":"13979:18:36","nodeType":"YulFunctionCall","src":"13979:18:36"},{"kind":"number","nativeSrc":"13999:2:36","nodeType":"YulLiteral","src":"13999:2:36","type":"","value":"56"}],"functionName":{"name":"mstore","nativeSrc":"13972:6:36","nodeType":"YulIdentifier","src":"13972:6:36"},"nativeSrc":"13972:30:36","nodeType":"YulFunctionCall","src":"13972:30:36"},"nativeSrc":"13972:30:36","nodeType":"YulExpressionStatement","src":"13972:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14022:9:36","nodeType":"YulIdentifier","src":"14022:9:36"},{"kind":"number","nativeSrc":"14033:2:36","nodeType":"YulLiteral","src":"14033:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14018:3:36","nodeType":"YulIdentifier","src":"14018:3:36"},"nativeSrc":"14018:18:36","nodeType":"YulFunctionCall","src":"14018:18:36"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nativeSrc":"14038:34:36","nodeType":"YulLiteral","src":"14038:34:36","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nativeSrc":"14011:6:36","nodeType":"YulIdentifier","src":"14011:6:36"},"nativeSrc":"14011:62:36","nodeType":"YulFunctionCall","src":"14011:62:36"},"nativeSrc":"14011:62:36","nodeType":"YulExpressionStatement","src":"14011:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14093:9:36","nodeType":"YulIdentifier","src":"14093:9:36"},{"kind":"number","nativeSrc":"14104:2:36","nodeType":"YulLiteral","src":"14104:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14089:3:36","nodeType":"YulIdentifier","src":"14089:3:36"},"nativeSrc":"14089:18:36","nodeType":"YulFunctionCall","src":"14089:18:36"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nativeSrc":"14109:26:36","nodeType":"YulLiteral","src":"14109:26:36","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"14082:6:36","nodeType":"YulIdentifier","src":"14082:6:36"},"nativeSrc":"14082:54:36","nodeType":"YulFunctionCall","src":"14082:54:36"},"nativeSrc":"14082:54:36","nodeType":"YulExpressionStatement","src":"14082:54:36"},{"nativeSrc":"14145:27:36","nodeType":"YulAssignment","src":"14145:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"14157:9:36","nodeType":"YulIdentifier","src":"14157:9:36"},{"kind":"number","nativeSrc":"14168:3:36","nodeType":"YulLiteral","src":"14168:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14153:3:36","nodeType":"YulIdentifier","src":"14153:3:36"},"nativeSrc":"14153:19:36","nodeType":"YulFunctionCall","src":"14153:19:36"},"variableNames":[{"name":"tail","nativeSrc":"14145:4:36","nodeType":"YulIdentifier","src":"14145:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13758:420:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13909:9:36","nodeType":"YulTypedName","src":"13909:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13923:4:36","nodeType":"YulTypedName","src":"13923:4:36","type":""}],"src":"13758:420:36"},{"body":{"nativeSrc":"14357:236:36","nodeType":"YulBlock","src":"14357:236:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14374:9:36","nodeType":"YulIdentifier","src":"14374:9:36"},{"kind":"number","nativeSrc":"14385:2:36","nodeType":"YulLiteral","src":"14385:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14367:6:36","nodeType":"YulIdentifier","src":"14367:6:36"},"nativeSrc":"14367:21:36","nodeType":"YulFunctionCall","src":"14367:21:36"},"nativeSrc":"14367:21:36","nodeType":"YulExpressionStatement","src":"14367:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14408:9:36","nodeType":"YulIdentifier","src":"14408:9:36"},{"kind":"number","nativeSrc":"14419:2:36","nodeType":"YulLiteral","src":"14419:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14404:3:36","nodeType":"YulIdentifier","src":"14404:3:36"},"nativeSrc":"14404:18:36","nodeType":"YulFunctionCall","src":"14404:18:36"},{"kind":"number","nativeSrc":"14424:2:36","nodeType":"YulLiteral","src":"14424:2:36","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"14397:6:36","nodeType":"YulIdentifier","src":"14397:6:36"},"nativeSrc":"14397:30:36","nodeType":"YulFunctionCall","src":"14397:30:36"},"nativeSrc":"14397:30:36","nodeType":"YulExpressionStatement","src":"14397:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14447:9:36","nodeType":"YulIdentifier","src":"14447:9:36"},{"kind":"number","nativeSrc":"14458:2:36","nodeType":"YulLiteral","src":"14458:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14443:3:36","nodeType":"YulIdentifier","src":"14443:3:36"},"nativeSrc":"14443:18:36","nodeType":"YulFunctionCall","src":"14443:18:36"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nativeSrc":"14463:34:36","nodeType":"YulLiteral","src":"14463:34:36","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nativeSrc":"14436:6:36","nodeType":"YulIdentifier","src":"14436:6:36"},"nativeSrc":"14436:62:36","nodeType":"YulFunctionCall","src":"14436:62:36"},"nativeSrc":"14436:62:36","nodeType":"YulExpressionStatement","src":"14436:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14518:9:36","nodeType":"YulIdentifier","src":"14518:9:36"},{"kind":"number","nativeSrc":"14529:2:36","nodeType":"YulLiteral","src":"14529:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14514:3:36","nodeType":"YulIdentifier","src":"14514:3:36"},"nativeSrc":"14514:18:36","nodeType":"YulFunctionCall","src":"14514:18:36"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nativeSrc":"14534:16:36","nodeType":"YulLiteral","src":"14534:16:36","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nativeSrc":"14507:6:36","nodeType":"YulIdentifier","src":"14507:6:36"},"nativeSrc":"14507:44:36","nodeType":"YulFunctionCall","src":"14507:44:36"},"nativeSrc":"14507:44:36","nodeType":"YulExpressionStatement","src":"14507:44:36"},{"nativeSrc":"14560:27:36","nodeType":"YulAssignment","src":"14560:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"14572:9:36","nodeType":"YulIdentifier","src":"14572:9:36"},{"kind":"number","nativeSrc":"14583:3:36","nodeType":"YulLiteral","src":"14583:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14568:3:36","nodeType":"YulIdentifier","src":"14568:3:36"},"nativeSrc":"14568:19:36","nodeType":"YulFunctionCall","src":"14568:19:36"},"variableNames":[{"name":"tail","nativeSrc":"14560:4:36","nodeType":"YulIdentifier","src":"14560:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14183:410:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14334:9:36","nodeType":"YulTypedName","src":"14334:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14348:4:36","nodeType":"YulTypedName","src":"14348:4:36","type":""}],"src":"14183:410:36"},{"body":{"nativeSrc":"14705:87:36","nodeType":"YulBlock","src":"14705:87:36","statements":[{"nativeSrc":"14715:26:36","nodeType":"YulAssignment","src":"14715:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"14727:9:36","nodeType":"YulIdentifier","src":"14727:9:36"},{"kind":"number","nativeSrc":"14738:2:36","nodeType":"YulLiteral","src":"14738:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14723:3:36","nodeType":"YulIdentifier","src":"14723:3:36"},"nativeSrc":"14723:18:36","nodeType":"YulFunctionCall","src":"14723:18:36"},"variableNames":[{"name":"tail","nativeSrc":"14715:4:36","nodeType":"YulIdentifier","src":"14715:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14757:9:36","nodeType":"YulIdentifier","src":"14757:9:36"},{"arguments":[{"name":"value0","nativeSrc":"14772:6:36","nodeType":"YulIdentifier","src":"14772:6:36"},{"kind":"number","nativeSrc":"14780:4:36","nodeType":"YulLiteral","src":"14780:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"14768:3:36","nodeType":"YulIdentifier","src":"14768:3:36"},"nativeSrc":"14768:17:36","nodeType":"YulFunctionCall","src":"14768:17:36"}],"functionName":{"name":"mstore","nativeSrc":"14750:6:36","nodeType":"YulIdentifier","src":"14750:6:36"},"nativeSrc":"14750:36:36","nodeType":"YulFunctionCall","src":"14750:36:36"},"nativeSrc":"14750:36:36","nodeType":"YulExpressionStatement","src":"14750:36:36"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nativeSrc":"14598:194:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14674:9:36","nodeType":"YulTypedName","src":"14674:9:36","type":""},{"name":"value0","nativeSrc":"14685:6:36","nodeType":"YulTypedName","src":"14685:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14696:4:36","nodeType":"YulTypedName","src":"14696:4:36","type":""}],"src":"14598:194:36"},{"body":{"nativeSrc":"15017:160:36","nodeType":"YulBlock","src":"15017:160:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"15034:3:36","nodeType":"YulIdentifier","src":"15034:3:36"},{"kind":"number","nativeSrc":"15039:66:36","nodeType":"YulLiteral","src":"15039:66:36","type":"","value":"0x19457468657265756d205369676e6564204d6573736167653a0a333200000000"}],"functionName":{"name":"mstore","nativeSrc":"15027:6:36","nodeType":"YulIdentifier","src":"15027:6:36"},"nativeSrc":"15027:79:36","nodeType":"YulFunctionCall","src":"15027:79:36"},"nativeSrc":"15027:79:36","nodeType":"YulExpressionStatement","src":"15027:79:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"15126:3:36","nodeType":"YulIdentifier","src":"15126:3:36"},{"kind":"number","nativeSrc":"15131:2:36","nodeType":"YulLiteral","src":"15131:2:36","type":"","value":"28"}],"functionName":{"name":"add","nativeSrc":"15122:3:36","nodeType":"YulIdentifier","src":"15122:3:36"},"nativeSrc":"15122:12:36","nodeType":"YulFunctionCall","src":"15122:12:36"},{"name":"value0","nativeSrc":"15136:6:36","nodeType":"YulIdentifier","src":"15136:6:36"}],"functionName":{"name":"mstore","nativeSrc":"15115:6:36","nodeType":"YulIdentifier","src":"15115:6:36"},"nativeSrc":"15115:28:36","nodeType":"YulFunctionCall","src":"15115:28:36"},"nativeSrc":"15115:28:36","nodeType":"YulExpressionStatement","src":"15115:28:36"},{"nativeSrc":"15152:19:36","nodeType":"YulAssignment","src":"15152:19:36","value":{"arguments":[{"name":"pos","nativeSrc":"15163:3:36","nodeType":"YulIdentifier","src":"15163:3:36"},{"kind":"number","nativeSrc":"15168:2:36","nodeType":"YulLiteral","src":"15168:2:36","type":"","value":"60"}],"functionName":{"name":"add","nativeSrc":"15159:3:36","nodeType":"YulIdentifier","src":"15159:3:36"},"nativeSrc":"15159:12:36","nodeType":"YulFunctionCall","src":"15159:12:36"},"variableNames":[{"name":"end","nativeSrc":"15152:3:36","nodeType":"YulIdentifier","src":"15152:3:36"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"14797:380:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14993:3:36","nodeType":"YulTypedName","src":"14993:3:36","type":""},{"name":"value0","nativeSrc":"14998:6:36","nodeType":"YulTypedName","src":"14998:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15009:3:36","nodeType":"YulTypedName","src":"15009:3:36","type":""}],"src":"14797:380:36"},{"body":{"nativeSrc":"15353:220:36","nodeType":"YulBlock","src":"15353:220:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"15370:3:36","nodeType":"YulIdentifier","src":"15370:3:36"},{"name":"value0","nativeSrc":"15375:6:36","nodeType":"YulIdentifier","src":"15375:6:36"}],"functionName":{"name":"mstore","nativeSrc":"15363:6:36","nodeType":"YulIdentifier","src":"15363:6:36"},"nativeSrc":"15363:19:36","nodeType":"YulFunctionCall","src":"15363:19:36"},"nativeSrc":"15363:19:36","nodeType":"YulExpressionStatement","src":"15363:19:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"15402:3:36","nodeType":"YulIdentifier","src":"15402:3:36"},{"kind":"number","nativeSrc":"15407:2:36","nodeType":"YulLiteral","src":"15407:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15398:3:36","nodeType":"YulIdentifier","src":"15398:3:36"},"nativeSrc":"15398:12:36","nodeType":"YulFunctionCall","src":"15398:12:36"},{"name":"value1","nativeSrc":"15412:6:36","nodeType":"YulIdentifier","src":"15412:6:36"}],"functionName":{"name":"mstore","nativeSrc":"15391:6:36","nodeType":"YulIdentifier","src":"15391:6:36"},"nativeSrc":"15391:28:36","nodeType":"YulFunctionCall","src":"15391:28:36"},"nativeSrc":"15391:28:36","nodeType":"YulExpressionStatement","src":"15391:28:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"15439:3:36","nodeType":"YulIdentifier","src":"15439:3:36"},{"kind":"number","nativeSrc":"15444:2:36","nodeType":"YulLiteral","src":"15444:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15435:3:36","nodeType":"YulIdentifier","src":"15435:3:36"},"nativeSrc":"15435:12:36","nodeType":"YulFunctionCall","src":"15435:12:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"15457:3:36","nodeType":"YulLiteral","src":"15457:3:36","type":"","value":"248"},{"name":"value2","nativeSrc":"15462:6:36","nodeType":"YulIdentifier","src":"15462:6:36"}],"functionName":{"name":"shl","nativeSrc":"15453:3:36","nodeType":"YulIdentifier","src":"15453:3:36"},"nativeSrc":"15453:16:36","nodeType":"YulFunctionCall","src":"15453:16:36"},{"kind":"number","nativeSrc":"15471:66:36","nodeType":"YulLiteral","src":"15471:66:36","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"15449:3:36","nodeType":"YulIdentifier","src":"15449:3:36"},"nativeSrc":"15449:89:36","nodeType":"YulFunctionCall","src":"15449:89:36"}],"functionName":{"name":"mstore","nativeSrc":"15428:6:36","nodeType":"YulIdentifier","src":"15428:6:36"},"nativeSrc":"15428:111:36","nodeType":"YulFunctionCall","src":"15428:111:36"},"nativeSrc":"15428:111:36","nodeType":"YulExpressionStatement","src":"15428:111:36"},{"nativeSrc":"15548:19:36","nodeType":"YulAssignment","src":"15548:19:36","value":{"arguments":[{"name":"pos","nativeSrc":"15559:3:36","nodeType":"YulIdentifier","src":"15559:3:36"},{"kind":"number","nativeSrc":"15564:2:36","nodeType":"YulLiteral","src":"15564:2:36","type":"","value":"65"}],"functionName":{"name":"add","nativeSrc":"15555:3:36","nodeType":"YulIdentifier","src":"15555:3:36"},"nativeSrc":"15555:12:36","nodeType":"YulFunctionCall","src":"15555:12:36"},"variableNames":[{"name":"end","nativeSrc":"15548:3:36","nodeType":"YulIdentifier","src":"15548:3:36"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__nonPadded_inplace_fromStack_reversed","nativeSrc":"15182:391:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15313:3:36","nodeType":"YulTypedName","src":"15313:3:36","type":""},{"name":"value2","nativeSrc":"15318:6:36","nodeType":"YulTypedName","src":"15318:6:36","type":""},{"name":"value1","nativeSrc":"15326:6:36","nodeType":"YulTypedName","src":"15326:6:36","type":""},{"name":"value0","nativeSrc":"15334:6:36","nodeType":"YulTypedName","src":"15334:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15345:3:36","nodeType":"YulTypedName","src":"15345:3:36","type":""}],"src":"15182:391:36"},{"body":{"nativeSrc":"15627:79:36","nodeType":"YulBlock","src":"15627:79:36","statements":[{"nativeSrc":"15637:17:36","nodeType":"YulAssignment","src":"15637:17:36","value":{"arguments":[{"name":"x","nativeSrc":"15649:1:36","nodeType":"YulIdentifier","src":"15649:1:36"},{"name":"y","nativeSrc":"15652:1:36","nodeType":"YulIdentifier","src":"15652:1:36"}],"functionName":{"name":"sub","nativeSrc":"15645:3:36","nodeType":"YulIdentifier","src":"15645:3:36"},"nativeSrc":"15645:9:36","nodeType":"YulFunctionCall","src":"15645:9:36"},"variableNames":[{"name":"diff","nativeSrc":"15637:4:36","nodeType":"YulIdentifier","src":"15637:4:36"}]},{"body":{"nativeSrc":"15678:22:36","nodeType":"YulBlock","src":"15678:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"15680:16:36","nodeType":"YulIdentifier","src":"15680:16:36"},"nativeSrc":"15680:18:36","nodeType":"YulFunctionCall","src":"15680:18:36"},"nativeSrc":"15680:18:36","nodeType":"YulExpressionStatement","src":"15680:18:36"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"15669:4:36","nodeType":"YulIdentifier","src":"15669:4:36"},{"name":"x","nativeSrc":"15675:1:36","nodeType":"YulIdentifier","src":"15675:1:36"}],"functionName":{"name":"gt","nativeSrc":"15666:2:36","nodeType":"YulIdentifier","src":"15666:2:36"},"nativeSrc":"15666:11:36","nodeType":"YulFunctionCall","src":"15666:11:36"},"nativeSrc":"15663:37:36","nodeType":"YulIf","src":"15663:37:36"}]},"name":"checked_sub_t_uint256","nativeSrc":"15578:128:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"15609:1:36","nodeType":"YulTypedName","src":"15609:1:36","type":""},{"name":"y","nativeSrc":"15612:1:36","nodeType":"YulTypedName","src":"15612:1:36","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"15618:4:36","nodeType":"YulTypedName","src":"15618:4:36","type":""}],"src":"15578:128:36"},{"body":{"nativeSrc":"15840:168:36","nodeType":"YulBlock","src":"15840:168:36","statements":[{"nativeSrc":"15850:26:36","nodeType":"YulAssignment","src":"15850:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"15862:9:36","nodeType":"YulIdentifier","src":"15862:9:36"},{"kind":"number","nativeSrc":"15873:2:36","nodeType":"YulLiteral","src":"15873:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15858:3:36","nodeType":"YulIdentifier","src":"15858:3:36"},"nativeSrc":"15858:18:36","nodeType":"YulFunctionCall","src":"15858:18:36"},"variableNames":[{"name":"tail","nativeSrc":"15850:4:36","nodeType":"YulIdentifier","src":"15850:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15892:9:36","nodeType":"YulIdentifier","src":"15892:9:36"},{"name":"value0","nativeSrc":"15903:6:36","nodeType":"YulIdentifier","src":"15903:6:36"}],"functionName":{"name":"mstore","nativeSrc":"15885:6:36","nodeType":"YulIdentifier","src":"15885:6:36"},"nativeSrc":"15885:25:36","nodeType":"YulFunctionCall","src":"15885:25:36"},"nativeSrc":"15885:25:36","nodeType":"YulExpressionStatement","src":"15885:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15930:9:36","nodeType":"YulIdentifier","src":"15930:9:36"},{"kind":"number","nativeSrc":"15941:2:36","nodeType":"YulLiteral","src":"15941:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15926:3:36","nodeType":"YulIdentifier","src":"15926:3:36"},"nativeSrc":"15926:18:36","nodeType":"YulFunctionCall","src":"15926:18:36"},{"arguments":[{"name":"value1","nativeSrc":"15950:6:36","nodeType":"YulIdentifier","src":"15950:6:36"},{"kind":"number","nativeSrc":"15958:42:36","nodeType":"YulLiteral","src":"15958:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"15946:3:36","nodeType":"YulIdentifier","src":"15946:3:36"},"nativeSrc":"15946:55:36","nodeType":"YulFunctionCall","src":"15946:55:36"}],"functionName":{"name":"mstore","nativeSrc":"15919:6:36","nodeType":"YulIdentifier","src":"15919:6:36"},"nativeSrc":"15919:83:36","nodeType":"YulFunctionCall","src":"15919:83:36"},"nativeSrc":"15919:83:36","nodeType":"YulExpressionStatement","src":"15919:83:36"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"15711:297:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15801:9:36","nodeType":"YulTypedName","src":"15801:9:36","type":""},{"name":"value1","nativeSrc":"15812:6:36","nodeType":"YulTypedName","src":"15812:6:36","type":""},{"name":"value0","nativeSrc":"15820:6:36","nodeType":"YulTypedName","src":"15820:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15831:4:36","nodeType":"YulTypedName","src":"15831:4:36","type":""}],"src":"15711:297:36"},{"body":{"nativeSrc":"16170:241:36","nodeType":"YulBlock","src":"16170:241:36","statements":[{"nativeSrc":"16180:26:36","nodeType":"YulAssignment","src":"16180:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16192:9:36","nodeType":"YulIdentifier","src":"16192:9:36"},{"kind":"number","nativeSrc":"16203:2:36","nodeType":"YulLiteral","src":"16203:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16188:3:36","nodeType":"YulIdentifier","src":"16188:3:36"},"nativeSrc":"16188:18:36","nodeType":"YulFunctionCall","src":"16188:18:36"},"variableNames":[{"name":"tail","nativeSrc":"16180:4:36","nodeType":"YulIdentifier","src":"16180:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16222:9:36","nodeType":"YulIdentifier","src":"16222:9:36"},{"name":"value0","nativeSrc":"16233:6:36","nodeType":"YulIdentifier","src":"16233:6:36"}],"functionName":{"name":"mstore","nativeSrc":"16215:6:36","nodeType":"YulIdentifier","src":"16215:6:36"},"nativeSrc":"16215:25:36","nodeType":"YulFunctionCall","src":"16215:25:36"},"nativeSrc":"16215:25:36","nodeType":"YulExpressionStatement","src":"16215:25:36"},{"nativeSrc":"16249:52:36","nodeType":"YulVariableDeclaration","src":"16249:52:36","value":{"kind":"number","nativeSrc":"16259:42:36","nodeType":"YulLiteral","src":"16259:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16253:2:36","nodeType":"YulTypedName","src":"16253:2:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16321:9:36","nodeType":"YulIdentifier","src":"16321:9:36"},{"kind":"number","nativeSrc":"16332:2:36","nodeType":"YulLiteral","src":"16332:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16317:3:36","nodeType":"YulIdentifier","src":"16317:3:36"},"nativeSrc":"16317:18:36","nodeType":"YulFunctionCall","src":"16317:18:36"},{"arguments":[{"name":"value1","nativeSrc":"16341:6:36","nodeType":"YulIdentifier","src":"16341:6:36"},{"name":"_1","nativeSrc":"16349:2:36","nodeType":"YulIdentifier","src":"16349:2:36"}],"functionName":{"name":"and","nativeSrc":"16337:3:36","nodeType":"YulIdentifier","src":"16337:3:36"},"nativeSrc":"16337:15:36","nodeType":"YulFunctionCall","src":"16337:15:36"}],"functionName":{"name":"mstore","nativeSrc":"16310:6:36","nodeType":"YulIdentifier","src":"16310:6:36"},"nativeSrc":"16310:43:36","nodeType":"YulFunctionCall","src":"16310:43:36"},"nativeSrc":"16310:43:36","nodeType":"YulExpressionStatement","src":"16310:43:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16373:9:36","nodeType":"YulIdentifier","src":"16373:9:36"},{"kind":"number","nativeSrc":"16384:2:36","nodeType":"YulLiteral","src":"16384:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16369:3:36","nodeType":"YulIdentifier","src":"16369:3:36"},"nativeSrc":"16369:18:36","nodeType":"YulFunctionCall","src":"16369:18:36"},{"arguments":[{"name":"value2","nativeSrc":"16393:6:36","nodeType":"YulIdentifier","src":"16393:6:36"},{"name":"_1","nativeSrc":"16401:2:36","nodeType":"YulIdentifier","src":"16401:2:36"}],"functionName":{"name":"and","nativeSrc":"16389:3:36","nodeType":"YulIdentifier","src":"16389:3:36"},"nativeSrc":"16389:15:36","nodeType":"YulFunctionCall","src":"16389:15:36"}],"functionName":{"name":"mstore","nativeSrc":"16362:6:36","nodeType":"YulIdentifier","src":"16362:6:36"},"nativeSrc":"16362:43:36","nodeType":"YulFunctionCall","src":"16362:43:36"},"nativeSrc":"16362:43:36","nodeType":"YulExpressionStatement","src":"16362:43:36"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"16013:398:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16123:9:36","nodeType":"YulTypedName","src":"16123:9:36","type":""},{"name":"value2","nativeSrc":"16134:6:36","nodeType":"YulTypedName","src":"16134:6:36","type":""},{"name":"value1","nativeSrc":"16142:6:36","nodeType":"YulTypedName","src":"16142:6:36","type":""},{"name":"value0","nativeSrc":"16150:6:36","nodeType":"YulTypedName","src":"16150:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16161:4:36","nodeType":"YulTypedName","src":"16161:4:36","type":""}],"src":"16013:398:36"},{"body":{"nativeSrc":"16497:103:36","nodeType":"YulBlock","src":"16497:103:36","statements":[{"body":{"nativeSrc":"16543:16:36","nodeType":"YulBlock","src":"16543:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16552:1:36","nodeType":"YulLiteral","src":"16552:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"16555:1:36","nodeType":"YulLiteral","src":"16555:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16545:6:36","nodeType":"YulIdentifier","src":"16545:6:36"},"nativeSrc":"16545:12:36","nodeType":"YulFunctionCall","src":"16545:12:36"},"nativeSrc":"16545:12:36","nodeType":"YulExpressionStatement","src":"16545:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"16518:7:36","nodeType":"YulIdentifier","src":"16518:7:36"},{"name":"headStart","nativeSrc":"16527:9:36","nodeType":"YulIdentifier","src":"16527:9:36"}],"functionName":{"name":"sub","nativeSrc":"16514:3:36","nodeType":"YulIdentifier","src":"16514:3:36"},"nativeSrc":"16514:23:36","nodeType":"YulFunctionCall","src":"16514:23:36"},{"kind":"number","nativeSrc":"16539:2:36","nodeType":"YulLiteral","src":"16539:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"16510:3:36","nodeType":"YulIdentifier","src":"16510:3:36"},"nativeSrc":"16510:32:36","nodeType":"YulFunctionCall","src":"16510:32:36"},"nativeSrc":"16507:52:36","nodeType":"YulIf","src":"16507:52:36"},{"nativeSrc":"16568:26:36","nodeType":"YulAssignment","src":"16568:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16584:9:36","nodeType":"YulIdentifier","src":"16584:9:36"}],"functionName":{"name":"mload","nativeSrc":"16578:5:36","nodeType":"YulIdentifier","src":"16578:5:36"},"nativeSrc":"16578:16:36","nodeType":"YulFunctionCall","src":"16578:16:36"},"variableNames":[{"name":"value0","nativeSrc":"16568:6:36","nodeType":"YulIdentifier","src":"16568:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nativeSrc":"16416:184:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16463:9:36","nodeType":"YulTypedName","src":"16463:9:36","type":""},{"name":"dataEnd","nativeSrc":"16474:7:36","nodeType":"YulTypedName","src":"16474:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"16486:6:36","nodeType":"YulTypedName","src":"16486:6:36","type":""}],"src":"16416:184:36"},{"body":{"nativeSrc":"16779:236:36","nodeType":"YulBlock","src":"16779:236:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16796:9:36","nodeType":"YulIdentifier","src":"16796:9:36"},{"kind":"number","nativeSrc":"16807:2:36","nodeType":"YulLiteral","src":"16807:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16789:6:36","nodeType":"YulIdentifier","src":"16789:6:36"},"nativeSrc":"16789:21:36","nodeType":"YulFunctionCall","src":"16789:21:36"},"nativeSrc":"16789:21:36","nodeType":"YulExpressionStatement","src":"16789:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16830:9:36","nodeType":"YulIdentifier","src":"16830:9:36"},{"kind":"number","nativeSrc":"16841:2:36","nodeType":"YulLiteral","src":"16841:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16826:3:36","nodeType":"YulIdentifier","src":"16826:3:36"},"nativeSrc":"16826:18:36","nodeType":"YulFunctionCall","src":"16826:18:36"},{"kind":"number","nativeSrc":"16846:2:36","nodeType":"YulLiteral","src":"16846:2:36","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"16819:6:36","nodeType":"YulIdentifier","src":"16819:6:36"},"nativeSrc":"16819:30:36","nodeType":"YulFunctionCall","src":"16819:30:36"},"nativeSrc":"16819:30:36","nodeType":"YulExpressionStatement","src":"16819:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16869:9:36","nodeType":"YulIdentifier","src":"16869:9:36"},{"kind":"number","nativeSrc":"16880:2:36","nodeType":"YulLiteral","src":"16880:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16865:3:36","nodeType":"YulIdentifier","src":"16865:3:36"},"nativeSrc":"16865:18:36","nodeType":"YulFunctionCall","src":"16865:18:36"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nativeSrc":"16885:34:36","nodeType":"YulLiteral","src":"16885:34:36","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nativeSrc":"16858:6:36","nodeType":"YulIdentifier","src":"16858:6:36"},"nativeSrc":"16858:62:36","nodeType":"YulFunctionCall","src":"16858:62:36"},"nativeSrc":"16858:62:36","nodeType":"YulExpressionStatement","src":"16858:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16940:9:36","nodeType":"YulIdentifier","src":"16940:9:36"},{"kind":"number","nativeSrc":"16951:2:36","nodeType":"YulLiteral","src":"16951:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16936:3:36","nodeType":"YulIdentifier","src":"16936:3:36"},"nativeSrc":"16936:18:36","nodeType":"YulFunctionCall","src":"16936:18:36"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nativeSrc":"16956:16:36","nodeType":"YulLiteral","src":"16956:16:36","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nativeSrc":"16929:6:36","nodeType":"YulIdentifier","src":"16929:6:36"},"nativeSrc":"16929:44:36","nodeType":"YulFunctionCall","src":"16929:44:36"},"nativeSrc":"16929:44:36","nodeType":"YulExpressionStatement","src":"16929:44:36"},{"nativeSrc":"16982:27:36","nodeType":"YulAssignment","src":"16982:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16994:9:36","nodeType":"YulIdentifier","src":"16994:9:36"},{"kind":"number","nativeSrc":"17005:3:36","nodeType":"YulLiteral","src":"17005:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16990:3:36","nodeType":"YulIdentifier","src":"16990:3:36"},"nativeSrc":"16990:19:36","nodeType":"YulFunctionCall","src":"16990:19:36"},"variableNames":[{"name":"tail","nativeSrc":"16982:4:36","nodeType":"YulIdentifier","src":"16982:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16605:410:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16756:9:36","nodeType":"YulTypedName","src":"16756:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16770:4:36","nodeType":"YulTypedName","src":"16770:4:36","type":""}],"src":"16605:410:36"},{"body":{"nativeSrc":"17194:231:36","nodeType":"YulBlock","src":"17194:231:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17211:9:36","nodeType":"YulIdentifier","src":"17211:9:36"},{"kind":"number","nativeSrc":"17222:2:36","nodeType":"YulLiteral","src":"17222:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17204:6:36","nodeType":"YulIdentifier","src":"17204:6:36"},"nativeSrc":"17204:21:36","nodeType":"YulFunctionCall","src":"17204:21:36"},"nativeSrc":"17204:21:36","nodeType":"YulExpressionStatement","src":"17204:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17245:9:36","nodeType":"YulIdentifier","src":"17245:9:36"},{"kind":"number","nativeSrc":"17256:2:36","nodeType":"YulLiteral","src":"17256:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17241:3:36","nodeType":"YulIdentifier","src":"17241:3:36"},"nativeSrc":"17241:18:36","nodeType":"YulFunctionCall","src":"17241:18:36"},{"kind":"number","nativeSrc":"17261:2:36","nodeType":"YulLiteral","src":"17261:2:36","type":"","value":"41"}],"functionName":{"name":"mstore","nativeSrc":"17234:6:36","nodeType":"YulIdentifier","src":"17234:6:36"},"nativeSrc":"17234:30:36","nodeType":"YulFunctionCall","src":"17234:30:36"},"nativeSrc":"17234:30:36","nodeType":"YulExpressionStatement","src":"17234:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17284:9:36","nodeType":"YulIdentifier","src":"17284:9:36"},{"kind":"number","nativeSrc":"17295:2:36","nodeType":"YulLiteral","src":"17295:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17280:3:36","nodeType":"YulIdentifier","src":"17280:3:36"},"nativeSrc":"17280:18:36","nodeType":"YulFunctionCall","src":"17280:18:36"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nativeSrc":"17300:34:36","nodeType":"YulLiteral","src":"17300:34:36","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nativeSrc":"17273:6:36","nodeType":"YulIdentifier","src":"17273:6:36"},"nativeSrc":"17273:62:36","nodeType":"YulFunctionCall","src":"17273:62:36"},"nativeSrc":"17273:62:36","nodeType":"YulExpressionStatement","src":"17273:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17355:9:36","nodeType":"YulIdentifier","src":"17355:9:36"},{"kind":"number","nativeSrc":"17366:2:36","nodeType":"YulLiteral","src":"17366:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17351:3:36","nodeType":"YulIdentifier","src":"17351:3:36"},"nativeSrc":"17351:18:36","nodeType":"YulFunctionCall","src":"17351:18:36"},{"hexValue":"6961626c6555554944","kind":"string","nativeSrc":"17371:11:36","nodeType":"YulLiteral","src":"17371:11:36","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nativeSrc":"17344:6:36","nodeType":"YulIdentifier","src":"17344:6:36"},"nativeSrc":"17344:39:36","nodeType":"YulFunctionCall","src":"17344:39:36"},"nativeSrc":"17344:39:36","nodeType":"YulExpressionStatement","src":"17344:39:36"},{"nativeSrc":"17392:27:36","nodeType":"YulAssignment","src":"17392:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"17404:9:36","nodeType":"YulIdentifier","src":"17404:9:36"},{"kind":"number","nativeSrc":"17415:3:36","nodeType":"YulLiteral","src":"17415:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17400:3:36","nodeType":"YulIdentifier","src":"17400:3:36"},"nativeSrc":"17400:19:36","nodeType":"YulFunctionCall","src":"17400:19:36"},"variableNames":[{"name":"tail","nativeSrc":"17392:4:36","nodeType":"YulIdentifier","src":"17392:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17020:405:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17171:9:36","nodeType":"YulTypedName","src":"17171:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17185:4:36","nodeType":"YulTypedName","src":"17185:4:36","type":""}],"src":"17020:405:36"},{"body":{"nativeSrc":"17717:371:36","nodeType":"YulBlock","src":"17717:371:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"17734:3:36","nodeType":"YulIdentifier","src":"17734:3:36"},{"name":"value0","nativeSrc":"17739:6:36","nodeType":"YulIdentifier","src":"17739:6:36"}],"functionName":{"name":"mstore","nativeSrc":"17727:6:36","nodeType":"YulIdentifier","src":"17727:6:36"},"nativeSrc":"17727:19:36","nodeType":"YulFunctionCall","src":"17727:19:36"},"nativeSrc":"17727:19:36","nodeType":"YulExpressionStatement","src":"17727:19:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17766:3:36","nodeType":"YulIdentifier","src":"17766:3:36"},{"kind":"number","nativeSrc":"17771:2:36","nodeType":"YulLiteral","src":"17771:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17762:3:36","nodeType":"YulIdentifier","src":"17762:3:36"},"nativeSrc":"17762:12:36","nodeType":"YulFunctionCall","src":"17762:12:36"},{"name":"value1","nativeSrc":"17776:6:36","nodeType":"YulIdentifier","src":"17776:6:36"}],"functionName":{"name":"mstore","nativeSrc":"17755:6:36","nodeType":"YulIdentifier","src":"17755:6:36"},"nativeSrc":"17755:28:36","nodeType":"YulFunctionCall","src":"17755:28:36"},"nativeSrc":"17755:28:36","nodeType":"YulExpressionStatement","src":"17755:28:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17803:3:36","nodeType":"YulIdentifier","src":"17803:3:36"},{"kind":"number","nativeSrc":"17808:2:36","nodeType":"YulLiteral","src":"17808:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17799:3:36","nodeType":"YulIdentifier","src":"17799:3:36"},"nativeSrc":"17799:12:36","nodeType":"YulFunctionCall","src":"17799:12:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"17821:2:36","nodeType":"YulLiteral","src":"17821:2:36","type":"","value":"96"},{"name":"value2","nativeSrc":"17825:6:36","nodeType":"YulIdentifier","src":"17825:6:36"}],"functionName":{"name":"shl","nativeSrc":"17817:3:36","nodeType":"YulIdentifier","src":"17817:3:36"},"nativeSrc":"17817:15:36","nodeType":"YulFunctionCall","src":"17817:15:36"},{"kind":"number","nativeSrc":"17834:66:36","nodeType":"YulLiteral","src":"17834:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"17813:3:36","nodeType":"YulIdentifier","src":"17813:3:36"},"nativeSrc":"17813:88:36","nodeType":"YulFunctionCall","src":"17813:88:36"}],"functionName":{"name":"mstore","nativeSrc":"17792:6:36","nodeType":"YulIdentifier","src":"17792:6:36"},"nativeSrc":"17792:110:36","nodeType":"YulFunctionCall","src":"17792:110:36"},"nativeSrc":"17792:110:36","nodeType":"YulExpressionStatement","src":"17792:110:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17922:3:36","nodeType":"YulIdentifier","src":"17922:3:36"},{"kind":"number","nativeSrc":"17927:2:36","nodeType":"YulLiteral","src":"17927:2:36","type":"","value":"84"}],"functionName":{"name":"add","nativeSrc":"17918:3:36","nodeType":"YulIdentifier","src":"17918:3:36"},"nativeSrc":"17918:12:36","nodeType":"YulFunctionCall","src":"17918:12:36"},{"name":"value3","nativeSrc":"17932:6:36","nodeType":"YulIdentifier","src":"17932:6:36"}],"functionName":{"name":"mstore","nativeSrc":"17911:6:36","nodeType":"YulIdentifier","src":"17911:6:36"},"nativeSrc":"17911:28:36","nodeType":"YulFunctionCall","src":"17911:28:36"},"nativeSrc":"17911:28:36","nodeType":"YulExpressionStatement","src":"17911:28:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17959:3:36","nodeType":"YulIdentifier","src":"17959:3:36"},{"kind":"number","nativeSrc":"17964:3:36","nodeType":"YulLiteral","src":"17964:3:36","type":"","value":"116"}],"functionName":{"name":"add","nativeSrc":"17955:3:36","nodeType":"YulIdentifier","src":"17955:3:36"},"nativeSrc":"17955:13:36","nodeType":"YulFunctionCall","src":"17955:13:36"},{"name":"value4","nativeSrc":"17970:6:36","nodeType":"YulIdentifier","src":"17970:6:36"}],"functionName":{"name":"mstore","nativeSrc":"17948:6:36","nodeType":"YulIdentifier","src":"17948:6:36"},"nativeSrc":"17948:29:36","nodeType":"YulFunctionCall","src":"17948:29:36"},"nativeSrc":"17948:29:36","nodeType":"YulExpressionStatement","src":"17948:29:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17997:3:36","nodeType":"YulIdentifier","src":"17997:3:36"},{"kind":"number","nativeSrc":"18002:3:36","nodeType":"YulLiteral","src":"18002:3:36","type":"","value":"148"}],"functionName":{"name":"add","nativeSrc":"17993:3:36","nodeType":"YulIdentifier","src":"17993:3:36"},"nativeSrc":"17993:13:36","nodeType":"YulFunctionCall","src":"17993:13:36"},{"name":"value5","nativeSrc":"18008:6:36","nodeType":"YulIdentifier","src":"18008:6:36"}],"functionName":{"name":"mstore","nativeSrc":"17986:6:36","nodeType":"YulIdentifier","src":"17986:6:36"},"nativeSrc":"17986:29:36","nodeType":"YulFunctionCall","src":"17986:29:36"},"nativeSrc":"17986:29:36","nodeType":"YulExpressionStatement","src":"17986:29:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"18035:3:36","nodeType":"YulIdentifier","src":"18035:3:36"},{"kind":"number","nativeSrc":"18040:3:36","nodeType":"YulLiteral","src":"18040:3:36","type":"","value":"180"}],"functionName":{"name":"add","nativeSrc":"18031:3:36","nodeType":"YulIdentifier","src":"18031:3:36"},"nativeSrc":"18031:13:36","nodeType":"YulFunctionCall","src":"18031:13:36"},{"name":"value6","nativeSrc":"18046:6:36","nodeType":"YulIdentifier","src":"18046:6:36"}],"functionName":{"name":"mstore","nativeSrc":"18024:6:36","nodeType":"YulIdentifier","src":"18024:6:36"},"nativeSrc":"18024:29:36","nodeType":"YulFunctionCall","src":"18024:29:36"},"nativeSrc":"18024:29:36","nodeType":"YulExpressionStatement","src":"18024:29:36"},{"nativeSrc":"18062:20:36","nodeType":"YulAssignment","src":"18062:20:36","value":{"arguments":[{"name":"pos","nativeSrc":"18073:3:36","nodeType":"YulIdentifier","src":"18073:3:36"},{"kind":"number","nativeSrc":"18078:3:36","nodeType":"YulLiteral","src":"18078:3:36","type":"","value":"212"}],"functionName":{"name":"add","nativeSrc":"18069:3:36","nodeType":"YulIdentifier","src":"18069:3:36"},"nativeSrc":"18069:13:36","nodeType":"YulFunctionCall","src":"18069:13:36"},"variableNames":[{"name":"end","nativeSrc":"18062:3:36","nodeType":"YulIdentifier","src":"18062:3:36"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"17430:658:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17645:3:36","nodeType":"YulTypedName","src":"17645:3:36","type":""},{"name":"value6","nativeSrc":"17650:6:36","nodeType":"YulTypedName","src":"17650:6:36","type":""},{"name":"value5","nativeSrc":"17658:6:36","nodeType":"YulTypedName","src":"17658:6:36","type":""},{"name":"value4","nativeSrc":"17666:6:36","nodeType":"YulTypedName","src":"17666:6:36","type":""},{"name":"value3","nativeSrc":"17674:6:36","nodeType":"YulTypedName","src":"17674:6:36","type":""},{"name":"value2","nativeSrc":"17682:6:36","nodeType":"YulTypedName","src":"17682:6:36","type":""},{"name":"value1","nativeSrc":"17690:6:36","nodeType":"YulTypedName","src":"17690:6:36","type":""},{"name":"value0","nativeSrc":"17698:6:36","nodeType":"YulTypedName","src":"17698:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17709:3:36","nodeType":"YulTypedName","src":"17709:3:36","type":""}],"src":"17430:658:36"},{"body":{"nativeSrc":"18267:233:36","nodeType":"YulBlock","src":"18267:233:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18284:9:36","nodeType":"YulIdentifier","src":"18284:9:36"},{"kind":"number","nativeSrc":"18295:2:36","nodeType":"YulLiteral","src":"18295:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18277:6:36","nodeType":"YulIdentifier","src":"18277:6:36"},"nativeSrc":"18277:21:36","nodeType":"YulFunctionCall","src":"18277:21:36"},"nativeSrc":"18277:21:36","nodeType":"YulExpressionStatement","src":"18277:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18318:9:36","nodeType":"YulIdentifier","src":"18318:9:36"},{"kind":"number","nativeSrc":"18329:2:36","nodeType":"YulLiteral","src":"18329:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18314:3:36","nodeType":"YulIdentifier","src":"18314:3:36"},"nativeSrc":"18314:18:36","nodeType":"YulFunctionCall","src":"18314:18:36"},{"kind":"number","nativeSrc":"18334:2:36","nodeType":"YulLiteral","src":"18334:2:36","type":"","value":"43"}],"functionName":{"name":"mstore","nativeSrc":"18307:6:36","nodeType":"YulIdentifier","src":"18307:6:36"},"nativeSrc":"18307:30:36","nodeType":"YulFunctionCall","src":"18307:30:36"},"nativeSrc":"18307:30:36","nodeType":"YulExpressionStatement","src":"18307:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18357:9:36","nodeType":"YulIdentifier","src":"18357:9:36"},{"kind":"number","nativeSrc":"18368:2:36","nodeType":"YulLiteral","src":"18368:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18353:3:36","nodeType":"YulIdentifier","src":"18353:3:36"},"nativeSrc":"18353:18:36","nodeType":"YulFunctionCall","src":"18353:18:36"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nativeSrc":"18373:34:36","nodeType":"YulLiteral","src":"18373:34:36","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nativeSrc":"18346:6:36","nodeType":"YulIdentifier","src":"18346:6:36"},"nativeSrc":"18346:62:36","nodeType":"YulFunctionCall","src":"18346:62:36"},"nativeSrc":"18346:62:36","nodeType":"YulExpressionStatement","src":"18346:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18428:9:36","nodeType":"YulIdentifier","src":"18428:9:36"},{"kind":"number","nativeSrc":"18439:2:36","nodeType":"YulLiteral","src":"18439:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18424:3:36","nodeType":"YulIdentifier","src":"18424:3:36"},"nativeSrc":"18424:18:36","nodeType":"YulFunctionCall","src":"18424:18:36"},{"hexValue":"6e697469616c697a696e67","kind":"string","nativeSrc":"18444:13:36","nodeType":"YulLiteral","src":"18444:13:36","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nativeSrc":"18417:6:36","nodeType":"YulIdentifier","src":"18417:6:36"},"nativeSrc":"18417:41:36","nodeType":"YulFunctionCall","src":"18417:41:36"},"nativeSrc":"18417:41:36","nodeType":"YulExpressionStatement","src":"18417:41:36"},{"nativeSrc":"18467:27:36","nodeType":"YulAssignment","src":"18467:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"18479:9:36","nodeType":"YulIdentifier","src":"18479:9:36"},{"kind":"number","nativeSrc":"18490:3:36","nodeType":"YulLiteral","src":"18490:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18475:3:36","nodeType":"YulIdentifier","src":"18475:3:36"},"nativeSrc":"18475:19:36","nodeType":"YulFunctionCall","src":"18475:19:36"},"variableNames":[{"name":"tail","nativeSrc":"18467:4:36","nodeType":"YulIdentifier","src":"18467:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18093:407:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18244:9:36","nodeType":"YulTypedName","src":"18244:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18258:4:36","nodeType":"YulTypedName","src":"18258:4:36","type":""}],"src":"18093:407:36"},{"body":{"nativeSrc":"18690:285:36","nodeType":"YulBlock","src":"18690:285:36","statements":[{"nativeSrc":"18700:27:36","nodeType":"YulAssignment","src":"18700:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"18712:9:36","nodeType":"YulIdentifier","src":"18712:9:36"},{"kind":"number","nativeSrc":"18723:3:36","nodeType":"YulLiteral","src":"18723:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18708:3:36","nodeType":"YulIdentifier","src":"18708:3:36"},"nativeSrc":"18708:19:36","nodeType":"YulFunctionCall","src":"18708:19:36"},"variableNames":[{"name":"tail","nativeSrc":"18700:4:36","nodeType":"YulIdentifier","src":"18700:4:36"}]},{"nativeSrc":"18736:52:36","nodeType":"YulVariableDeclaration","src":"18736:52:36","value":{"kind":"number","nativeSrc":"18746:42:36","nodeType":"YulLiteral","src":"18746:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18740:2:36","nodeType":"YulTypedName","src":"18740:2:36","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18804:9:36","nodeType":"YulIdentifier","src":"18804:9:36"},{"arguments":[{"name":"value0","nativeSrc":"18819:6:36","nodeType":"YulIdentifier","src":"18819:6:36"},{"name":"_1","nativeSrc":"18827:2:36","nodeType":"YulIdentifier","src":"18827:2:36"}],"functionName":{"name":"and","nativeSrc":"18815:3:36","nodeType":"YulIdentifier","src":"18815:3:36"},"nativeSrc":"18815:15:36","nodeType":"YulFunctionCall","src":"18815:15:36"}],"functionName":{"name":"mstore","nativeSrc":"18797:6:36","nodeType":"YulIdentifier","src":"18797:6:36"},"nativeSrc":"18797:34:36","nodeType":"YulFunctionCall","src":"18797:34:36"},"nativeSrc":"18797:34:36","nodeType":"YulExpressionStatement","src":"18797:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18851:9:36","nodeType":"YulIdentifier","src":"18851:9:36"},{"kind":"number","nativeSrc":"18862:2:36","nodeType":"YulLiteral","src":"18862:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18847:3:36","nodeType":"YulIdentifier","src":"18847:3:36"},"nativeSrc":"18847:18:36","nodeType":"YulFunctionCall","src":"18847:18:36"},{"name":"value1","nativeSrc":"18867:6:36","nodeType":"YulIdentifier","src":"18867:6:36"}],"functionName":{"name":"mstore","nativeSrc":"18840:6:36","nodeType":"YulIdentifier","src":"18840:6:36"},"nativeSrc":"18840:34:36","nodeType":"YulFunctionCall","src":"18840:34:36"},"nativeSrc":"18840:34:36","nodeType":"YulExpressionStatement","src":"18840:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18894:9:36","nodeType":"YulIdentifier","src":"18894:9:36"},{"kind":"number","nativeSrc":"18905:2:36","nodeType":"YulLiteral","src":"18905:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18890:3:36","nodeType":"YulIdentifier","src":"18890:3:36"},"nativeSrc":"18890:18:36","nodeType":"YulFunctionCall","src":"18890:18:36"},{"name":"value2","nativeSrc":"18910:6:36","nodeType":"YulIdentifier","src":"18910:6:36"}],"functionName":{"name":"mstore","nativeSrc":"18883:6:36","nodeType":"YulIdentifier","src":"18883:6:36"},"nativeSrc":"18883:34:36","nodeType":"YulFunctionCall","src":"18883:34:36"},"nativeSrc":"18883:34:36","nodeType":"YulExpressionStatement","src":"18883:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18937:9:36","nodeType":"YulIdentifier","src":"18937:9:36"},{"kind":"number","nativeSrc":"18948:2:36","nodeType":"YulLiteral","src":"18948:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18933:3:36","nodeType":"YulIdentifier","src":"18933:3:36"},"nativeSrc":"18933:18:36","nodeType":"YulFunctionCall","src":"18933:18:36"},{"arguments":[{"name":"value3","nativeSrc":"18957:6:36","nodeType":"YulIdentifier","src":"18957:6:36"},{"name":"_1","nativeSrc":"18965:2:36","nodeType":"YulIdentifier","src":"18965:2:36"}],"functionName":{"name":"and","nativeSrc":"18953:3:36","nodeType":"YulIdentifier","src":"18953:3:36"},"nativeSrc":"18953:15:36","nodeType":"YulFunctionCall","src":"18953:15:36"}],"functionName":{"name":"mstore","nativeSrc":"18926:6:36","nodeType":"YulIdentifier","src":"18926:6:36"},"nativeSrc":"18926:43:36","nodeType":"YulFunctionCall","src":"18926:43:36"},"nativeSrc":"18926:43:36","nodeType":"YulExpressionStatement","src":"18926:43:36"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed","nativeSrc":"18505:470:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18635:9:36","nodeType":"YulTypedName","src":"18635:9:36","type":""},{"name":"value3","nativeSrc":"18646:6:36","nodeType":"YulTypedName","src":"18646:6:36","type":""},{"name":"value2","nativeSrc":"18654:6:36","nodeType":"YulTypedName","src":"18654:6:36","type":""},{"name":"value1","nativeSrc":"18662:6:36","nodeType":"YulTypedName","src":"18662:6:36","type":""},{"name":"value0","nativeSrc":"18670:6:36","nodeType":"YulTypedName","src":"18670:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18681:4:36","nodeType":"YulTypedName","src":"18681:4:36","type":""}],"src":"18505:470:36"},{"body":{"nativeSrc":"19012:152:36","nodeType":"YulBlock","src":"19012:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19029:1:36","nodeType":"YulLiteral","src":"19029:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"19032:77:36","nodeType":"YulLiteral","src":"19032:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"19022:6:36","nodeType":"YulIdentifier","src":"19022:6:36"},"nativeSrc":"19022:88:36","nodeType":"YulFunctionCall","src":"19022:88:36"},"nativeSrc":"19022:88:36","nodeType":"YulExpressionStatement","src":"19022:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19126:1:36","nodeType":"YulLiteral","src":"19126:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"19129:4:36","nodeType":"YulLiteral","src":"19129:4:36","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"19119:6:36","nodeType":"YulIdentifier","src":"19119:6:36"},"nativeSrc":"19119:15:36","nodeType":"YulFunctionCall","src":"19119:15:36"},"nativeSrc":"19119:15:36","nodeType":"YulExpressionStatement","src":"19119:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19150:1:36","nodeType":"YulLiteral","src":"19150:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"19153:4:36","nodeType":"YulLiteral","src":"19153:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"19143:6:36","nodeType":"YulIdentifier","src":"19143:6:36"},"nativeSrc":"19143:15:36","nodeType":"YulFunctionCall","src":"19143:15:36"},"nativeSrc":"19143:15:36","nodeType":"YulExpressionStatement","src":"19143:15:36"}]},"name":"panic_error_0x21","nativeSrc":"18980:184:36","nodeType":"YulFunctionDefinition","src":"18980:184:36"},{"body":{"nativeSrc":"19235:184:36","nodeType":"YulBlock","src":"19235:184:36","statements":[{"nativeSrc":"19245:10:36","nodeType":"YulVariableDeclaration","src":"19245:10:36","value":{"kind":"number","nativeSrc":"19254:1:36","nodeType":"YulLiteral","src":"19254:1:36","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"19249:1:36","nodeType":"YulTypedName","src":"19249:1:36","type":""}]},{"body":{"nativeSrc":"19314:63:36","nodeType":"YulBlock","src":"19314:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"19339:3:36","nodeType":"YulIdentifier","src":"19339:3:36"},{"name":"i","nativeSrc":"19344:1:36","nodeType":"YulIdentifier","src":"19344:1:36"}],"functionName":{"name":"add","nativeSrc":"19335:3:36","nodeType":"YulIdentifier","src":"19335:3:36"},"nativeSrc":"19335:11:36","nodeType":"YulFunctionCall","src":"19335:11:36"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"19358:3:36","nodeType":"YulIdentifier","src":"19358:3:36"},{"name":"i","nativeSrc":"19363:1:36","nodeType":"YulIdentifier","src":"19363:1:36"}],"functionName":{"name":"add","nativeSrc":"19354:3:36","nodeType":"YulIdentifier","src":"19354:3:36"},"nativeSrc":"19354:11:36","nodeType":"YulFunctionCall","src":"19354:11:36"}],"functionName":{"name":"mload","nativeSrc":"19348:5:36","nodeType":"YulIdentifier","src":"19348:5:36"},"nativeSrc":"19348:18:36","nodeType":"YulFunctionCall","src":"19348:18:36"}],"functionName":{"name":"mstore","nativeSrc":"19328:6:36","nodeType":"YulIdentifier","src":"19328:6:36"},"nativeSrc":"19328:39:36","nodeType":"YulFunctionCall","src":"19328:39:36"},"nativeSrc":"19328:39:36","nodeType":"YulExpressionStatement","src":"19328:39:36"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"19275:1:36","nodeType":"YulIdentifier","src":"19275:1:36"},{"name":"length","nativeSrc":"19278:6:36","nodeType":"YulIdentifier","src":"19278:6:36"}],"functionName":{"name":"lt","nativeSrc":"19272:2:36","nodeType":"YulIdentifier","src":"19272:2:36"},"nativeSrc":"19272:13:36","nodeType":"YulFunctionCall","src":"19272:13:36"},"nativeSrc":"19264:113:36","nodeType":"YulForLoop","post":{"nativeSrc":"19286:19:36","nodeType":"YulBlock","src":"19286:19:36","statements":[{"nativeSrc":"19288:15:36","nodeType":"YulAssignment","src":"19288:15:36","value":{"arguments":[{"name":"i","nativeSrc":"19297:1:36","nodeType":"YulIdentifier","src":"19297:1:36"},{"kind":"number","nativeSrc":"19300:2:36","nodeType":"YulLiteral","src":"19300:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19293:3:36","nodeType":"YulIdentifier","src":"19293:3:36"},"nativeSrc":"19293:10:36","nodeType":"YulFunctionCall","src":"19293:10:36"},"variableNames":[{"name":"i","nativeSrc":"19288:1:36","nodeType":"YulIdentifier","src":"19288:1:36"}]}]},"pre":{"nativeSrc":"19268:3:36","nodeType":"YulBlock","src":"19268:3:36","statements":[]},"src":"19264:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"19397:3:36","nodeType":"YulIdentifier","src":"19397:3:36"},{"name":"length","nativeSrc":"19402:6:36","nodeType":"YulIdentifier","src":"19402:6:36"}],"functionName":{"name":"add","nativeSrc":"19393:3:36","nodeType":"YulIdentifier","src":"19393:3:36"},"nativeSrc":"19393:16:36","nodeType":"YulFunctionCall","src":"19393:16:36"},{"kind":"number","nativeSrc":"19411:1:36","nodeType":"YulLiteral","src":"19411:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"19386:6:36","nodeType":"YulIdentifier","src":"19386:6:36"},"nativeSrc":"19386:27:36","nodeType":"YulFunctionCall","src":"19386:27:36"},"nativeSrc":"19386:27:36","nodeType":"YulExpressionStatement","src":"19386:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19169:250:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"19213:3:36","nodeType":"YulTypedName","src":"19213:3:36","type":""},{"name":"dst","nativeSrc":"19218:3:36","nodeType":"YulTypedName","src":"19218:3:36","type":""},{"name":"length","nativeSrc":"19223:6:36","nodeType":"YulTypedName","src":"19223:6:36","type":""}],"src":"19169:250:36"},{"body":{"nativeSrc":"19473:280:36","nodeType":"YulBlock","src":"19473:280:36","statements":[{"nativeSrc":"19483:26:36","nodeType":"YulVariableDeclaration","src":"19483:26:36","value":{"arguments":[{"name":"value","nativeSrc":"19503:5:36","nodeType":"YulIdentifier","src":"19503:5:36"}],"functionName":{"name":"mload","nativeSrc":"19497:5:36","nodeType":"YulIdentifier","src":"19497:5:36"},"nativeSrc":"19497:12:36","nodeType":"YulFunctionCall","src":"19497:12:36"},"variables":[{"name":"length","nativeSrc":"19487:6:36","nodeType":"YulTypedName","src":"19487:6:36","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"19525:3:36","nodeType":"YulIdentifier","src":"19525:3:36"},{"name":"length","nativeSrc":"19530:6:36","nodeType":"YulIdentifier","src":"19530:6:36"}],"functionName":{"name":"mstore","nativeSrc":"19518:6:36","nodeType":"YulIdentifier","src":"19518:6:36"},"nativeSrc":"19518:19:36","nodeType":"YulFunctionCall","src":"19518:19:36"},"nativeSrc":"19518:19:36","nodeType":"YulExpressionStatement","src":"19518:19:36"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"19585:5:36","nodeType":"YulIdentifier","src":"19585:5:36"},{"kind":"number","nativeSrc":"19592:4:36","nodeType":"YulLiteral","src":"19592:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19581:3:36","nodeType":"YulIdentifier","src":"19581:3:36"},"nativeSrc":"19581:16:36","nodeType":"YulFunctionCall","src":"19581:16:36"},{"arguments":[{"name":"pos","nativeSrc":"19603:3:36","nodeType":"YulIdentifier","src":"19603:3:36"},{"kind":"number","nativeSrc":"19608:4:36","nodeType":"YulLiteral","src":"19608:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19599:3:36","nodeType":"YulIdentifier","src":"19599:3:36"},"nativeSrc":"19599:14:36","nodeType":"YulFunctionCall","src":"19599:14:36"},{"name":"length","nativeSrc":"19615:6:36","nodeType":"YulIdentifier","src":"19615:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19546:34:36","nodeType":"YulIdentifier","src":"19546:34:36"},"nativeSrc":"19546:76:36","nodeType":"YulFunctionCall","src":"19546:76:36"},"nativeSrc":"19546:76:36","nodeType":"YulExpressionStatement","src":"19546:76:36"},{"nativeSrc":"19631:116:36","nodeType":"YulAssignment","src":"19631:116:36","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"19646:3:36","nodeType":"YulIdentifier","src":"19646:3:36"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"19659:6:36","nodeType":"YulIdentifier","src":"19659:6:36"},{"kind":"number","nativeSrc":"19667:2:36","nodeType":"YulLiteral","src":"19667:2:36","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"19655:3:36","nodeType":"YulIdentifier","src":"19655:3:36"},"nativeSrc":"19655:15:36","nodeType":"YulFunctionCall","src":"19655:15:36"},{"kind":"number","nativeSrc":"19672:66:36","nodeType":"YulLiteral","src":"19672:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"19651:3:36","nodeType":"YulIdentifier","src":"19651:3:36"},"nativeSrc":"19651:88:36","nodeType":"YulFunctionCall","src":"19651:88:36"}],"functionName":{"name":"add","nativeSrc":"19642:3:36","nodeType":"YulIdentifier","src":"19642:3:36"},"nativeSrc":"19642:98:36","nodeType":"YulFunctionCall","src":"19642:98:36"},{"kind":"number","nativeSrc":"19742:4:36","nodeType":"YulLiteral","src":"19742:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19638:3:36","nodeType":"YulIdentifier","src":"19638:3:36"},"nativeSrc":"19638:109:36","nodeType":"YulFunctionCall","src":"19638:109:36"},"variableNames":[{"name":"end","nativeSrc":"19631:3:36","nodeType":"YulIdentifier","src":"19631:3:36"}]}]},"name":"abi_encode_bytes","nativeSrc":"19424:329:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"19450:5:36","nodeType":"YulTypedName","src":"19450:5:36","type":""},{"name":"pos","nativeSrc":"19457:3:36","nodeType":"YulTypedName","src":"19457:3:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19465:3:36","nodeType":"YulTypedName","src":"19465:3:36","type":""}],"src":"19424:329:36"},{"body":{"nativeSrc":"19905:141:36","nodeType":"YulBlock","src":"19905:141:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19922:9:36","nodeType":"YulIdentifier","src":"19922:9:36"},{"name":"value0","nativeSrc":"19933:6:36","nodeType":"YulIdentifier","src":"19933:6:36"}],"functionName":{"name":"mstore","nativeSrc":"19915:6:36","nodeType":"YulIdentifier","src":"19915:6:36"},"nativeSrc":"19915:25:36","nodeType":"YulFunctionCall","src":"19915:25:36"},"nativeSrc":"19915:25:36","nodeType":"YulExpressionStatement","src":"19915:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19960:9:36","nodeType":"YulIdentifier","src":"19960:9:36"},{"kind":"number","nativeSrc":"19971:2:36","nodeType":"YulLiteral","src":"19971:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19956:3:36","nodeType":"YulIdentifier","src":"19956:3:36"},"nativeSrc":"19956:18:36","nodeType":"YulFunctionCall","src":"19956:18:36"},{"kind":"number","nativeSrc":"19976:2:36","nodeType":"YulLiteral","src":"19976:2:36","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"19949:6:36","nodeType":"YulIdentifier","src":"19949:6:36"},"nativeSrc":"19949:30:36","nodeType":"YulFunctionCall","src":"19949:30:36"},"nativeSrc":"19949:30:36","nodeType":"YulExpressionStatement","src":"19949:30:36"},{"nativeSrc":"19988:52:36","nodeType":"YulAssignment","src":"19988:52:36","value":{"arguments":[{"name":"value1","nativeSrc":"20013:6:36","nodeType":"YulIdentifier","src":"20013:6:36"},{"arguments":[{"name":"headStart","nativeSrc":"20025:9:36","nodeType":"YulIdentifier","src":"20025:9:36"},{"kind":"number","nativeSrc":"20036:2:36","nodeType":"YulLiteral","src":"20036:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20021:3:36","nodeType":"YulIdentifier","src":"20021:3:36"},"nativeSrc":"20021:18:36","nodeType":"YulFunctionCall","src":"20021:18:36"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"19996:16:36","nodeType":"YulIdentifier","src":"19996:16:36"},"nativeSrc":"19996:44:36","nodeType":"YulFunctionCall","src":"19996:44:36"},"variableNames":[{"name":"tail","nativeSrc":"19988:4:36","nodeType":"YulIdentifier","src":"19988:4:36"}]}]},"name":"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"19758:288:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19866:9:36","nodeType":"YulTypedName","src":"19866:9:36","type":""},{"name":"value1","nativeSrc":"19877:6:36","nodeType":"YulTypedName","src":"19877:6:36","type":""},{"name":"value0","nativeSrc":"19885:6:36","nodeType":"YulTypedName","src":"19885:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19896:4:36","nodeType":"YulTypedName","src":"19896:4:36","type":""}],"src":"19758:288:36"},{"body":{"nativeSrc":"20188:150:36","nodeType":"YulBlock","src":"20188:150:36","statements":[{"nativeSrc":"20198:27:36","nodeType":"YulVariableDeclaration","src":"20198:27:36","value":{"arguments":[{"name":"value0","nativeSrc":"20218:6:36","nodeType":"YulIdentifier","src":"20218:6:36"}],"functionName":{"name":"mload","nativeSrc":"20212:5:36","nodeType":"YulIdentifier","src":"20212:5:36"},"nativeSrc":"20212:13:36","nodeType":"YulFunctionCall","src":"20212:13:36"},"variables":[{"name":"length","nativeSrc":"20202:6:36","nodeType":"YulTypedName","src":"20202:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"20273:6:36","nodeType":"YulIdentifier","src":"20273:6:36"},{"kind":"number","nativeSrc":"20281:4:36","nodeType":"YulLiteral","src":"20281:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"20269:3:36","nodeType":"YulIdentifier","src":"20269:3:36"},"nativeSrc":"20269:17:36","nodeType":"YulFunctionCall","src":"20269:17:36"},{"name":"pos","nativeSrc":"20288:3:36","nodeType":"YulIdentifier","src":"20288:3:36"},{"name":"length","nativeSrc":"20293:6:36","nodeType":"YulIdentifier","src":"20293:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"20234:34:36","nodeType":"YulIdentifier","src":"20234:34:36"},"nativeSrc":"20234:66:36","nodeType":"YulFunctionCall","src":"20234:66:36"},"nativeSrc":"20234:66:36","nodeType":"YulExpressionStatement","src":"20234:66:36"},{"nativeSrc":"20309:23:36","nodeType":"YulAssignment","src":"20309:23:36","value":{"arguments":[{"name":"pos","nativeSrc":"20320:3:36","nodeType":"YulIdentifier","src":"20320:3:36"},{"name":"length","nativeSrc":"20325:6:36","nodeType":"YulIdentifier","src":"20325:6:36"}],"functionName":{"name":"add","nativeSrc":"20316:3:36","nodeType":"YulIdentifier","src":"20316:3:36"},"nativeSrc":"20316:16:36","nodeType":"YulFunctionCall","src":"20316:16:36"},"variableNames":[{"name":"end","nativeSrc":"20309:3:36","nodeType":"YulIdentifier","src":"20309:3:36"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"20051:287:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20164:3:36","nodeType":"YulTypedName","src":"20164:3:36","type":""},{"name":"value0","nativeSrc":"20169:6:36","nodeType":"YulTypedName","src":"20169:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20180:3:36","nodeType":"YulTypedName","src":"20180:3:36","type":""}],"src":"20051:287:36"},{"body":{"nativeSrc":"20517:235:36","nodeType":"YulBlock","src":"20517:235:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20534:9:36","nodeType":"YulIdentifier","src":"20534:9:36"},{"kind":"number","nativeSrc":"20545:2:36","nodeType":"YulLiteral","src":"20545:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20527:6:36","nodeType":"YulIdentifier","src":"20527:6:36"},"nativeSrc":"20527:21:36","nodeType":"YulFunctionCall","src":"20527:21:36"},"nativeSrc":"20527:21:36","nodeType":"YulExpressionStatement","src":"20527:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20568:9:36","nodeType":"YulIdentifier","src":"20568:9:36"},{"kind":"number","nativeSrc":"20579:2:36","nodeType":"YulLiteral","src":"20579:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20564:3:36","nodeType":"YulIdentifier","src":"20564:3:36"},"nativeSrc":"20564:18:36","nodeType":"YulFunctionCall","src":"20564:18:36"},{"kind":"number","nativeSrc":"20584:2:36","nodeType":"YulLiteral","src":"20584:2:36","type":"","value":"45"}],"functionName":{"name":"mstore","nativeSrc":"20557:6:36","nodeType":"YulIdentifier","src":"20557:6:36"},"nativeSrc":"20557:30:36","nodeType":"YulFunctionCall","src":"20557:30:36"},"nativeSrc":"20557:30:36","nodeType":"YulExpressionStatement","src":"20557:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20607:9:36","nodeType":"YulIdentifier","src":"20607:9:36"},{"kind":"number","nativeSrc":"20618:2:36","nodeType":"YulLiteral","src":"20618:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20603:3:36","nodeType":"YulIdentifier","src":"20603:3:36"},"nativeSrc":"20603:18:36","nodeType":"YulFunctionCall","src":"20603:18:36"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nativeSrc":"20623:34:36","nodeType":"YulLiteral","src":"20623:34:36","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nativeSrc":"20596:6:36","nodeType":"YulIdentifier","src":"20596:6:36"},"nativeSrc":"20596:62:36","nodeType":"YulFunctionCall","src":"20596:62:36"},"nativeSrc":"20596:62:36","nodeType":"YulExpressionStatement","src":"20596:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20678:9:36","nodeType":"YulIdentifier","src":"20678:9:36"},{"kind":"number","nativeSrc":"20689:2:36","nodeType":"YulLiteral","src":"20689:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20674:3:36","nodeType":"YulIdentifier","src":"20674:3:36"},"nativeSrc":"20674:18:36","nodeType":"YulFunctionCall","src":"20674:18:36"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nativeSrc":"20694:15:36","nodeType":"YulLiteral","src":"20694:15:36","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nativeSrc":"20667:6:36","nodeType":"YulIdentifier","src":"20667:6:36"},"nativeSrc":"20667:43:36","nodeType":"YulFunctionCall","src":"20667:43:36"},"nativeSrc":"20667:43:36","nodeType":"YulExpressionStatement","src":"20667:43:36"},{"nativeSrc":"20719:27:36","nodeType":"YulAssignment","src":"20719:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"20731:9:36","nodeType":"YulIdentifier","src":"20731:9:36"},{"kind":"number","nativeSrc":"20742:3:36","nodeType":"YulLiteral","src":"20742:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20727:3:36","nodeType":"YulIdentifier","src":"20727:3:36"},"nativeSrc":"20727:19:36","nodeType":"YulFunctionCall","src":"20727:19:36"},"variableNames":[{"name":"tail","nativeSrc":"20719:4:36","nodeType":"YulIdentifier","src":"20719:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20343:409:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20494:9:36","nodeType":"YulTypedName","src":"20494:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20508:4:36","nodeType":"YulTypedName","src":"20508:4:36","type":""}],"src":"20343:409:36"},{"body":{"nativeSrc":"20938:217:36","nodeType":"YulBlock","src":"20938:217:36","statements":[{"nativeSrc":"20948:27:36","nodeType":"YulAssignment","src":"20948:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"20960:9:36","nodeType":"YulIdentifier","src":"20960:9:36"},{"kind":"number","nativeSrc":"20971:3:36","nodeType":"YulLiteral","src":"20971:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20956:3:36","nodeType":"YulIdentifier","src":"20956:3:36"},"nativeSrc":"20956:19:36","nodeType":"YulFunctionCall","src":"20956:19:36"},"variableNames":[{"name":"tail","nativeSrc":"20948:4:36","nodeType":"YulIdentifier","src":"20948:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20991:9:36","nodeType":"YulIdentifier","src":"20991:9:36"},{"name":"value0","nativeSrc":"21002:6:36","nodeType":"YulIdentifier","src":"21002:6:36"}],"functionName":{"name":"mstore","nativeSrc":"20984:6:36","nodeType":"YulIdentifier","src":"20984:6:36"},"nativeSrc":"20984:25:36","nodeType":"YulFunctionCall","src":"20984:25:36"},"nativeSrc":"20984:25:36","nodeType":"YulExpressionStatement","src":"20984:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21029:9:36","nodeType":"YulIdentifier","src":"21029:9:36"},{"kind":"number","nativeSrc":"21040:2:36","nodeType":"YulLiteral","src":"21040:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21025:3:36","nodeType":"YulIdentifier","src":"21025:3:36"},"nativeSrc":"21025:18:36","nodeType":"YulFunctionCall","src":"21025:18:36"},{"arguments":[{"name":"value1","nativeSrc":"21049:6:36","nodeType":"YulIdentifier","src":"21049:6:36"},{"kind":"number","nativeSrc":"21057:4:36","nodeType":"YulLiteral","src":"21057:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"21045:3:36","nodeType":"YulIdentifier","src":"21045:3:36"},"nativeSrc":"21045:17:36","nodeType":"YulFunctionCall","src":"21045:17:36"}],"functionName":{"name":"mstore","nativeSrc":"21018:6:36","nodeType":"YulIdentifier","src":"21018:6:36"},"nativeSrc":"21018:45:36","nodeType":"YulFunctionCall","src":"21018:45:36"},"nativeSrc":"21018:45:36","nodeType":"YulExpressionStatement","src":"21018:45:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21083:9:36","nodeType":"YulIdentifier","src":"21083:9:36"},{"kind":"number","nativeSrc":"21094:2:36","nodeType":"YulLiteral","src":"21094:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21079:3:36","nodeType":"YulIdentifier","src":"21079:3:36"},"nativeSrc":"21079:18:36","nodeType":"YulFunctionCall","src":"21079:18:36"},{"name":"value2","nativeSrc":"21099:6:36","nodeType":"YulIdentifier","src":"21099:6:36"}],"functionName":{"name":"mstore","nativeSrc":"21072:6:36","nodeType":"YulIdentifier","src":"21072:6:36"},"nativeSrc":"21072:34:36","nodeType":"YulFunctionCall","src":"21072:34:36"},"nativeSrc":"21072:34:36","nodeType":"YulExpressionStatement","src":"21072:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21126:9:36","nodeType":"YulIdentifier","src":"21126:9:36"},{"kind":"number","nativeSrc":"21137:2:36","nodeType":"YulLiteral","src":"21137:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21122:3:36","nodeType":"YulIdentifier","src":"21122:3:36"},"nativeSrc":"21122:18:36","nodeType":"YulFunctionCall","src":"21122:18:36"},{"name":"value3","nativeSrc":"21142:6:36","nodeType":"YulIdentifier","src":"21142:6:36"}],"functionName":{"name":"mstore","nativeSrc":"21115:6:36","nodeType":"YulIdentifier","src":"21115:6:36"},"nativeSrc":"21115:34:36","nodeType":"YulFunctionCall","src":"21115:34:36"},"nativeSrc":"21115:34:36","nodeType":"YulExpressionStatement","src":"21115:34:36"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"20757:398:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20883:9:36","nodeType":"YulTypedName","src":"20883:9:36","type":""},{"name":"value3","nativeSrc":"20894:6:36","nodeType":"YulTypedName","src":"20894:6:36","type":""},{"name":"value2","nativeSrc":"20902:6:36","nodeType":"YulTypedName","src":"20902:6:36","type":""},{"name":"value1","nativeSrc":"20910:6:36","nodeType":"YulTypedName","src":"20910:6:36","type":""},{"name":"value0","nativeSrc":"20918:6:36","nodeType":"YulTypedName","src":"20918:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20929:4:36","nodeType":"YulTypedName","src":"20929:4:36","type":""}],"src":"20757:398:36"},{"body":{"nativeSrc":"21334:179:36","nodeType":"YulBlock","src":"21334:179:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21351:9:36","nodeType":"YulIdentifier","src":"21351:9:36"},{"kind":"number","nativeSrc":"21362:2:36","nodeType":"YulLiteral","src":"21362:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21344:6:36","nodeType":"YulIdentifier","src":"21344:6:36"},"nativeSrc":"21344:21:36","nodeType":"YulFunctionCall","src":"21344:21:36"},"nativeSrc":"21344:21:36","nodeType":"YulExpressionStatement","src":"21344:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21385:9:36","nodeType":"YulIdentifier","src":"21385:9:36"},{"kind":"number","nativeSrc":"21396:2:36","nodeType":"YulLiteral","src":"21396:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21381:3:36","nodeType":"YulIdentifier","src":"21381:3:36"},"nativeSrc":"21381:18:36","nodeType":"YulFunctionCall","src":"21381:18:36"},{"kind":"number","nativeSrc":"21401:2:36","nodeType":"YulLiteral","src":"21401:2:36","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"21374:6:36","nodeType":"YulIdentifier","src":"21374:6:36"},"nativeSrc":"21374:30:36","nodeType":"YulFunctionCall","src":"21374:30:36"},"nativeSrc":"21374:30:36","nodeType":"YulExpressionStatement","src":"21374:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21424:9:36","nodeType":"YulIdentifier","src":"21424:9:36"},{"kind":"number","nativeSrc":"21435:2:36","nodeType":"YulLiteral","src":"21435:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21420:3:36","nodeType":"YulIdentifier","src":"21420:3:36"},"nativeSrc":"21420:18:36","nodeType":"YulFunctionCall","src":"21420:18:36"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"21440:31:36","nodeType":"YulLiteral","src":"21440:31:36","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"21413:6:36","nodeType":"YulIdentifier","src":"21413:6:36"},"nativeSrc":"21413:59:36","nodeType":"YulFunctionCall","src":"21413:59:36"},"nativeSrc":"21413:59:36","nodeType":"YulExpressionStatement","src":"21413:59:36"},{"nativeSrc":"21481:26:36","nodeType":"YulAssignment","src":"21481:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"21493:9:36","nodeType":"YulIdentifier","src":"21493:9:36"},{"kind":"number","nativeSrc":"21504:2:36","nodeType":"YulLiteral","src":"21504:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21489:3:36","nodeType":"YulIdentifier","src":"21489:3:36"},"nativeSrc":"21489:18:36","nodeType":"YulFunctionCall","src":"21489:18:36"},"variableNames":[{"name":"tail","nativeSrc":"21481:4:36","nodeType":"YulIdentifier","src":"21481:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21160:353:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21311:9:36","nodeType":"YulTypedName","src":"21311:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21325:4:36","nodeType":"YulTypedName","src":"21325:4:36","type":""}],"src":"21160:353:36"},{"body":{"nativeSrc":"21639:98:36","nodeType":"YulBlock","src":"21639:98:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21656:9:36","nodeType":"YulIdentifier","src":"21656:9:36"},{"kind":"number","nativeSrc":"21667:2:36","nodeType":"YulLiteral","src":"21667:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21649:6:36","nodeType":"YulIdentifier","src":"21649:6:36"},"nativeSrc":"21649:21:36","nodeType":"YulFunctionCall","src":"21649:21:36"},"nativeSrc":"21649:21:36","nodeType":"YulExpressionStatement","src":"21649:21:36"},{"nativeSrc":"21679:52:36","nodeType":"YulAssignment","src":"21679:52:36","value":{"arguments":[{"name":"value0","nativeSrc":"21704:6:36","nodeType":"YulIdentifier","src":"21704:6:36"},{"arguments":[{"name":"headStart","nativeSrc":"21716:9:36","nodeType":"YulIdentifier","src":"21716:9:36"},{"kind":"number","nativeSrc":"21727:2:36","nodeType":"YulLiteral","src":"21727:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21712:3:36","nodeType":"YulIdentifier","src":"21712:3:36"},"nativeSrc":"21712:18:36","nodeType":"YulFunctionCall","src":"21712:18:36"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"21687:16:36","nodeType":"YulIdentifier","src":"21687:16:36"},"nativeSrc":"21687:44:36","nodeType":"YulFunctionCall","src":"21687:44:36"},"variableNames":[{"name":"tail","nativeSrc":"21679:4:36","nodeType":"YulIdentifier","src":"21679:4:36"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21518:219:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21608:9:36","nodeType":"YulTypedName","src":"21608:9:36","type":""},{"name":"value0","nativeSrc":"21619:6:36","nodeType":"YulTypedName","src":"21619:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21630:4:36","nodeType":"YulTypedName","src":"21630:4:36","type":""}],"src":"21518:219:36"}]},"contents":"{\n    { }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_contract$_IRealmId_$5006__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        value5 := abi_decode_uint8(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptrt_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), value1)\n        calldatacopy(add(headStart, 96), value0, value1)\n        mstore(add(add(headStart, value1), 96), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 96)\n        mstore(add(headStart, 0x20), value2)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        if gt(value1, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length := shl(5, value1)\n        calldatacopy(add(headStart, 64), value0, length)\n        tail := add(add(headStart, length), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000)\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), and(shl(248, value2), 0xff00000000000000000000000000000000000000000000000000000000000000))\n        end := add(pos, 65)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value6, value5, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), and(shl(96, value2), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 84), value3)\n        mstore(add(pos, 116), value4)\n        mstore(add(pos, 148), value5)\n        mstore(add(pos, 180), value6)\n        end := add(pos, 212)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1556":[{"length":32,"start":2741},{"length":32,"start":2917},{"length":32,"start":3974},{"length":32,"start":4150},{"length":32,"start":4479}],"4060":[{"length":32,"start":636},{"length":32,"start":1670},{"length":32,"start":1900},{"length":32,"start":2157},{"length":32,"start":2336},{"length":32,"start":3699},{"length":32,"start":4694},{"length":32,"start":4924},{"length":32,"start":6330},{"length":32,"start":6552},{"length":32,"start":6770},{"length":32,"start":6990},{"length":32,"start":7185},{"length":32,"start":7446},{"length":32,"start":7696},{"length":32,"start":8130},{"length":32,"start":8510}]},"linkReferences":{},"object":"6080604052600436106101e35760003560e01c80638bb9c5bf11610102578063ad3b1d4811610095578063dc893ce411610064578063dc893ce4146105f1578063e564a0e214610611578063f2fde38b14610631578063f95159621461065157600080fd5b8063ad3b1d481461057b578063bcb396211461059b578063d14a5c71146105b1578063d547741f146105d157600080fd5b806399d342ac116100d157806399d342ac146104e75780639cc7f708146105075780639d70b00514610527578063a3b0b5a31461054757600080fd5b80638bb9c5bf146104725780638da5cb5b14610492578063906405a3146104a757806391d14854146104c757600080fd5b80634529cc1b1161017a57806375b238fc1161014957806375b238fc146103e9578063794459be1461041d5780638129fc1c1461043d57806386a8e98a1461045257600080fd5b80634529cc1b146103435780634f1ef2861461038357806351955dfc1461039657806352d1902d146103d457600080fd5b80632f2ff15d116101b65780632f2ff15d146102c35780633659cfe6146102e35780633f30b00f146103035780634519eb1d1461032357600080fd5b8063098b6419146101e8578063141a468c1461021b57806318ee89f0146102485780632681a28a1461026a575b600080fd5b3480156101f457600080fd5b5061020861020336600461330a565b610681565b6040519081526020015b60405180910390f35b34801561022757600080fd5b5061020861023636600461335d565b60686020526000908152604090205481565b34801561025457600080fd5b50610268610263366004613376565b610809565b005b34801561027657600080fd5b5061029e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610212565b3480156102cf57600080fd5b506102686102de3660046133d3565b610a70565b3480156102ef57600080fd5b506102686102fe366004613403565b610a9e565b34801561030f57600080fd5b5061026861031e366004613420565b610ca3565b34801561032f57600080fd5b5061020861033e366004613495565b610e2a565b34801561034f57600080fd5b5061037361035e36600461335d565b60666020526000908152604090205460ff1681565b6040519015158152602001610212565b610268610391366004613501565b610f6f565b3480156103a257600080fd5b506102086103b13660046135e3565b606760209081526000938452604080852082529284528284209052825290205481565b3480156103e057600080fd5b50610208611165565b3480156103f557600080fd5b506102087fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561042957600080fd5b5061020861043836600461360f565b611251565b34801561044957600080fd5b506102686113db565b34801561045e57600080fd5b5061026861046d36600461335d565b61157f565b34801561047e57600080fd5b5061026861048d36600461335d565b611663565b34801561049e57600080fd5b5061029e611677565b3480156104b357600080fd5b506102686104c2366004613420565b6116a3565b3480156104d357600080fd5b506103736104e23660046133d3565b61182d565b3480156104f357600080fd5b50610268610502366004613671565b61187a565b34801561051357600080fd5b5061020861052236600461335d565b61194f565b34801561053357600080fd5b506102686105423660046136f4565b611a32565b34801561055357600080fd5b506102087f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b34801561058757600080fd5b50610208610596366004613762565b611b05565b3480156105a757600080fd5b5061020860655481565b3480156105bd57600080fd5b506102686105cc3660046135e3565b611bdf565b3480156105dd57600080fd5b506102686105ec3660046133d3565b611dac565b3480156105fd57600080fd5b5061026861060c366004613784565b611dcf565b34801561061d57600080fd5b5061026861062c3660046137d5565b6120fe565b34801561063d57600080fd5b5061026861064c366004613403565b6121cd565b34801561065d57600080fd5b5061037361066c36600461335d565b60696020526000908152604090205460ff1681565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cad6b9018585886040518463ffffffff1660e01b81526004016106e193929190613833565b602060405180830381865afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610722919061388a565b6040517fa9735f940000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d7919061388a565b60008881526067602090815260408083209583529481528482209282529190915291909120549150505b949350505050565b61083e7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9335b6108376121e1565b919061220f565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed91906138a3565b506040517fa9735f94000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9735f9490602401602060405180830381865afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a0919061388a565b90508381146109ea576040517fb196cc7700000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044015b60405180910390fd5b6000868152606760209081526040808320888452825280832087845290915281208054859290610a1b9084906138ef565b909155505060408051868152602081018690529081018490528290879033907f9092bf6bd1cf7db4fcf41aedc7c0333b51c57f5b80b429bc3d9caa5587c6ad82906060015b60405180910390a4505050505050565b33610a8381610a7d612295565b906122c3565b610a99838383610a916121e1565b92919061232e565b505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610b63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016109e1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610bd87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610c7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016109e1565b610c8481612405565b60408051600080825260208201909252610ca091839190612411565b50565b610ccd7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361082f565b80610d04576040517f3fb4608600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610dec5760696000848484818110610d2557610d25613902565b602090810292909201358352508101919091526040016000205460ff1615610d9557828282818110610d5957610d59613902565b905060200201356040517fb64212420000000000000000000000000000000000000000000000000000000081526004016109e191815260200190565b600160696000858585818110610dad57610dad613902565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610de490613931565b915050610d07565b507f0d8c56a8918ec09c2fe3c4d9fcc00ece66df217a1ab3ad768dd0a71620da5b4e8282604051610e1e929190613969565b60405180910390a15050565b6040517fa9735f9400000000000000000000000000000000000000000000000000000000815260048101859052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede919061388a565b60008781526068602090815260408083205460655482518085018d905280840187905260608c811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690820152607481018b9052609481019190915260b4810189905260d4808201929092528251808203909201825260f401909152805191012091925090979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003611034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016109e1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110a97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161461114c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016109e1565b61115582612405565b61116182826001612411565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016109e1565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cad6b9018585886040518463ffffffff1660e01b81526004016112b193929190613833565b602060405180830381865afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f2919061388a565b6040517fa9735f940000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a7919061388a565b60655460009081526067602090815260408083209583529481528482209282529190915291909120549150505b9392505050565b600054610100900460ff16158080156113fb5750600054600160ff909116105b806114155750303b158015611415575060005460ff166001145b6114a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109e1565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156114ff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611507612610565b61151933611513612295565b906126a9565b8015610ca057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6115a97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361082f565b60008181526066602052604090205460ff16156115f5576040517f796c3e9a000000000000000000000000000000000000000000000000000000008152600481018290526024016109e1565b60658190556000818152606660205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f61228c895f8ba06548597d3e34a23bc0ecb6d1e62a1eb3fa30be04883a17ef31906115749083815260200190565b610ca033826116706121e1565b91906126e8565b600061169e611684612295565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6116cd7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361082f565b80611704576040517f3fb4608600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156117fb576069600084848481811061172557611725613902565b602090810292909201358352508101919091526040016000205460ff166117945782828281811061175857611758613902565b905060200201356040517fa89513e10000000000000000000000000000000000000000000000000000000081526004016109e191815260200190565b606960008484848181106117aa576117aa613902565b6020908102929092013583525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055806117f381613931565b915050611707565b507f5b2c9fcbb27d48bdbfc59f0564b5ba81539309ebf09a940fad64d171bcfb9ff98282604051610e1e929190613969565b6000611871838361183c6121e1565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b90505b92915050565b6040517fcad6b90100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cad6b901906118f3908b908b908e90600401613833565b602060405180830381865afa158015611910573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611934919061388a565b9050611944818787878787611dcf565b505050505050505050565b6040517fa9735f9400000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa1580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a03919061388a565b606554600090815260676020908152604080832096835295815285822092825291909152929092205492915050565b6040517fcad6b90100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cad6b90190611aab90899089908c90600401613833565b602060405180830381865afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aec919061388a565b9050611afb8882868686610809565b5050505050505050565b6040517fa9735f9400000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa158015611b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb9919061388a565b600094855260676020908152604080872095875294815284862091865252505090205490565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9191906138a3565b90503373ffffffffffffffffffffffffffffffffffffffff821614611ce4576040517f33ffff9b0000000000000000000000000000000000000000000000000000000081523360048201526024016109e1565b6040517fa9735f94000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9735f9490602401602060405180830381865afa158015611d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d96919061388a565b9050611da5858286868661278c565b5050505050565b33611db981610a7d612295565b610a99838383611dc76121e1565b9291906128d1565b6000868152606860205260408082205490517fa9735f94000000000000000000000000000000000000000000000000000000008152600481018990529091907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9735f9490602401602060405180830381865afa158015611e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e90919061388a565b6065546040805160208082018d905281830185905233606090811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690830152607482018c9052609482019390935260b481018a905260d48082018790528251808303909101815260f490910190915280519101209091506000906040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052909150600090605c01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020909101207f6352211e000000000000000000000000000000000000000000000000000000008252600482018c9052915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015612009573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202d91906138a3565b60408051602081018a905280820189905260f88b901b7fff00000000000000000000000000000000000000000000000000000000000000166060820152815160418183030181526061909101909152909150600061208c83858461299b565b9050806120c5576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120d28d878e8e8761278c565b6120dd8760016138ef565b60009d8e5260686020526040909d209c909c55505050505050505050505050565b6040517fcad6b90100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cad6b9019061217790889088908b90600401613833565b602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b8919061388a565b90506121c5818484611bdf565b505050505050565b610ca033826121da612295565b9190612b68565b60008061187460017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236139bb565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610a99576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff821660248201526044016109e1565b60008061187460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6139bb565b815473ffffffffffffffffffffffffffffffffffffffff828116911614611161576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016109e1565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166123ff5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b610ca033610a7d612295565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561244457610a9983612c7c565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156124c9575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526124c69181019061388a565b60015b612555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016109e1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612604576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016109e1565b50610a99838383612d86565b600054610100900460ff166126a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109e1565b565b6126de6126d760017f5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb846139bb565b6001612dab565b6111618282612df7565b6126f383828461220f565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60655460009081526067602090815260408083208884528252808320878452909152902054838110156127f5576040517fcf47918100000000000000000000000000000000000000000000000000000000815260048101879052602481018590526044016109e1565b60008381526069602052604090205460ff16612840576040517fa89513e1000000000000000000000000000000000000000000000000000000008152600481018490526024016109e1565b61284a84826139bb565b6065805460009081526067602090815260408083208b845282528083208a8452825291829020939093559054815133815292830188905290820186905273ffffffffffffffffffffffffffffffffffffffff84166060830152849188907fe514533875fbd3f8f396088d636e746599d8b5c3ba77e9ccfa9fc01ff706460190608001610a60565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156123ff5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016123f6565b60008060006129aa8585612eb4565b909250905060008160048111156129c3576129c36139ce565b1480156129fb57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612a0b576001925050506113d4565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401612a40929190613a6b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612ac99190613a84565b600060405180830381855afa9150503d8060008114612b04576040519150601f19603f3d011682016040523d82523d6000602084013e612b09565b606091505b5091509150818015612b1c575080516020145b8015612b5c575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090612b5a908301602090810190840161388a565b145b98975050505050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114612bd5576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016109e1565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146123ff5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b73ffffffffffffffffffffffffffffffffffffffff81163b612d20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016109e1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612d8f83612ef9565b600082511180612d9c5750805b15610a99576123ff8383612f46565b81548290828110612df2576040517fbf0c18ec00000000000000000000000000000000000000000000000000000000815260048101829052602481018490526044016109e1565b505550565b73ffffffffffffffffffffffffffffffffffffffff811615612e7f5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6111617f7f5828d0000000000000000000000000000000000000000000000000000000006001612ead612f6b565b9190612f99565b6000808251604103612eea5760208301516040840151606085015160001a612ede87828585613075565b94509450505050612ef2565b506000905060025b9250929050565b612f0281612c7c565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606118718383604051806060016040528060278152602001613ab460279139613164565b60008061187460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6139bb565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601613011576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156130ac575060009050600361315b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613100573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166131545760006001925092505061315b565b9150600090505b94509492505050565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405161318e9190613a84565b600060405180830381855af49150503d80600081146131c9576040519150601f19603f3d011682016040523d82523d6000602084013e6131ce565b606091505b50915091506131df868383876131e9565b9695505050505050565b6060831561327f5782516000036132785773ffffffffffffffffffffffffffffffffffffffff85163b613278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109e1565b5081610801565b61080183838151156132945781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e19190613aa0565b60008083601f8401126132da57600080fd5b50813567ffffffffffffffff8111156132f257600080fd5b602083019150836020828501011115612ef257600080fd5b6000806000806060858703121561332057600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561334557600080fd5b613351878288016132c8565b95989497509550505050565b60006020828403121561336f57600080fd5b5035919050565b600080600080600060a0868803121561338e57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ca057600080fd5b600080604083850312156133e657600080fd5b8235915060208301356133f8816133b1565b809150509250929050565b60006020828403121561341557600080fd5b81356113d4816133b1565b6000806020838503121561343357600080fd5b823567ffffffffffffffff8082111561344b57600080fd5b818501915085601f83011261345f57600080fd5b81358181111561346e57600080fd5b8660208260051b850101111561348357600080fd5b60209290920196919550909350505050565b600080600080608085870312156134ab57600080fd5b8435935060208501356134bd816133b1565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561351457600080fd5b823561351f816133b1565b9150602083013567ffffffffffffffff8082111561353c57600080fd5b818501915085601f83011261355057600080fd5b813581811115613562576135626134d2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156135a8576135a86134d2565b816040528281528860208487010111156135c157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000606084860312156135f857600080fd5b505081359360208301359350604090920135919050565b60008060006040848603121561362457600080fd5b83359250602084013567ffffffffffffffff81111561364257600080fd5b61364e868287016132c8565b9497909650939450505050565b803560ff8116811461366c57600080fd5b919050565b60008060008060008060008060e0898b03121561368d57600080fd5b88359750602089013567ffffffffffffffff8111156136ab57600080fd5b6136b78b828c016132c8565b90985096505060408901359450606089013593506136d760808a0161365b565b925060a0890135915060c089013590509295985092959890939650565b600080600080600080600060c0888a03121561370f57600080fd5b8735965060208801359550604088013567ffffffffffffffff81111561373457600080fd5b6137408a828b016132c8565b989b979a50986060810135976080820135975060a09091013595509350505050565b6000806040838503121561377557600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561379d57600080fd5b8635955060208701359450604087013593506137bb6060880161365b565b92506080870135915060a087013590509295509295509295565b6000806000806000608086880312156137ed57600080fd5b85359450602086013567ffffffffffffffff81111561380b57600080fd5b613817888289016132c8565b9699909850959660408101359660609091013595509350505050565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168301019050826020830152949350505050565b60006020828403121561389c57600080fd5b5051919050565b6000602082840312156138b557600080fd5b81516113d4816133b1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115611874576118746138c0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613962576139626138c0565b5060010190565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156139a257600080fd5b8260051b80856040850137919091016040019392505050565b81810381811115611874576118746138c0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60005b83811015613a18578181015183820152602001613a00565b50506000910152565b60008151808452613a398160208601602086016139fd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8281526040602082015260006108016040830184613a21565b60008251613a968184602087016139fd565b9190910192915050565b6020815260006118716020830184613a2156fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122099eec93751115fd02cb5391e020e7a71ebba7951e79aa7ca38e5b3b21b6cfd4564736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xAD3B1D48 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDC893CE4 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDC893CE4 EQ PUSH2 0x5F1 JUMPI DUP1 PUSH4 0xE564A0E2 EQ PUSH2 0x611 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x631 JUMPI DUP1 PUSH4 0xF9515962 EQ PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAD3B1D48 EQ PUSH2 0x57B JUMPI DUP1 PUSH4 0xBCB39621 EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0xD14A5C71 EQ PUSH2 0x5B1 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x99D342AC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x99D342AC EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x9CC7F708 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0x9D70B005 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xA3B0B5A3 EQ PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0x906405A3 EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4529CC1B GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x75B238FC GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x794459BE EQ PUSH2 0x41D JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x86A8E98A EQ PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4529CC1B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x51955DFC EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x3F30B00F EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x4519EB1D EQ PUSH2 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98B6419 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x141A468C EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x18EE89F0 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x2681A28A EQ PUSH2 0x26A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x330A JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3376 JUMP JUMPDEST PUSH2 0x809 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x212 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x33D3 JUMP JUMPDEST PUSH2 0xA70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x3403 JUMP JUMPDEST PUSH2 0xA9E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x3420 JUMP JUMPDEST PUSH2 0xCA3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x3495 JUMP JUMPDEST PUSH2 0xE2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x373 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x212 JUMP JUMPDEST PUSH2 0x268 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x3501 JUMP JUMPDEST PUSH2 0xF6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x35E3 JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x1165 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x360F JUMP JUMPDEST PUSH2 0x1251 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x13DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH2 0x157F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x48D CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH2 0x1663 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x1677 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3420 JUMP JUMPDEST PUSH2 0x16A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x373 PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x33D3 JUMP JUMPDEST PUSH2 0x182D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x3671 JUMP JUMPDEST PUSH2 0x187A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x522 CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH2 0x194F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x542 CALLDATASIZE PUSH1 0x4 PUSH2 0x36F4 JUMP JUMPDEST PUSH2 0x1A32 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x553 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x596 CALLDATASIZE PUSH1 0x4 PUSH2 0x3762 JUMP JUMPDEST PUSH2 0x1B05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x5CC CALLDATASIZE PUSH1 0x4 PUSH2 0x35E3 JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x5EC CALLDATASIZE PUSH1 0x4 PUSH2 0x33D3 JUMP JUMPDEST PUSH2 0x1DAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x60C CALLDATASIZE PUSH1 0x4 PUSH2 0x3784 JUMP JUMPDEST PUSH2 0x1DCF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x62C CALLDATASIZE PUSH1 0x4 PUSH2 0x37D5 JUMP JUMPDEST PUSH2 0x20FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x64C CALLDATASIZE PUSH1 0x4 PUSH2 0x3403 JUMP JUMPDEST PUSH2 0x21CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x373 PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x335D JUMP JUMPDEST PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x722 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7D7 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x83E PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 CALLER JUMPDEST PUSH2 0x837 PUSH2 0x21E1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8ED SWAP2 SWAP1 PUSH2 0x38A3 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9A0 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP DUP4 DUP2 EQ PUSH2 0x9EA JUMPI PUSH1 0x40 MLOAD PUSH32 0xB196CC7700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xA1B SWAP1 DUP5 SWAP1 PUSH2 0x38EF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP3 SWAP1 DUP8 SWAP1 CALLER SWAP1 PUSH32 0x9092BF6BD1CF7DB4FCF41AEDC7C0333B51C57F5B80B429BC3D9CAA5587C6AD82 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0xA83 DUP2 PUSH2 0xA7D PUSH2 0x2295 JUMP JUMPDEST SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH2 0xA99 DUP4 DUP4 DUP4 PUSH2 0xA91 PUSH2 0x21E1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x232E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xB63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBD8 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0xC84 DUP2 PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xCA0 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x2411 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xCCD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x82F JUMP JUMPDEST DUP1 PUSH2 0xD04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEC JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0xD25 JUMPI PUSH2 0xD25 PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD95 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0xD59 JUMPI PUSH2 0xD59 PUSH2 0x3902 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xB642124200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x69 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0xDAD JUMPI PUSH2 0xDAD PUSH2 0x3902 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xDE4 SWAP1 PUSH2 0x3931 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD07 JUMP JUMPDEST POP PUSH32 0xD8C56A8918EC09C2FE3C4D9FCC00ECE66DF217A1AB3AD768DD0A71620DA5B4E DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE1E SWAP3 SWAP2 SWAP1 PUSH2 0x3969 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEBA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDE SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x65 SLOAD DUP3 MLOAD DUP1 DUP6 ADD DUP14 SWAP1 MSTORE DUP1 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP13 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x74 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x94 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xB4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP1 DUP3 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0xF4 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 SWAP3 POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x10A9 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x114C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x1155 DUP3 PUSH2 0x2405 JUMP JUMPDEST PUSH2 0x1161 DUP3 DUP3 PUSH1 0x1 PUSH2 0x2411 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x122C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12B1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12F2 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1383 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A7 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x13FB JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1415 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1415 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x14A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1507 PUSH2 0x2610 JUMP JUMPDEST PUSH2 0x1519 CALLER PUSH2 0x1513 PUSH2 0x2295 JUMP JUMPDEST SWAP1 PUSH2 0x26A9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x15A9 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x796C3E9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x65 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x61228C895F8BA06548597D3E34A23BC0ECB6D1E62A1EB3FA30BE04883A17EF31 SWAP1 PUSH2 0x1574 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xCA0 CALLER DUP3 PUSH2 0x1670 PUSH2 0x21E1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x26E8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x169E PUSH2 0x1684 PUSH2 0x2295 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x16CD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x82F JUMP JUMPDEST DUP1 PUSH2 0x1704 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17FB JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1725 JUMPI PUSH2 0x1725 PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1794 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x1758 JUMPI PUSH2 0x1758 PUSH2 0x3902 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x17AA JUMPI PUSH2 0x17AA PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 PUSH2 0x17F3 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1707 JUMP JUMPDEST POP PUSH32 0x5B2C9FCBB27D48BDBFC59F0564B5BA81539309EBF09A940FAD64D171BCFB9FF9 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE1E SWAP3 SWAP2 SWAP1 PUSH2 0x3969 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1871 DUP4 DUP4 PUSH2 0x183C PUSH2 0x21E1 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x18F3 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1910 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1934 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x1944 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1DCF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A03 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 DUP2 MSTORE DUP6 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1AAB SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AEC SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x1AFB DUP9 DUP3 DUP7 DUP7 DUP7 PUSH2 0x809 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB9 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP7 KECCAK256 SWAP2 DUP7 MSTORE MSTORE POP POP SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C91 SWAP2 SWAP1 PUSH2 0x38A3 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x1CE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x33FFFF9B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D96 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x1DA5 DUP6 DUP3 DUP7 DUP7 DUP7 PUSH2 0x278C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x1DB9 DUP2 PUSH2 0xA7D PUSH2 0x2295 JUMP JUMPDEST PUSH2 0xA99 DUP4 DUP4 DUP4 PUSH2 0x1DC7 PUSH2 0x21E1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x28D1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E90 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP14 SWAP1 MSTORE DUP2 DUP4 ADD DUP6 SWAP1 MSTORE CALLER PUSH1 0x60 SWAP1 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x74 DUP3 ADD DUP13 SWAP1 MSTORE PUSH1 0x94 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xB4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF4 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP13 SWAP1 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2009 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x202D SWAP2 SWAP1 PUSH2 0x38A3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xF8 DUP12 SWAP1 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x60 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x41 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x61 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 PUSH2 0x208C DUP4 DUP6 DUP5 PUSH2 0x299B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20D2 DUP14 DUP8 DUP15 DUP15 DUP8 PUSH2 0x278C JUMP JUMPDEST PUSH2 0x20DD DUP8 PUSH1 0x1 PUSH2 0x38EF JUMP JUMPDEST PUSH1 0x0 SWAP14 DUP15 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP14 KECCAK256 SWAP13 SWAP1 SWAP13 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x2177 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3833 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2194 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21B8 SWAP2 SWAP1 PUSH2 0x388A JUMP JUMPDEST SWAP1 POP PUSH2 0x21C5 DUP2 DUP5 DUP5 PUSH2 0x1BDF JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xCA0 CALLER DUP3 PUSH2 0x21DA PUSH2 0x2295 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2B68 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1874 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA99 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1874 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x39BB JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1161 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x23FF JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xCA0 CALLER PUSH2 0xA7D PUSH2 0x2295 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2444 JUMPI PUSH2 0xA99 DUP4 PUSH2 0x2C7C JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24C9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24C6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x388A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2555 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x2604 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST POP PUSH2 0xA99 DUP4 DUP4 DUP4 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x26A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x26DE PUSH2 0x26D7 PUSH1 0x1 PUSH32 0x5B388D90DC1312BA799F321972F13311234FA1163BCABEC7CF66101C4876EB84 PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x1 PUSH2 0x2DAB JUMP JUMPDEST PUSH2 0x1161 DUP3 DUP3 PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x26F3 DUP4 DUP3 DUP5 PUSH2 0x220F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x27F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2840 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x284A DUP5 DUP3 PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MLOAD CALLER DUP2 MSTORE SWAP3 DUP4 ADD DUP9 SWAP1 MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 SWAP2 DUP9 SWAP1 PUSH32 0xE514533875FBD3F8F396088D636E746599D8B5C3BA77E9CCFA9FC01FF7064601 SWAP1 PUSH1 0x80 ADD PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x23FF JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x29AA DUP6 DUP6 PUSH2 0x2EB4 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x29C3 JUMPI PUSH2 0x29C3 PUSH2 0x39CE JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x29FB JUMPI POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2A0B JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x13D4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E PUSH1 0xE0 SHL DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2A40 SWAP3 SWAP2 SWAP1 PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2AC9 SWAP2 SWAP1 PUSH2 0x3A84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B04 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B09 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2B1C JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x2B5C JUMPI POP DUP1 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2B5A SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x388A JUMP JUMPDEST EQ JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x2BD5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x9E1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x23FF JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x2D20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9E1 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2D8F DUP4 PUSH2 0x2EF9 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2D9C JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xA99 JUMPI PUSH2 0x23FF DUP4 DUP4 PUSH2 0x2F46 JUMP JUMPDEST DUP2 SLOAD DUP3 SWAP1 DUP3 DUP2 LT PUSH2 0x2DF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBF0C18EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x9E1 JUMP JUMPDEST POP SSTORE POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x2E7F JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x1161 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x2EAD PUSH2 0x2F6B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2F99 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x2EEA JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x2EDE DUP8 DUP3 DUP6 DUP6 PUSH2 0x3075 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x2EF2 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F02 DUP2 PUSH2 0x2C7C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1871 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3AB4 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x3164 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1874 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x39BB JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x3011 JUMPI PUSH1 0x40 MLOAD PUSH32 0x72C683BB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x30AC JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x315B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3100 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x3154 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x315B JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x318E SWAP2 SWAP1 PUSH2 0x3A84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x31DF DUP7 DUP4 DUP4 DUP8 PUSH2 0x31E9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x327F JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x3278 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x3278 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9E1 JUMP JUMPDEST POP DUP2 PUSH2 0x801 JUMP JUMPDEST PUSH2 0x801 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3294 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E1 SWAP2 SWAP1 PUSH2 0x3AA0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x32DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x32F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3351 DUP8 DUP3 DUP9 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x336F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x338E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x33F8 DUP2 PUSH2 0x33B1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13D4 DUP2 PUSH2 0x33B1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x344B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x345F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x346E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x3483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x34AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x34BD DUP2 PUSH2 0x33B1 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x351F DUP2 PUSH2 0x33B1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x353C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3562 JUMPI PUSH2 0x3562 PUSH2 0x34D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x35A8 JUMPI PUSH2 0x35A8 PUSH2 0x34D2 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x35C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x35F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3624 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3642 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x364E DUP7 DUP3 DUP8 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x366C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x368D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x36AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36B7 DUP12 DUP3 DUP13 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x36D7 PUSH1 0x80 DUP11 ADD PUSH2 0x365B JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x370F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3734 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3740 DUP11 DUP3 DUP12 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP9 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP8 PUSH1 0x80 DUP3 ADD CALLDATALOAD SWAP8 POP PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x379D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x37BB PUSH1 0x60 DUP9 ADD PUSH2 0x365B JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x37ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x380B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3817 DUP9 DUP3 DUP10 ADD PUSH2 0x32C8 JUMP JUMPDEST SWAP7 SWAP10 SWAP1 SWAP9 POP SWAP6 SWAP7 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP7 PUSH1 0x60 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP5 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x60 DUP5 DUP4 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP4 ADD ADD SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x389C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13D4 DUP2 PUSH2 0x33B1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1874 JUMPI PUSH2 0x1874 PUSH2 0x38C0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3962 JUMPI PUSH2 0x3962 PUSH2 0x38C0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x39A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1874 JUMPI PUSH2 0x1874 PUSH2 0x38C0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3A18 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3A00 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3A39 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x39FD JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x801 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3A21 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3A96 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x39FD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1871 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3A21 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122099EEC9 CALLDATACOPY MLOAD GT PUSH0 0xD0 0x2C 0xB5 CODECOPY 0x1E MUL 0xE PUSH27 0x71EBBA7951E79AA7CA38E5B3B21B6CFD4564736F6C634300081500 CALLER ","sourceMap":"1259:21636:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19847:320;;;;;;;;;;-1:-1:-1;19847:320:32;;;;;:::i;:::-;;:::i;:::-;;;1065:25:36;;;1053:2;1038:18;19847:320:32;;;;;;;;1976:41;;;;;;;;;;-1:-1:-1;1976:41:32;;;;;:::i;:::-;;;;;;;;;;;;;;10135:623;;;;;;;;;;-1:-1:-1;10135:623:32;;;;;:::i;:::-;;:::i;:::-;;1706:43;;;;;;;;;;;;;;;;;;1938:42:36;1926:55;;;1908:74;;1896:2;1881:18;1706:43:32;1745:243:36;1116:257:0;;;;;;;;;;-1:-1:-1;1116:257:0;;;;;:::i;:::-;;:::i;3387:195:21:-;;;;;;;;;;-1:-1:-1;3387:195:21;;;;;:::i;:::-;;:::i;7815:597:32:-;;;;;;;;;;-1:-1:-1;7815:597:32;;;;;:::i;:::-;;:::i;22550:343::-;;;;;;;;;;-1:-1:-1;22550:343:32;;;;;:::i;:::-;;:::i;1790:39::-;;;;;;;;;;-1:-1:-1;1790:39:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4333:14:36;;4326:22;4308:41;;4296:2;4281:18;1790:39:32;4168:187:36;3901:220:21;;;;;;:::i;:::-;;:::i;1836:83:32:-;;;;;;;;;;-1:-1:-1;1836:83:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3006:131:21;;;;;;;;;;;;;:::i;1499:60:32:-;;;;;;;;;;;;1536:23;1499:60;;21191:311;;;;;;;;;;-1:-1:-1;21191:311:32;;;;;:::i;:::-;;:::i;6308:149::-;;;;;;;;;;;;;:::i;7024:328::-;;;;;;;;;;-1:-1:-1;7024:328:32;;;;;:::i;:::-;;:::i;1994:124:0:-;;;;;;;;;;-1:-1:-1;1994:124:0;;;;;:::i;:::-;;:::i;710:120:1:-;;;;;;;;;;;;;:::i;8885:602:32:-;;;;;;;;;;-1:-1:-1;8885:602:32;;;;;:::i;:::-;;:::i;2159:162:0:-;;;;;;;;;;-1:-1:-1;2159:162:0;;;;;:::i;:::-;;:::i;14342:285:32:-;;;;;;;;;;-1:-1:-1;14342:285:32;;;;;:::i;:::-;;:::i;20461:212::-;;;;;;;;;;-1:-1:-1;20461:212:32;;;;;:::i;:::-;;:::i;11578:363::-;;;;;;;;;;-1:-1:-1;11578:363:32;;;;;:::i;:::-;;:::i;1565:68::-;;;;;;;;;;;;1606:27;1565:68;;19098:221;;;;;;;;;;-1:-1:-1;19098:221:32;;;;;:::i;:::-;;:::i;1756:28::-;;;;;;;;;;;;;;;;18396:398;;;;;;;;;;-1:-1:-1;18396:398:32;;;;;:::i;:::-;;:::i;1694:259:0:-;;;;;;;;;;-1:-1:-1;1694:259:0;;;;;:::i;:::-;;:::i;15553:868:32:-;;;;;;;;;;-1:-1:-1;15553:868:32;;;;;:::i;:::-;;:::i;17391:245::-;;;;;;;;;;-1:-1:-1;17391:245:32;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;;;;;-1:-1:-1;864:152:1;;;;;:::i;:::-;;:::i;2044:57:32:-;;;;;;;;;;-1:-1:-1;2044:57:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;19847:320;19947:7;19966:15;19984:17;:28;;;20013:4;;20019:10;19984:46;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20065:37;;;;;;;;1065:25:36;;;19966:64:32;;-1:-1:-1;20040:22:32;;20065:28;:17;:28;;;;1038:18:36;;20065:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20119:16;;;;:8;:16;;;;;;;;:25;;;;;;;;;:41;;;;;;;;;;;;;-1:-1:-1;;19847:320:32;;;;;;;:::o;10135:623::-;10269:74;1606:27;719:10:26;10330:12:32;10269:29;:27;:29::i;:::-;:44;:74;:44;:74::i;:::-;10354:34;;;;;;;;1065:25:36;;;10354:17:32;:25;;;;;1038:18:36;;10354:34:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;10426:37:32;;;;;;;;1065:25:36;;;10398::32;;10426:17;:28;;;;;1038:18:36;;10426:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10398:65;;10498:14;10477:17;:35;10473:119;;10535:46;;;;;;;;11326:25:36;;;11367:18;;;11360:34;;;11299:18;;10535:46:32;;;;;;;;10473:119;10602:16;;;;:8;:16;;;;;;;;:25;;;;;;;;:41;;;;;;;;:51;;10647:6;;10602:16;:51;;10647:6;;10602:51;:::i;:::-;;;;-1:-1:-1;;10668:83:32;;;11926:25:36;;;11982:2;11967:18;;11960:34;;;12010:18;;;12003:34;;;10700:17:32;;10692:6;;719:10:26;;10668:83:32;;11914:2:36;11899:18;10668:83:32;;;;;;;;10259:499;10135:623;;;;;:::o;1116:257:0:-;719:10:26;1226:66:0;719:10:26;1226:33:0;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;3387:195:21:-;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;;;;12250:2:36;1873:80:21;;;12232:21:36;12289:2;12269:18;;;12262:30;12328:34;12308:18;;;12301:62;12399:14;12379:18;;;12372:42;12431:19;;1873:80:21;12048:408:36;1873:80:21;1995:6;1971:30;;:20;1312:66:18;1536:65;;;;1457:151;1971:20:21;:30;;;1963:87;;;;;;;12663:2:36;1963:87:21;;;12645:21:36;12702:2;12682:18;;;12675:30;12741:34;12721:18;;;12714:62;12812:14;12792:18;;;12785:42;12844:19;;1963:87:21;12461:408:36;1963:87:21;3468:36:::1;3486:17;3468;:36::i;:::-;3555:12;::::0;;3565:1:::1;3555:12:::0;;;::::1;::::0;::::1;::::0;;;3514:61:::1;::::0;3536:17;;3555:12;3514:21:::1;:61::i;:::-;3387:195:::0;:::o;7815:597:32:-;7902:70;1536:23;719:10:26;7959:12:32;640:96:26;7902:70:32;7986:23;7982:91;;8032:30;;;;;;;;;;;;;;7982:91;8088:9;8083:268;8103:22;;;8083:268;;;8150:25;:41;8176:11;;8188:1;8176:14;;;;;;;:::i;:::-;;;;;;;;;;8150:41;;-1:-1:-1;8150:41:32;;;;;;;;-1:-1:-1;8150:41:32;;;;8146:133;;;8249:11;;8261:1;8249:14;;;;;;;:::i;:::-;;;;;;;8218:46;;;;;;;;;1065:25:36;;1053:2;1038:18;;919:177;8146:133:32;8336:4;8292:25;:41;8318:11;;8330:1;8318:14;;;;;;;:::i;:::-;;;;;;;8292:41;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;8127:3;;;;;:::i;:::-;;;;8083:268;;;;8365:40;8393:11;;8365:40;;;;;;;:::i;:::-;;;;;;;;7815:597;;:::o;22550:343::-;22711:37;;;;;;;;1065:25:36;;;22667:7:32;;;;22711:28;:17;:28;;;;1038:18:36;;22711:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;22758:15;22834;;;:6;:15;;;;;;;;;22137:13;;22078:92;;;;;17727:19:36;;;17762:12;;;17755:28;;;17821:2;17817:15;;;17834:66;17813:88;17799:12;;;17792:110;17918:12;;;17911:28;;;17955:13;;;17948:29;;;;17993:13;;;17986:29;;;18031:13;;;;18024:29;;;;22078:92:32;;;;;;;;;;18069:13:36;;22078:92:32;;;22068:103;;;;;22686:62;;-1:-1:-1;22758:15:32;:104;22550:343;-1:-1:-1;;;;;;;22550:343:32:o;3901:220:21:-;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;;;;12250:2:36;1873:80:21;;;12232:21:36;12289:2;12269:18;;;12262:30;12328:34;12308:18;;;12301:62;12399:14;12379:18;;;12372:42;12431:19;;1873:80:21;12048:408:36;1873:80:21;1995:6;1971:30;;:20;1312:66:18;1536:65;;;;1457:151;1971:20:21;:30;;;1963:87;;;;;;;12663:2:36;1963:87:21;;;12645:21:36;12702:2;12682:18;;;12675:30;12741:34;12721:18;;;12714:62;12812:14;12792:18;;;12785:42;12844:19;;1963:87:21;12461:408:36;1963:87:21;4016:36:::1;4034:17;4016;:36::i;:::-;4062:52;4084:17;4103:4;4109;4062:21;:52::i;:::-;3901:220:::0;;:::o;3006:131::-;3084:7;2324:4;2316:23;2333:6;2316:23;;2308:92;;;;;;;13960:2:36;2308:92:21;;;13942:21:36;13999:2;13979:18;;;13972:30;14038:34;14018:18;;;14011:62;14109:26;14089:18;;;14082:54;14153:19;;2308:92:21;13758:420:36;2308:92:21;-1:-1:-1;1312:66:18::1;3006:131:21::0;:::o;21191:311:32:-;21275:7;21294:15;21312:17;:28;;;21341:4;;21347:10;21312:46;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21393:37;;;;;;;;1065:25:36;;;21294:64:32;;-1:-1:-1;21368:22:32;;21393:28;:17;:28;;;;1038:18:36;;21393:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21456:13;;21447:23;;;;:8;:23;;;;;;;;:32;;;;;;;;;:48;;;;;;;;;;;;;-1:-1:-1;;21191:311:32;;;;;;:::o;6308:149::-;3279:19:20;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:20;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:20;1713:19:22;:23;;;3387:66:20;;-1:-1:-1;3436:12:20;;;;;:17;3387:66;3325:201;;;;;;;14385:2:36;3325:201:20;;;14367:21:36;14424:2;14404:18;;;14397:30;14463:34;14443:18;;;14436:62;14534:16;14514:18;;;14507:44;14568:19;;3325:201:20;14183:410:36;3325:201:20;3536:12;:16;;;;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;;;;;;;3562:65;6359:24:32::1;:22;:24::i;:::-;6393:57;719:10:26::0;6393:33:32::1;:31;:33::i;:::-;:43:::0;::::1;:57::i;:::-;3651:14:20::0;3647:99;;;3697:5;3681:21;;;;;;3721:14;;-1:-1:-1;14750:36:36;;3721:14:20;;14738:2:36;14723:18;3721:14:20;;;;;;;;3269:483;6308:149:32:o;7024:328::-;7085:70;1536:23;719:10:26;7142:12:32;640:96:26;7085:70:32;7169:15;;;;:7;:15;;;;;;;;7165:77;;;7207:24;;;;;;;;1065:25:36;;;1038:18;;7207:24:32;919:177:36;7165:77:32;7252:13;:22;;;7284:15;;;;:7;:15;;;;;;;:22;;;;7302:4;7284:22;;;7321:24;;;;;7268:6;1065:25:36;;1053:2;1038:18;;919:177;1994:124:0;2049:62;719:10:26;2106:4:0;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3674:15:10;;;;3578:118;782:41:1;775:48;;710:120;:::o;8885:602:32:-;8975:70;1536:23;719:10:26;9032:12:32;640:96:26;8975:70:32;9059:23;9055:91;;9105:30;;;;;;;;;;;;;;9055:91;9161:9;9156:268;9176:22;;;9156:268;;;9224:25;:41;9250:11;;9262:1;9250:14;;;;;;;:::i;:::-;;;;;;;;;;9224:41;;-1:-1:-1;9224:41:32;;;;;;;;-1:-1:-1;9224:41:32;;;;9219:133;;9322:11;;9334:1;9322:14;;;;;;;:::i;:::-;;;;;;;9292:45;;;;;;;;;1065:25:36;;1053:2;1038:18;;919:177;9219:133:32;9372:25;:41;9398:11;;9410:1;9398:14;;;;;;;:::i;:::-;;;;;;;;;;9372:41;;-1:-1:-1;9372:41:32;;;;;;;;-1:-1:-1;9372:41:32;9365:48;;;;;;9200:3;;;;:::i;:::-;;;;9156:268;;;;9438:42;9468:11;;9438:42;;;;;;;:::i;2159:162:0:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2834:13:9;2866;;;;;;;;;;;:22;;;;;;;;;;;;;;;2745:150;2262:52:0;2255:59;;2159:162;;;;;:::o;14342:285:32:-;14512:46;;;;;14494:15;;14512:28;:17;:28;;;;:46;;14541:4;;;;14547:10;;14512:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14494:64;;14568:52;14576:7;14585:6;14593:17;14612:1;14615;14618;14568:7;:52::i;:::-;14484:143;14342:285;;;;;;;;:::o;20461:212::-;20564:37;;;;;;;;1065:25:36;;;20520:7:32;;;;20564:28;:17;:28;;;;1038:18:36;;20564:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20627:13;;20618:23;;;;:8;:23;;;;;;;;:32;;;;;;;;;:48;;;;;;;;;;;;;20461:212;-1:-1:-1;;20461:212:32:o;11578:363::-;11811:46;;;;;11793:15;;11811:28;:17;:28;;;;:46;;11840:4;;;;11846:10;;11811:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11793:64;;11867:67;11875:6;11883:7;11892:14;11908:6;11916:17;11867:7;:67::i;:::-;11783:158;11578:363;;;;;;;:::o;19098:221::-;19217:37;;;;;;;;1065:25:36;;;19173:7:32;;;;19217:28;:17;:28;;;;1038:18:36;;19217:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19271:16;;;;:8;:16;;;;;;;;:25;;;;;;;;;:41;;;;-1:-1:-1;;19271:41:32;;;;19098:221::o;18396:398::-;18506:34;;;;;;;;1065:25:36;;;18490:13:32;;18506:17;:25;;;;;1038:18:36;;18506:34:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18490:50;-1:-1:-1;719:10:26;18554:21:32;;;;18550:88;;18598:29;;;;;719:10:26;18598:29:32;;;1908:74:36;1881:18;;18598:29:32;1745:243:36;18550:88:32;18673:37;;;;;;;;1065:25:36;;;18648:22:32;;18673:17;:28;;;;;1038:18:36;;18673:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18648:62;;18720:67;18729:7;18738:14;18754:6;18762:17;18781:5;18720:8;:67::i;:::-;18480:314;;18396:398;;;:::o;1694:259:0:-;719:10:26;1805:66:0;719:10:26;1805:33:0;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;15553:868:32:-;15678:13;15694:15;;;:6;:15;;;;;;;15744:37;;;;;;;;1065:25:36;;;15694:15:32;;15678:13;15744:17;:28;;;;;1038:18:36;;15744:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;22137:13;;22078:92;;;;;;;17727:19:36;;;17762:12;;;17755:28;;;719:10:26;17821:2:36;17817:15;;;17834:66;17813:88;17799:12;;;17792:110;17918:12;;;17911:28;;;17955:13;;;17948:29;;;;17993:13;;;17986:29;;;18031:13;;;;18024:29;;;22078:92:32;;;;;;;;;;18069:13:36;;;;22078:92:32;;;22068:103;;;;;15719:62;;-1:-1:-1;15791:19:32;;15945:65;;15039:66:36;15945:65:32;;;15027:79:36;15122:12;;;15115:28;;;15791:110:32;;-1:-1:-1;15911:21:32;;15159:12:36;;15945:65:32;;;;;;;;;;;;;;15935:76;;15945:65;15935:76;;;;16038:34;;;;;;1065:25:36;;;15935:76:32;-1:-1:-1;16022:13:32;;16038:25;:17;:25;;;;1038:18:36;;16038:34:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16107:25;;;;;;15363:19:36;;;15398:12;;;15391:28;;;15457:3;15453:16;;;15471:66;15449:89;15435:12;;;15428:111;16107:25:32;;;;;;;;;15555:12:36;;;;16107:25:32;;;16022:50;;-1:-1:-1;;16157:69:32;16022:50;16201:13;16107:25;16157:36;:69::i;:::-;16142:84;;16241:7;16236:64;;16271:18;;;;;;;;;;;;;;16236:64;16310:67;16319:7;16328:14;16344:6;16352:17;16371:5;16310:8;:67::i;:::-;16405:9;:5;16413:1;16405:9;:::i;:::-;16387:15;;;;:6;:15;;;;;;:27;;;;-1:-1:-1;;;;;;;;;;;;15553:868:32:o;17391:245::-;17530:46;;;;;17512:15;;17530:28;:17;:28;;;;:46;;17559:4;;;;17565:10;;17530:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17512:64;;17586:43;17594:7;17603:6;17611:17;17586:7;:43::i;:::-;17502:134;17391:245;;;;;:::o;864:152:1:-;934:75;719:10:26;1000:8:1;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;4441:174:9:-;4482:16;;699:67;765:1;707:54;699:67;:::i;3705:170::-;2834:13;2866;;;;;;;;;;;:22;;;;;;;;;;;;;3802:66;;3840:28;;;;;;;;15885:25:36;;;15958:42;15946:55;;15926:18;;;15919:83;15858:18;;3840:28:9;15711:297:36;5087:174:10;5128:16;;920:71;990:1;928:58;920:71;:::i;4435:162::-;4541:15;;;4530:26;;;4541:15;;4530:26;4526:64;;4565:25;;;;;1938:42:36;1926:55;;4565:25:10;;;1908:74:36;1881:18;;4565:25:10;1745:243:36;1148:272:9;2834:13;2866;;;;;;;;;;;:22;;;;;;;;;;;;;1253:161;;1298:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1323:4;1298:29;;;1346:57;;16215:25:36;;;16317:18;;;16310:43;16389:15;;;16369:18;;;16362:43;;;;1346:57:9;;16203:2:36;16188:18;1346:57:9;;;;;;;;1253:161;1148:272;;;;:::o;6602:146:32:-;6671:70;719:10:26;6671:33:32;:31;:33::i;2820:944:18:-;971:66;3236:59;;;3232:526;;;3311:37;3330:17;3311:18;:37::i;3232:526::-;3412:17;3383:61;;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3383:63:18;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3379:302;;3610:56;;;;;16807:2:36;3610:56:18;;;16789:21:36;16846:2;16826:18;;;16819:30;16885:34;16865:18;;;16858:62;16956:16;16936:18;;;16929:44;16990:19;;3610:56:18;16605:410:36;3379:302:18;1312:66;3496:28;;3488:82;;;;;;;17222:2:36;3488:82:18;;;17204:21:36;17261:2;17241:18;;;17234:30;17300:34;17280:18;;;17273:62;17371:11;17351:18;;;17344:39;17400:19;;3488:82:18;17020:405:36;3488:82:18;3447:138;3694:53;3712:17;3731:4;3737:9;3694:17;:53::i;1042:67:21:-;5374:13:20;;;;;;;5366:69;;;;;;;18295:2:36;5366:69:20;;;18277:21:36;18334:2;18314:18;;;18307:30;18373:34;18353:18;;;18346:62;18444:13;18424:18;;;18417:41;18475:19;;5366:69:20;18093:407:36;5366:69:20;1042:67:21:o;2513:180:10:-;2591:54;1056:69;1124:1;1064:56;1056:69;:::i;:::-;2643:1;2591:28;:54::i;:::-;2655:31;:1;2673:12;2655:17;:31::i;2327:234:9:-;2416:30;:1;2433:4;2439:6;2416:16;:30::i;:::-;2480:5;2456:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2500:54;;16215:25:36;;;16317:18;;;16310:43;;;16369:18;;16362:43;;;;2500:54:9;;16203:2:36;16188:18;2500:54:9;;;;;;;2327:234;;;:::o;12571:638:32:-;12734:13;;12707:15;12725:23;;;:8;:23;;;;;;;;:32;;;;;;;;:48;;;;;;;;;12787:16;;;12783:90;;;12826:36;;;;;;;;11326:25:36;;;11367:18;;;11360:34;;;11299:18;;12826:36:32;11152:248:36;12783:90:32;12887:44;;;;:25;:44;;;;;;;;12882:131;;12954:48;;;;;;;;1065:25:36;;;1038:18;;12954:48:32;919:177:36;12882:131:32;13074:16;13084:6;13074:7;:16;:::i;:::-;13032:13;;;13023:23;;;;:8;:23;;;;;;;;:32;;;;;;;;:48;;;;;;;;;:67;;;;13124:13;;13106:96;;719:10:26;18797:34:36;;18847:18;;;18840:34;;;18890:18;;;18883:34;;;18746:42;18953:15;;18948:2;18933:18;;18926:43;13139:17:32;;13023:32;;13106:96;;18723:3:36;18708:19;13106:96:32;18505:470:36;1798:273:9;2834:13;2866;;;;;;;;;;;:22;;;;;;;;;;;;;1904:161;;;1973:5;1948:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1997:57;;16215:25:36;;;16317:18;;;16310:43;16389:15;;;16369:18;;;16362:43;;;;1997:57:9;;16203:2:36;16188:18;1997:57:9;16013:398:36;1039:667:30;1175:4;1192:17;1211:24;1239:33;1256:4;1262:9;1239:16;:33::i;:::-;1191:81;;-1:-1:-1;1191:81:30;-1:-1:-1;1295:26:30;1286:5;:35;;;;;;;;:::i;:::-;;:58;;;;;1338:6;1325:19;;:9;:19;;;1286:58;1282:100;;;1367:4;1360:11;;;;;;1282:100;1393:12;1407:19;1430:6;:17;;1484:34;;;1520:4;1526:9;1461:75;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1430:116;;;;1461:75;1430:116;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1392:154;;;;1564:7;:42;;;;;1587:6;:13;1604:2;1587:19;1564:42;:134;;;;-1:-1:-1;1622:29:30;;1663:34;;1622:29;;;;;;;;;;;;:::i;:::-;:76;1564:134;1556:143;1039:667;-1:-1:-1;;;;;;;;1039:667:30:o;3068:383:10:-;3190:15;;;;;;;3219:23;;;;3215:60;;3251:24;;;;;1938:42:36;1926:55;;3251:24:10;;;1908:74:36;1881:18;;3251:24:10;1745:243:36;3215:60:10;3306:8;3289:25;;:13;:25;;;3285:160;;3330:26;;;;;;;;;;;;;3375:59;;;;;;;;-1:-1:-1;;3375:59:10;3156:295;3068:383;;;:::o;1699:281:18:-;1713:19:22;;;;1772:106:18;;;;;;;20545:2:36;1772:106:18;;;20527:21:36;20584:2;20564:18;;;20557:30;20623:34;20603:18;;;20596:62;20694:15;20674:18;;;20667:43;20727:19;;1772:106:18;20343:409:36;1772:106:18;1312:66;1888:85;;;;;;;;;;;;;;;1699:281::o;2372:276::-;2480:29;2491:17;2480:10;:29::i;:::-;2537:1;2523:4;:11;:15;:28;;;;2542:9;2523:28;2519:123;;;2567:64;2607:17;2626:4;2567:39;:64::i;672:357:15:-;866:20;;821:11;;900:21;;;896:88;;930:54;;;;;;;;11326:25:36;;;11367:18;;;11360:34;;;11299:18;;930:54:15;11152:248:36;896:88:15;-1:-1:-1;994:28:15;-1:-1:-1;672:357:15:o;1561:355:10:-;1649:26;;;;1645:166;;1691:30;;;;;;;;;;;;1740:60;;-1:-1:-1;;1740:60:10;;-1:-1:-1;;1740:60:10;1645:166;1820:89;1877:25;1904:4;1820:34;:32;:34::i;:::-;:56;:89;:56;:89::i;2145:730:29:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:29;;-1:-1:-1;2822:35:29;2259:610;2145:730;;;;;:::o;2086:152:18:-;2152:37;2171:17;2152:18;:37::i;:::-;2204:27;;;;;;;;;;;2086:152;:::o;6685:198:22:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;:20;:77::i;1705:174:13:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;881:35;896:20;881:35;;;877:68;;925:20;;;;;;;;;;;;;;877:68;955:34;;;;;:21;:34;;;;;;;;;;;;:46;;;;;;;;;;;;;773:235::o;5069:1494:29:-;5195:7;;6119:66;6106:79;;6102:161;;;-1:-1:-1;6217:1:29;;-1:-1:-1;6221:30:29;6201:51;;6102:161;6374:24;;;6357:14;6374:24;;;;;;;;;20984:25:36;;;21057:4;21045:17;;21025:18;;;21018:45;;;;21079:18;;;21072:34;;;21122:18;;;21115:34;;;6374:24:29;;20956:19:36;;6374:24:29;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6374:24:29;;;;;;-1:-1:-1;;6412:20:29;;;6408:101;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;-1:-1:-1;6535:20:29;;-1:-1:-1;5069:1494:29;;;;;;;;:::o;7069:325:22:-;7210:12;7235;7249:23;7276:6;:19;;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:22:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;1713:19;;;;8124:60;;;;;;;21362:2:36;8124:60:22;;;21344:21:36;21401:2;21381:18;;;21374:30;21440:31;21420:18;;;21413:59;21489:18;;8124:60:22;21160:353:36;8124:60:22;-1:-1:-1;8219:10:22;8212:17;;7886:418;8260:33;8268:10;8280:12;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;;;;;;;;;;:::i;14:348:36:-;66:8;76:6;130:3;123:4;115:6;111:17;107:27;97:55;;148:1;145;138:12;97:55;-1:-1:-1;171:20:36;;214:18;203:30;;200:50;;;246:1;243;236:12;200:50;283:4;275:6;271:17;259:29;;335:3;328:4;319:6;311;307:19;303:30;300:39;297:59;;;352:1;349;342:12;367:547;456:6;464;472;480;533:2;521:9;512:7;508:23;504:32;501:52;;;549:1;546;539:12;501:52;585:9;572:23;562:33;;642:2;631:9;627:18;614:32;604:42;;697:2;686:9;682:18;669:32;724:18;716:6;713:30;710:50;;;756:1;753;746:12;710:50;795:59;846:7;837:6;826:9;822:22;795:59;:::i;:::-;367:547;;;;-1:-1:-1;873:8:36;-1:-1:-1;;;;367:547:36:o;1101:180::-;1160:6;1213:2;1201:9;1192:7;1188:23;1184:32;1181:52;;;1229:1;1226;1219:12;1181:52;-1:-1:-1;1252:23:36;;1101:180;-1:-1:-1;1101:180:36:o;1286:454::-;1381:6;1389;1397;1405;1413;1466:3;1454:9;1445:7;1441:23;1437:33;1434:53;;;1483:1;1480;1473:12;1434:53;-1:-1:-1;;1506:23:36;;;1576:2;1561:18;;1548:32;;-1:-1:-1;1627:2:36;1612:18;;1599:32;;1678:2;1663:18;;1650:32;;-1:-1:-1;1729:3:36;1714:19;1701:33;;-1:-1:-1;1286:454:36;-1:-1:-1;1286:454:36:o;1993:154::-;2079:42;2072:5;2068:54;2061:5;2058:65;2048:93;;2137:1;2134;2127:12;2152:315;2220:6;2228;2281:2;2269:9;2260:7;2256:23;2252:32;2249:52;;;2297:1;2294;2287:12;2249:52;2333:9;2320:23;2310:33;;2393:2;2382:9;2378:18;2365:32;2406:31;2431:5;2406:31;:::i;:::-;2456:5;2446:15;;;2152:315;;;;;:::o;2472:247::-;2531:6;2584:2;2572:9;2563:7;2559:23;2555:32;2552:52;;;2600:1;2597;2590:12;2552:52;2639:9;2626:23;2658:31;2683:5;2658:31;:::i;2724:615::-;2810:6;2818;2871:2;2859:9;2850:7;2846:23;2842:32;2839:52;;;2887:1;2884;2877:12;2839:52;2927:9;2914:23;2956:18;2997:2;2989:6;2986:14;2983:34;;;3013:1;3010;3003:12;2983:34;3051:6;3040:9;3036:22;3026:32;;3096:7;3089:4;3085:2;3081:13;3077:27;3067:55;;3118:1;3115;3108:12;3067:55;3158:2;3145:16;3184:2;3176:6;3173:14;3170:34;;;3200:1;3197;3190:12;3170:34;3253:7;3248:2;3238:6;3235:1;3231:14;3227:2;3223:23;3219:32;3216:45;3213:65;;;3274:1;3271;3264:12;3213:65;3305:2;3297:11;;;;;3327:6;;-1:-1:-1;2724:615:36;;-1:-1:-1;;;;2724:615:36:o;3344:452::-;3430:6;3438;3446;3454;3507:3;3495:9;3486:7;3482:23;3478:33;3475:53;;;3524:1;3521;3514:12;3475:53;3560:9;3547:23;3537:33;;3620:2;3609:9;3605:18;3592:32;3633:31;3658:5;3633:31;:::i;:::-;3344:452;;3683:5;;-1:-1:-1;;;;3735:2:36;3720:18;;3707:32;;3786:2;3771:18;3758:32;;3344:452::o;4360:184::-;4412:77;4409:1;4402:88;4509:4;4506:1;4499:15;4533:4;4530:1;4523:15;4549:1115;4626:6;4634;4687:2;4675:9;4666:7;4662:23;4658:32;4655:52;;;4703:1;4700;4693:12;4655:52;4742:9;4729:23;4761:31;4786:5;4761:31;:::i;:::-;4811:5;-1:-1:-1;4867:2:36;4852:18;;4839:32;4890:18;4920:14;;;4917:34;;;4947:1;4944;4937:12;4917:34;4985:6;4974:9;4970:22;4960:32;;5030:7;5023:4;5019:2;5015:13;5011:27;5001:55;;5052:1;5049;5042:12;5001:55;5088:2;5075:16;5110:2;5106;5103:10;5100:36;;;5116:18;;:::i;:::-;5250:2;5244:9;5312:4;5304:13;;5155:66;5300:22;;;5324:2;5296:31;5292:40;5280:53;;;5348:18;;;5368:22;;;5345:46;5342:72;;;5394:18;;:::i;:::-;5434:10;5430:2;5423:22;5469:2;5461:6;5454:18;5509:7;5504:2;5499;5495;5491:11;5487:20;5484:33;5481:53;;;5530:1;5527;5520:12;5481:53;5586:2;5581;5577;5573:11;5568:2;5560:6;5556:15;5543:46;5631:1;5626:2;5621;5613:6;5609:15;5605:24;5598:35;5652:6;5642:16;;;;;;;4549:1115;;;;;:::o;5669:316::-;5746:6;5754;5762;5815:2;5803:9;5794:7;5790:23;5786:32;5783:52;;;5831:1;5828;5821:12;5783:52;-1:-1:-1;;5854:23:36;;;5924:2;5909:18;;5896:32;;-1:-1:-1;5975:2:36;5960:18;;;5947:32;;5669:316;-1:-1:-1;5669:316:36:o;5990:479::-;6070:6;6078;6086;6139:2;6127:9;6118:7;6114:23;6110:32;6107:52;;;6155:1;6152;6145:12;6107:52;6191:9;6178:23;6168:33;;6252:2;6241:9;6237:18;6224:32;6279:18;6271:6;6268:30;6265:50;;;6311:1;6308;6301:12;6265:50;6350:59;6401:7;6392:6;6381:9;6377:22;6350:59;:::i;:::-;5990:479;;6428:8;;-1:-1:-1;6324:85:36;;-1:-1:-1;;;;5990:479:36:o;6705:156::-;6771:20;;6831:4;6820:16;;6810:27;;6800:55;;6851:1;6848;6841:12;6800:55;6705:156;;;:::o;6866:825::-;6989:6;6997;7005;7013;7021;7029;7037;7045;7098:3;7086:9;7077:7;7073:23;7069:33;7066:53;;;7115:1;7112;7105:12;7066:53;7151:9;7138:23;7128:33;;7212:2;7201:9;7197:18;7184:32;7239:18;7231:6;7228:30;7225:50;;;7271:1;7268;7261:12;7225:50;7310:59;7361:7;7352:6;7341:9;7337:22;7310:59;:::i;:::-;7388:8;;-1:-1:-1;7284:85:36;-1:-1:-1;;7470:2:36;7455:18;;7442:32;;-1:-1:-1;7521:2:36;7506:18;;7493:32;;-1:-1:-1;7544:37:36;7576:3;7561:19;;7544:37;:::i;:::-;7534:47;;7628:3;7617:9;7613:19;7600:33;7590:43;;7680:3;7669:9;7665:19;7652:33;7642:43;;6866:825;;;;;;;;;;;:::o;7696:754::-;7812:6;7820;7828;7836;7844;7852;7860;7913:3;7901:9;7892:7;7888:23;7884:33;7881:53;;;7930:1;7927;7920:12;7881:53;7966:9;7953:23;7943:33;;8023:2;8012:9;8008:18;7995:32;7985:42;;8078:2;8067:9;8063:18;8050:32;8105:18;8097:6;8094:30;8091:50;;;8137:1;8134;8127:12;8091:50;8176:59;8227:7;8218:6;8207:9;8203:22;8176:59;:::i;:::-;7696:754;;;;-1:-1:-1;8254:8:36;8336:2;8321:18;;8308:32;;8387:3;8372:19;;8359:33;;-1:-1:-1;8439:3:36;8424:19;;;8411:33;;-1:-1:-1;7696:754:36;-1:-1:-1;;;;7696:754:36:o;8455:248::-;8523:6;8531;8584:2;8572:9;8563:7;8559:23;8555:32;8552:52;;;8600:1;8597;8590:12;8552:52;-1:-1:-1;;8623:23:36;;;8693:2;8678:18;;;8665:32;;-1:-1:-1;8455:248:36:o;9029:525::-;9131:6;9139;9147;9155;9163;9171;9224:3;9212:9;9203:7;9199:23;9195:33;9192:53;;;9241:1;9238;9231:12;9192:53;9277:9;9264:23;9254:33;;9334:2;9323:9;9319:18;9306:32;9296:42;;9385:2;9374:9;9370:18;9357:32;9347:42;;9408:36;9440:2;9429:9;9425:18;9408:36;:::i;:::-;9398:46;;9491:3;9480:9;9476:19;9463:33;9453:43;;9543:3;9532:9;9528:19;9515:33;9505:43;;9029:525;;;;;;;;:::o;9559:616::-;9657:6;9665;9673;9681;9689;9742:3;9730:9;9721:7;9717:23;9713:33;9710:53;;;9759:1;9756;9749:12;9710:53;9795:9;9782:23;9772:33;;9856:2;9845:9;9841:18;9828:32;9883:18;9875:6;9872:30;9869:50;;;9915:1;9912;9905:12;9869:50;9954:59;10005:7;9996:6;9985:9;9981:22;9954:59;:::i;:::-;9559:616;;10032:8;;-1:-1:-1;9928:85:36;;10114:2;10099:18;;10086:32;;10165:2;10150:18;;;10137:32;;-1:-1:-1;9559:616:36;-1:-1:-1;;;;9559:616:36:o;10180:522::-;10367:2;10356:9;10349:21;10406:6;10401:2;10390:9;10386:18;10379:34;10463:6;10455;10450:2;10439:9;10435:18;10422:48;10519:1;10514:2;10505:6;10494:9;10490:22;10486:31;10479:42;10330:4;10648:2;10578:66;10573:2;10565:6;10561:15;10557:88;10546:9;10542:104;10538:113;10530:121;;10689:6;10682:4;10671:9;10667:20;10660:36;10180:522;;;;;;:::o;10707:184::-;10777:6;10830:2;10818:9;10809:7;10805:23;10801:32;10798:52;;;10846:1;10843;10836:12;10798:52;-1:-1:-1;10869:16:36;;10707:184;-1:-1:-1;10707:184:36:o;10896:251::-;10966:6;11019:2;11007:9;10998:7;10994:23;10990:32;10987:52;;;11035:1;11032;11025:12;10987:52;11067:9;11061:16;11086:31;11111:5;11086:31;:::i;11405:184::-;11457:77;11454:1;11447:88;11554:4;11551:1;11544:15;11578:4;11575:1;11568:15;11594:125;11659:9;;;11680:10;;;11677:36;;;11693:18;;:::i;12874:184::-;12926:77;12923:1;12916:88;13023:4;13020:1;13013:15;13047:4;13044:1;13037:15;13063:195;13102:3;13133:66;13126:5;13123:77;13120:103;;13203:18;;:::i;:::-;-1:-1:-1;13250:1:36;13239:13;;13063:195::o;13263:490::-;13452:2;13441:9;13434:21;13491:6;13486:2;13475:9;13471:18;13464:34;13415:4;13521:66;13513:6;13510:78;13507:98;;;13601:1;13598;13591:12;13507:98;13635:6;13632:1;13628:14;13692:6;13684;13679:2;13668:9;13664:18;13651:48;13720:22;;;;13744:2;13716:31;;13263:490;-1:-1:-1;;;13263:490:36:o;15578:128::-;15645:9;;;15666:11;;;15663:37;;;15680:18;;:::i;18980:184::-;19032:77;19029:1;19022:88;19129:4;19126:1;19119:15;19153:4;19150:1;19143:15;19169:250;19254:1;19264:113;19278:6;19275:1;19272:13;19264:113;;;19354:11;;;19348:18;19335:11;;;19328:39;19300:2;19293:10;19264:113;;;-1:-1:-1;;19411:1:36;19393:16;;19386:27;19169:250::o;19424:329::-;19465:3;19503:5;19497:12;19530:6;19525:3;19518:19;19546:76;19615:6;19608:4;19603:3;19599:14;19592:4;19585:5;19581:16;19546:76;:::i;:::-;19667:2;19655:15;19672:66;19651:88;19642:98;;;;19742:4;19638:109;;19424:329;-1:-1:-1;;19424:329:36:o;19758:288::-;19933:6;19922:9;19915:25;19976:2;19971;19960:9;19956:18;19949:30;19896:4;19996:44;20036:2;20025:9;20021:18;20013:6;19996:44;:::i;20051:287::-;20180:3;20218:6;20212:13;20234:66;20293:6;20288:3;20281:4;20273:6;20269:17;20234:66;:::i;:::-;20316:16;;;;;20051:287;-1:-1:-1;;20051:287:36:o;21518:219::-;21667:2;21656:9;21649:21;21630:4;21687:44;21727:2;21716:9;21712:18;21704:6;21687:44;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"3024000","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"229","DEPOSITOR_ROLE()":"295","REALM_ID_CONTRACT()":"infinite","allowedConsumeReasonCodes(bytes32)":"2560","balanceOf(bytes32,bytes32,string)":"infinite","balanceOf(bytes32,string)":"infinite","balanceOf(bytes32,uint256)":"infinite","balanceOf(uint256)":"infinite","balances(bytes32,uint256,uint256)":"2692","batchAddConsumeReasonCodes(bytes32[])":"infinite","batchRemoveConsumeReasonCodes(bytes32[])":"infinite","consume(bytes32,string,uint256,bytes32)":"infinite","consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":"infinite","consume(uint256,uint256,bytes32)":"infinite","consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":"infinite","currentSeason()":"2351","deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":"infinite","deposit(bytes32,uint256,uint256,uint256,bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","initialize()":"infinite","nonces(uint256)":"2496","owner()":"infinite","preparePayload(uint256,address,uint256,bytes32)":"infinite","proxiableUUID()":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","seasons(bytes32)":"2496","setCurrentSeason(bytes32)":"infinite","transferOwnership(address)":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_consume(uint256,uint256,uint256,bytes32,address)":"infinite","_preparePayload(uint256,uint256,address,uint256,uint256,bytes32)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEPOSITOR_ROLE()":"a3b0b5a3","REALM_ID_CONTRACT()":"2681a28a","allowedConsumeReasonCodes(bytes32)":"f9515962","balanceOf(bytes32,bytes32,string)":"098b6419","balanceOf(bytes32,string)":"794459be","balanceOf(bytes32,uint256)":"ad3b1d48","balanceOf(uint256)":"9cc7f708","balances(bytes32,uint256,uint256)":"51955dfc","batchAddConsumeReasonCodes(bytes32[])":"3f30b00f","batchRemoveConsumeReasonCodes(bytes32[])":"906405a3","consume(bytes32,string,uint256,bytes32)":"e564a0e2","consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":"99d342ac","consume(uint256,uint256,bytes32)":"d14a5c71","consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":"dc893ce4","currentSeason()":"bcb39621","deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":"9d70b005","deposit(bytes32,uint256,uint256,uint256,bytes32)":"18ee89f0","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize()":"8129fc1c","nonces(uint256)":"141a468c","owner()":"8da5cb5b","preparePayload(uint256,address,uint256,bytes32)":"4519eb1d","proxiableUUID()":"52d1902d","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","seasons(bytes32)":"4529cc1b","setCurrentSeason(bytes32)":"86a8e98a","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"realmIdContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"}],\"name\":\"ConsumeReasonCodeAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"}],\"name\":\"ConsumeReasonCodeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConsumeReasonCodesArrayEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"IncorrectSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPhase\",\"type\":\"uint256\"}],\"name\":\"InitializationPhaseAlreadyReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidRealmIdContractAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidRealmIdVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"SeasonAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"BatchAddedConsumeReasonCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"BatchRemovedConsumeReasonCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realmIdOwner\",\"type\":\"address\"}],\"name\":\"Consumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"SetCurrentSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REALM_ID_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IRealmId\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allowedConsumeReasonCodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"batchAddConsumeReasonCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"batchRemoveConsumeReasonCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"}],\"name\":\"preparePayload\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seasons\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"setCurrentSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ConsumeReasonCodeAlreadyExists(bytes32)\":[{\"params\":{\"reasonCode\":\"The reason code that already exists in the mapping.\"}}],\"ConsumeReasonCodeDoesNotExist(bytes32)\":[{\"params\":{\"reasonCode\":\"The reason code that does not exist in the mapping.\"}}],\"IncorrectSigner(address)\":[{\"params\":{\"signer\":\"The incorrect signer.\"}}],\"InitializationPhaseAlreadyReached(uint256,uint256)\":[{\"params\":{\"currentPhase\":\"The current phase.\",\"newPhase\":\"The new phase trying to be set.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"params\":{\"realmId\":\"The given realmId.\",\"requiredBalance\":\"The required balance.\"}}],\"InvalidRealmIdContractAddress(address)\":[{\"params\":{\"addr\":\"The invalid realmId contract address.\"}}],\"InvalidRealmIdVersion(uint256,uint256)\":[{\"params\":{\"realmId\":\"The given realmId.\",\"realmIdVersion\":\"The given realmId version.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"SeasonAlreadySet(bytes32)\":[{\"params\":{\"season\":\"The season that already exists in the mapping.\"}}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BatchAddedConsumeReasonCode(bytes32[])\":{\"params\":{\"reasonCodes\":\"The reason codes added to the mapping.\"}},\"BatchRemovedConsumeReasonCode(bytes32[])\":{\"params\":{\"reasonCodes\":\"The reason codes removed from the mapping.\"}},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)\":{\"params\":{\"amount\":\"The amount consumed.\",\"operator\":\"The sender of the consumption.\",\"realmId\":\"The realmId of the balance consumed from.\",\"realmIdOwner\":\"The realmId owner's address.\",\"realmIdVersion\":\"The realmId version.\",\"reasonCode\":\"The reason code of the consumption.\",\"season\":\"The season of the balance consumed from.\"}},\"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"The amount deposited.\",\"realmId\":\"The realmId of the balance deposited to.\",\"realmIdVersion\":\"The realmId version.\",\"reasonCode\":\"The reason code of the deposit.\",\"season\":\"The season of the balance deposited to.\",\"sender\":\"The sender of the deposit.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}},\"SetCurrentSeason(bytes32)\":{\"params\":{\"season\":\"The new season being set.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(bytes32,bytes32,string)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.\",\"params\":{\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\",\"season\":\"The season.\"},\"returns\":{\"_0\":\"The balance.\"}},\"balanceOf(bytes32,string)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.\",\"params\":{\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\"},\"returns\":{\"_0\":\"The balance.\"}},\"balanceOf(bytes32,uint256)\":{\"details\":\"Reverts if fails to resolve realmId's version.\",\"params\":{\"realmId\":\"The realmId.\",\"season\":\"The season.\"},\"returns\":{\"_0\":\"The balance.\"}},\"balanceOf(uint256)\":{\"details\":\"Reverts if fails to resolve realmId's version.\",\"params\":{\"realmId\":\"The realmId.\"},\"returns\":{\"_0\":\"The balance.\"}},\"batchAddConsumeReasonCodes(bytes32[])\":{\"details\":\"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes already exists in the mapping.Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.\",\"params\":{\"reasonCodes\":\"Array of reason codes to add.\"}},\"batchRemoveConsumeReasonCodes(bytes32[])\":{\"details\":\"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes do not exist in the mapping.Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.\",\"params\":{\"reasonCodes\":\"Array of reason codes to remove.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"Reverts if the given address is invalid (equal to ZeroAddress).\",\"params\":{\"realmIdContractAddress\":\"The realmId contract address.\"}},\"consume(bytes32,string,uint256,bytes32)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\"}},\"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\",\"r\":\"r value of the signature.\",\"s\":\"s value of the signature.\",\"v\":\"v value of the signature.\"}},\"consume(uint256,uint256,bytes32)\":{\"details\":\"Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"realmId\":\"The realmId to deposit to.\"}},\"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if failes to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"r\":\"r value of the signature.\",\"realmId\":\"The realmId to consume from.\",\"s\":\"s value of the signature.\",\"v\":\"v value of the signature.\"}},\"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)\":{\"details\":\"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event with msg.sender as the sender.\",\"params\":{\"amount\":\"The amount to deposit.\",\"depositReasonCode\":\"The reason code of the deposit.\",\"name\":\"The name associated with the realmId.\",\"parentNode\":\"The parent node associated with the realmId.\",\"realmIdVersion\":\"The realmId version.\",\"season\":\"The season to deposit to.\"}},\"deposit(bytes32,uint256,uint256,uint256,bytes32)\":{\"details\":\"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event if successful.\",\"params\":{\"amount\":\"The amount to deposit.\",\"depositReasonCode\":\"The reason code of the deposit.\",\"realmId\":\"The realmId to deposit to.\",\"realmIdVersion\":\"The realmId version.\",\"season\":\"The season to deposit to.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"preparePayload(uint256,address,uint256,bytes32)\":{\"details\":\"Reverts if fails to resolve the realmId's version.\",\"params\":{\"amount\":\"The amount.\",\"realmId\":\"The realmId.\",\"reasonCode\":\"The reason code.\"},\"returns\":{\"_0\":\"The payload.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"setCurrentSeason(bytes32)\":{\"details\":\"Reverts if sender does not have Admin role.Reverts if the given season has already been set before.Emits a {SetCurrentSeason} event if successful.\",\"params\":{\"season\":\"The season to set.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"REALM_ID_CONTRACT\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"title\":\"RealmPoints\",\"version\":1},\"userdoc\":{\"errors\":{\"ConsumeReasonCodeAlreadyExists(bytes32)\":[{\"notice\":\"Thrown when the given consume reason code already exists in the mapping.\"}],\"ConsumeReasonCodeDoesNotExist(bytes32)\":[{\"notice\":\"Thrown when the given reason code does not exist in the mapping.\"}],\"ConsumeReasonCodesArrayEmpty()\":[{\"notice\":\"Thrown when the given consume reason codes array is empty.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"IncorrectSigner(address)\":[{\"notice\":\"Thrown when the signer is not the realmId owner.\"}],\"InitializationPhaseAlreadyReached(uint256,uint256)\":[{\"notice\":\"Emitted when trying to set a phase value that has already been reached.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"notice\":\"Thrown when the realmId does not have enough balance\"}],\"InvalidRealmIdContractAddress(address)\":[{\"notice\":\"Thrown at construction when the given realmId contract address is invalid.\"}],\"InvalidRealmIdVersion(uint256,uint256)\":[{\"notice\":\"Thrown when the given realmId version does not match the current realmId version.\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when the signature is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}],\"SeasonAlreadySet(bytes32)\":[{\"notice\":\"Thrown when the given season has already been set.\"}]},\"events\":{\"BatchAddedConsumeReasonCode(bytes32[])\":{\"notice\":\"Emitted when one or more reason code(s) are added to the comsume reason code mapping.\"},\"BatchRemovedConsumeReasonCode(bytes32[])\":{\"notice\":\"Emitted when one or more reason code(s) are removed from the comsume reason code mapping.\"},\"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)\":{\"notice\":\"Emitted when an amount is consumed from a balance.\"},\"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Emitted when an amount is deposited to a balance.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"},\"SetCurrentSeason(bytes32)\":{\"notice\":\"Emitted when the current season is set.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(bytes32,bytes32,string)\":{\"notice\":\"Gets the balance of a realmId for a specified season.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.\"},\"balanceOf(bytes32,string)\":{\"notice\":\"Gets the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season.\"},\"balanceOf(bytes32,uint256)\":{\"notice\":\"Gets the balance of a given realmId for a specified season.Applies to the current version of the realmId.\"},\"balanceOf(uint256)\":{\"notice\":\"Gets the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season.\"},\"batchAddConsumeReasonCodes(bytes32[])\":{\"notice\":\"Adds one or more reason code(s) to the consume reason code mapping.\"},\"batchRemoveConsumeReasonCodes(bytes32[])\":{\"notice\":\"Removes one or more reason code(s) from the consume reason code mapping.\"},\"consume(bytes32,string,uint256,bytes32)\":{\"notice\":\"Called by the realmId owner to consume a given amount from the realmId's balance.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season.\"},\"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Called with a signature to consume a given amount from the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season.\"},\"consume(uint256,uint256,bytes32)\":{\"notice\":\"Called by the realmId owner to consume a given amount from the given realmId's balance.Applies to the current version of the realmId.Applies to the current season.\"},\"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Called with a signature to consume a given amount from the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season.\"},\"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)\":{\"notice\":\"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.The realmId is resolved from the given parent node and name.\"},\"deposit(bytes32,uint256,uint256,uint256,bytes32)\":{\"notice\":\"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"initialize()\":{\"notice\":\"Initializes the contract with the provided realmId contract address.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"preparePayload(uint256,address,uint256,bytes32)\":{\"notice\":\"Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"setCurrentSeason(bytes32)\":{\"notice\":\"Sets the current season.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"notice\":\"This contract is designed for managing the point balances of RealmId.Point balances are registered by realmId (verioned) by season.Methods apply to the current version of the realmId if realmId version is not specified.Methods support identifying the realmId by the realmId itself, or by its parent node and name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RealmPoints/RealmPoints.sol\":\"RealmPoints\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x922cf4abb506400feb78edab23e1cacddbd50541d345f460004e73a5eef182dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1ae6db61ce87a6f7bd1ba3467520f4171f950719a0fa3439c073254e7c385d8d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RealmPoints/RealmPoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IRealmId} from \\\"./interface/IRealmId.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {AccessControlBase} from \\\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\\\";\\nimport {ContractOwnershipBase} from \\\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title RealmPoints\\n/// @notice This contract is designed for managing the point balances of RealmId.\\n/// @notice Point balances are registered by realmId (verioned) by season.\\n/// @notice Methods apply to the current version of the realmId if realmId version is not specified.\\n/// @notice Methods support identifying the realmId by the realmId itself, or by its parent node and name.\\ncontract RealmPoints is Initializable, AccessControlBase, ContractOwnershipBase, UUPSUpgradeable {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IRealmId public immutable REALM_ID_CONTRACT;\\n\\n    bytes32 public currentSeason;\\n    mapping(bytes32 => bool) public seasons;\\n\\n    mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256))) public balances; // season => realmId => realmIdVersion => balance\\n\\n    mapping(uint256 => uint256) public nonces; // realmId => nonce\\n\\n    mapping(bytes32 => bool) public allowedConsumeReasonCodes;\\n\\n    /// @notice Emitted when the current season is set.\\n    /// @param season The new season being set.\\n    event SetCurrentSeason(bytes32 season);\\n\\n    /// @notice Emitted when one or more reason code(s) are added to the comsume reason code mapping.\\n    /// @param reasonCodes The reason codes added to the mapping.\\n    event BatchAddedConsumeReasonCode(bytes32[] reasonCodes);\\n\\n    /// @notice Emitted when one or more reason code(s) are removed from the comsume reason code mapping.\\n    /// @param reasonCodes The reason codes removed from the mapping.\\n    event BatchRemovedConsumeReasonCode(bytes32[] reasonCodes);\\n\\n    /// @notice Emitted when an amount is deposited to a balance.\\n    /// @param sender The sender of the deposit.\\n    /// @param season The season of the balance deposited to.\\n    /// @param reasonCode The reason code of the deposit.\\n    /// @param realmId The realmId of the balance deposited to.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount deposited.\\n    event Deposited(\\n        address indexed sender,\\n        bytes32 indexed season,\\n        bytes32 indexed reasonCode,\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an amount is consumed from a balance.\\n    /// @param realmId The realmId of the balance consumed from.\\n    /// @param season The season of the balance consumed from.\\n    /// @param reasonCode The reason code of the consumption.\\n    /// @param operator The sender of the consumption.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount consumed.\\n    /// @param realmIdOwner The realmId owner's address.\\n    event Consumed(\\n        uint256 indexed realmId,\\n        bytes32 indexed season,\\n        bytes32 indexed reasonCode,\\n        address operator,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        address realmIdOwner\\n    );\\n\\n    /// @notice Thrown at construction when the given realmId contract address is invalid.\\n    /// @param addr The invalid realmId contract address.\\n    error InvalidRealmIdContractAddress(address addr);\\n\\n    /// @notice Thrown when the given season has already been set.\\n    /// @param season The season that already exists in the mapping.\\n    error SeasonAlreadySet(bytes32 season);\\n\\n    /// @notice Thrown when the given consume reason codes array is empty.\\n    error ConsumeReasonCodesArrayEmpty();\\n\\n    /// @notice Thrown when the given consume reason code already exists in the mapping.\\n    /// @param reasonCode The reason code that already exists in the mapping.\\n    error ConsumeReasonCodeAlreadyExists(bytes32 reasonCode);\\n\\n    /// @notice Thrown when the given reason code does not exist in the mapping.\\n    /// @param reasonCode The reason code that does not exist in the mapping.\\n    error ConsumeReasonCodeDoesNotExist(bytes32 reasonCode);\\n\\n    /// @notice Thrown when the given realmId version does not match the current realmId version.\\n    /// @param realmId The given realmId.\\n    /// @param realmIdVersion The given realmId version.\\n    error InvalidRealmIdVersion(uint256 realmId, uint256 realmIdVersion);\\n\\n    /// @notice Thrown when the realmId does not have enough balance\\n    /// @param realmId The given realmId.\\n    /// @param requiredBalance The required balance.\\n    error InsufficientBalance(uint256 realmId, uint256 requiredBalance);\\n\\n    /// @notice Thrown when the signer is not the realmId owner.\\n    /// @param signer The incorrect signer.\\n    error IncorrectSigner(address signer);\\n\\n    /// @notice Thrown when the signature is invalid.\\n    error InvalidSignature();\\n\\n    /// @param realmIdContractAddress The realmId contract address.\\n    /// @dev Reverts if the given address is invalid (equal to ZeroAddress).\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address realmIdContractAddress) {\\n        if (realmIdContractAddress == address(0)) {\\n            revert InvalidRealmIdContractAddress(realmIdContractAddress);\\n        }\\n        REALM_ID_CONTRACT = IRealmId(realmIdContractAddress);\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract with the provided realmId contract address.\\n    function initialize() public initializer {\\n        __UUPSUpgradeable_init();\\n        ContractOwnershipStorage.layout().proxyInit(_msgSender());\\n    }\\n\\n    /// @notice Checks whether the sender is authorized to upgrade the contract.\\n    /// @dev Reverts if sender is not the contract owner.\\n    function _authorizeUpgrade(address) internal view override {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n    }\\n\\n    /// @notice Sets the current season.\\n    /// @dev Reverts if sender does not have Admin role.\\n    /// @dev Reverts if the given season has already been set before.\\n    /// @dev Emits a {SetCurrentSeason} event if successful.\\n    /// @param season The season to set.\\n    function setCurrentSeason(bytes32 season) external {\\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\\n        if (seasons[season]) {\\n            revert SeasonAlreadySet(season);\\n        }\\n\\n        currentSeason = season;\\n        seasons[season] = true;\\n        emit SetCurrentSeason(season);\\n    }\\n\\n    /// @notice Adds one or more reason code(s) to the consume reason code mapping.\\n    /// @dev Reverts if sender does not have Admin role.\\n    /// @dev Reverts if the given reason codes array is empty.\\n    /// @dev Reverts if any of the given reason codes already exists in the mapping.\\n    /// @dev Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.\\n    /// @param reasonCodes Array of reason codes to add.\\n    function batchAddConsumeReasonCodes(bytes32[] calldata reasonCodes) external {\\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\\n        if (reasonCodes.length <= 0) {\\n            revert ConsumeReasonCodesArrayEmpty();\\n        }\\n\\n        for (uint256 i = 0; i < reasonCodes.length; i++) {\\n            if (allowedConsumeReasonCodes[reasonCodes[i]]) {\\n                revert ConsumeReasonCodeAlreadyExists(reasonCodes[i]);\\n            }\\n            allowedConsumeReasonCodes[reasonCodes[i]] = true;\\n        }\\n        emit BatchAddedConsumeReasonCode(reasonCodes);\\n    }\\n\\n    /// @notice Removes one or more reason code(s) from the consume reason code mapping.\\n    /// @dev Reverts if sender does not have Admin role.\\n    /// @dev Reverts if the given reason codes array is empty.\\n    /// @dev Reverts if any of the given reason codes do not exist in the mapping.\\n    /// @dev Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.\\n    /// @param reasonCodes Array of reason codes to remove.\\n    function batchRemoveConsumeReasonCodes(bytes32[] calldata reasonCodes) external {\\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\\n        if (reasonCodes.length <= 0) {\\n            revert ConsumeReasonCodesArrayEmpty();\\n        }\\n\\n        for (uint256 i = 0; i < reasonCodes.length; i++) {\\n            if (!allowedConsumeReasonCodes[reasonCodes[i]]) {\\n                revert ConsumeReasonCodeDoesNotExist(reasonCodes[i]);\\n            }\\n            delete allowedConsumeReasonCodes[reasonCodes[i]];\\n        }\\n        emit BatchRemovedConsumeReasonCode(reasonCodes);\\n    }\\n\\n    /// @notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\\n    /// @dev Reverts if sender does not have Depositor role.\\n    /// @dev Reverts if the realmId does not exist.\\n    /// @dev Reverts if the given realmId version does not match the current realmId version.\\n    /// @dev Emits a {Deposited} event if successful.\\n    /// @param season The season to deposit to.\\n    /// @param realmId The realmId to deposit to.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount to deposit.\\n    /// @param depositReasonCode The reason code of the deposit.\\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) public {\\n        AccessControlStorage.layout().enforceHasRole(DEPOSITOR_ROLE, _msgSender());\\n\\n        REALM_ID_CONTRACT.ownerOf(realmId);\\n        uint256 curRealmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        if (curRealmIdVersion != realmIdVersion) {\\n            revert InvalidRealmIdVersion(realmId, realmIdVersion);\\n        }\\n\\n        balances[season][realmId][realmIdVersion] += amount;\\n        emit Deposited(_msgSender(), season, depositReasonCode, realmId, realmIdVersion, amount);\\n    }\\n\\n    /// @notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @dev Reverts if sender does not have Depositor role.\\n    /// @dev Reverts if the realmId does not exist.\\n    /// @dev Reverts if the given realmId version does not match the current realmId version.\\n    /// @dev Emits a {Deposited} event with msg.sender as the sender.\\n    /// @param season The season to deposit to.\\n    /// @param parentNode The parent node associated with the realmId.\\n    /// @param name The name associated with the realmId.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount to deposit.\\n    /// @param depositReasonCode The reason code of the deposit.\\n    function deposit(\\n        bytes32 season,\\n        bytes32 parentNode,\\n        string calldata name,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        bytes32 depositReasonCode\\n    ) external {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        deposit(season, realmId, realmIdVersion, amount, depositReasonCode);\\n    }\\n\\n    /// @notice Called by other public functions to consume a given amount from the balance of a given realmId and version.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param realmId The realmId to deposit to.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    /// @param owner Address of the realmId's owner.\\n    function _consume(uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 consumeReasonCode, address owner) internal {\\n        uint256 balance = balances[currentSeason][realmId][realmIdVersion];\\n        if (balance < amount) {\\n            revert InsufficientBalance(realmId, amount);\\n        }\\n        if (!allowedConsumeReasonCodes[consumeReasonCode]) {\\n            revert ConsumeReasonCodeDoesNotExist(consumeReasonCode);\\n        }\\n\\n        balances[currentSeason][realmId][realmIdVersion] = balance - amount;\\n\\n        emit Consumed(realmId, currentSeason, consumeReasonCode, _msgSender(), realmIdVersion, amount, owner);\\n    }\\n\\n    /// @notice Called with a signature to consume a given amount from the balance of a realmId.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @dev Reverts if signature is invalid.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if signer is not the realmId owner.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    /// @param v v value of the signature.\\n    /// @param s s value of the signature.\\n    /// @param r r value of the signature.\\n    function consume(bytes32 parentNode, string calldata name, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) external {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        consume(realmId, amount, consumeReasonCode, v, r, s);\\n    }\\n\\n    /// @notice Called with a signature to consume a given amount from the balance of a given realmId.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if failes to resolve realmId's version.\\n    /// @dev Reverts if signature is invalid.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if signer is not the realmId owner.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param realmId The realmId to consume from.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    /// @param v v value of the signature.\\n    /// @param s s value of the signature.\\n    /// @param r r value of the signature.\\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) public {\\n        uint256 nonce = nonces[realmId];\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        bytes32 messageHash = _preparePayload(realmId, realmIdVersion, _msgSender(), amount, nonce, consumeReasonCode);\\n        bytes32 messageDigest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\n\\n        address owner = REALM_ID_CONTRACT.ownerOf(realmId);\\n        bytes memory signature = abi.encodePacked(r, s, v);\\n        bool isValid = SignatureChecker.isValidSignatureNow(owner, messageDigest, signature);\\n        if (!isValid) {\\n            revert InvalidSignature();\\n        }\\n\\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner);\\n        nonces[realmId] = nonce + 1;\\n    }\\n\\n    /// @notice Called by the realmId owner to consume a given amount from the realmId's balance.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if the sender is not the owner of the realmId.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    function consume(bytes32 parentNode, string calldata name, uint256 amount, bytes32 consumeReasonCode) external {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        consume(realmId, amount, consumeReasonCode);\\n    }\\n\\n    /// @notice Called by the realmId owner to consume a given amount from the given realmId's balance.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if the sender is not the owner of the realmId.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param realmId The realmId to deposit to.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode) public {\\n        address owner = REALM_ID_CONTRACT.ownerOf(realmId);\\n        if (_msgSender() != owner) {\\n            revert IncorrectSigner(_msgSender());\\n        }\\n\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner);\\n    }\\n\\n    /// @notice Gets the balance of a given realmId for a specified season.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param season The season.\\n    /// @param realmId The realmId.\\n    /// @return The balance.\\n    function balanceOf(bytes32 season, uint256 realmId) external view returns (uint256) {\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[season][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Gets the balance of a realmId for a specified season.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param season The season.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @return The balance.\\n    function balanceOf(bytes32 season, bytes32 parentNode, string calldata name) external view returns (uint256) {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[season][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Gets the balance of a given realmId.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param realmId The realmId.\\n    /// @return The balance.\\n    function balanceOf(uint256 realmId) external view returns (uint256) {\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[currentSeason][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Gets the balance of a realmId.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @return The balance.\\n    function balanceOf(bytes32 parentNode, string calldata name) external view returns (uint256) {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[currentSeason][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Returns a payload generated from the arguments and the current season.\\n    /// @param realmId The realmId.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount.\\n    /// @param nonce The nonce.\\n    /// @param reasonCode The reason code.\\n    /// @return The payload.\\n    function _preparePayload(\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        address spender,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes32 reasonCode\\n    ) internal view returns (bytes32) {\\n        bytes32 payload = keccak256(abi.encodePacked(realmId, realmIdVersion, spender, amount, currentSeason, reasonCode, nonce));\\n        return payload;\\n    }\\n\\n    /// @notice Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version.\\n    /// @dev Reverts if fails to resolve the realmId's version.\\n    /// @param realmId The realmId.\\n    /// @param amount The amount.\\n    /// @param reasonCode The reason code.\\n    /// @return The payload.\\n    function preparePayload(uint256 realmId, address spender, uint256 amount, bytes32 reasonCode) external view returns (bytes32) {\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        bytes32 payload = _preparePayload(realmId, realmIdVersion, spender, amount, nonces[realmId], reasonCode);\\n        return payload;\\n    }\\n}\\n\",\"keccak256\":\"0xdeea9079bb035868c0658088b05778eb5902cfc9e6d436cfb81fabbc525a1b76\",\"license\":\"MIT\"},\"contracts/RealmPoints/interface/IRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// import {RealmId} from \\\"../realmIdContract/RealmId.sol\\\";\\n\\ninterface IRealmId {\\n    function burnCounts(uint256 realmId) external view returns (uint256);\\n\\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\\n\\n    function ownerOf(uint256 realmId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfad6e9198a7ed75d8ebb7253962413ce9e789c9d4a90b31bbf460a3f2bef217a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1363,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1366,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1345,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1660,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":4062,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"currentSeason","offset":0,"slot":"101","type":"t_bytes32"},{"astId":4066,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"seasons","offset":0,"slot":"102","type":"t_mapping(t_bytes32,t_bool)"},{"astId":4074,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"balances","offset":0,"slot":"103","type":"t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"},{"astId":4078,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"nonces","offset":0,"slot":"104","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4082,"contract":"contracts/RealmPoints/RealmPoints.sol:RealmPoints","label":"allowedConsumeReasonCodes","offset":0,"slot":"105","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"},"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"ConsumeReasonCodeAlreadyExists(bytes32)":[{"notice":"Thrown when the given consume reason code already exists in the mapping."}],"ConsumeReasonCodeDoesNotExist(bytes32)":[{"notice":"Thrown when the given reason code does not exist in the mapping."}],"ConsumeReasonCodesArrayEmpty()":[{"notice":"Thrown when the given consume reason codes array is empty."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"IncorrectSigner(address)":[{"notice":"Thrown when the signer is not the realmId owner."}],"InitializationPhaseAlreadyReached(uint256,uint256)":[{"notice":"Emitted when trying to set a phase value that has already been reached."}],"InsufficientBalance(uint256,uint256)":[{"notice":"Thrown when the realmId does not have enough balance"}],"InvalidRealmIdContractAddress(address)":[{"notice":"Thrown at construction when the given realmId contract address is invalid."}],"InvalidRealmIdVersion(uint256,uint256)":[{"notice":"Thrown when the given realmId version does not match the current realmId version."}],"InvalidSignature()":[{"notice":"Thrown when the signature is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}],"SeasonAlreadySet(bytes32)":[{"notice":"Thrown when the given season has already been set."}]},"events":{"BatchAddedConsumeReasonCode(bytes32[])":{"notice":"Emitted when one or more reason code(s) are added to the comsume reason code mapping."},"BatchRemovedConsumeReasonCode(bytes32[])":{"notice":"Emitted when one or more reason code(s) are removed from the comsume reason code mapping."},"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)":{"notice":"Emitted when an amount is consumed from a balance."},"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)":{"notice":"Emitted when an amount is deposited to a balance."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."},"SetCurrentSeason(bytes32)":{"notice":"Emitted when the current season is set."}},"kind":"user","methods":{"balanceOf(bytes32,bytes32,string)":{"notice":"Gets the balance of a realmId for a specified season.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId."},"balanceOf(bytes32,string)":{"notice":"Gets the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season."},"balanceOf(bytes32,uint256)":{"notice":"Gets the balance of a given realmId for a specified season.Applies to the current version of the realmId."},"balanceOf(uint256)":{"notice":"Gets the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season."},"batchAddConsumeReasonCodes(bytes32[])":{"notice":"Adds one or more reason code(s) to the consume reason code mapping."},"batchRemoveConsumeReasonCodes(bytes32[])":{"notice":"Removes one or more reason code(s) from the consume reason code mapping."},"consume(bytes32,string,uint256,bytes32)":{"notice":"Called by the realmId owner to consume a given amount from the realmId's balance.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season."},"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":{"notice":"Called with a signature to consume a given amount from the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season."},"consume(uint256,uint256,bytes32)":{"notice":"Called by the realmId owner to consume a given amount from the given realmId's balance.Applies to the current version of the realmId.Applies to the current season."},"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":{"notice":"Called with a signature to consume a given amount from the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season."},"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":{"notice":"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.The realmId is resolved from the given parent node and name."},"deposit(bytes32,uint256,uint256,uint256,bytes32)":{"notice":"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"initialize()":{"notice":"Initializes the contract with the provided realmId contract address."},"owner()":{"notice":"Gets the address of the contract owner."},"preparePayload(uint256,address,uint256,bytes32)":{"notice":"Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"setCurrentSeason(bytes32)":{"notice":"Sets the current season."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"notice":"This contract is designed for managing the point balances of RealmId.Point balances are registered by realmId (verioned) by season.Methods apply to the current version of the realmId if realmId version is not specified.Methods support identifying the realmId by the realmId itself, or by its parent node and name.","version":1}}},"contracts/RealmPoints/interface/IRealmId.sol":{"IRealmId":{"abi":[{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"burnCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burnCounts(uint256)":"a9735f94","getTokenId(string,bytes32)":"cad6b901","ownerOf(uint256)":"6352211e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"burnCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RealmPoints/interface/IRealmId.sol\":\"IRealmId\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/RealmPoints/interface/IRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// import {RealmId} from \\\"../realmIdContract/RealmId.sol\\\";\\n\\ninterface IRealmId {\\n    function burnCounts(uint256 realmId) external view returns (uint256);\\n\\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\\n\\n    function ownerOf(uint256 realmId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfad6e9198a7ed75d8ebb7253962413ce9e789c9d4a90b31bbf460a3f2bef217a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/RealmPoints/mock/realmIdContract/MockRealmId.sol":{"MockRealmId":{"abi":[{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"burnCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610197806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636352211e14610046578063a9735f9414610097578063cad6b901146100b9575b600080fd5b61006d6100543660046100d0565b507390f79bf6eb2c4f870365e785982e1f101e93b90690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ab6100a53660046100d0565b50600090565b60405190815260200161008e565b6100ab6100c73660046100e9565b600a9392505050565b6000602082840312156100e257600080fd5b5035919050565b6000806000604084860312156100fe57600080fd5b833567ffffffffffffffff8082111561011657600080fd5b818601915086601f83011261012a57600080fd5b81358181111561013957600080fd5b87602082850101111561014b57600080fd5b602092830198909750959091013594935050505056fea26469706673582212200916c6b26e3ca9d2f6b0a312c31aeddea2282e03154721fa44152ba1fa2ff9bb64736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x197 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA9735F94 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xCAD6B901 EQ PUSH2 0xB9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xD0 JUMP JUMPDEST POP PUSH20 0x90F79BF6EB2C4F870365E785982E1F101E93B906 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0xA5 CALLDATASIZE PUSH1 0x4 PUSH2 0xD0 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8E JUMP JUMPDEST PUSH2 0xAB PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9 JUMP JUMPDEST PUSH1 0xA SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD AND 0xC6 0xB2 PUSH15 0x3CA9D2F6B0A312C31AEDDEA2282E03 ISZERO SELFBALANCE 0x21 STATICCALL PREVRANDAO ISZERO 0x2B LOG1 STATICCALL 0x2F 0xF9 0xBB PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"57:358:34:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@burnCounts_5018":{"entryPoint":null,"id":5018,"parameterSlots":1,"returnSlots":1},"@getTokenId_5030":{"entryPoint":null,"id":5030,"parameterSlots":3,"returnSlots":1},"@ownerOf_5043":{"entryPoint":null,"id":5043,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptrt_bytes32":{"entryPoint":233,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256":{"entryPoint":208,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1280:36","nodeType":"YulBlock","src":"0:1280:36","statements":[{"nativeSrc":"6:3:36","nodeType":"YulBlock","src":"6:3:36","statements":[]},{"body":{"nativeSrc":"84:110:36","nodeType":"YulBlock","src":"84:110:36","statements":[{"body":{"nativeSrc":"130:16:36","nodeType":"YulBlock","src":"130:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"139:1:36","nodeType":"YulLiteral","src":"139:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"142:1:36","nodeType":"YulLiteral","src":"142:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"132:6:36","nodeType":"YulIdentifier","src":"132:6:36"},"nativeSrc":"132:12:36","nodeType":"YulFunctionCall","src":"132:12:36"},"nativeSrc":"132:12:36","nodeType":"YulExpressionStatement","src":"132:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"105:7:36","nodeType":"YulIdentifier","src":"105:7:36"},{"name":"headStart","nativeSrc":"114:9:36","nodeType":"YulIdentifier","src":"114:9:36"}],"functionName":{"name":"sub","nativeSrc":"101:3:36","nodeType":"YulIdentifier","src":"101:3:36"},"nativeSrc":"101:23:36","nodeType":"YulFunctionCall","src":"101:23:36"},{"kind":"number","nativeSrc":"126:2:36","nodeType":"YulLiteral","src":"126:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"97:3:36","nodeType":"YulIdentifier","src":"97:3:36"},"nativeSrc":"97:32:36","nodeType":"YulFunctionCall","src":"97:32:36"},"nativeSrc":"94:52:36","nodeType":"YulIf","src":"94:52:36"},{"nativeSrc":"155:33:36","nodeType":"YulAssignment","src":"155:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"178:9:36","nodeType":"YulIdentifier","src":"178:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"165:12:36","nodeType":"YulIdentifier","src":"165:12:36"},"nativeSrc":"165:23:36","nodeType":"YulFunctionCall","src":"165:23:36"},"variableNames":[{"name":"value0","nativeSrc":"155:6:36","nodeType":"YulIdentifier","src":"155:6:36"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"14:180:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"50:9:36","nodeType":"YulTypedName","src":"50:9:36","type":""},{"name":"dataEnd","nativeSrc":"61:7:36","nodeType":"YulTypedName","src":"61:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"73:6:36","nodeType":"YulTypedName","src":"73:6:36","type":""}],"src":"14:180:36"},{"body":{"nativeSrc":"300:125:36","nodeType":"YulBlock","src":"300:125:36","statements":[{"nativeSrc":"310:26:36","nodeType":"YulAssignment","src":"310:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"322:9:36","nodeType":"YulIdentifier","src":"322:9:36"},{"kind":"number","nativeSrc":"333:2:36","nodeType":"YulLiteral","src":"333:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"318:3:36","nodeType":"YulIdentifier","src":"318:3:36"},"nativeSrc":"318:18:36","nodeType":"YulFunctionCall","src":"318:18:36"},"variableNames":[{"name":"tail","nativeSrc":"310:4:36","nodeType":"YulIdentifier","src":"310:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"352:9:36","nodeType":"YulIdentifier","src":"352:9:36"},{"arguments":[{"name":"value0","nativeSrc":"367:6:36","nodeType":"YulIdentifier","src":"367:6:36"},{"kind":"number","nativeSrc":"375:42:36","nodeType":"YulLiteral","src":"375:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"363:3:36","nodeType":"YulIdentifier","src":"363:3:36"},"nativeSrc":"363:55:36","nodeType":"YulFunctionCall","src":"363:55:36"}],"functionName":{"name":"mstore","nativeSrc":"345:6:36","nodeType":"YulIdentifier","src":"345:6:36"},"nativeSrc":"345:74:36","nodeType":"YulFunctionCall","src":"345:74:36"},"nativeSrc":"345:74:36","nodeType":"YulExpressionStatement","src":"345:74:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"199:226:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"269:9:36","nodeType":"YulTypedName","src":"269:9:36","type":""},{"name":"value0","nativeSrc":"280:6:36","nodeType":"YulTypedName","src":"280:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"291:4:36","nodeType":"YulTypedName","src":"291:4:36","type":""}],"src":"199:226:36"},{"body":{"nativeSrc":"531:76:36","nodeType":"YulBlock","src":"531:76:36","statements":[{"nativeSrc":"541:26:36","nodeType":"YulAssignment","src":"541:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"553:9:36","nodeType":"YulIdentifier","src":"553:9:36"},{"kind":"number","nativeSrc":"564:2:36","nodeType":"YulLiteral","src":"564:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"549:3:36","nodeType":"YulIdentifier","src":"549:3:36"},"nativeSrc":"549:18:36","nodeType":"YulFunctionCall","src":"549:18:36"},"variableNames":[{"name":"tail","nativeSrc":"541:4:36","nodeType":"YulIdentifier","src":"541:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"583:9:36","nodeType":"YulIdentifier","src":"583:9:36"},{"name":"value0","nativeSrc":"594:6:36","nodeType":"YulIdentifier","src":"594:6:36"}],"functionName":{"name":"mstore","nativeSrc":"576:6:36","nodeType":"YulIdentifier","src":"576:6:36"},"nativeSrc":"576:25:36","nodeType":"YulFunctionCall","src":"576:25:36"},"nativeSrc":"576:25:36","nodeType":"YulExpressionStatement","src":"576:25:36"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"430:177:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"500:9:36","nodeType":"YulTypedName","src":"500:9:36","type":""},{"name":"value0","nativeSrc":"511:6:36","nodeType":"YulTypedName","src":"511:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"522:4:36","nodeType":"YulTypedName","src":"522:4:36","type":""}],"src":"430:177:36"},{"body":{"nativeSrc":"719:559:36","nodeType":"YulBlock","src":"719:559:36","statements":[{"body":{"nativeSrc":"765:16:36","nodeType":"YulBlock","src":"765:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"774:1:36","nodeType":"YulLiteral","src":"774:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"777:1:36","nodeType":"YulLiteral","src":"777:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"767:6:36","nodeType":"YulIdentifier","src":"767:6:36"},"nativeSrc":"767:12:36","nodeType":"YulFunctionCall","src":"767:12:36"},"nativeSrc":"767:12:36","nodeType":"YulExpressionStatement","src":"767:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"740:7:36","nodeType":"YulIdentifier","src":"740:7:36"},{"name":"headStart","nativeSrc":"749:9:36","nodeType":"YulIdentifier","src":"749:9:36"}],"functionName":{"name":"sub","nativeSrc":"736:3:36","nodeType":"YulIdentifier","src":"736:3:36"},"nativeSrc":"736:23:36","nodeType":"YulFunctionCall","src":"736:23:36"},{"kind":"number","nativeSrc":"761:2:36","nodeType":"YulLiteral","src":"761:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"732:3:36","nodeType":"YulIdentifier","src":"732:3:36"},"nativeSrc":"732:32:36","nodeType":"YulFunctionCall","src":"732:32:36"},"nativeSrc":"729:52:36","nodeType":"YulIf","src":"729:52:36"},{"nativeSrc":"790:37:36","nodeType":"YulVariableDeclaration","src":"790:37:36","value":{"arguments":[{"name":"headStart","nativeSrc":"817:9:36","nodeType":"YulIdentifier","src":"817:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"804:12:36","nodeType":"YulIdentifier","src":"804:12:36"},"nativeSrc":"804:23:36","nodeType":"YulFunctionCall","src":"804:23:36"},"variables":[{"name":"offset","nativeSrc":"794:6:36","nodeType":"YulTypedName","src":"794:6:36","type":""}]},{"nativeSrc":"836:28:36","nodeType":"YulVariableDeclaration","src":"836:28:36","value":{"kind":"number","nativeSrc":"846:18:36","nodeType":"YulLiteral","src":"846:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"840:2:36","nodeType":"YulTypedName","src":"840:2:36","type":""}]},{"body":{"nativeSrc":"891:16:36","nodeType":"YulBlock","src":"891:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"900:1:36","nodeType":"YulLiteral","src":"900:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"903:1:36","nodeType":"YulLiteral","src":"903:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"893:6:36","nodeType":"YulIdentifier","src":"893:6:36"},"nativeSrc":"893:12:36","nodeType":"YulFunctionCall","src":"893:12:36"},"nativeSrc":"893:12:36","nodeType":"YulExpressionStatement","src":"893:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"879:6:36","nodeType":"YulIdentifier","src":"879:6:36"},{"name":"_1","nativeSrc":"887:2:36","nodeType":"YulIdentifier","src":"887:2:36"}],"functionName":{"name":"gt","nativeSrc":"876:2:36","nodeType":"YulIdentifier","src":"876:2:36"},"nativeSrc":"876:14:36","nodeType":"YulFunctionCall","src":"876:14:36"},"nativeSrc":"873:34:36","nodeType":"YulIf","src":"873:34:36"},{"nativeSrc":"916:32:36","nodeType":"YulVariableDeclaration","src":"916:32:36","value":{"arguments":[{"name":"headStart","nativeSrc":"930:9:36","nodeType":"YulIdentifier","src":"930:9:36"},{"name":"offset","nativeSrc":"941:6:36","nodeType":"YulIdentifier","src":"941:6:36"}],"functionName":{"name":"add","nativeSrc":"926:3:36","nodeType":"YulIdentifier","src":"926:3:36"},"nativeSrc":"926:22:36","nodeType":"YulFunctionCall","src":"926:22:36"},"variables":[{"name":"_2","nativeSrc":"920:2:36","nodeType":"YulTypedName","src":"920:2:36","type":""}]},{"body":{"nativeSrc":"996:16:36","nodeType":"YulBlock","src":"996:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1005:1:36","nodeType":"YulLiteral","src":"1005:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1008:1:36","nodeType":"YulLiteral","src":"1008:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"998:6:36","nodeType":"YulIdentifier","src":"998:6:36"},"nativeSrc":"998:12:36","nodeType":"YulFunctionCall","src":"998:12:36"},"nativeSrc":"998:12:36","nodeType":"YulExpressionStatement","src":"998:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"975:2:36","nodeType":"YulIdentifier","src":"975:2:36"},{"kind":"number","nativeSrc":"979:4:36","nodeType":"YulLiteral","src":"979:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"971:3:36","nodeType":"YulIdentifier","src":"971:3:36"},"nativeSrc":"971:13:36","nodeType":"YulFunctionCall","src":"971:13:36"},{"name":"dataEnd","nativeSrc":"986:7:36","nodeType":"YulIdentifier","src":"986:7:36"}],"functionName":{"name":"slt","nativeSrc":"967:3:36","nodeType":"YulIdentifier","src":"967:3:36"},"nativeSrc":"967:27:36","nodeType":"YulFunctionCall","src":"967:27:36"}],"functionName":{"name":"iszero","nativeSrc":"960:6:36","nodeType":"YulIdentifier","src":"960:6:36"},"nativeSrc":"960:35:36","nodeType":"YulFunctionCall","src":"960:35:36"},"nativeSrc":"957:55:36","nodeType":"YulIf","src":"957:55:36"},{"nativeSrc":"1021:30:36","nodeType":"YulVariableDeclaration","src":"1021:30:36","value":{"arguments":[{"name":"_2","nativeSrc":"1048:2:36","nodeType":"YulIdentifier","src":"1048:2:36"}],"functionName":{"name":"calldataload","nativeSrc":"1035:12:36","nodeType":"YulIdentifier","src":"1035:12:36"},"nativeSrc":"1035:16:36","nodeType":"YulFunctionCall","src":"1035:16:36"},"variables":[{"name":"length","nativeSrc":"1025:6:36","nodeType":"YulTypedName","src":"1025:6:36","type":""}]},{"body":{"nativeSrc":"1078:16:36","nodeType":"YulBlock","src":"1078:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1087:1:36","nodeType":"YulLiteral","src":"1087:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1090:1:36","nodeType":"YulLiteral","src":"1090:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1080:6:36","nodeType":"YulIdentifier","src":"1080:6:36"},"nativeSrc":"1080:12:36","nodeType":"YulFunctionCall","src":"1080:12:36"},"nativeSrc":"1080:12:36","nodeType":"YulExpressionStatement","src":"1080:12:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1066:6:36","nodeType":"YulIdentifier","src":"1066:6:36"},{"name":"_1","nativeSrc":"1074:2:36","nodeType":"YulIdentifier","src":"1074:2:36"}],"functionName":{"name":"gt","nativeSrc":"1063:2:36","nodeType":"YulIdentifier","src":"1063:2:36"},"nativeSrc":"1063:14:36","nodeType":"YulFunctionCall","src":"1063:14:36"},"nativeSrc":"1060:34:36","nodeType":"YulIf","src":"1060:34:36"},{"body":{"nativeSrc":"1146:16:36","nodeType":"YulBlock","src":"1146:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1155:1:36","nodeType":"YulLiteral","src":"1155:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1158:1:36","nodeType":"YulLiteral","src":"1158:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1148:6:36","nodeType":"YulIdentifier","src":"1148:6:36"},"nativeSrc":"1148:12:36","nodeType":"YulFunctionCall","src":"1148:12:36"},"nativeSrc":"1148:12:36","nodeType":"YulExpressionStatement","src":"1148:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"1117:2:36","nodeType":"YulIdentifier","src":"1117:2:36"},{"name":"length","nativeSrc":"1121:6:36","nodeType":"YulIdentifier","src":"1121:6:36"}],"functionName":{"name":"add","nativeSrc":"1113:3:36","nodeType":"YulIdentifier","src":"1113:3:36"},"nativeSrc":"1113:15:36","nodeType":"YulFunctionCall","src":"1113:15:36"},{"kind":"number","nativeSrc":"1130:4:36","nodeType":"YulLiteral","src":"1130:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1109:3:36","nodeType":"YulIdentifier","src":"1109:3:36"},"nativeSrc":"1109:26:36","nodeType":"YulFunctionCall","src":"1109:26:36"},{"name":"dataEnd","nativeSrc":"1137:7:36","nodeType":"YulIdentifier","src":"1137:7:36"}],"functionName":{"name":"gt","nativeSrc":"1106:2:36","nodeType":"YulIdentifier","src":"1106:2:36"},"nativeSrc":"1106:39:36","nodeType":"YulFunctionCall","src":"1106:39:36"},"nativeSrc":"1103:59:36","nodeType":"YulIf","src":"1103:59:36"},{"nativeSrc":"1171:23:36","nodeType":"YulAssignment","src":"1171:23:36","value":{"arguments":[{"name":"_2","nativeSrc":"1185:2:36","nodeType":"YulIdentifier","src":"1185:2:36"},{"kind":"number","nativeSrc":"1189:4:36","nodeType":"YulLiteral","src":"1189:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1181:3:36","nodeType":"YulIdentifier","src":"1181:3:36"},"nativeSrc":"1181:13:36","nodeType":"YulFunctionCall","src":"1181:13:36"},"variableNames":[{"name":"value0","nativeSrc":"1171:6:36","nodeType":"YulIdentifier","src":"1171:6:36"}]},{"nativeSrc":"1203:16:36","nodeType":"YulAssignment","src":"1203:16:36","value":{"name":"length","nativeSrc":"1213:6:36","nodeType":"YulIdentifier","src":"1213:6:36"},"variableNames":[{"name":"value1","nativeSrc":"1203:6:36","nodeType":"YulIdentifier","src":"1203:6:36"}]},{"nativeSrc":"1228:44:36","nodeType":"YulAssignment","src":"1228:44:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1255:9:36","nodeType":"YulIdentifier","src":"1255:9:36"},{"kind":"number","nativeSrc":"1266:4:36","nodeType":"YulLiteral","src":"1266:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1251:3:36","nodeType":"YulIdentifier","src":"1251:3:36"},"nativeSrc":"1251:20:36","nodeType":"YulFunctionCall","src":"1251:20:36"}],"functionName":{"name":"calldataload","nativeSrc":"1238:12:36","nodeType":"YulIdentifier","src":"1238:12:36"},"nativeSrc":"1238:34:36","nodeType":"YulFunctionCall","src":"1238:34:36"},"variableNames":[{"name":"value2","nativeSrc":"1228:6:36","nodeType":"YulIdentifier","src":"1228:6:36"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_bytes32","nativeSrc":"612:666:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"669:9:36","nodeType":"YulTypedName","src":"669:9:36","type":""},{"name":"dataEnd","nativeSrc":"680:7:36","nodeType":"YulTypedName","src":"680:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"692:6:36","nodeType":"YulTypedName","src":"692:6:36","type":""},{"name":"value1","nativeSrc":"700:6:36","nodeType":"YulTypedName","src":"700:6:36","type":""},{"name":"value2","nativeSrc":"708:6:36","nodeType":"YulTypedName","src":"708:6:36","type":""}],"src":"612:666:36"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := calldataload(add(headStart, 0x20))\n    }\n}","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c80636352211e14610046578063a9735f9414610097578063cad6b901146100b9575b600080fd5b61006d6100543660046100d0565b507390f79bf6eb2c4f870365e785982e1f101e93b90690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ab6100a53660046100d0565b50600090565b60405190815260200161008e565b6100ab6100c73660046100e9565b600a9392505050565b6000602082840312156100e257600080fd5b5035919050565b6000806000604084860312156100fe57600080fd5b833567ffffffffffffffff8082111561011657600080fd5b818601915086601f83011261012a57600080fd5b81358181111561013957600080fd5b87602082850101111561014b57600080fd5b602092830198909750959091013594935050505056fea26469706673582212200916c6b26e3ca9d2f6b0a312c31aeddea2282e03154721fa44152ba1fa2ff9bb64736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA9735F94 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xCAD6B901 EQ PUSH2 0xB9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xD0 JUMP JUMPDEST POP PUSH20 0x90F79BF6EB2C4F870365E785982E1F101E93B906 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0xA5 CALLDATASIZE PUSH1 0x4 PUSH2 0xD0 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8E JUMP JUMPDEST PUSH2 0xAB PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9 JUMP JUMPDEST PUSH1 0xA SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD AND 0xC6 0xB2 PUSH15 0x3CA9D2F6B0A312C31AEDDEA2282E03 ISZERO SELFBALANCE 0x21 STATICCALL PREVRANDAO ISZERO 0x2B LOG1 STATICCALL 0x2F 0xF9 0xBB PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"57:358:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;282:131;;;;;;:::i;:::-;-1:-1:-1;363:42:34;;282:131;;;;375:42:36;363:55;;;345:74;;333:2;318:18;282:131:34;;;;;;;;84:84;;;;;;:::i;:::-;-1:-1:-1;134:7:34;;84:84;;;;576:25:36;;;564:2;549:18;84:84:34;430:177:36;174:102:34;;;;;;:::i;:::-;267:2;174:102;;;;;:::o;14:180:36:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:36;;14:180;-1:-1:-1;14:180:36:o;612:666::-;692:6;700;708;761:2;749:9;740:7;736:23;732:32;729:52;;;777:1;774;767:12;729:52;817:9;804:23;846:18;887:2;879:6;876:14;873:34;;;903:1;900;893:12;873:34;941:6;930:9;926:22;916:32;;986:7;979:4;975:2;971:13;967:27;957:55;;1008:1;1005;998:12;957:55;1048:2;1035:16;1074:2;1066:6;1063:14;1060:34;;;1090:1;1087;1080:12;1060:34;1137:7;1130:4;1121:6;1117:2;1113:15;1109:26;1106:39;1103:59;;;1158:1;1155;1148:12;1103:59;1189:4;1181:13;;;;1213:6;;-1:-1:-1;1251:20:36;;;;1238:34;;612:666;-1:-1:-1;;;;612:666:36:o"},"gasEstimates":{"creation":{"codeDepositCost":"81400","executionCost":"129","totalCost":"81529"},"external":{"burnCounts(uint256)":"274","getTokenId(string,bytes32)":"496","ownerOf(uint256)":"250"}},"methodIdentifiers":{"burnCounts(uint256)":"a9735f94","getTokenId(string,bytes32)":"cad6b901","ownerOf(uint256)":"6352211e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RealmPoints/mock/realmIdContract/MockRealmId.sol\":\"MockRealmId\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/RealmPoints/mock/realmIdContract/MockRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract MockRealmId {\\n    function burnCounts(uint256) public pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getTokenId(string calldata, bytes32) public pure returns (uint256) {\\n        return 10;\\n    }\\n\\n    function ownerOf(uint256) public pure returns (address) {\\n        return address(0x90F79bf6EB2c4f870365E785982E1f101E93b906);\\n    }\\n}\\n\",\"keccak256\":\"0x03d3db56570af09ef1214d6cc8c0e716538a8c70af8fdf6636a0eddca6b09af9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol":{"MockRealmPointsUpgrade":{"abi":[{"inputs":[{"internalType":"address","name":"realmIdContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"reasonCode","type":"bytes32"}],"name":"ConsumeReasonCodeAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"reasonCode","type":"bytes32"}],"name":"ConsumeReasonCodeDoesNotExist","type":"error"},{"inputs":[],"name":"ConsumeReasonCodesArrayEmpty","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"signer","type":"address"}],"name":"IncorrectSigner","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentPhase","type":"uint256"},{"internalType":"uint256","name":"newPhase","type":"uint256"}],"name":"InitializationPhaseAlreadyReached","type":"error"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"requiredBalance","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"InvalidRealmIdContractAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"}],"name":"InvalidRealmIdVersion","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"SeasonAlreadySet","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"BatchAddedConsumeReasonCode","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"BatchRemovedConsumeReasonCode","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"realmId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"realmIdOwner","type":"address"}],"name":"Consumed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"season","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"realmId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"SetCurrentSeason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEPOSITOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REALM_ID_CONTRACT","outputs":[{"internalType":"contract IRealmId","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"allowedConsumeReasonCodes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"batchAddConsumeReasonCodes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"reasonCodes","type":"bytes32[]"}],"name":"batchRemoveConsumeReasonCodes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"consumeReasonCode","type":"bytes32"}],"name":"consume","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentSeason","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"},{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"realmIdVersion","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newVal","type":"uint256"}],"name":"initializeV2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"realmId","type":"uint256"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"}],"name":"preparePayload","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"seasons","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"season","type":"bytes32"}],"name":"setCurrentSeason","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"val","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"ConsumeReasonCodeAlreadyExists(bytes32)":[{"params":{"reasonCode":"The reason code that already exists in the mapping."}}],"ConsumeReasonCodeDoesNotExist(bytes32)":[{"params":{"reasonCode":"The reason code that does not exist in the mapping."}}],"IncorrectSigner(address)":[{"params":{"signer":"The incorrect signer."}}],"InitializationPhaseAlreadyReached(uint256,uint256)":[{"params":{"currentPhase":"The current phase.","newPhase":"The new phase trying to be set."}}],"InsufficientBalance(uint256,uint256)":[{"params":{"realmId":"The given realmId.","requiredBalance":"The required balance."}}],"InvalidRealmIdContractAddress(address)":[{"params":{"addr":"The invalid realmId contract address."}}],"InvalidRealmIdVersion(uint256,uint256)":[{"params":{"realmId":"The given realmId.","realmIdVersion":"The given realmId version."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"SeasonAlreadySet(bytes32)":[{"params":{"season":"The season that already exists in the mapping."}}]},"events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BatchAddedConsumeReasonCode(bytes32[])":{"params":{"reasonCodes":"The reason codes added to the mapping."}},"BatchRemovedConsumeReasonCode(bytes32[])":{"params":{"reasonCodes":"The reason codes removed from the mapping."}},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)":{"params":{"amount":"The amount consumed.","operator":"The sender of the consumption.","realmId":"The realmId of the balance consumed from.","realmIdOwner":"The realmId owner's address.","realmIdVersion":"The realmId version.","reasonCode":"The reason code of the consumption.","season":"The season of the balance consumed from."}},"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)":{"params":{"amount":"The amount deposited.","realmId":"The realmId of the balance deposited to.","realmIdVersion":"The realmId version.","reasonCode":"The reason code of the deposit.","season":"The season of the balance deposited to.","sender":"The sender of the deposit."}},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}},"SetCurrentSeason(bytes32)":{"params":{"season":"The new season being set."}},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"balanceOf(bytes32,bytes32,string)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.","params":{"name":"The name of the realmId.","parentNode":"The parent node of the realmId.","season":"The season."},"returns":{"_0":"The balance."}},"balanceOf(bytes32,string)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.","params":{"name":"The name of the realmId.","parentNode":"The parent node of the realmId."},"returns":{"_0":"The balance."}},"balanceOf(bytes32,uint256)":{"details":"Reverts if fails to resolve realmId's version.","params":{"realmId":"The realmId.","season":"The season."},"returns":{"_0":"The balance."}},"balanceOf(uint256)":{"details":"Reverts if fails to resolve realmId's version.","params":{"realmId":"The realmId."},"returns":{"_0":"The balance."}},"batchAddConsumeReasonCodes(bytes32[])":{"details":"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes already exists in the mapping.Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.","params":{"reasonCodes":"Array of reason codes to add."}},"batchRemoveConsumeReasonCodes(bytes32[])":{"details":"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes do not exist in the mapping.Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.","params":{"reasonCodes":"Array of reason codes to remove."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"consume(bytes32,string,uint256,bytes32)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","name":"The name of the realmId.","parentNode":"The parent node of the realmId."}},"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":{"details":"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","name":"The name of the realmId.","parentNode":"The parent node of the realmId.","r":"r value of the signature.","s":"s value of the signature.","v":"v value of the signature."}},"consume(uint256,uint256,bytes32)":{"details":"Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","realmId":"The realmId to deposit to."}},"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":{"details":"Reverts if failes to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.","params":{"amount":"The amount to consume.","consumeReasonCode":"The reason code of the consumption.","r":"r value of the signature.","realmId":"The realmId to consume from.","s":"s value of the signature.","v":"v value of the signature."}},"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":{"details":"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event with msg.sender as the sender.","params":{"amount":"The amount to deposit.","depositReasonCode":"The reason code of the deposit.","name":"The name associated with the realmId.","parentNode":"The parent node associated with the realmId.","realmIdVersion":"The realmId version.","season":"The season to deposit to."}},"deposit(bytes32,uint256,uint256,uint256,bytes32)":{"details":"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event if successful.","params":{"amount":"The amount to deposit.","depositReasonCode":"The reason code of the deposit.","realmId":"The realmId to deposit to.","realmIdVersion":"The realmId version.","season":"The season to deposit to."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"preparePayload(uint256,address,uint256,bytes32)":{"details":"Reverts if fails to resolve the realmId's version.","params":{"amount":"The amount.","realmId":"The realmId.","reasonCode":"The reason code."},"returns":{"_0":"The payload."}},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"setCurrentSeason(bytes32)":{"details":"Reverts if sender does not have Admin role.Reverts if the given season has already been set before.Emits a {SetCurrentSeason} event if successful.","params":{"season":"The season to set."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4204":{"entryPoint":null,"id":4204,"parameterSlots":1,"returnSlots":0},"@_5060":{"entryPoint":null,"id":5060,"parameterSlots":1,"returnSlots":0},"@_disableInitializers_1506":{"entryPoint":144,"id":1506,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":334,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1111:36","nodeType":"YulBlock","src":"0:1111:36","statements":[{"nativeSrc":"6:3:36","nodeType":"YulBlock","src":"6:3:36","statements":[]},{"body":{"nativeSrc":"95:209:36","nodeType":"YulBlock","src":"95:209:36","statements":[{"body":{"nativeSrc":"141:16:36","nodeType":"YulBlock","src":"141:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:36","nodeType":"YulLiteral","src":"150:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:36","nodeType":"YulLiteral","src":"153:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:36","nodeType":"YulIdentifier","src":"143:6:36"},"nativeSrc":"143:12:36","nodeType":"YulFunctionCall","src":"143:12:36"},"nativeSrc":"143:12:36","nodeType":"YulExpressionStatement","src":"143:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"116:7:36","nodeType":"YulIdentifier","src":"116:7:36"},{"name":"headStart","nativeSrc":"125:9:36","nodeType":"YulIdentifier","src":"125:9:36"}],"functionName":{"name":"sub","nativeSrc":"112:3:36","nodeType":"YulIdentifier","src":"112:3:36"},"nativeSrc":"112:23:36","nodeType":"YulFunctionCall","src":"112:23:36"},{"kind":"number","nativeSrc":"137:2:36","nodeType":"YulLiteral","src":"137:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"108:3:36","nodeType":"YulIdentifier","src":"108:3:36"},"nativeSrc":"108:32:36","nodeType":"YulFunctionCall","src":"108:32:36"},"nativeSrc":"105:52:36","nodeType":"YulIf","src":"105:52:36"},{"nativeSrc":"166:29:36","nodeType":"YulVariableDeclaration","src":"166:29:36","value":{"arguments":[{"name":"headStart","nativeSrc":"185:9:36","nodeType":"YulIdentifier","src":"185:9:36"}],"functionName":{"name":"mload","nativeSrc":"179:5:36","nodeType":"YulIdentifier","src":"179:5:36"},"nativeSrc":"179:16:36","nodeType":"YulFunctionCall","src":"179:16:36"},"variables":[{"name":"value","nativeSrc":"170:5:36","nodeType":"YulTypedName","src":"170:5:36","type":""}]},{"body":{"nativeSrc":"258:16:36","nodeType":"YulBlock","src":"258:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"267:1:36","nodeType":"YulLiteral","src":"267:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"270:1:36","nodeType":"YulLiteral","src":"270:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"260:6:36","nodeType":"YulIdentifier","src":"260:6:36"},"nativeSrc":"260:12:36","nodeType":"YulFunctionCall","src":"260:12:36"},"nativeSrc":"260:12:36","nodeType":"YulExpressionStatement","src":"260:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"217:5:36","nodeType":"YulIdentifier","src":"217:5:36"},{"arguments":[{"name":"value","nativeSrc":"228:5:36","nodeType":"YulIdentifier","src":"228:5:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"243:3:36","nodeType":"YulLiteral","src":"243:3:36","type":"","value":"160"},{"kind":"number","nativeSrc":"248:1:36","nodeType":"YulLiteral","src":"248:1:36","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"239:3:36","nodeType":"YulIdentifier","src":"239:3:36"},"nativeSrc":"239:11:36","nodeType":"YulFunctionCall","src":"239:11:36"},{"kind":"number","nativeSrc":"252:1:36","nodeType":"YulLiteral","src":"252:1:36","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"235:3:36","nodeType":"YulIdentifier","src":"235:3:36"},"nativeSrc":"235:19:36","nodeType":"YulFunctionCall","src":"235:19:36"}],"functionName":{"name":"and","nativeSrc":"224:3:36","nodeType":"YulIdentifier","src":"224:3:36"},"nativeSrc":"224:31:36","nodeType":"YulFunctionCall","src":"224:31:36"}],"functionName":{"name":"eq","nativeSrc":"214:2:36","nodeType":"YulIdentifier","src":"214:2:36"},"nativeSrc":"214:42:36","nodeType":"YulFunctionCall","src":"214:42:36"}],"functionName":{"name":"iszero","nativeSrc":"207:6:36","nodeType":"YulIdentifier","src":"207:6:36"},"nativeSrc":"207:50:36","nodeType":"YulFunctionCall","src":"207:50:36"},"nativeSrc":"204:70:36","nodeType":"YulIf","src":"204:70:36"},{"nativeSrc":"283:15:36","nodeType":"YulAssignment","src":"283:15:36","value":{"name":"value","nativeSrc":"293:5:36","nodeType":"YulIdentifier","src":"293:5:36"},"variableNames":[{"name":"value0","nativeSrc":"283:6:36","nodeType":"YulIdentifier","src":"283:6:36"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"14:290:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"61:9:36","nodeType":"YulTypedName","src":"61:9:36","type":""},{"name":"dataEnd","nativeSrc":"72:7:36","nodeType":"YulTypedName","src":"72:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"84:6:36","nodeType":"YulTypedName","src":"84:6:36","type":""}],"src":"14:290:36"},{"body":{"nativeSrc":"410:102:36","nodeType":"YulBlock","src":"410:102:36","statements":[{"nativeSrc":"420:26:36","nodeType":"YulAssignment","src":"420:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"432:9:36","nodeType":"YulIdentifier","src":"432:9:36"},{"kind":"number","nativeSrc":"443:2:36","nodeType":"YulLiteral","src":"443:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"428:3:36","nodeType":"YulIdentifier","src":"428:3:36"},"nativeSrc":"428:18:36","nodeType":"YulFunctionCall","src":"428:18:36"},"variableNames":[{"name":"tail","nativeSrc":"420:4:36","nodeType":"YulIdentifier","src":"420:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"462:9:36","nodeType":"YulIdentifier","src":"462:9:36"},{"arguments":[{"name":"value0","nativeSrc":"477:6:36","nodeType":"YulIdentifier","src":"477:6:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"493:3:36","nodeType":"YulLiteral","src":"493:3:36","type":"","value":"160"},{"kind":"number","nativeSrc":"498:1:36","nodeType":"YulLiteral","src":"498:1:36","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"489:3:36","nodeType":"YulIdentifier","src":"489:3:36"},"nativeSrc":"489:11:36","nodeType":"YulFunctionCall","src":"489:11:36"},{"kind":"number","nativeSrc":"502:1:36","nodeType":"YulLiteral","src":"502:1:36","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"485:3:36","nodeType":"YulIdentifier","src":"485:3:36"},"nativeSrc":"485:19:36","nodeType":"YulFunctionCall","src":"485:19:36"}],"functionName":{"name":"and","nativeSrc":"473:3:36","nodeType":"YulIdentifier","src":"473:3:36"},"nativeSrc":"473:32:36","nodeType":"YulFunctionCall","src":"473:32:36"}],"functionName":{"name":"mstore","nativeSrc":"455:6:36","nodeType":"YulIdentifier","src":"455:6:36"},"nativeSrc":"455:51:36","nodeType":"YulFunctionCall","src":"455:51:36"},"nativeSrc":"455:51:36","nodeType":"YulExpressionStatement","src":"455:51:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"309:203:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"379:9:36","nodeType":"YulTypedName","src":"379:9:36","type":""},{"name":"value0","nativeSrc":"390:6:36","nodeType":"YulTypedName","src":"390:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"401:4:36","nodeType":"YulTypedName","src":"401:4:36","type":""}],"src":"309:203:36"},{"body":{"nativeSrc":"691:229:36","nodeType":"YulBlock","src":"691:229:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"708:9:36","nodeType":"YulIdentifier","src":"708:9:36"},{"kind":"number","nativeSrc":"719:2:36","nodeType":"YulLiteral","src":"719:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"701:6:36","nodeType":"YulIdentifier","src":"701:6:36"},"nativeSrc":"701:21:36","nodeType":"YulFunctionCall","src":"701:21:36"},"nativeSrc":"701:21:36","nodeType":"YulExpressionStatement","src":"701:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"742:9:36","nodeType":"YulIdentifier","src":"742:9:36"},{"kind":"number","nativeSrc":"753:2:36","nodeType":"YulLiteral","src":"753:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"738:3:36","nodeType":"YulIdentifier","src":"738:3:36"},"nativeSrc":"738:18:36","nodeType":"YulFunctionCall","src":"738:18:36"},{"kind":"number","nativeSrc":"758:2:36","nodeType":"YulLiteral","src":"758:2:36","type":"","value":"39"}],"functionName":{"name":"mstore","nativeSrc":"731:6:36","nodeType":"YulIdentifier","src":"731:6:36"},"nativeSrc":"731:30:36","nodeType":"YulFunctionCall","src":"731:30:36"},"nativeSrc":"731:30:36","nodeType":"YulExpressionStatement","src":"731:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"781:9:36","nodeType":"YulIdentifier","src":"781:9:36"},{"kind":"number","nativeSrc":"792:2:36","nodeType":"YulLiteral","src":"792:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"777:3:36","nodeType":"YulIdentifier","src":"777:3:36"},"nativeSrc":"777:18:36","nodeType":"YulFunctionCall","src":"777:18:36"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nativeSrc":"797:34:36","nodeType":"YulLiteral","src":"797:34:36","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nativeSrc":"770:6:36","nodeType":"YulIdentifier","src":"770:6:36"},"nativeSrc":"770:62:36","nodeType":"YulFunctionCall","src":"770:62:36"},"nativeSrc":"770:62:36","nodeType":"YulExpressionStatement","src":"770:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"852:9:36","nodeType":"YulIdentifier","src":"852:9:36"},{"kind":"number","nativeSrc":"863:2:36","nodeType":"YulLiteral","src":"863:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"848:3:36","nodeType":"YulIdentifier","src":"848:3:36"},"nativeSrc":"848:18:36","nodeType":"YulFunctionCall","src":"848:18:36"},{"hexValue":"616c697a696e67","kind":"string","nativeSrc":"868:9:36","nodeType":"YulLiteral","src":"868:9:36","type":"","value":"alizing"}],"functionName":{"name":"mstore","nativeSrc":"841:6:36","nodeType":"YulIdentifier","src":"841:6:36"},"nativeSrc":"841:37:36","nodeType":"YulFunctionCall","src":"841:37:36"},"nativeSrc":"841:37:36","nodeType":"YulExpressionStatement","src":"841:37:36"},{"nativeSrc":"887:27:36","nodeType":"YulAssignment","src":"887:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"899:9:36","nodeType":"YulIdentifier","src":"899:9:36"},{"kind":"number","nativeSrc":"910:3:36","nodeType":"YulLiteral","src":"910:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"895:3:36","nodeType":"YulIdentifier","src":"895:3:36"},"nativeSrc":"895:19:36","nodeType":"YulFunctionCall","src":"895:19:36"},"variableNames":[{"name":"tail","nativeSrc":"887:4:36","nodeType":"YulIdentifier","src":"887:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"517:403:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"668:9:36","nodeType":"YulTypedName","src":"668:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"682:4:36","nodeType":"YulTypedName","src":"682:4:36","type":""}],"src":"517:403:36"},{"body":{"nativeSrc":"1022:87:36","nodeType":"YulBlock","src":"1022:87:36","statements":[{"nativeSrc":"1032:26:36","nodeType":"YulAssignment","src":"1032:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1044:9:36","nodeType":"YulIdentifier","src":"1044:9:36"},{"kind":"number","nativeSrc":"1055:2:36","nodeType":"YulLiteral","src":"1055:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1040:3:36","nodeType":"YulIdentifier","src":"1040:3:36"},"nativeSrc":"1040:18:36","nodeType":"YulFunctionCall","src":"1040:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1032:4:36","nodeType":"YulIdentifier","src":"1032:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1074:9:36","nodeType":"YulIdentifier","src":"1074:9:36"},{"arguments":[{"name":"value0","nativeSrc":"1089:6:36","nodeType":"YulIdentifier","src":"1089:6:36"},{"kind":"number","nativeSrc":"1097:4:36","nodeType":"YulLiteral","src":"1097:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"1085:3:36","nodeType":"YulIdentifier","src":"1085:3:36"},"nativeSrc":"1085:17:36","nodeType":"YulFunctionCall","src":"1085:17:36"}],"functionName":{"name":"mstore","nativeSrc":"1067:6:36","nodeType":"YulIdentifier","src":"1067:6:36"},"nativeSrc":"1067:36:36","nodeType":"YulFunctionCall","src":"1067:36:36"},"nativeSrc":"1067:36:36","nodeType":"YulExpressionStatement","src":"1067:36:36"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"925:184:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"991:9:36","nodeType":"YulTypedName","src":"991:9:36","type":""},{"name":"value0","nativeSrc":"1002:6:36","nodeType":"YulTypedName","src":"1002:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1013:4:36","nodeType":"YulTypedName","src":"1013:4:36","type":""}],"src":"925:184:36"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":36,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3EE7 CODESIZE SUB DUP1 PUSH3 0x3EE7 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x38 SWAP2 PUSH3 0x14E JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x82DD9BA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0xA0 MSTORE PUSH3 0x88 PUSH3 0x90 JUMP JUMPDEST POP POP PUSH3 0x180 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0xFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x68 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND EQ PUSH3 0x14C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x3CB5 PUSH3 0x232 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B2 ADD MSTORE DUP2 DUP2 PUSH2 0x6F2 ADD MSTORE DUP2 DUP2 PUSH2 0x7D8 ADD MSTORE DUP2 DUP2 PUSH2 0x8D9 ADD MSTORE DUP2 DUP2 PUSH2 0x98C ADD MSTORE DUP2 DUP2 PUSH2 0xEDF ADD MSTORE DUP2 DUP2 PUSH2 0x13FB ADD MSTORE DUP2 DUP2 PUSH2 0x14E1 ADD MSTORE DUP2 DUP2 PUSH2 0x1A5F ADD MSTORE DUP2 DUP2 PUSH2 0x1B3D ADD MSTORE DUP2 DUP2 PUSH2 0x1C17 ADD MSTORE DUP2 DUP2 PUSH2 0x1CF3 ADD MSTORE DUP2 DUP2 PUSH2 0x1DB6 ADD MSTORE DUP2 DUP2 PUSH2 0x1EBB ADD MSTORE DUP2 DUP2 PUSH2 0x1FB5 ADD MSTORE DUP2 DUP2 PUSH2 0x2167 ADD MSTORE PUSH2 0x22E3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xB21 ADD MSTORE DUP2 DUP2 PUSH2 0xBD1 ADD MSTORE DUP2 DUP2 PUSH2 0xFF2 ADD MSTORE DUP2 DUP2 PUSH2 0x10A2 ADD MSTORE PUSH2 0x11EB ADD MSTORE PUSH2 0x3CB5 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x219 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x86A8E98A GT PUSH2 0x11D JUMPI DUP1 PUSH4 0xA3B0B5A3 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE564A0E2 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE564A0E2 EQ PUSH2 0x67D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x69D JUMPI DUP1 PUSH4 0xF9515962 EQ PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD547741F EQ PUSH2 0x63D JUMPI DUP1 PUSH4 0xDC893CE4 EQ PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3B0B5A3 EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0xAD3B1D48 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0xBCB39621 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0xD14A5C71 EQ PUSH2 0x61D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0x99D342AC EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0x9CC7F708 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0x9D70B005 EQ PUSH2 0x593 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x86A8E98A EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4FE JUMPI DUP1 PUSH4 0x906405A3 EQ PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4519EB1D GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x75B238FC GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x794459BE EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x5B4E128C EQ PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4519EB1D EQ PUSH2 0x36F JUMPI DUP1 PUSH4 0x4529CC1B EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x3CF JUMPI DUP1 PUSH4 0x51955DFC EQ PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0x3C6BB436 EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x3F30B00F EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98B6419 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x141A468C EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x18EE89F0 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x2681A28A EQ PUSH2 0x2A0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x34AF JUMP JUMPDEST PUSH2 0x6ED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0x351B JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x3578 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x334 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0xB0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH1 0x6A SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x36A CALLDATASIZE PUSH1 0x4 PUSH2 0x35C5 JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x38A CALLDATASIZE PUSH1 0x4 PUSH2 0x363A JUMP JUMPDEST PUSH2 0xE96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST PUSH2 0x29E PUSH2 0x3DD CALLDATASIZE PUSH1 0x4 PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0xFDB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x3FD CALLDATASIZE PUSH1 0x4 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x11D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x12BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x37B4 JUMP JUMPDEST PUSH2 0x13F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x1580 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x4D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x1724 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x4F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x1808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x181C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x52E CALLDATASIZE PUSH1 0x4 PUSH2 0x35C5 JUMP JUMPDEST PUSH2 0x1848 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x3578 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x56E CALLDATASIZE PUSH1 0x4 PUSH2 0x3816 JUMP JUMPDEST PUSH2 0x1A1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x1AF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x5AE CALLDATASIZE PUSH1 0x4 PUSH2 0x3899 JUMP JUMPDEST PUSH2 0x1BD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x3907 JUMP JUMPDEST PUSH2 0x1CAA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x638 CALLDATASIZE PUSH1 0x4 PUSH2 0x3788 JUMP JUMPDEST PUSH2 0x1D84 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x658 CALLDATASIZE PUSH1 0x4 PUSH2 0x3578 JUMP JUMPDEST PUSH2 0x1F51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x678 CALLDATASIZE PUSH1 0x4 PUSH2 0x3929 JUMP JUMPDEST PUSH2 0x1F74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x689 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x698 CALLDATASIZE PUSH1 0x4 PUSH2 0x397A JUMP JUMPDEST PUSH2 0x22A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x6B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x2372 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x6D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x74D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x78E SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x81F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x843 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8AA PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 CALLER JUMPDEST PUSH2 0x8A3 PUSH2 0x2386 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x935 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x959 SWAP2 SWAP1 PUSH2 0x3A48 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA0C SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 EQ PUSH2 0xA56 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB196CC7700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xA87 SWAP1 DUP5 SWAP1 PUSH2 0x3A94 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP3 SWAP1 DUP8 SWAP1 CALLER SWAP1 PUSH32 0x9092BF6BD1CF7DB4FCF41AEDC7C0333B51C57F5B80B429BC3D9CAA5587C6AD82 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0xAEF DUP2 PUSH2 0xAE9 PUSH2 0x243A JUMP JUMPDEST SWAP1 PUSH2 0x2468 JUMP JUMPDEST PUSH2 0xB05 DUP4 DUP4 DUP4 PUSH2 0xAFD PUSH2 0x2386 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x24D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xBCF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC44 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH2 0xCF0 DUP2 PUSH2 0x25AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD0C SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x25B6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD39 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x89B JUMP JUMPDEST DUP1 PUSH2 0xD70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE58 JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0xD91 JUMPI PUSH2 0xD91 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE01 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0xDC5 JUMPI PUSH2 0xDC5 PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xB642124200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x69 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0xE19 JUMPI PUSH2 0xE19 PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xE50 SWAP1 PUSH2 0x3AD6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD73 JUMP JUMPDEST POP PUSH32 0xD8C56A8918EC09C2FE3C4D9FCC00ECE66DF217A1AB3AD768DD0A71620DA5B4E DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE8A SWAP3 SWAP2 SWAP1 PUSH2 0x3B0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF4A SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x65 SLOAD DUP3 MLOAD DUP1 DUP6 ADD DUP14 SWAP1 MSTORE DUP1 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP13 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x74 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x94 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xB4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP1 DUP3 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0xF4 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 SWAP3 POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x10A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1115 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x11C1 DUP3 PUSH2 0x25AA JUMP JUMPDEST PUSH2 0x11CD DUP3 DUP3 PUSH1 0x1 PUSH2 0x25B6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1298 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x12DF JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0x136B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x6A DUP5 SWAP1 SSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH1 0xFF DUP4 AND SWAP1 DUP2 OR PUSH2 0x100 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1456 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1473 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1497 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1528 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x154C SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x15A0 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x15BA JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15BA JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1646 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x16A4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x16AC PUSH2 0x27B5 JUMP JUMPDEST PUSH2 0x16BE CALLER PUSH2 0x16B8 PUSH2 0x243A JUMP JUMPDEST SWAP1 PUSH2 0x284E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x174E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x89B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x179A JUMPI PUSH1 0x40 MLOAD PUSH32 0x796C3E9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x65 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x61228C895F8BA06548597D3E34A23BC0ECB6D1E62A1EB3FA30BE04883A17EF31 SWAP1 PUSH2 0x1719 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0C CALLER DUP3 PUSH2 0x1815 PUSH2 0x2386 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x288D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1843 PUSH2 0x1829 PUSH2 0x243A JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1872 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x89B JUMP JUMPDEST DUP1 PUSH2 0x18A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19A0 JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x18CA JUMPI PUSH2 0x18CA PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1939 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x18FD JUMPI PUSH2 0x18FD PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x194F JUMPI PUSH2 0x194F PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 PUSH2 0x1998 DUP2 PUSH2 0x3AD6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x18AC JUMP JUMPDEST POP PUSH32 0x5B2C9FCBB27D48BDBFC59F0564B5BA81539309EBF09A940FAD64D171BCFB9FF9 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE8A SWAP3 SWAP2 SWAP1 PUSH2 0x3B0E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A16 DUP4 DUP4 PUSH2 0x19E1 PUSH2 0x2386 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1A98 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AD9 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x1AE9 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1F74 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BA8 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 DUP2 MSTORE DUP6 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1C50 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C91 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x1CA0 DUP9 DUP3 DUP7 DUP7 DUP7 PUSH2 0x875 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D5E SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP7 KECCAK256 SWAP2 DUP7 MSTORE MSTORE POP POP SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E36 SWAP2 SWAP1 PUSH2 0x3A48 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x1E89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x33FFFF9B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F3B SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x1F4A DUP6 DUP3 DUP7 DUP7 DUP7 PUSH2 0x2931 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x1F5E DUP2 PUSH2 0xAE9 PUSH2 0x243A JUMP JUMPDEST PUSH2 0xB05 DUP4 DUP4 DUP4 PUSH2 0x1F6C PUSH2 0x2386 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2011 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2035 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP14 SWAP1 MSTORE DUP2 DUP4 ADD DUP6 SWAP1 MSTORE CALLER PUSH1 0x60 SWAP1 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x74 DUP3 ADD DUP13 SWAP1 MSTORE PUSH1 0x94 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xB4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF4 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP13 SWAP1 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21D2 SWAP2 SWAP1 PUSH2 0x3A48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xF8 DUP12 SWAP1 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x60 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x41 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x61 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 PUSH2 0x2231 DUP4 DUP6 DUP5 PUSH2 0x2B40 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x226A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2277 DUP14 DUP8 DUP15 DUP15 DUP8 PUSH2 0x2931 JUMP JUMPDEST PUSH2 0x2282 DUP8 PUSH1 0x1 PUSH2 0x3A94 JUMP JUMPDEST PUSH1 0x0 SWAP14 DUP15 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP14 KECCAK256 SWAP13 SWAP1 SWAP13 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x231C SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2339 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x235D SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x236A DUP2 DUP5 DUP5 PUSH2 0x1D84 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD0C CALLER DUP3 PUSH2 0x237F PUSH2 0x243A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2D0D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A19 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A19 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x3B60 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x11CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x25A4 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xD0C CALLER PUSH2 0xAE9 PUSH2 0x243A JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x25E9 JUMPI PUSH2 0xB05 DUP4 PUSH2 0x2E21 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x266E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x266B SWAP2 DUP2 ADD SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x26FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x27A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST POP PUSH2 0xB05 DUP4 DUP4 DUP4 PUSH2 0x2F2B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x284C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2883 PUSH2 0x287C PUSH1 0x1 PUSH32 0x5B388D90DC1312BA799F321972F13311234FA1163BCABEC7CF66101C4876EB84 PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x2F50 JUMP JUMPDEST PUSH2 0x11CD DUP3 DUP3 PUSH2 0x2F9C JUMP JUMPDEST PUSH2 0x2898 DUP4 DUP3 DUP5 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x299A JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x29E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x29EF DUP5 DUP3 PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MLOAD CALLER DUP2 MSTORE SWAP3 DUP4 ADD DUP9 SWAP1 MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 SWAP2 DUP9 SWAP1 PUSH32 0xE514533875FBD3F8F396088D636E746599D8B5C3BA77E9CCFA9FC01FF7064601 SWAP1 PUSH1 0x80 ADD PUSH2 0xACC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x25A4 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x259B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B4F DUP6 DUP6 PUSH2 0x3059 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2B68 JUMPI PUSH2 0x2B68 PUSH2 0x3B73 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x2BA0 JUMPI POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2BB0 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x1579 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E PUSH1 0xE0 SHL DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BE5 SWAP3 SWAP2 SWAP1 PUSH2 0x3C10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2C6E SWAP2 SWAP1 PUSH2 0x3C29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2CA9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CAE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2CC1 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x2D01 JUMPI POP DUP1 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2CFF SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x3A2F JUMP JUMPDEST EQ JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x2D7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25A4 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x2EC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2F34 DUP4 PUSH2 0x309E JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2F41 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xB05 JUMPI PUSH2 0x25A4 DUP4 DUP4 PUSH2 0x30EB JUMP JUMPDEST DUP2 SLOAD DUP3 SWAP1 DUP3 DUP2 LT PUSH2 0x2F97 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBF0C18EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA4D JUMP JUMPDEST POP SSTORE POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x3024 JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x11CD PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x3052 PUSH2 0x3110 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x313E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x308F JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x3083 DUP8 DUP3 DUP6 DUP6 PUSH2 0x321A JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x3097 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x30A7 DUP2 PUSH2 0x2E21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1A16 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3C59 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x3309 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A19 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x3B60 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x31B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x72C683BB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x3251 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x3300 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x32F9 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x3300 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x3333 SWAP2 SWAP1 PUSH2 0x3C29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x336E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3373 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3384 DUP7 DUP4 DUP4 DUP8 PUSH2 0x338E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3424 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x341D JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x341D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA4D JUMP JUMPDEST POP DUP2 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x86D DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3439 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4D SWAP2 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x347F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x34C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34F6 DUP8 DUP3 DUP9 ADD PUSH2 0x346D JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x358B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x359D DUP2 PUSH2 0x3556 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1579 DUP2 PUSH2 0x3556 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x35F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x3628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3662 DUP2 PUSH2 0x3556 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x36C4 DUP2 PUSH2 0x3556 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x36E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3707 JUMPI PUSH2 0x3707 PUSH2 0x3677 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x374D JUMPI PUSH2 0x374D PUSH2 0x3677 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x379D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x37C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x37E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x37F3 DUP7 DUP3 DUP8 ADD PUSH2 0x346D JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x385C DUP12 DUP3 DUP13 ADD PUSH2 0x346D JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x387C PUSH1 0x80 DUP11 ADD PUSH2 0x3800 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x38B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38E5 DUP11 DUP3 DUP12 ADD PUSH2 0x346D JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP9 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP8 PUSH1 0x80 DUP3 ADD CALLDATALOAD SWAP8 POP PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x391A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x3960 PUSH1 0x60 DUP9 ADD PUSH2 0x3800 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39BC DUP9 DUP3 DUP10 ADD PUSH2 0x346D JUMP JUMPDEST SWAP7 SWAP10 SWAP1 SWAP9 POP SWAP6 SWAP7 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP7 PUSH1 0x60 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP5 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x60 DUP5 DUP4 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP4 ADD ADD SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1579 DUP2 PUSH2 0x3556 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A19 PUSH2 0x3A65 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3B07 JUMPI PUSH2 0x3B07 PUSH2 0x3A65 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x3B47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A19 PUSH2 0x3A65 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BBD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3BA5 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3BDE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3BA2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x86D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3C3B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3BA2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1A16 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3BC6 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220B5F406 EQ DUP1 0xD3 0xA6 0x1E MLOAD 0xC0 CREATE 0xC LOG1 0xC4 0x24 PUSH23 0xCE206048A176BD41B81A4996123A42F864736F6C634300 ADDMOD ISZERO STOP CALLER ","sourceMap":"109:300:35:-:0;;;1332:4:21;1289:48;;215:68:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;264:15;-1:-1:-1;;;;;5994:36:32;;5990:127;;6053:53;;-1:-1:-1;;;6053:53:32;;-1:-1:-1;;;;;473:32:36;;6053:53:32;;;455:51:36;428:18;;6053:53:32;;;;;;;;5990:127;-1:-1:-1;;;;;6126:52:32;;;;6188:22;:20;:22::i;:::-;5936:281;215:68:35;109:300;;5939:280:20;6007:13;;;;;;;6006:14;5998:66;;;;-1:-1:-1;;;5998:66:20;;719:2:36;5998:66:20;;;701:21:36;758:2;738:18;;;731:30;797:34;777:18;;;770:62;-1:-1:-1;;;848:18:36;;;841:37;895:19;;5998:66:20;517:403:36;5998:66:20;6078:12;;6094:15;6078:12;;;:31;6074:139;;6125:12;:30;;-1:-1:-1;;6125:30:20;6140:15;6125:30;;;;;;6174:28;;1067:36:36;;;6174:28:20;;1055:2:36;1040:18;6174:28:20;;;;;;;6074:139;5939:280::o;14:290:36:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:36;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:36:o;925:184::-;109:300:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4051":{"entryPoint":null,"id":4051,"parameterSlots":0,"returnSlots":0},"@DEPOSITOR_ROLE_4056":{"entryPoint":null,"id":4056,"parameterSlots":0,"returnSlots":0},"@REALM_ID_CONTRACT_4060":{"entryPoint":null,"id":4060,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_1543":{"entryPoint":10165,"id":1543,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_4240":{"entryPoint":9642,"id":4240,"parameterSlots":1,"returnSlots":0},"@_consume_4579":{"entryPoint":10545,"id":4579,"parameterSlots":5,"returnSlots":0},"@_getImplementation_1067":{"entryPoint":null,"id":1067,"parameterSlots":0,"returnSlots":1},"@_msgSender_2457":{"entryPoint":null,"id":2457,"parameterSlots":0,"returnSlots":1},"@_preparePayload_4942":{"entryPoint":null,"id":4942,"parameterSlots":6,"returnSlots":1},"@_revert_1990":{"entryPoint":null,"id":1990,"parameterSlots":2,"returnSlots":0},"@_setImplementation_1091":{"entryPoint":11809,"id":1091,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallUUPS_1189":{"entryPoint":9654,"id":1189,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_1136":{"entryPoint":12075,"id":1136,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_1106":{"entryPoint":12446,"id":1106,"parameterSlots":1,"returnSlots":0},"@allowedConsumeReasonCodes_4082":{"entryPoint":null,"id":4082,"parameterSlots":0,"returnSlots":0},"@balanceOf_4812":{"entryPoint":7338,"id":4812,"parameterSlots":2,"returnSlots":1},"@balanceOf_4848":{"entryPoint":1773,"id":4848,"parameterSlots":4,"returnSlots":1},"@balanceOf_4872":{"entryPoint":6900,"id":4872,"parameterSlots":1,"returnSlots":1},"@balanceOf_4906":{"entryPoint":5110,"id":4906,"parameterSlots":3,"returnSlots":1},"@balances_4074":{"entryPoint":null,"id":4074,"parameterSlots":0,"returnSlots":0},"@batchAddConsumeReasonCodes_4345":{"entryPoint":3343,"id":4345,"parameterSlots":2,"returnSlots":0},"@batchRemoveConsumeReasonCodes_4410":{"entryPoint":6216,"id":4410,"parameterSlots":2,"returnSlots":0},"@constructorInit_658":{"entryPoint":12188,"id":658,"parameterSlots":2,"returnSlots":0},"@consume_4615":{"entryPoint":6687,"id":4615,"parameterSlots":8,"returnSlots":0},"@consume_4715":{"entryPoint":8052,"id":4715,"parameterSlots":6,"returnSlots":0},"@consume_4742":{"entryPoint":8867,"id":4742,"parameterSlots":5,"returnSlots":0},"@consume_4786":{"entryPoint":7556,"id":4786,"parameterSlots":3,"returnSlots":0},"@currentSeason_4062":{"entryPoint":null,"id":4062,"parameterSlots":0,"returnSlots":0},"@deposit_4478":{"entryPoint":2165,"id":4478,"parameterSlots":5,"returnSlots":0},"@deposit_4511":{"entryPoint":7127,"id":4511,"parameterSlots":7,"returnSlots":0},"@enforceHasRole_518":{"entryPoint":9140,"id":518,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_784":{"entryPoint":9320,"id":784,"parameterSlots":2,"returnSlots":0},"@functionDelegateCall_1878":{"entryPoint":12523,"id":1878,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_1907":{"entryPoint":13065,"id":1907,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_2023":{"entryPoint":null,"id":2023,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2034":{"entryPoint":null,"id":2034,"parameterSlots":1,"returnSlots":1},"@getUint256Slot_2526":{"entryPoint":null,"id":2526,"parameterSlots":1,"returnSlots":1},"@grantRole_367":{"entryPoint":9427,"id":367,"parameterSlots":4,"returnSlots":0},"@grantRole_54":{"entryPoint":2780,"id":54,"parameterSlots":2,"returnSlots":0},"@hasRole_122":{"entryPoint":6610,"id":122,"parameterSlots":2,"returnSlots":1},"@hasRole_464":{"entryPoint":null,"id":464,"parameterSlots":3,"returnSlots":1},"@initializeV2_5073":{"entryPoint":4797,"id":5073,"parameterSlots":1,"returnSlots":0},"@initialize_4223":{"entryPoint":5504,"id":4223,"parameterSlots":0,"returnSlots":0},"@isContract_1679":{"entryPoint":null,"id":1679,"parameterSlots":1,"returnSlots":1},"@isValidSignatureNow_3145":{"entryPoint":11072,"id":3145,"parameterSlots":3,"returnSlots":1},"@layout_554":{"entryPoint":9094,"id":554,"parameterSlots":0,"returnSlots":1},"@layout_816":{"entryPoint":9274,"id":816,"parameterSlots":0,"returnSlots":1},"@layout_934":{"entryPoint":12560,"id":934,"parameterSlots":0,"returnSlots":1},"@nonces_4078":{"entryPoint":null,"id":4078,"parameterSlots":0,"returnSlots":0},"@owner_153":{"entryPoint":6172,"id":153,"parameterSlots":0,"returnSlots":1},"@owner_737":{"entryPoint":null,"id":737,"parameterSlots":1,"returnSlots":1},"@preparePayload_4979":{"entryPoint":3734,"id":4979,"parameterSlots":4,"returnSlots":1},"@proxiableUUID_1606":{"entryPoint":4561,"id":1606,"parameterSlots":0,"returnSlots":1},"@proxyInit_681":{"entryPoint":10318,"id":681,"parameterSlots":2,"returnSlots":0},"@renounceRole_103":{"entryPoint":6152,"id":103,"parameterSlots":1,"returnSlots":0},"@renounceRole_443":{"entryPoint":10381,"id":443,"parameterSlots":3,"returnSlots":0},"@revokeRole_406":{"entryPoint":10870,"id":406,"parameterSlots":4,"returnSlots":0},"@revokeRole_86":{"entryPoint":8017,"id":86,"parameterSlots":2,"returnSlots":0},"@seasons_4066":{"entryPoint":null,"id":4066,"parameterSlots":0,"returnSlots":0},"@setCurrentSeason_4280":{"entryPoint":5924,"id":4280,"parameterSlots":1,"returnSlots":0},"@setPhase_990":{"entryPoint":12112,"id":990,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_888":{"entryPoint":12606,"id":888,"parameterSlots":3,"returnSlots":0},"@transferOwnership_170":{"entryPoint":9074,"id":170,"parameterSlots":1,"returnSlots":0},"@transferOwnership_724":{"entryPoint":11533,"id":724,"parameterSlots":3,"returnSlots":0},"@tryRecover_2802":{"entryPoint":12377,"id":2802,"parameterSlots":2,"returnSlots":2},"@tryRecover_2970":{"entryPoint":12826,"id":2970,"parameterSlots":4,"returnSlots":2},"@upgradeToAndCall_1649":{"entryPoint":4059,"id":1649,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1628":{"entryPoint":2826,"id":1628,"parameterSlots":1,"returnSlots":0},"@val_5075":{"entryPoint":null,"id":5075,"parameterSlots":0,"returnSlots":0},"@verifyCallResultFromTarget_1946":{"entryPoint":13198,"id":1946,"parameterSlots":4,"returnSlots":1},"abi_decode_string_calldata":{"entryPoint":13421,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":13736,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":14920,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":13990,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":13765,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":13688,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptr":{"entryPoint":13487,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptrt_uint256t_uint256t_bytes32":{"entryPoint":14489,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_bytes32t_string_calldata_ptr":{"entryPoint":14260,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32":{"entryPoint":14714,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32":{"entryPoint":14358,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":14599,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_uint256":{"entryPoint":14216,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32":{"entryPoint":13595,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256":{"entryPoint":13570,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":14895,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32":{"entryPoint":13882,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256t_uint256t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32":{"entryPoint":14633,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_uint8":{"entryPoint":14336,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes":{"entryPoint":15302,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":15401,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":15118,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":15376,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_contract$_IRealmId_$5006__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed":{"entryPoint":14808,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15429,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":14996,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15200,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":15266,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":15062,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":14949,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":15219,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":15015,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13943,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":13654,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:21928:36","nodeType":"YulBlock","src":"0:21928:36","statements":[{"nativeSrc":"6:3:36","nodeType":"YulBlock","src":"6:3:36","statements":[]},{"body":{"nativeSrc":"87:275:36","nodeType":"YulBlock","src":"87:275:36","statements":[{"body":{"nativeSrc":"136:16:36","nodeType":"YulBlock","src":"136:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"145:1:36","nodeType":"YulLiteral","src":"145:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"148:1:36","nodeType":"YulLiteral","src":"148:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"138:6:36","nodeType":"YulIdentifier","src":"138:6:36"},"nativeSrc":"138:12:36","nodeType":"YulFunctionCall","src":"138:12:36"},"nativeSrc":"138:12:36","nodeType":"YulExpressionStatement","src":"138:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"115:6:36","nodeType":"YulIdentifier","src":"115:6:36"},{"kind":"number","nativeSrc":"123:4:36","nodeType":"YulLiteral","src":"123:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"111:3:36","nodeType":"YulIdentifier","src":"111:3:36"},"nativeSrc":"111:17:36","nodeType":"YulFunctionCall","src":"111:17:36"},{"name":"end","nativeSrc":"130:3:36","nodeType":"YulIdentifier","src":"130:3:36"}],"functionName":{"name":"slt","nativeSrc":"107:3:36","nodeType":"YulIdentifier","src":"107:3:36"},"nativeSrc":"107:27:36","nodeType":"YulFunctionCall","src":"107:27:36"}],"functionName":{"name":"iszero","nativeSrc":"100:6:36","nodeType":"YulIdentifier","src":"100:6:36"},"nativeSrc":"100:35:36","nodeType":"YulFunctionCall","src":"100:35:36"},"nativeSrc":"97:55:36","nodeType":"YulIf","src":"97:55:36"},{"nativeSrc":"161:30:36","nodeType":"YulAssignment","src":"161:30:36","value":{"arguments":[{"name":"offset","nativeSrc":"184:6:36","nodeType":"YulIdentifier","src":"184:6:36"}],"functionName":{"name":"calldataload","nativeSrc":"171:12:36","nodeType":"YulIdentifier","src":"171:12:36"},"nativeSrc":"171:20:36","nodeType":"YulFunctionCall","src":"171:20:36"},"variableNames":[{"name":"length","nativeSrc":"161:6:36","nodeType":"YulIdentifier","src":"161:6:36"}]},{"body":{"nativeSrc":"234:16:36","nodeType":"YulBlock","src":"234:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"243:1:36","nodeType":"YulLiteral","src":"243:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"246:1:36","nodeType":"YulLiteral","src":"246:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"236:6:36","nodeType":"YulIdentifier","src":"236:6:36"},"nativeSrc":"236:12:36","nodeType":"YulFunctionCall","src":"236:12:36"},"nativeSrc":"236:12:36","nodeType":"YulExpressionStatement","src":"236:12:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"206:6:36","nodeType":"YulIdentifier","src":"206:6:36"},{"kind":"number","nativeSrc":"214:18:36","nodeType":"YulLiteral","src":"214:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"203:2:36","nodeType":"YulIdentifier","src":"203:2:36"},"nativeSrc":"203:30:36","nodeType":"YulFunctionCall","src":"203:30:36"},"nativeSrc":"200:50:36","nodeType":"YulIf","src":"200:50:36"},{"nativeSrc":"259:29:36","nodeType":"YulAssignment","src":"259:29:36","value":{"arguments":[{"name":"offset","nativeSrc":"275:6:36","nodeType":"YulIdentifier","src":"275:6:36"},{"kind":"number","nativeSrc":"283:4:36","nodeType":"YulLiteral","src":"283:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"271:3:36","nodeType":"YulIdentifier","src":"271:3:36"},"nativeSrc":"271:17:36","nodeType":"YulFunctionCall","src":"271:17:36"},"variableNames":[{"name":"arrayPos","nativeSrc":"259:8:36","nodeType":"YulIdentifier","src":"259:8:36"}]},{"body":{"nativeSrc":"340:16:36","nodeType":"YulBlock","src":"340:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"349:1:36","nodeType":"YulLiteral","src":"349:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"352:1:36","nodeType":"YulLiteral","src":"352:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"342:6:36","nodeType":"YulIdentifier","src":"342:6:36"},"nativeSrc":"342:12:36","nodeType":"YulFunctionCall","src":"342:12:36"},"nativeSrc":"342:12:36","nodeType":"YulExpressionStatement","src":"342:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"311:6:36","nodeType":"YulIdentifier","src":"311:6:36"},{"name":"length","nativeSrc":"319:6:36","nodeType":"YulIdentifier","src":"319:6:36"}],"functionName":{"name":"add","nativeSrc":"307:3:36","nodeType":"YulIdentifier","src":"307:3:36"},"nativeSrc":"307:19:36","nodeType":"YulFunctionCall","src":"307:19:36"},{"kind":"number","nativeSrc":"328:4:36","nodeType":"YulLiteral","src":"328:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"303:3:36","nodeType":"YulIdentifier","src":"303:3:36"},"nativeSrc":"303:30:36","nodeType":"YulFunctionCall","src":"303:30:36"},{"name":"end","nativeSrc":"335:3:36","nodeType":"YulIdentifier","src":"335:3:36"}],"functionName":{"name":"gt","nativeSrc":"300:2:36","nodeType":"YulIdentifier","src":"300:2:36"},"nativeSrc":"300:39:36","nodeType":"YulFunctionCall","src":"300:39:36"},"nativeSrc":"297:59:36","nodeType":"YulIf","src":"297:59:36"}]},"name":"abi_decode_string_calldata","nativeSrc":"14:348:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"50:6:36","nodeType":"YulTypedName","src":"50:6:36","type":""},{"name":"end","nativeSrc":"58:3:36","nodeType":"YulTypedName","src":"58:3:36","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"66:8:36","nodeType":"YulTypedName","src":"66:8:36","type":""},{"name":"length","nativeSrc":"76:6:36","nodeType":"YulTypedName","src":"76:6:36","type":""}],"src":"14:348:36"},{"body":{"nativeSrc":"491:423:36","nodeType":"YulBlock","src":"491:423:36","statements":[{"body":{"nativeSrc":"537:16:36","nodeType":"YulBlock","src":"537:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"546:1:36","nodeType":"YulLiteral","src":"546:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"549:1:36","nodeType":"YulLiteral","src":"549:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"539:6:36","nodeType":"YulIdentifier","src":"539:6:36"},"nativeSrc":"539:12:36","nodeType":"YulFunctionCall","src":"539:12:36"},"nativeSrc":"539:12:36","nodeType":"YulExpressionStatement","src":"539:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"512:7:36","nodeType":"YulIdentifier","src":"512:7:36"},{"name":"headStart","nativeSrc":"521:9:36","nodeType":"YulIdentifier","src":"521:9:36"}],"functionName":{"name":"sub","nativeSrc":"508:3:36","nodeType":"YulIdentifier","src":"508:3:36"},"nativeSrc":"508:23:36","nodeType":"YulFunctionCall","src":"508:23:36"},{"kind":"number","nativeSrc":"533:2:36","nodeType":"YulLiteral","src":"533:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"504:3:36","nodeType":"YulIdentifier","src":"504:3:36"},"nativeSrc":"504:32:36","nodeType":"YulFunctionCall","src":"504:32:36"},"nativeSrc":"501:52:36","nodeType":"YulIf","src":"501:52:36"},{"nativeSrc":"562:33:36","nodeType":"YulAssignment","src":"562:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"585:9:36","nodeType":"YulIdentifier","src":"585:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"572:12:36","nodeType":"YulIdentifier","src":"572:12:36"},"nativeSrc":"572:23:36","nodeType":"YulFunctionCall","src":"572:23:36"},"variableNames":[{"name":"value0","nativeSrc":"562:6:36","nodeType":"YulIdentifier","src":"562:6:36"}]},{"nativeSrc":"604:42:36","nodeType":"YulAssignment","src":"604:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"631:9:36","nodeType":"YulIdentifier","src":"631:9:36"},{"kind":"number","nativeSrc":"642:2:36","nodeType":"YulLiteral","src":"642:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"627:3:36","nodeType":"YulIdentifier","src":"627:3:36"},"nativeSrc":"627:18:36","nodeType":"YulFunctionCall","src":"627:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"614:12:36","nodeType":"YulIdentifier","src":"614:12:36"},"nativeSrc":"614:32:36","nodeType":"YulFunctionCall","src":"614:32:36"},"variableNames":[{"name":"value1","nativeSrc":"604:6:36","nodeType":"YulIdentifier","src":"604:6:36"}]},{"nativeSrc":"655:46:36","nodeType":"YulVariableDeclaration","src":"655:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"686:9:36","nodeType":"YulIdentifier","src":"686:9:36"},{"kind":"number","nativeSrc":"697:2:36","nodeType":"YulLiteral","src":"697:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"682:3:36","nodeType":"YulIdentifier","src":"682:3:36"},"nativeSrc":"682:18:36","nodeType":"YulFunctionCall","src":"682:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"669:12:36","nodeType":"YulIdentifier","src":"669:12:36"},"nativeSrc":"669:32:36","nodeType":"YulFunctionCall","src":"669:32:36"},"variables":[{"name":"offset","nativeSrc":"659:6:36","nodeType":"YulTypedName","src":"659:6:36","type":""}]},{"body":{"nativeSrc":"744:16:36","nodeType":"YulBlock","src":"744:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"753:1:36","nodeType":"YulLiteral","src":"753:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"756:1:36","nodeType":"YulLiteral","src":"756:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"746:6:36","nodeType":"YulIdentifier","src":"746:6:36"},"nativeSrc":"746:12:36","nodeType":"YulFunctionCall","src":"746:12:36"},"nativeSrc":"746:12:36","nodeType":"YulExpressionStatement","src":"746:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"716:6:36","nodeType":"YulIdentifier","src":"716:6:36"},{"kind":"number","nativeSrc":"724:18:36","nodeType":"YulLiteral","src":"724:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"713:2:36","nodeType":"YulIdentifier","src":"713:2:36"},"nativeSrc":"713:30:36","nodeType":"YulFunctionCall","src":"713:30:36"},"nativeSrc":"710:50:36","nodeType":"YulIf","src":"710:50:36"},{"nativeSrc":"769:85:36","nodeType":"YulVariableDeclaration","src":"769:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"826:9:36","nodeType":"YulIdentifier","src":"826:9:36"},{"name":"offset","nativeSrc":"837:6:36","nodeType":"YulIdentifier","src":"837:6:36"}],"functionName":{"name":"add","nativeSrc":"822:3:36","nodeType":"YulIdentifier","src":"822:3:36"},"nativeSrc":"822:22:36","nodeType":"YulFunctionCall","src":"822:22:36"},{"name":"dataEnd","nativeSrc":"846:7:36","nodeType":"YulIdentifier","src":"846:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"795:26:36","nodeType":"YulIdentifier","src":"795:26:36"},"nativeSrc":"795:59:36","nodeType":"YulFunctionCall","src":"795:59:36"},"variables":[{"name":"value2_1","nativeSrc":"773:8:36","nodeType":"YulTypedName","src":"773:8:36","type":""},{"name":"value3_1","nativeSrc":"783:8:36","nodeType":"YulTypedName","src":"783:8:36","type":""}]},{"nativeSrc":"863:18:36","nodeType":"YulAssignment","src":"863:18:36","value":{"name":"value2_1","nativeSrc":"873:8:36","nodeType":"YulIdentifier","src":"873:8:36"},"variableNames":[{"name":"value2","nativeSrc":"863:6:36","nodeType":"YulIdentifier","src":"863:6:36"}]},{"nativeSrc":"890:18:36","nodeType":"YulAssignment","src":"890:18:36","value":{"name":"value3_1","nativeSrc":"900:8:36","nodeType":"YulIdentifier","src":"900:8:36"},"variableNames":[{"name":"value3","nativeSrc":"890:6:36","nodeType":"YulIdentifier","src":"890:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptr","nativeSrc":"367:547:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"433:9:36","nodeType":"YulTypedName","src":"433:9:36","type":""},{"name":"dataEnd","nativeSrc":"444:7:36","nodeType":"YulTypedName","src":"444:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"456:6:36","nodeType":"YulTypedName","src":"456:6:36","type":""},{"name":"value1","nativeSrc":"464:6:36","nodeType":"YulTypedName","src":"464:6:36","type":""},{"name":"value2","nativeSrc":"472:6:36","nodeType":"YulTypedName","src":"472:6:36","type":""},{"name":"value3","nativeSrc":"480:6:36","nodeType":"YulTypedName","src":"480:6:36","type":""}],"src":"367:547:36"},{"body":{"nativeSrc":"1020:76:36","nodeType":"YulBlock","src":"1020:76:36","statements":[{"nativeSrc":"1030:26:36","nodeType":"YulAssignment","src":"1030:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1042:9:36","nodeType":"YulIdentifier","src":"1042:9:36"},{"kind":"number","nativeSrc":"1053:2:36","nodeType":"YulLiteral","src":"1053:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1038:3:36","nodeType":"YulIdentifier","src":"1038:3:36"},"nativeSrc":"1038:18:36","nodeType":"YulFunctionCall","src":"1038:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1030:4:36","nodeType":"YulIdentifier","src":"1030:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1072:9:36","nodeType":"YulIdentifier","src":"1072:9:36"},{"name":"value0","nativeSrc":"1083:6:36","nodeType":"YulIdentifier","src":"1083:6:36"}],"functionName":{"name":"mstore","nativeSrc":"1065:6:36","nodeType":"YulIdentifier","src":"1065:6:36"},"nativeSrc":"1065:25:36","nodeType":"YulFunctionCall","src":"1065:25:36"},"nativeSrc":"1065:25:36","nodeType":"YulExpressionStatement","src":"1065:25:36"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"919:177:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"989:9:36","nodeType":"YulTypedName","src":"989:9:36","type":""},{"name":"value0","nativeSrc":"1000:6:36","nodeType":"YulTypedName","src":"1000:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1011:4:36","nodeType":"YulTypedName","src":"1011:4:36","type":""}],"src":"919:177:36"},{"body":{"nativeSrc":"1171:110:36","nodeType":"YulBlock","src":"1171:110:36","statements":[{"body":{"nativeSrc":"1217:16:36","nodeType":"YulBlock","src":"1217:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1226:1:36","nodeType":"YulLiteral","src":"1226:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1229:1:36","nodeType":"YulLiteral","src":"1229:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1219:6:36","nodeType":"YulIdentifier","src":"1219:6:36"},"nativeSrc":"1219:12:36","nodeType":"YulFunctionCall","src":"1219:12:36"},"nativeSrc":"1219:12:36","nodeType":"YulExpressionStatement","src":"1219:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1192:7:36","nodeType":"YulIdentifier","src":"1192:7:36"},{"name":"headStart","nativeSrc":"1201:9:36","nodeType":"YulIdentifier","src":"1201:9:36"}],"functionName":{"name":"sub","nativeSrc":"1188:3:36","nodeType":"YulIdentifier","src":"1188:3:36"},"nativeSrc":"1188:23:36","nodeType":"YulFunctionCall","src":"1188:23:36"},{"kind":"number","nativeSrc":"1213:2:36","nodeType":"YulLiteral","src":"1213:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1184:3:36","nodeType":"YulIdentifier","src":"1184:3:36"},"nativeSrc":"1184:32:36","nodeType":"YulFunctionCall","src":"1184:32:36"},"nativeSrc":"1181:52:36","nodeType":"YulIf","src":"1181:52:36"},{"nativeSrc":"1242:33:36","nodeType":"YulAssignment","src":"1242:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1265:9:36","nodeType":"YulIdentifier","src":"1265:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"1252:12:36","nodeType":"YulIdentifier","src":"1252:12:36"},"nativeSrc":"1252:23:36","nodeType":"YulFunctionCall","src":"1252:23:36"},"variableNames":[{"name":"value0","nativeSrc":"1242:6:36","nodeType":"YulIdentifier","src":"1242:6:36"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1101:180:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1137:9:36","nodeType":"YulTypedName","src":"1137:9:36","type":""},{"name":"dataEnd","nativeSrc":"1148:7:36","nodeType":"YulTypedName","src":"1148:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1160:6:36","nodeType":"YulTypedName","src":"1160:6:36","type":""}],"src":"1101:180:36"},{"body":{"nativeSrc":"1424:316:36","nodeType":"YulBlock","src":"1424:316:36","statements":[{"body":{"nativeSrc":"1471:16:36","nodeType":"YulBlock","src":"1471:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1480:1:36","nodeType":"YulLiteral","src":"1480:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1483:1:36","nodeType":"YulLiteral","src":"1483:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1473:6:36","nodeType":"YulIdentifier","src":"1473:6:36"},"nativeSrc":"1473:12:36","nodeType":"YulFunctionCall","src":"1473:12:36"},"nativeSrc":"1473:12:36","nodeType":"YulExpressionStatement","src":"1473:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1445:7:36","nodeType":"YulIdentifier","src":"1445:7:36"},{"name":"headStart","nativeSrc":"1454:9:36","nodeType":"YulIdentifier","src":"1454:9:36"}],"functionName":{"name":"sub","nativeSrc":"1441:3:36","nodeType":"YulIdentifier","src":"1441:3:36"},"nativeSrc":"1441:23:36","nodeType":"YulFunctionCall","src":"1441:23:36"},{"kind":"number","nativeSrc":"1466:3:36","nodeType":"YulLiteral","src":"1466:3:36","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"1437:3:36","nodeType":"YulIdentifier","src":"1437:3:36"},"nativeSrc":"1437:33:36","nodeType":"YulFunctionCall","src":"1437:33:36"},"nativeSrc":"1434:53:36","nodeType":"YulIf","src":"1434:53:36"},{"nativeSrc":"1496:33:36","nodeType":"YulAssignment","src":"1496:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1519:9:36","nodeType":"YulIdentifier","src":"1519:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"1506:12:36","nodeType":"YulIdentifier","src":"1506:12:36"},"nativeSrc":"1506:23:36","nodeType":"YulFunctionCall","src":"1506:23:36"},"variableNames":[{"name":"value0","nativeSrc":"1496:6:36","nodeType":"YulIdentifier","src":"1496:6:36"}]},{"nativeSrc":"1538:42:36","nodeType":"YulAssignment","src":"1538:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1565:9:36","nodeType":"YulIdentifier","src":"1565:9:36"},{"kind":"number","nativeSrc":"1576:2:36","nodeType":"YulLiteral","src":"1576:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1561:3:36","nodeType":"YulIdentifier","src":"1561:3:36"},"nativeSrc":"1561:18:36","nodeType":"YulFunctionCall","src":"1561:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1548:12:36","nodeType":"YulIdentifier","src":"1548:12:36"},"nativeSrc":"1548:32:36","nodeType":"YulFunctionCall","src":"1548:32:36"},"variableNames":[{"name":"value1","nativeSrc":"1538:6:36","nodeType":"YulIdentifier","src":"1538:6:36"}]},{"nativeSrc":"1589:42:36","nodeType":"YulAssignment","src":"1589:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1616:9:36","nodeType":"YulIdentifier","src":"1616:9:36"},{"kind":"number","nativeSrc":"1627:2:36","nodeType":"YulLiteral","src":"1627:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1612:3:36","nodeType":"YulIdentifier","src":"1612:3:36"},"nativeSrc":"1612:18:36","nodeType":"YulFunctionCall","src":"1612:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1599:12:36","nodeType":"YulIdentifier","src":"1599:12:36"},"nativeSrc":"1599:32:36","nodeType":"YulFunctionCall","src":"1599:32:36"},"variableNames":[{"name":"value2","nativeSrc":"1589:6:36","nodeType":"YulIdentifier","src":"1589:6:36"}]},{"nativeSrc":"1640:42:36","nodeType":"YulAssignment","src":"1640:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1667:9:36","nodeType":"YulIdentifier","src":"1667:9:36"},{"kind":"number","nativeSrc":"1678:2:36","nodeType":"YulLiteral","src":"1678:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1663:3:36","nodeType":"YulIdentifier","src":"1663:3:36"},"nativeSrc":"1663:18:36","nodeType":"YulFunctionCall","src":"1663:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1650:12:36","nodeType":"YulIdentifier","src":"1650:12:36"},"nativeSrc":"1650:32:36","nodeType":"YulFunctionCall","src":"1650:32:36"},"variableNames":[{"name":"value3","nativeSrc":"1640:6:36","nodeType":"YulIdentifier","src":"1640:6:36"}]},{"nativeSrc":"1691:43:36","nodeType":"YulAssignment","src":"1691:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1718:9:36","nodeType":"YulIdentifier","src":"1718:9:36"},{"kind":"number","nativeSrc":"1729:3:36","nodeType":"YulLiteral","src":"1729:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1714:3:36","nodeType":"YulIdentifier","src":"1714:3:36"},"nativeSrc":"1714:19:36","nodeType":"YulFunctionCall","src":"1714:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"1701:12:36","nodeType":"YulIdentifier","src":"1701:12:36"},"nativeSrc":"1701:33:36","nodeType":"YulFunctionCall","src":"1701:33:36"},"variableNames":[{"name":"value4","nativeSrc":"1691:6:36","nodeType":"YulIdentifier","src":"1691:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32","nativeSrc":"1286:454:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1358:9:36","nodeType":"YulTypedName","src":"1358:9:36","type":""},{"name":"dataEnd","nativeSrc":"1369:7:36","nodeType":"YulTypedName","src":"1369:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1381:6:36","nodeType":"YulTypedName","src":"1381:6:36","type":""},{"name":"value1","nativeSrc":"1389:6:36","nodeType":"YulTypedName","src":"1389:6:36","type":""},{"name":"value2","nativeSrc":"1397:6:36","nodeType":"YulTypedName","src":"1397:6:36","type":""},{"name":"value3","nativeSrc":"1405:6:36","nodeType":"YulTypedName","src":"1405:6:36","type":""},{"name":"value4","nativeSrc":"1413:6:36","nodeType":"YulTypedName","src":"1413:6:36","type":""}],"src":"1286:454:36"},{"body":{"nativeSrc":"1863:125:36","nodeType":"YulBlock","src":"1863:125:36","statements":[{"nativeSrc":"1873:26:36","nodeType":"YulAssignment","src":"1873:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1885:9:36","nodeType":"YulIdentifier","src":"1885:9:36"},{"kind":"number","nativeSrc":"1896:2:36","nodeType":"YulLiteral","src":"1896:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1881:3:36","nodeType":"YulIdentifier","src":"1881:3:36"},"nativeSrc":"1881:18:36","nodeType":"YulFunctionCall","src":"1881:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1873:4:36","nodeType":"YulIdentifier","src":"1873:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1915:9:36","nodeType":"YulIdentifier","src":"1915:9:36"},{"arguments":[{"name":"value0","nativeSrc":"1930:6:36","nodeType":"YulIdentifier","src":"1930:6:36"},{"kind":"number","nativeSrc":"1938:42:36","nodeType":"YulLiteral","src":"1938:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1926:3:36","nodeType":"YulIdentifier","src":"1926:3:36"},"nativeSrc":"1926:55:36","nodeType":"YulFunctionCall","src":"1926:55:36"}],"functionName":{"name":"mstore","nativeSrc":"1908:6:36","nodeType":"YulIdentifier","src":"1908:6:36"},"nativeSrc":"1908:74:36","nodeType":"YulFunctionCall","src":"1908:74:36"},"nativeSrc":"1908:74:36","nodeType":"YulExpressionStatement","src":"1908:74:36"}]},"name":"abi_encode_tuple_t_contract$_IRealmId_$5006__to_t_address__fromStack_reversed","nativeSrc":"1745:243:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1832:9:36","nodeType":"YulTypedName","src":"1832:9:36","type":""},{"name":"value0","nativeSrc":"1843:6:36","nodeType":"YulTypedName","src":"1843:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1854:4:36","nodeType":"YulTypedName","src":"1854:4:36","type":""}],"src":"1745:243:36"},{"body":{"nativeSrc":"2038:109:36","nodeType":"YulBlock","src":"2038:109:36","statements":[{"body":{"nativeSrc":"2125:16:36","nodeType":"YulBlock","src":"2125:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2134:1:36","nodeType":"YulLiteral","src":"2134:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2137:1:36","nodeType":"YulLiteral","src":"2137:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2127:6:36","nodeType":"YulIdentifier","src":"2127:6:36"},"nativeSrc":"2127:12:36","nodeType":"YulFunctionCall","src":"2127:12:36"},"nativeSrc":"2127:12:36","nodeType":"YulExpressionStatement","src":"2127:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2061:5:36","nodeType":"YulIdentifier","src":"2061:5:36"},{"arguments":[{"name":"value","nativeSrc":"2072:5:36","nodeType":"YulIdentifier","src":"2072:5:36"},{"kind":"number","nativeSrc":"2079:42:36","nodeType":"YulLiteral","src":"2079:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2068:3:36","nodeType":"YulIdentifier","src":"2068:3:36"},"nativeSrc":"2068:54:36","nodeType":"YulFunctionCall","src":"2068:54:36"}],"functionName":{"name":"eq","nativeSrc":"2058:2:36","nodeType":"YulIdentifier","src":"2058:2:36"},"nativeSrc":"2058:65:36","nodeType":"YulFunctionCall","src":"2058:65:36"}],"functionName":{"name":"iszero","nativeSrc":"2051:6:36","nodeType":"YulIdentifier","src":"2051:6:36"},"nativeSrc":"2051:73:36","nodeType":"YulFunctionCall","src":"2051:73:36"},"nativeSrc":"2048:93:36","nodeType":"YulIf","src":"2048:93:36"}]},"name":"validator_revert_address","nativeSrc":"1993:154:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2027:5:36","nodeType":"YulTypedName","src":"2027:5:36","type":""}],"src":"1993:154:36"},{"body":{"nativeSrc":"2239:228:36","nodeType":"YulBlock","src":"2239:228:36","statements":[{"body":{"nativeSrc":"2285:16:36","nodeType":"YulBlock","src":"2285:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2294:1:36","nodeType":"YulLiteral","src":"2294:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2297:1:36","nodeType":"YulLiteral","src":"2297:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2287:6:36","nodeType":"YulIdentifier","src":"2287:6:36"},"nativeSrc":"2287:12:36","nodeType":"YulFunctionCall","src":"2287:12:36"},"nativeSrc":"2287:12:36","nodeType":"YulExpressionStatement","src":"2287:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2260:7:36","nodeType":"YulIdentifier","src":"2260:7:36"},{"name":"headStart","nativeSrc":"2269:9:36","nodeType":"YulIdentifier","src":"2269:9:36"}],"functionName":{"name":"sub","nativeSrc":"2256:3:36","nodeType":"YulIdentifier","src":"2256:3:36"},"nativeSrc":"2256:23:36","nodeType":"YulFunctionCall","src":"2256:23:36"},{"kind":"number","nativeSrc":"2281:2:36","nodeType":"YulLiteral","src":"2281:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2252:3:36","nodeType":"YulIdentifier","src":"2252:3:36"},"nativeSrc":"2252:32:36","nodeType":"YulFunctionCall","src":"2252:32:36"},"nativeSrc":"2249:52:36","nodeType":"YulIf","src":"2249:52:36"},{"nativeSrc":"2310:33:36","nodeType":"YulAssignment","src":"2310:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2333:9:36","nodeType":"YulIdentifier","src":"2333:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"2320:12:36","nodeType":"YulIdentifier","src":"2320:12:36"},"nativeSrc":"2320:23:36","nodeType":"YulFunctionCall","src":"2320:23:36"},"variableNames":[{"name":"value0","nativeSrc":"2310:6:36","nodeType":"YulIdentifier","src":"2310:6:36"}]},{"nativeSrc":"2352:45:36","nodeType":"YulVariableDeclaration","src":"2352:45:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2382:9:36","nodeType":"YulIdentifier","src":"2382:9:36"},{"kind":"number","nativeSrc":"2393:2:36","nodeType":"YulLiteral","src":"2393:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2378:3:36","nodeType":"YulIdentifier","src":"2378:3:36"},"nativeSrc":"2378:18:36","nodeType":"YulFunctionCall","src":"2378:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"2365:12:36","nodeType":"YulIdentifier","src":"2365:12:36"},"nativeSrc":"2365:32:36","nodeType":"YulFunctionCall","src":"2365:32:36"},"variables":[{"name":"value","nativeSrc":"2356:5:36","nodeType":"YulTypedName","src":"2356:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2431:5:36","nodeType":"YulIdentifier","src":"2431:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2406:24:36","nodeType":"YulIdentifier","src":"2406:24:36"},"nativeSrc":"2406:31:36","nodeType":"YulFunctionCall","src":"2406:31:36"},"nativeSrc":"2406:31:36","nodeType":"YulExpressionStatement","src":"2406:31:36"},{"nativeSrc":"2446:15:36","nodeType":"YulAssignment","src":"2446:15:36","value":{"name":"value","nativeSrc":"2456:5:36","nodeType":"YulIdentifier","src":"2456:5:36"},"variableNames":[{"name":"value1","nativeSrc":"2446:6:36","nodeType":"YulIdentifier","src":"2446:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2152:315:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2197:9:36","nodeType":"YulTypedName","src":"2197:9:36","type":""},{"name":"dataEnd","nativeSrc":"2208:7:36","nodeType":"YulTypedName","src":"2208:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2220:6:36","nodeType":"YulTypedName","src":"2220:6:36","type":""},{"name":"value1","nativeSrc":"2228:6:36","nodeType":"YulTypedName","src":"2228:6:36","type":""}],"src":"2152:315:36"},{"body":{"nativeSrc":"2542:177:36","nodeType":"YulBlock","src":"2542:177:36","statements":[{"body":{"nativeSrc":"2588:16:36","nodeType":"YulBlock","src":"2588:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2597:1:36","nodeType":"YulLiteral","src":"2597:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2600:1:36","nodeType":"YulLiteral","src":"2600:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2590:6:36","nodeType":"YulIdentifier","src":"2590:6:36"},"nativeSrc":"2590:12:36","nodeType":"YulFunctionCall","src":"2590:12:36"},"nativeSrc":"2590:12:36","nodeType":"YulExpressionStatement","src":"2590:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2563:7:36","nodeType":"YulIdentifier","src":"2563:7:36"},{"name":"headStart","nativeSrc":"2572:9:36","nodeType":"YulIdentifier","src":"2572:9:36"}],"functionName":{"name":"sub","nativeSrc":"2559:3:36","nodeType":"YulIdentifier","src":"2559:3:36"},"nativeSrc":"2559:23:36","nodeType":"YulFunctionCall","src":"2559:23:36"},{"kind":"number","nativeSrc":"2584:2:36","nodeType":"YulLiteral","src":"2584:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2555:3:36","nodeType":"YulIdentifier","src":"2555:3:36"},"nativeSrc":"2555:32:36","nodeType":"YulFunctionCall","src":"2555:32:36"},"nativeSrc":"2552:52:36","nodeType":"YulIf","src":"2552:52:36"},{"nativeSrc":"2613:36:36","nodeType":"YulVariableDeclaration","src":"2613:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2639:9:36","nodeType":"YulIdentifier","src":"2639:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"2626:12:36","nodeType":"YulIdentifier","src":"2626:12:36"},"nativeSrc":"2626:23:36","nodeType":"YulFunctionCall","src":"2626:23:36"},"variables":[{"name":"value","nativeSrc":"2617:5:36","nodeType":"YulTypedName","src":"2617:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2683:5:36","nodeType":"YulIdentifier","src":"2683:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2658:24:36","nodeType":"YulIdentifier","src":"2658:24:36"},"nativeSrc":"2658:31:36","nodeType":"YulFunctionCall","src":"2658:31:36"},"nativeSrc":"2658:31:36","nodeType":"YulExpressionStatement","src":"2658:31:36"},{"nativeSrc":"2698:15:36","nodeType":"YulAssignment","src":"2698:15:36","value":{"name":"value","nativeSrc":"2708:5:36","nodeType":"YulIdentifier","src":"2708:5:36"},"variableNames":[{"name":"value0","nativeSrc":"2698:6:36","nodeType":"YulIdentifier","src":"2698:6:36"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2472:247:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2508:9:36","nodeType":"YulTypedName","src":"2508:9:36","type":""},{"name":"dataEnd","nativeSrc":"2519:7:36","nodeType":"YulTypedName","src":"2519:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2531:6:36","nodeType":"YulTypedName","src":"2531:6:36","type":""}],"src":"2472:247:36"},{"body":{"nativeSrc":"2829:510:36","nodeType":"YulBlock","src":"2829:510:36","statements":[{"body":{"nativeSrc":"2875:16:36","nodeType":"YulBlock","src":"2875:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2884:1:36","nodeType":"YulLiteral","src":"2884:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2887:1:36","nodeType":"YulLiteral","src":"2887:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2877:6:36","nodeType":"YulIdentifier","src":"2877:6:36"},"nativeSrc":"2877:12:36","nodeType":"YulFunctionCall","src":"2877:12:36"},"nativeSrc":"2877:12:36","nodeType":"YulExpressionStatement","src":"2877:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2850:7:36","nodeType":"YulIdentifier","src":"2850:7:36"},{"name":"headStart","nativeSrc":"2859:9:36","nodeType":"YulIdentifier","src":"2859:9:36"}],"functionName":{"name":"sub","nativeSrc":"2846:3:36","nodeType":"YulIdentifier","src":"2846:3:36"},"nativeSrc":"2846:23:36","nodeType":"YulFunctionCall","src":"2846:23:36"},{"kind":"number","nativeSrc":"2871:2:36","nodeType":"YulLiteral","src":"2871:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2842:3:36","nodeType":"YulIdentifier","src":"2842:3:36"},"nativeSrc":"2842:32:36","nodeType":"YulFunctionCall","src":"2842:32:36"},"nativeSrc":"2839:52:36","nodeType":"YulIf","src":"2839:52:36"},{"nativeSrc":"2900:37:36","nodeType":"YulVariableDeclaration","src":"2900:37:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2927:9:36","nodeType":"YulIdentifier","src":"2927:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"2914:12:36","nodeType":"YulIdentifier","src":"2914:12:36"},"nativeSrc":"2914:23:36","nodeType":"YulFunctionCall","src":"2914:23:36"},"variables":[{"name":"offset","nativeSrc":"2904:6:36","nodeType":"YulTypedName","src":"2904:6:36","type":""}]},{"nativeSrc":"2946:28:36","nodeType":"YulVariableDeclaration","src":"2946:28:36","value":{"kind":"number","nativeSrc":"2956:18:36","nodeType":"YulLiteral","src":"2956:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2950:2:36","nodeType":"YulTypedName","src":"2950:2:36","type":""}]},{"body":{"nativeSrc":"3001:16:36","nodeType":"YulBlock","src":"3001:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3010:1:36","nodeType":"YulLiteral","src":"3010:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3013:1:36","nodeType":"YulLiteral","src":"3013:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3003:6:36","nodeType":"YulIdentifier","src":"3003:6:36"},"nativeSrc":"3003:12:36","nodeType":"YulFunctionCall","src":"3003:12:36"},"nativeSrc":"3003:12:36","nodeType":"YulExpressionStatement","src":"3003:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2989:6:36","nodeType":"YulIdentifier","src":"2989:6:36"},{"name":"_1","nativeSrc":"2997:2:36","nodeType":"YulIdentifier","src":"2997:2:36"}],"functionName":{"name":"gt","nativeSrc":"2986:2:36","nodeType":"YulIdentifier","src":"2986:2:36"},"nativeSrc":"2986:14:36","nodeType":"YulFunctionCall","src":"2986:14:36"},"nativeSrc":"2983:34:36","nodeType":"YulIf","src":"2983:34:36"},{"nativeSrc":"3026:32:36","nodeType":"YulVariableDeclaration","src":"3026:32:36","value":{"arguments":[{"name":"headStart","nativeSrc":"3040:9:36","nodeType":"YulIdentifier","src":"3040:9:36"},{"name":"offset","nativeSrc":"3051:6:36","nodeType":"YulIdentifier","src":"3051:6:36"}],"functionName":{"name":"add","nativeSrc":"3036:3:36","nodeType":"YulIdentifier","src":"3036:3:36"},"nativeSrc":"3036:22:36","nodeType":"YulFunctionCall","src":"3036:22:36"},"variables":[{"name":"_2","nativeSrc":"3030:2:36","nodeType":"YulTypedName","src":"3030:2:36","type":""}]},{"body":{"nativeSrc":"3106:16:36","nodeType":"YulBlock","src":"3106:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3115:1:36","nodeType":"YulLiteral","src":"3115:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3118:1:36","nodeType":"YulLiteral","src":"3118:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3108:6:36","nodeType":"YulIdentifier","src":"3108:6:36"},"nativeSrc":"3108:12:36","nodeType":"YulFunctionCall","src":"3108:12:36"},"nativeSrc":"3108:12:36","nodeType":"YulExpressionStatement","src":"3108:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3085:2:36","nodeType":"YulIdentifier","src":"3085:2:36"},{"kind":"number","nativeSrc":"3089:4:36","nodeType":"YulLiteral","src":"3089:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3081:3:36","nodeType":"YulIdentifier","src":"3081:3:36"},"nativeSrc":"3081:13:36","nodeType":"YulFunctionCall","src":"3081:13:36"},{"name":"dataEnd","nativeSrc":"3096:7:36","nodeType":"YulIdentifier","src":"3096:7:36"}],"functionName":{"name":"slt","nativeSrc":"3077:3:36","nodeType":"YulIdentifier","src":"3077:3:36"},"nativeSrc":"3077:27:36","nodeType":"YulFunctionCall","src":"3077:27:36"}],"functionName":{"name":"iszero","nativeSrc":"3070:6:36","nodeType":"YulIdentifier","src":"3070:6:36"},"nativeSrc":"3070:35:36","nodeType":"YulFunctionCall","src":"3070:35:36"},"nativeSrc":"3067:55:36","nodeType":"YulIf","src":"3067:55:36"},{"nativeSrc":"3131:30:36","nodeType":"YulVariableDeclaration","src":"3131:30:36","value":{"arguments":[{"name":"_2","nativeSrc":"3158:2:36","nodeType":"YulIdentifier","src":"3158:2:36"}],"functionName":{"name":"calldataload","nativeSrc":"3145:12:36","nodeType":"YulIdentifier","src":"3145:12:36"},"nativeSrc":"3145:16:36","nodeType":"YulFunctionCall","src":"3145:16:36"},"variables":[{"name":"length","nativeSrc":"3135:6:36","nodeType":"YulTypedName","src":"3135:6:36","type":""}]},{"body":{"nativeSrc":"3188:16:36","nodeType":"YulBlock","src":"3188:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3197:1:36","nodeType":"YulLiteral","src":"3197:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3200:1:36","nodeType":"YulLiteral","src":"3200:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3190:6:36","nodeType":"YulIdentifier","src":"3190:6:36"},"nativeSrc":"3190:12:36","nodeType":"YulFunctionCall","src":"3190:12:36"},"nativeSrc":"3190:12:36","nodeType":"YulExpressionStatement","src":"3190:12:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3176:6:36","nodeType":"YulIdentifier","src":"3176:6:36"},{"name":"_1","nativeSrc":"3184:2:36","nodeType":"YulIdentifier","src":"3184:2:36"}],"functionName":{"name":"gt","nativeSrc":"3173:2:36","nodeType":"YulIdentifier","src":"3173:2:36"},"nativeSrc":"3173:14:36","nodeType":"YulFunctionCall","src":"3173:14:36"},"nativeSrc":"3170:34:36","nodeType":"YulIf","src":"3170:34:36"},{"body":{"nativeSrc":"3262:16:36","nodeType":"YulBlock","src":"3262:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3271:1:36","nodeType":"YulLiteral","src":"3271:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3274:1:36","nodeType":"YulLiteral","src":"3274:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3264:6:36","nodeType":"YulIdentifier","src":"3264:6:36"},"nativeSrc":"3264:12:36","nodeType":"YulFunctionCall","src":"3264:12:36"},"nativeSrc":"3264:12:36","nodeType":"YulExpressionStatement","src":"3264:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3227:2:36","nodeType":"YulIdentifier","src":"3227:2:36"},{"arguments":[{"kind":"number","nativeSrc":"3235:1:36","nodeType":"YulLiteral","src":"3235:1:36","type":"","value":"5"},{"name":"length","nativeSrc":"3238:6:36","nodeType":"YulIdentifier","src":"3238:6:36"}],"functionName":{"name":"shl","nativeSrc":"3231:3:36","nodeType":"YulIdentifier","src":"3231:3:36"},"nativeSrc":"3231:14:36","nodeType":"YulFunctionCall","src":"3231:14:36"}],"functionName":{"name":"add","nativeSrc":"3223:3:36","nodeType":"YulIdentifier","src":"3223:3:36"},"nativeSrc":"3223:23:36","nodeType":"YulFunctionCall","src":"3223:23:36"},{"kind":"number","nativeSrc":"3248:2:36","nodeType":"YulLiteral","src":"3248:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3219:3:36","nodeType":"YulIdentifier","src":"3219:3:36"},"nativeSrc":"3219:32:36","nodeType":"YulFunctionCall","src":"3219:32:36"},{"name":"dataEnd","nativeSrc":"3253:7:36","nodeType":"YulIdentifier","src":"3253:7:36"}],"functionName":{"name":"gt","nativeSrc":"3216:2:36","nodeType":"YulIdentifier","src":"3216:2:36"},"nativeSrc":"3216:45:36","nodeType":"YulFunctionCall","src":"3216:45:36"},"nativeSrc":"3213:65:36","nodeType":"YulIf","src":"3213:65:36"},{"nativeSrc":"3287:21:36","nodeType":"YulAssignment","src":"3287:21:36","value":{"arguments":[{"name":"_2","nativeSrc":"3301:2:36","nodeType":"YulIdentifier","src":"3301:2:36"},{"kind":"number","nativeSrc":"3305:2:36","nodeType":"YulLiteral","src":"3305:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3297:3:36","nodeType":"YulIdentifier","src":"3297:3:36"},"nativeSrc":"3297:11:36","nodeType":"YulFunctionCall","src":"3297:11:36"},"variableNames":[{"name":"value0","nativeSrc":"3287:6:36","nodeType":"YulIdentifier","src":"3287:6:36"}]},{"nativeSrc":"3317:16:36","nodeType":"YulAssignment","src":"3317:16:36","value":{"name":"length","nativeSrc":"3327:6:36","nodeType":"YulIdentifier","src":"3327:6:36"},"variableNames":[{"name":"value1","nativeSrc":"3317:6:36","nodeType":"YulIdentifier","src":"3317:6:36"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"2724:615:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2787:9:36","nodeType":"YulTypedName","src":"2787:9:36","type":""},{"name":"dataEnd","nativeSrc":"2798:7:36","nodeType":"YulTypedName","src":"2798:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2810:6:36","nodeType":"YulTypedName","src":"2810:6:36","type":""},{"name":"value1","nativeSrc":"2818:6:36","nodeType":"YulTypedName","src":"2818:6:36","type":""}],"src":"2724:615:36"},{"body":{"nativeSrc":"3465:331:36","nodeType":"YulBlock","src":"3465:331:36","statements":[{"body":{"nativeSrc":"3512:16:36","nodeType":"YulBlock","src":"3512:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3521:1:36","nodeType":"YulLiteral","src":"3521:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3524:1:36","nodeType":"YulLiteral","src":"3524:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3514:6:36","nodeType":"YulIdentifier","src":"3514:6:36"},"nativeSrc":"3514:12:36","nodeType":"YulFunctionCall","src":"3514:12:36"},"nativeSrc":"3514:12:36","nodeType":"YulExpressionStatement","src":"3514:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3486:7:36","nodeType":"YulIdentifier","src":"3486:7:36"},{"name":"headStart","nativeSrc":"3495:9:36","nodeType":"YulIdentifier","src":"3495:9:36"}],"functionName":{"name":"sub","nativeSrc":"3482:3:36","nodeType":"YulIdentifier","src":"3482:3:36"},"nativeSrc":"3482:23:36","nodeType":"YulFunctionCall","src":"3482:23:36"},{"kind":"number","nativeSrc":"3507:3:36","nodeType":"YulLiteral","src":"3507:3:36","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3478:3:36","nodeType":"YulIdentifier","src":"3478:3:36"},"nativeSrc":"3478:33:36","nodeType":"YulFunctionCall","src":"3478:33:36"},"nativeSrc":"3475:53:36","nodeType":"YulIf","src":"3475:53:36"},{"nativeSrc":"3537:33:36","nodeType":"YulAssignment","src":"3537:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"3560:9:36","nodeType":"YulIdentifier","src":"3560:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"3547:12:36","nodeType":"YulIdentifier","src":"3547:12:36"},"nativeSrc":"3547:23:36","nodeType":"YulFunctionCall","src":"3547:23:36"},"variableNames":[{"name":"value0","nativeSrc":"3537:6:36","nodeType":"YulIdentifier","src":"3537:6:36"}]},{"nativeSrc":"3579:45:36","nodeType":"YulVariableDeclaration","src":"3579:45:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3609:9:36","nodeType":"YulIdentifier","src":"3609:9:36"},{"kind":"number","nativeSrc":"3620:2:36","nodeType":"YulLiteral","src":"3620:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3605:3:36","nodeType":"YulIdentifier","src":"3605:3:36"},"nativeSrc":"3605:18:36","nodeType":"YulFunctionCall","src":"3605:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"3592:12:36","nodeType":"YulIdentifier","src":"3592:12:36"},"nativeSrc":"3592:32:36","nodeType":"YulFunctionCall","src":"3592:32:36"},"variables":[{"name":"value","nativeSrc":"3583:5:36","nodeType":"YulTypedName","src":"3583:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3658:5:36","nodeType":"YulIdentifier","src":"3658:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3633:24:36","nodeType":"YulIdentifier","src":"3633:24:36"},"nativeSrc":"3633:31:36","nodeType":"YulFunctionCall","src":"3633:31:36"},"nativeSrc":"3633:31:36","nodeType":"YulExpressionStatement","src":"3633:31:36"},{"nativeSrc":"3673:15:36","nodeType":"YulAssignment","src":"3673:15:36","value":{"name":"value","nativeSrc":"3683:5:36","nodeType":"YulIdentifier","src":"3683:5:36"},"variableNames":[{"name":"value1","nativeSrc":"3673:6:36","nodeType":"YulIdentifier","src":"3673:6:36"}]},{"nativeSrc":"3697:42:36","nodeType":"YulAssignment","src":"3697:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3724:9:36","nodeType":"YulIdentifier","src":"3724:9:36"},{"kind":"number","nativeSrc":"3735:2:36","nodeType":"YulLiteral","src":"3735:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3720:3:36","nodeType":"YulIdentifier","src":"3720:3:36"},"nativeSrc":"3720:18:36","nodeType":"YulFunctionCall","src":"3720:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"3707:12:36","nodeType":"YulIdentifier","src":"3707:12:36"},"nativeSrc":"3707:32:36","nodeType":"YulFunctionCall","src":"3707:32:36"},"variableNames":[{"name":"value2","nativeSrc":"3697:6:36","nodeType":"YulIdentifier","src":"3697:6:36"}]},{"nativeSrc":"3748:42:36","nodeType":"YulAssignment","src":"3748:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3775:9:36","nodeType":"YulIdentifier","src":"3775:9:36"},{"kind":"number","nativeSrc":"3786:2:36","nodeType":"YulLiteral","src":"3786:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3771:3:36","nodeType":"YulIdentifier","src":"3771:3:36"},"nativeSrc":"3771:18:36","nodeType":"YulFunctionCall","src":"3771:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"3758:12:36","nodeType":"YulIdentifier","src":"3758:12:36"},"nativeSrc":"3758:32:36","nodeType":"YulFunctionCall","src":"3758:32:36"},"variableNames":[{"name":"value3","nativeSrc":"3748:6:36","nodeType":"YulIdentifier","src":"3748:6:36"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32","nativeSrc":"3344:452:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3407:9:36","nodeType":"YulTypedName","src":"3407:9:36","type":""},{"name":"dataEnd","nativeSrc":"3418:7:36","nodeType":"YulTypedName","src":"3418:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3430:6:36","nodeType":"YulTypedName","src":"3430:6:36","type":""},{"name":"value1","nativeSrc":"3438:6:36","nodeType":"YulTypedName","src":"3438:6:36","type":""},{"name":"value2","nativeSrc":"3446:6:36","nodeType":"YulTypedName","src":"3446:6:36","type":""},{"name":"value3","nativeSrc":"3454:6:36","nodeType":"YulTypedName","src":"3454:6:36","type":""}],"src":"3344:452:36"},{"body":{"nativeSrc":"3902:76:36","nodeType":"YulBlock","src":"3902:76:36","statements":[{"nativeSrc":"3912:26:36","nodeType":"YulAssignment","src":"3912:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"3924:9:36","nodeType":"YulIdentifier","src":"3924:9:36"},{"kind":"number","nativeSrc":"3935:2:36","nodeType":"YulLiteral","src":"3935:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3920:3:36","nodeType":"YulIdentifier","src":"3920:3:36"},"nativeSrc":"3920:18:36","nodeType":"YulFunctionCall","src":"3920:18:36"},"variableNames":[{"name":"tail","nativeSrc":"3912:4:36","nodeType":"YulIdentifier","src":"3912:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3954:9:36","nodeType":"YulIdentifier","src":"3954:9:36"},{"name":"value0","nativeSrc":"3965:6:36","nodeType":"YulIdentifier","src":"3965:6:36"}],"functionName":{"name":"mstore","nativeSrc":"3947:6:36","nodeType":"YulIdentifier","src":"3947:6:36"},"nativeSrc":"3947:25:36","nodeType":"YulFunctionCall","src":"3947:25:36"},"nativeSrc":"3947:25:36","nodeType":"YulExpressionStatement","src":"3947:25:36"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3801:177:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3871:9:36","nodeType":"YulTypedName","src":"3871:9:36","type":""},{"name":"value0","nativeSrc":"3882:6:36","nodeType":"YulTypedName","src":"3882:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3893:4:36","nodeType":"YulTypedName","src":"3893:4:36","type":""}],"src":"3801:177:36"},{"body":{"nativeSrc":"4053:110:36","nodeType":"YulBlock","src":"4053:110:36","statements":[{"body":{"nativeSrc":"4099:16:36","nodeType":"YulBlock","src":"4099:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4108:1:36","nodeType":"YulLiteral","src":"4108:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4111:1:36","nodeType":"YulLiteral","src":"4111:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4101:6:36","nodeType":"YulIdentifier","src":"4101:6:36"},"nativeSrc":"4101:12:36","nodeType":"YulFunctionCall","src":"4101:12:36"},"nativeSrc":"4101:12:36","nodeType":"YulExpressionStatement","src":"4101:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4074:7:36","nodeType":"YulIdentifier","src":"4074:7:36"},{"name":"headStart","nativeSrc":"4083:9:36","nodeType":"YulIdentifier","src":"4083:9:36"}],"functionName":{"name":"sub","nativeSrc":"4070:3:36","nodeType":"YulIdentifier","src":"4070:3:36"},"nativeSrc":"4070:23:36","nodeType":"YulFunctionCall","src":"4070:23:36"},{"kind":"number","nativeSrc":"4095:2:36","nodeType":"YulLiteral","src":"4095:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4066:3:36","nodeType":"YulIdentifier","src":"4066:3:36"},"nativeSrc":"4066:32:36","nodeType":"YulFunctionCall","src":"4066:32:36"},"nativeSrc":"4063:52:36","nodeType":"YulIf","src":"4063:52:36"},{"nativeSrc":"4124:33:36","nodeType":"YulAssignment","src":"4124:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4147:9:36","nodeType":"YulIdentifier","src":"4147:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"4134:12:36","nodeType":"YulIdentifier","src":"4134:12:36"},"nativeSrc":"4134:23:36","nodeType":"YulFunctionCall","src":"4134:23:36"},"variableNames":[{"name":"value0","nativeSrc":"4124:6:36","nodeType":"YulIdentifier","src":"4124:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"3983:180:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4019:9:36","nodeType":"YulTypedName","src":"4019:9:36","type":""},{"name":"dataEnd","nativeSrc":"4030:7:36","nodeType":"YulTypedName","src":"4030:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4042:6:36","nodeType":"YulTypedName","src":"4042:6:36","type":""}],"src":"3983:180:36"},{"body":{"nativeSrc":"4263:92:36","nodeType":"YulBlock","src":"4263:92:36","statements":[{"nativeSrc":"4273:26:36","nodeType":"YulAssignment","src":"4273:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4285:9:36","nodeType":"YulIdentifier","src":"4285:9:36"},{"kind":"number","nativeSrc":"4296:2:36","nodeType":"YulLiteral","src":"4296:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4281:3:36","nodeType":"YulIdentifier","src":"4281:3:36"},"nativeSrc":"4281:18:36","nodeType":"YulFunctionCall","src":"4281:18:36"},"variableNames":[{"name":"tail","nativeSrc":"4273:4:36","nodeType":"YulIdentifier","src":"4273:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4315:9:36","nodeType":"YulIdentifier","src":"4315:9:36"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4340:6:36","nodeType":"YulIdentifier","src":"4340:6:36"}],"functionName":{"name":"iszero","nativeSrc":"4333:6:36","nodeType":"YulIdentifier","src":"4333:6:36"},"nativeSrc":"4333:14:36","nodeType":"YulFunctionCall","src":"4333:14:36"}],"functionName":{"name":"iszero","nativeSrc":"4326:6:36","nodeType":"YulIdentifier","src":"4326:6:36"},"nativeSrc":"4326:22:36","nodeType":"YulFunctionCall","src":"4326:22:36"}],"functionName":{"name":"mstore","nativeSrc":"4308:6:36","nodeType":"YulIdentifier","src":"4308:6:36"},"nativeSrc":"4308:41:36","nodeType":"YulFunctionCall","src":"4308:41:36"},"nativeSrc":"4308:41:36","nodeType":"YulExpressionStatement","src":"4308:41:36"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"4168:187:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4232:9:36","nodeType":"YulTypedName","src":"4232:9:36","type":""},{"name":"value0","nativeSrc":"4243:6:36","nodeType":"YulTypedName","src":"4243:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4254:4:36","nodeType":"YulTypedName","src":"4254:4:36","type":""}],"src":"4168:187:36"},{"body":{"nativeSrc":"4392:152:36","nodeType":"YulBlock","src":"4392:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4409:1:36","nodeType":"YulLiteral","src":"4409:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4412:77:36","nodeType":"YulLiteral","src":"4412:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4402:6:36","nodeType":"YulIdentifier","src":"4402:6:36"},"nativeSrc":"4402:88:36","nodeType":"YulFunctionCall","src":"4402:88:36"},"nativeSrc":"4402:88:36","nodeType":"YulExpressionStatement","src":"4402:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4506:1:36","nodeType":"YulLiteral","src":"4506:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"4509:4:36","nodeType":"YulLiteral","src":"4509:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"4499:6:36","nodeType":"YulIdentifier","src":"4499:6:36"},"nativeSrc":"4499:15:36","nodeType":"YulFunctionCall","src":"4499:15:36"},"nativeSrc":"4499:15:36","nodeType":"YulExpressionStatement","src":"4499:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4530:1:36","nodeType":"YulLiteral","src":"4530:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4533:4:36","nodeType":"YulLiteral","src":"4533:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4523:6:36","nodeType":"YulIdentifier","src":"4523:6:36"},"nativeSrc":"4523:15:36","nodeType":"YulFunctionCall","src":"4523:15:36"},"nativeSrc":"4523:15:36","nodeType":"YulExpressionStatement","src":"4523:15:36"}]},"name":"panic_error_0x41","nativeSrc":"4360:184:36","nodeType":"YulFunctionDefinition","src":"4360:184:36"},{"body":{"nativeSrc":"4645:1019:36","nodeType":"YulBlock","src":"4645:1019:36","statements":[{"body":{"nativeSrc":"4691:16:36","nodeType":"YulBlock","src":"4691:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4700:1:36","nodeType":"YulLiteral","src":"4700:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4703:1:36","nodeType":"YulLiteral","src":"4703:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4693:6:36","nodeType":"YulIdentifier","src":"4693:6:36"},"nativeSrc":"4693:12:36","nodeType":"YulFunctionCall","src":"4693:12:36"},"nativeSrc":"4693:12:36","nodeType":"YulExpressionStatement","src":"4693:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4666:7:36","nodeType":"YulIdentifier","src":"4666:7:36"},{"name":"headStart","nativeSrc":"4675:9:36","nodeType":"YulIdentifier","src":"4675:9:36"}],"functionName":{"name":"sub","nativeSrc":"4662:3:36","nodeType":"YulIdentifier","src":"4662:3:36"},"nativeSrc":"4662:23:36","nodeType":"YulFunctionCall","src":"4662:23:36"},{"kind":"number","nativeSrc":"4687:2:36","nodeType":"YulLiteral","src":"4687:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4658:3:36","nodeType":"YulIdentifier","src":"4658:3:36"},"nativeSrc":"4658:32:36","nodeType":"YulFunctionCall","src":"4658:32:36"},"nativeSrc":"4655:52:36","nodeType":"YulIf","src":"4655:52:36"},{"nativeSrc":"4716:36:36","nodeType":"YulVariableDeclaration","src":"4716:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4742:9:36","nodeType":"YulIdentifier","src":"4742:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"4729:12:36","nodeType":"YulIdentifier","src":"4729:12:36"},"nativeSrc":"4729:23:36","nodeType":"YulFunctionCall","src":"4729:23:36"},"variables":[{"name":"value","nativeSrc":"4720:5:36","nodeType":"YulTypedName","src":"4720:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4786:5:36","nodeType":"YulIdentifier","src":"4786:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4761:24:36","nodeType":"YulIdentifier","src":"4761:24:36"},"nativeSrc":"4761:31:36","nodeType":"YulFunctionCall","src":"4761:31:36"},"nativeSrc":"4761:31:36","nodeType":"YulExpressionStatement","src":"4761:31:36"},{"nativeSrc":"4801:15:36","nodeType":"YulAssignment","src":"4801:15:36","value":{"name":"value","nativeSrc":"4811:5:36","nodeType":"YulIdentifier","src":"4811:5:36"},"variableNames":[{"name":"value0","nativeSrc":"4801:6:36","nodeType":"YulIdentifier","src":"4801:6:36"}]},{"nativeSrc":"4825:46:36","nodeType":"YulVariableDeclaration","src":"4825:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4856:9:36","nodeType":"YulIdentifier","src":"4856:9:36"},{"kind":"number","nativeSrc":"4867:2:36","nodeType":"YulLiteral","src":"4867:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4852:3:36","nodeType":"YulIdentifier","src":"4852:3:36"},"nativeSrc":"4852:18:36","nodeType":"YulFunctionCall","src":"4852:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"4839:12:36","nodeType":"YulIdentifier","src":"4839:12:36"},"nativeSrc":"4839:32:36","nodeType":"YulFunctionCall","src":"4839:32:36"},"variables":[{"name":"offset","nativeSrc":"4829:6:36","nodeType":"YulTypedName","src":"4829:6:36","type":""}]},{"nativeSrc":"4880:28:36","nodeType":"YulVariableDeclaration","src":"4880:28:36","value":{"kind":"number","nativeSrc":"4890:18:36","nodeType":"YulLiteral","src":"4890:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4884:2:36","nodeType":"YulTypedName","src":"4884:2:36","type":""}]},{"body":{"nativeSrc":"4935:16:36","nodeType":"YulBlock","src":"4935:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4944:1:36","nodeType":"YulLiteral","src":"4944:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4947:1:36","nodeType":"YulLiteral","src":"4947:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4937:6:36","nodeType":"YulIdentifier","src":"4937:6:36"},"nativeSrc":"4937:12:36","nodeType":"YulFunctionCall","src":"4937:12:36"},"nativeSrc":"4937:12:36","nodeType":"YulExpressionStatement","src":"4937:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4923:6:36","nodeType":"YulIdentifier","src":"4923:6:36"},{"name":"_1","nativeSrc":"4931:2:36","nodeType":"YulIdentifier","src":"4931:2:36"}],"functionName":{"name":"gt","nativeSrc":"4920:2:36","nodeType":"YulIdentifier","src":"4920:2:36"},"nativeSrc":"4920:14:36","nodeType":"YulFunctionCall","src":"4920:14:36"},"nativeSrc":"4917:34:36","nodeType":"YulIf","src":"4917:34:36"},{"nativeSrc":"4960:32:36","nodeType":"YulVariableDeclaration","src":"4960:32:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4974:9:36","nodeType":"YulIdentifier","src":"4974:9:36"},{"name":"offset","nativeSrc":"4985:6:36","nodeType":"YulIdentifier","src":"4985:6:36"}],"functionName":{"name":"add","nativeSrc":"4970:3:36","nodeType":"YulIdentifier","src":"4970:3:36"},"nativeSrc":"4970:22:36","nodeType":"YulFunctionCall","src":"4970:22:36"},"variables":[{"name":"_2","nativeSrc":"4964:2:36","nodeType":"YulTypedName","src":"4964:2:36","type":""}]},{"body":{"nativeSrc":"5040:16:36","nodeType":"YulBlock","src":"5040:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5049:1:36","nodeType":"YulLiteral","src":"5049:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5052:1:36","nodeType":"YulLiteral","src":"5052:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5042:6:36","nodeType":"YulIdentifier","src":"5042:6:36"},"nativeSrc":"5042:12:36","nodeType":"YulFunctionCall","src":"5042:12:36"},"nativeSrc":"5042:12:36","nodeType":"YulExpressionStatement","src":"5042:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5019:2:36","nodeType":"YulIdentifier","src":"5019:2:36"},{"kind":"number","nativeSrc":"5023:4:36","nodeType":"YulLiteral","src":"5023:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"5015:3:36","nodeType":"YulIdentifier","src":"5015:3:36"},"nativeSrc":"5015:13:36","nodeType":"YulFunctionCall","src":"5015:13:36"},{"name":"dataEnd","nativeSrc":"5030:7:36","nodeType":"YulIdentifier","src":"5030:7:36"}],"functionName":{"name":"slt","nativeSrc":"5011:3:36","nodeType":"YulIdentifier","src":"5011:3:36"},"nativeSrc":"5011:27:36","nodeType":"YulFunctionCall","src":"5011:27:36"}],"functionName":{"name":"iszero","nativeSrc":"5004:6:36","nodeType":"YulIdentifier","src":"5004:6:36"},"nativeSrc":"5004:35:36","nodeType":"YulFunctionCall","src":"5004:35:36"},"nativeSrc":"5001:55:36","nodeType":"YulIf","src":"5001:55:36"},{"nativeSrc":"5065:26:36","nodeType":"YulVariableDeclaration","src":"5065:26:36","value":{"arguments":[{"name":"_2","nativeSrc":"5088:2:36","nodeType":"YulIdentifier","src":"5088:2:36"}],"functionName":{"name":"calldataload","nativeSrc":"5075:12:36","nodeType":"YulIdentifier","src":"5075:12:36"},"nativeSrc":"5075:16:36","nodeType":"YulFunctionCall","src":"5075:16:36"},"variables":[{"name":"_3","nativeSrc":"5069:2:36","nodeType":"YulTypedName","src":"5069:2:36","type":""}]},{"body":{"nativeSrc":"5114:22:36","nodeType":"YulBlock","src":"5114:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"5116:16:36","nodeType":"YulIdentifier","src":"5116:16:36"},"nativeSrc":"5116:18:36","nodeType":"YulFunctionCall","src":"5116:18:36"},"nativeSrc":"5116:18:36","nodeType":"YulExpressionStatement","src":"5116:18:36"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"5106:2:36","nodeType":"YulIdentifier","src":"5106:2:36"},{"name":"_1","nativeSrc":"5110:2:36","nodeType":"YulIdentifier","src":"5110:2:36"}],"functionName":{"name":"gt","nativeSrc":"5103:2:36","nodeType":"YulIdentifier","src":"5103:2:36"},"nativeSrc":"5103:10:36","nodeType":"YulFunctionCall","src":"5103:10:36"},"nativeSrc":"5100:36:36","nodeType":"YulIf","src":"5100:36:36"},{"nativeSrc":"5145:76:36","nodeType":"YulVariableDeclaration","src":"5145:76:36","value":{"kind":"number","nativeSrc":"5155:66:36","nodeType":"YulLiteral","src":"5155:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nativeSrc":"5149:2:36","nodeType":"YulTypedName","src":"5149:2:36","type":""}]},{"nativeSrc":"5230:23:36","nodeType":"YulVariableDeclaration","src":"5230:23:36","value":{"arguments":[{"kind":"number","nativeSrc":"5250:2:36","nodeType":"YulLiteral","src":"5250:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"5244:5:36","nodeType":"YulIdentifier","src":"5244:5:36"},"nativeSrc":"5244:9:36","nodeType":"YulFunctionCall","src":"5244:9:36"},"variables":[{"name":"memPtr","nativeSrc":"5234:6:36","nodeType":"YulTypedName","src":"5234:6:36","type":""}]},{"nativeSrc":"5262:71:36","nodeType":"YulVariableDeclaration","src":"5262:71:36","value":{"arguments":[{"name":"memPtr","nativeSrc":"5284:6:36","nodeType":"YulIdentifier","src":"5284:6:36"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"5308:2:36","nodeType":"YulIdentifier","src":"5308:2:36"},{"kind":"number","nativeSrc":"5312:4:36","nodeType":"YulLiteral","src":"5312:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"5304:3:36","nodeType":"YulIdentifier","src":"5304:3:36"},"nativeSrc":"5304:13:36","nodeType":"YulFunctionCall","src":"5304:13:36"},{"name":"_4","nativeSrc":"5319:2:36","nodeType":"YulIdentifier","src":"5319:2:36"}],"functionName":{"name":"and","nativeSrc":"5300:3:36","nodeType":"YulIdentifier","src":"5300:3:36"},"nativeSrc":"5300:22:36","nodeType":"YulFunctionCall","src":"5300:22:36"},{"kind":"number","nativeSrc":"5324:2:36","nodeType":"YulLiteral","src":"5324:2:36","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"5296:3:36","nodeType":"YulIdentifier","src":"5296:3:36"},"nativeSrc":"5296:31:36","nodeType":"YulFunctionCall","src":"5296:31:36"},{"name":"_4","nativeSrc":"5329:2:36","nodeType":"YulIdentifier","src":"5329:2:36"}],"functionName":{"name":"and","nativeSrc":"5292:3:36","nodeType":"YulIdentifier","src":"5292:3:36"},"nativeSrc":"5292:40:36","nodeType":"YulFunctionCall","src":"5292:40:36"}],"functionName":{"name":"add","nativeSrc":"5280:3:36","nodeType":"YulIdentifier","src":"5280:3:36"},"nativeSrc":"5280:53:36","nodeType":"YulFunctionCall","src":"5280:53:36"},"variables":[{"name":"newFreePtr","nativeSrc":"5266:10:36","nodeType":"YulTypedName","src":"5266:10:36","type":""}]},{"body":{"nativeSrc":"5392:22:36","nodeType":"YulBlock","src":"5392:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"5394:16:36","nodeType":"YulIdentifier","src":"5394:16:36"},"nativeSrc":"5394:18:36","nodeType":"YulFunctionCall","src":"5394:18:36"},"nativeSrc":"5394:18:36","nodeType":"YulExpressionStatement","src":"5394:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"5351:10:36","nodeType":"YulIdentifier","src":"5351:10:36"},{"name":"_1","nativeSrc":"5363:2:36","nodeType":"YulIdentifier","src":"5363:2:36"}],"functionName":{"name":"gt","nativeSrc":"5348:2:36","nodeType":"YulIdentifier","src":"5348:2:36"},"nativeSrc":"5348:18:36","nodeType":"YulFunctionCall","src":"5348:18:36"},{"arguments":[{"name":"newFreePtr","nativeSrc":"5371:10:36","nodeType":"YulIdentifier","src":"5371:10:36"},{"name":"memPtr","nativeSrc":"5383:6:36","nodeType":"YulIdentifier","src":"5383:6:36"}],"functionName":{"name":"lt","nativeSrc":"5368:2:36","nodeType":"YulIdentifier","src":"5368:2:36"},"nativeSrc":"5368:22:36","nodeType":"YulFunctionCall","src":"5368:22:36"}],"functionName":{"name":"or","nativeSrc":"5345:2:36","nodeType":"YulIdentifier","src":"5345:2:36"},"nativeSrc":"5345:46:36","nodeType":"YulFunctionCall","src":"5345:46:36"},"nativeSrc":"5342:72:36","nodeType":"YulIf","src":"5342:72:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5430:2:36","nodeType":"YulLiteral","src":"5430:2:36","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"5434:10:36","nodeType":"YulIdentifier","src":"5434:10:36"}],"functionName":{"name":"mstore","nativeSrc":"5423:6:36","nodeType":"YulIdentifier","src":"5423:6:36"},"nativeSrc":"5423:22:36","nodeType":"YulFunctionCall","src":"5423:22:36"},"nativeSrc":"5423:22:36","nodeType":"YulExpressionStatement","src":"5423:22:36"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"5461:6:36","nodeType":"YulIdentifier","src":"5461:6:36"},{"name":"_3","nativeSrc":"5469:2:36","nodeType":"YulIdentifier","src":"5469:2:36"}],"functionName":{"name":"mstore","nativeSrc":"5454:6:36","nodeType":"YulIdentifier","src":"5454:6:36"},"nativeSrc":"5454:18:36","nodeType":"YulFunctionCall","src":"5454:18:36"},"nativeSrc":"5454:18:36","nodeType":"YulExpressionStatement","src":"5454:18:36"},{"body":{"nativeSrc":"5518:16:36","nodeType":"YulBlock","src":"5518:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5527:1:36","nodeType":"YulLiteral","src":"5527:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5530:1:36","nodeType":"YulLiteral","src":"5530:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5520:6:36","nodeType":"YulIdentifier","src":"5520:6:36"},"nativeSrc":"5520:12:36","nodeType":"YulFunctionCall","src":"5520:12:36"},"nativeSrc":"5520:12:36","nodeType":"YulExpressionStatement","src":"5520:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"5495:2:36","nodeType":"YulIdentifier","src":"5495:2:36"},{"name":"_3","nativeSrc":"5499:2:36","nodeType":"YulIdentifier","src":"5499:2:36"}],"functionName":{"name":"add","nativeSrc":"5491:3:36","nodeType":"YulIdentifier","src":"5491:3:36"},"nativeSrc":"5491:11:36","nodeType":"YulFunctionCall","src":"5491:11:36"},{"kind":"number","nativeSrc":"5504:2:36","nodeType":"YulLiteral","src":"5504:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5487:3:36","nodeType":"YulIdentifier","src":"5487:3:36"},"nativeSrc":"5487:20:36","nodeType":"YulFunctionCall","src":"5487:20:36"},{"name":"dataEnd","nativeSrc":"5509:7:36","nodeType":"YulIdentifier","src":"5509:7:36"}],"functionName":{"name":"gt","nativeSrc":"5484:2:36","nodeType":"YulIdentifier","src":"5484:2:36"},"nativeSrc":"5484:33:36","nodeType":"YulFunctionCall","src":"5484:33:36"},"nativeSrc":"5481:53:36","nodeType":"YulIf","src":"5481:53:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"5560:6:36","nodeType":"YulIdentifier","src":"5560:6:36"},{"kind":"number","nativeSrc":"5568:2:36","nodeType":"YulLiteral","src":"5568:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5556:3:36","nodeType":"YulIdentifier","src":"5556:3:36"},"nativeSrc":"5556:15:36","nodeType":"YulFunctionCall","src":"5556:15:36"},{"arguments":[{"name":"_2","nativeSrc":"5577:2:36","nodeType":"YulIdentifier","src":"5577:2:36"},{"kind":"number","nativeSrc":"5581:2:36","nodeType":"YulLiteral","src":"5581:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5573:3:36","nodeType":"YulIdentifier","src":"5573:3:36"},"nativeSrc":"5573:11:36","nodeType":"YulFunctionCall","src":"5573:11:36"},{"name":"_3","nativeSrc":"5586:2:36","nodeType":"YulIdentifier","src":"5586:2:36"}],"functionName":{"name":"calldatacopy","nativeSrc":"5543:12:36","nodeType":"YulIdentifier","src":"5543:12:36"},"nativeSrc":"5543:46:36","nodeType":"YulFunctionCall","src":"5543:46:36"},"nativeSrc":"5543:46:36","nodeType":"YulExpressionStatement","src":"5543:46:36"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"5613:6:36","nodeType":"YulIdentifier","src":"5613:6:36"},{"name":"_3","nativeSrc":"5621:2:36","nodeType":"YulIdentifier","src":"5621:2:36"}],"functionName":{"name":"add","nativeSrc":"5609:3:36","nodeType":"YulIdentifier","src":"5609:3:36"},"nativeSrc":"5609:15:36","nodeType":"YulFunctionCall","src":"5609:15:36"},{"kind":"number","nativeSrc":"5626:2:36","nodeType":"YulLiteral","src":"5626:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5605:3:36","nodeType":"YulIdentifier","src":"5605:3:36"},"nativeSrc":"5605:24:36","nodeType":"YulFunctionCall","src":"5605:24:36"},{"kind":"number","nativeSrc":"5631:1:36","nodeType":"YulLiteral","src":"5631:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5598:6:36","nodeType":"YulIdentifier","src":"5598:6:36"},"nativeSrc":"5598:35:36","nodeType":"YulFunctionCall","src":"5598:35:36"},"nativeSrc":"5598:35:36","nodeType":"YulExpressionStatement","src":"5598:35:36"},{"nativeSrc":"5642:16:36","nodeType":"YulAssignment","src":"5642:16:36","value":{"name":"memPtr","nativeSrc":"5652:6:36","nodeType":"YulIdentifier","src":"5652:6:36"},"variableNames":[{"name":"value1","nativeSrc":"5642:6:36","nodeType":"YulIdentifier","src":"5642:6:36"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nativeSrc":"4549:1115:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4603:9:36","nodeType":"YulTypedName","src":"4603:9:36","type":""},{"name":"dataEnd","nativeSrc":"4614:7:36","nodeType":"YulTypedName","src":"4614:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4626:6:36","nodeType":"YulTypedName","src":"4626:6:36","type":""},{"name":"value1","nativeSrc":"4634:6:36","nodeType":"YulTypedName","src":"4634:6:36","type":""}],"src":"4549:1115:36"},{"body":{"nativeSrc":"5773:212:36","nodeType":"YulBlock","src":"5773:212:36","statements":[{"body":{"nativeSrc":"5819:16:36","nodeType":"YulBlock","src":"5819:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5828:1:36","nodeType":"YulLiteral","src":"5828:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5831:1:36","nodeType":"YulLiteral","src":"5831:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5821:6:36","nodeType":"YulIdentifier","src":"5821:6:36"},"nativeSrc":"5821:12:36","nodeType":"YulFunctionCall","src":"5821:12:36"},"nativeSrc":"5821:12:36","nodeType":"YulExpressionStatement","src":"5821:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5794:7:36","nodeType":"YulIdentifier","src":"5794:7:36"},{"name":"headStart","nativeSrc":"5803:9:36","nodeType":"YulIdentifier","src":"5803:9:36"}],"functionName":{"name":"sub","nativeSrc":"5790:3:36","nodeType":"YulIdentifier","src":"5790:3:36"},"nativeSrc":"5790:23:36","nodeType":"YulFunctionCall","src":"5790:23:36"},{"kind":"number","nativeSrc":"5815:2:36","nodeType":"YulLiteral","src":"5815:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5786:3:36","nodeType":"YulIdentifier","src":"5786:3:36"},"nativeSrc":"5786:32:36","nodeType":"YulFunctionCall","src":"5786:32:36"},"nativeSrc":"5783:52:36","nodeType":"YulIf","src":"5783:52:36"},{"nativeSrc":"5844:33:36","nodeType":"YulAssignment","src":"5844:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"5867:9:36","nodeType":"YulIdentifier","src":"5867:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"5854:12:36","nodeType":"YulIdentifier","src":"5854:12:36"},"nativeSrc":"5854:23:36","nodeType":"YulFunctionCall","src":"5854:23:36"},"variableNames":[{"name":"value0","nativeSrc":"5844:6:36","nodeType":"YulIdentifier","src":"5844:6:36"}]},{"nativeSrc":"5886:42:36","nodeType":"YulAssignment","src":"5886:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5913:9:36","nodeType":"YulIdentifier","src":"5913:9:36"},{"kind":"number","nativeSrc":"5924:2:36","nodeType":"YulLiteral","src":"5924:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5909:3:36","nodeType":"YulIdentifier","src":"5909:3:36"},"nativeSrc":"5909:18:36","nodeType":"YulFunctionCall","src":"5909:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"5896:12:36","nodeType":"YulIdentifier","src":"5896:12:36"},"nativeSrc":"5896:32:36","nodeType":"YulFunctionCall","src":"5896:32:36"},"variableNames":[{"name":"value1","nativeSrc":"5886:6:36","nodeType":"YulIdentifier","src":"5886:6:36"}]},{"nativeSrc":"5937:42:36","nodeType":"YulAssignment","src":"5937:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5964:9:36","nodeType":"YulIdentifier","src":"5964:9:36"},{"kind":"number","nativeSrc":"5975:2:36","nodeType":"YulLiteral","src":"5975:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5960:3:36","nodeType":"YulIdentifier","src":"5960:3:36"},"nativeSrc":"5960:18:36","nodeType":"YulFunctionCall","src":"5960:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"5947:12:36","nodeType":"YulIdentifier","src":"5947:12:36"},"nativeSrc":"5947:32:36","nodeType":"YulFunctionCall","src":"5947:32:36"},"variableNames":[{"name":"value2","nativeSrc":"5937:6:36","nodeType":"YulIdentifier","src":"5937:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256","nativeSrc":"5669:316:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5723:9:36","nodeType":"YulTypedName","src":"5723:9:36","type":""},{"name":"dataEnd","nativeSrc":"5734:7:36","nodeType":"YulTypedName","src":"5734:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5746:6:36","nodeType":"YulTypedName","src":"5746:6:36","type":""},{"name":"value1","nativeSrc":"5754:6:36","nodeType":"YulTypedName","src":"5754:6:36","type":""},{"name":"value2","nativeSrc":"5762:6:36","nodeType":"YulTypedName","src":"5762:6:36","type":""}],"src":"5669:316:36"},{"body":{"nativeSrc":"6097:372:36","nodeType":"YulBlock","src":"6097:372:36","statements":[{"body":{"nativeSrc":"6143:16:36","nodeType":"YulBlock","src":"6143:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6152:1:36","nodeType":"YulLiteral","src":"6152:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6155:1:36","nodeType":"YulLiteral","src":"6155:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6145:6:36","nodeType":"YulIdentifier","src":"6145:6:36"},"nativeSrc":"6145:12:36","nodeType":"YulFunctionCall","src":"6145:12:36"},"nativeSrc":"6145:12:36","nodeType":"YulExpressionStatement","src":"6145:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6118:7:36","nodeType":"YulIdentifier","src":"6118:7:36"},{"name":"headStart","nativeSrc":"6127:9:36","nodeType":"YulIdentifier","src":"6127:9:36"}],"functionName":{"name":"sub","nativeSrc":"6114:3:36","nodeType":"YulIdentifier","src":"6114:3:36"},"nativeSrc":"6114:23:36","nodeType":"YulFunctionCall","src":"6114:23:36"},{"kind":"number","nativeSrc":"6139:2:36","nodeType":"YulLiteral","src":"6139:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6110:3:36","nodeType":"YulIdentifier","src":"6110:3:36"},"nativeSrc":"6110:32:36","nodeType":"YulFunctionCall","src":"6110:32:36"},"nativeSrc":"6107:52:36","nodeType":"YulIf","src":"6107:52:36"},{"nativeSrc":"6168:33:36","nodeType":"YulAssignment","src":"6168:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"6191:9:36","nodeType":"YulIdentifier","src":"6191:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"6178:12:36","nodeType":"YulIdentifier","src":"6178:12:36"},"nativeSrc":"6178:23:36","nodeType":"YulFunctionCall","src":"6178:23:36"},"variableNames":[{"name":"value0","nativeSrc":"6168:6:36","nodeType":"YulIdentifier","src":"6168:6:36"}]},{"nativeSrc":"6210:46:36","nodeType":"YulVariableDeclaration","src":"6210:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6241:9:36","nodeType":"YulIdentifier","src":"6241:9:36"},{"kind":"number","nativeSrc":"6252:2:36","nodeType":"YulLiteral","src":"6252:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6237:3:36","nodeType":"YulIdentifier","src":"6237:3:36"},"nativeSrc":"6237:18:36","nodeType":"YulFunctionCall","src":"6237:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"6224:12:36","nodeType":"YulIdentifier","src":"6224:12:36"},"nativeSrc":"6224:32:36","nodeType":"YulFunctionCall","src":"6224:32:36"},"variables":[{"name":"offset","nativeSrc":"6214:6:36","nodeType":"YulTypedName","src":"6214:6:36","type":""}]},{"body":{"nativeSrc":"6299:16:36","nodeType":"YulBlock","src":"6299:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6308:1:36","nodeType":"YulLiteral","src":"6308:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6311:1:36","nodeType":"YulLiteral","src":"6311:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6301:6:36","nodeType":"YulIdentifier","src":"6301:6:36"},"nativeSrc":"6301:12:36","nodeType":"YulFunctionCall","src":"6301:12:36"},"nativeSrc":"6301:12:36","nodeType":"YulExpressionStatement","src":"6301:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6271:6:36","nodeType":"YulIdentifier","src":"6271:6:36"},{"kind":"number","nativeSrc":"6279:18:36","nodeType":"YulLiteral","src":"6279:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6268:2:36","nodeType":"YulIdentifier","src":"6268:2:36"},"nativeSrc":"6268:30:36","nodeType":"YulFunctionCall","src":"6268:30:36"},"nativeSrc":"6265:50:36","nodeType":"YulIf","src":"6265:50:36"},{"nativeSrc":"6324:85:36","nodeType":"YulVariableDeclaration","src":"6324:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6381:9:36","nodeType":"YulIdentifier","src":"6381:9:36"},{"name":"offset","nativeSrc":"6392:6:36","nodeType":"YulIdentifier","src":"6392:6:36"}],"functionName":{"name":"add","nativeSrc":"6377:3:36","nodeType":"YulIdentifier","src":"6377:3:36"},"nativeSrc":"6377:22:36","nodeType":"YulFunctionCall","src":"6377:22:36"},{"name":"dataEnd","nativeSrc":"6401:7:36","nodeType":"YulIdentifier","src":"6401:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"6350:26:36","nodeType":"YulIdentifier","src":"6350:26:36"},"nativeSrc":"6350:59:36","nodeType":"YulFunctionCall","src":"6350:59:36"},"variables":[{"name":"value1_1","nativeSrc":"6328:8:36","nodeType":"YulTypedName","src":"6328:8:36","type":""},{"name":"value2_1","nativeSrc":"6338:8:36","nodeType":"YulTypedName","src":"6338:8:36","type":""}]},{"nativeSrc":"6418:18:36","nodeType":"YulAssignment","src":"6418:18:36","value":{"name":"value1_1","nativeSrc":"6428:8:36","nodeType":"YulIdentifier","src":"6428:8:36"},"variableNames":[{"name":"value1","nativeSrc":"6418:6:36","nodeType":"YulIdentifier","src":"6418:6:36"}]},{"nativeSrc":"6445:18:36","nodeType":"YulAssignment","src":"6445:18:36","value":{"name":"value2_1","nativeSrc":"6455:8:36","nodeType":"YulIdentifier","src":"6455:8:36"},"variableNames":[{"name":"value2","nativeSrc":"6445:6:36","nodeType":"YulIdentifier","src":"6445:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptr","nativeSrc":"5990:479:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6047:9:36","nodeType":"YulTypedName","src":"6047:9:36","type":""},{"name":"dataEnd","nativeSrc":"6058:7:36","nodeType":"YulTypedName","src":"6058:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6070:6:36","nodeType":"YulTypedName","src":"6070:6:36","type":""},{"name":"value1","nativeSrc":"6078:6:36","nodeType":"YulTypedName","src":"6078:6:36","type":""},{"name":"value2","nativeSrc":"6086:6:36","nodeType":"YulTypedName","src":"6086:6:36","type":""}],"src":"5990:479:36"},{"body":{"nativeSrc":"6575:125:36","nodeType":"YulBlock","src":"6575:125:36","statements":[{"nativeSrc":"6585:26:36","nodeType":"YulAssignment","src":"6585:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"6597:9:36","nodeType":"YulIdentifier","src":"6597:9:36"},{"kind":"number","nativeSrc":"6608:2:36","nodeType":"YulLiteral","src":"6608:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6593:3:36","nodeType":"YulIdentifier","src":"6593:3:36"},"nativeSrc":"6593:18:36","nodeType":"YulFunctionCall","src":"6593:18:36"},"variableNames":[{"name":"tail","nativeSrc":"6585:4:36","nodeType":"YulIdentifier","src":"6585:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6627:9:36","nodeType":"YulIdentifier","src":"6627:9:36"},{"arguments":[{"name":"value0","nativeSrc":"6642:6:36","nodeType":"YulIdentifier","src":"6642:6:36"},{"kind":"number","nativeSrc":"6650:42:36","nodeType":"YulLiteral","src":"6650:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6638:3:36","nodeType":"YulIdentifier","src":"6638:3:36"},"nativeSrc":"6638:55:36","nodeType":"YulFunctionCall","src":"6638:55:36"}],"functionName":{"name":"mstore","nativeSrc":"6620:6:36","nodeType":"YulIdentifier","src":"6620:6:36"},"nativeSrc":"6620:74:36","nodeType":"YulFunctionCall","src":"6620:74:36"},"nativeSrc":"6620:74:36","nodeType":"YulExpressionStatement","src":"6620:74:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"6474:226:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6544:9:36","nodeType":"YulTypedName","src":"6544:9:36","type":""},{"name":"value0","nativeSrc":"6555:6:36","nodeType":"YulTypedName","src":"6555:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6566:4:36","nodeType":"YulTypedName","src":"6566:4:36","type":""}],"src":"6474:226:36"},{"body":{"nativeSrc":"6752:109:36","nodeType":"YulBlock","src":"6752:109:36","statements":[{"nativeSrc":"6762:29:36","nodeType":"YulAssignment","src":"6762:29:36","value":{"arguments":[{"name":"offset","nativeSrc":"6784:6:36","nodeType":"YulIdentifier","src":"6784:6:36"}],"functionName":{"name":"calldataload","nativeSrc":"6771:12:36","nodeType":"YulIdentifier","src":"6771:12:36"},"nativeSrc":"6771:20:36","nodeType":"YulFunctionCall","src":"6771:20:36"},"variableNames":[{"name":"value","nativeSrc":"6762:5:36","nodeType":"YulIdentifier","src":"6762:5:36"}]},{"body":{"nativeSrc":"6839:16:36","nodeType":"YulBlock","src":"6839:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6848:1:36","nodeType":"YulLiteral","src":"6848:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6851:1:36","nodeType":"YulLiteral","src":"6851:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6841:6:36","nodeType":"YulIdentifier","src":"6841:6:36"},"nativeSrc":"6841:12:36","nodeType":"YulFunctionCall","src":"6841:12:36"},"nativeSrc":"6841:12:36","nodeType":"YulExpressionStatement","src":"6841:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6813:5:36","nodeType":"YulIdentifier","src":"6813:5:36"},{"arguments":[{"name":"value","nativeSrc":"6824:5:36","nodeType":"YulIdentifier","src":"6824:5:36"},{"kind":"number","nativeSrc":"6831:4:36","nodeType":"YulLiteral","src":"6831:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"6820:3:36","nodeType":"YulIdentifier","src":"6820:3:36"},"nativeSrc":"6820:16:36","nodeType":"YulFunctionCall","src":"6820:16:36"}],"functionName":{"name":"eq","nativeSrc":"6810:2:36","nodeType":"YulIdentifier","src":"6810:2:36"},"nativeSrc":"6810:27:36","nodeType":"YulFunctionCall","src":"6810:27:36"}],"functionName":{"name":"iszero","nativeSrc":"6803:6:36","nodeType":"YulIdentifier","src":"6803:6:36"},"nativeSrc":"6803:35:36","nodeType":"YulFunctionCall","src":"6803:35:36"},"nativeSrc":"6800:55:36","nodeType":"YulIf","src":"6800:55:36"}]},"name":"abi_decode_uint8","nativeSrc":"6705:156:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"6731:6:36","nodeType":"YulTypedName","src":"6731:6:36","type":""}],"returnVariables":[{"name":"value","nativeSrc":"6742:5:36","nodeType":"YulTypedName","src":"6742:5:36","type":""}],"src":"6705:156:36"},{"body":{"nativeSrc":"7056:635:36","nodeType":"YulBlock","src":"7056:635:36","statements":[{"body":{"nativeSrc":"7103:16:36","nodeType":"YulBlock","src":"7103:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7112:1:36","nodeType":"YulLiteral","src":"7112:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7115:1:36","nodeType":"YulLiteral","src":"7115:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7105:6:36","nodeType":"YulIdentifier","src":"7105:6:36"},"nativeSrc":"7105:12:36","nodeType":"YulFunctionCall","src":"7105:12:36"},"nativeSrc":"7105:12:36","nodeType":"YulExpressionStatement","src":"7105:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7077:7:36","nodeType":"YulIdentifier","src":"7077:7:36"},{"name":"headStart","nativeSrc":"7086:9:36","nodeType":"YulIdentifier","src":"7086:9:36"}],"functionName":{"name":"sub","nativeSrc":"7073:3:36","nodeType":"YulIdentifier","src":"7073:3:36"},"nativeSrc":"7073:23:36","nodeType":"YulFunctionCall","src":"7073:23:36"},{"kind":"number","nativeSrc":"7098:3:36","nodeType":"YulLiteral","src":"7098:3:36","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"7069:3:36","nodeType":"YulIdentifier","src":"7069:3:36"},"nativeSrc":"7069:33:36","nodeType":"YulFunctionCall","src":"7069:33:36"},"nativeSrc":"7066:53:36","nodeType":"YulIf","src":"7066:53:36"},{"nativeSrc":"7128:33:36","nodeType":"YulAssignment","src":"7128:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"7151:9:36","nodeType":"YulIdentifier","src":"7151:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"7138:12:36","nodeType":"YulIdentifier","src":"7138:12:36"},"nativeSrc":"7138:23:36","nodeType":"YulFunctionCall","src":"7138:23:36"},"variableNames":[{"name":"value0","nativeSrc":"7128:6:36","nodeType":"YulIdentifier","src":"7128:6:36"}]},{"nativeSrc":"7170:46:36","nodeType":"YulVariableDeclaration","src":"7170:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7201:9:36","nodeType":"YulIdentifier","src":"7201:9:36"},{"kind":"number","nativeSrc":"7212:2:36","nodeType":"YulLiteral","src":"7212:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7197:3:36","nodeType":"YulIdentifier","src":"7197:3:36"},"nativeSrc":"7197:18:36","nodeType":"YulFunctionCall","src":"7197:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7184:12:36","nodeType":"YulIdentifier","src":"7184:12:36"},"nativeSrc":"7184:32:36","nodeType":"YulFunctionCall","src":"7184:32:36"},"variables":[{"name":"offset","nativeSrc":"7174:6:36","nodeType":"YulTypedName","src":"7174:6:36","type":""}]},{"body":{"nativeSrc":"7259:16:36","nodeType":"YulBlock","src":"7259:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7268:1:36","nodeType":"YulLiteral","src":"7268:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7271:1:36","nodeType":"YulLiteral","src":"7271:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7261:6:36","nodeType":"YulIdentifier","src":"7261:6:36"},"nativeSrc":"7261:12:36","nodeType":"YulFunctionCall","src":"7261:12:36"},"nativeSrc":"7261:12:36","nodeType":"YulExpressionStatement","src":"7261:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7231:6:36","nodeType":"YulIdentifier","src":"7231:6:36"},{"kind":"number","nativeSrc":"7239:18:36","nodeType":"YulLiteral","src":"7239:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7228:2:36","nodeType":"YulIdentifier","src":"7228:2:36"},"nativeSrc":"7228:30:36","nodeType":"YulFunctionCall","src":"7228:30:36"},"nativeSrc":"7225:50:36","nodeType":"YulIf","src":"7225:50:36"},{"nativeSrc":"7284:85:36","nodeType":"YulVariableDeclaration","src":"7284:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7341:9:36","nodeType":"YulIdentifier","src":"7341:9:36"},{"name":"offset","nativeSrc":"7352:6:36","nodeType":"YulIdentifier","src":"7352:6:36"}],"functionName":{"name":"add","nativeSrc":"7337:3:36","nodeType":"YulIdentifier","src":"7337:3:36"},"nativeSrc":"7337:22:36","nodeType":"YulFunctionCall","src":"7337:22:36"},{"name":"dataEnd","nativeSrc":"7361:7:36","nodeType":"YulIdentifier","src":"7361:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"7310:26:36","nodeType":"YulIdentifier","src":"7310:26:36"},"nativeSrc":"7310:59:36","nodeType":"YulFunctionCall","src":"7310:59:36"},"variables":[{"name":"value1_1","nativeSrc":"7288:8:36","nodeType":"YulTypedName","src":"7288:8:36","type":""},{"name":"value2_1","nativeSrc":"7298:8:36","nodeType":"YulTypedName","src":"7298:8:36","type":""}]},{"nativeSrc":"7378:18:36","nodeType":"YulAssignment","src":"7378:18:36","value":{"name":"value1_1","nativeSrc":"7388:8:36","nodeType":"YulIdentifier","src":"7388:8:36"},"variableNames":[{"name":"value1","nativeSrc":"7378:6:36","nodeType":"YulIdentifier","src":"7378:6:36"}]},{"nativeSrc":"7405:18:36","nodeType":"YulAssignment","src":"7405:18:36","value":{"name":"value2_1","nativeSrc":"7415:8:36","nodeType":"YulIdentifier","src":"7415:8:36"},"variableNames":[{"name":"value2","nativeSrc":"7405:6:36","nodeType":"YulIdentifier","src":"7405:6:36"}]},{"nativeSrc":"7432:42:36","nodeType":"YulAssignment","src":"7432:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7459:9:36","nodeType":"YulIdentifier","src":"7459:9:36"},{"kind":"number","nativeSrc":"7470:2:36","nodeType":"YulLiteral","src":"7470:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7455:3:36","nodeType":"YulIdentifier","src":"7455:3:36"},"nativeSrc":"7455:18:36","nodeType":"YulFunctionCall","src":"7455:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7442:12:36","nodeType":"YulIdentifier","src":"7442:12:36"},"nativeSrc":"7442:32:36","nodeType":"YulFunctionCall","src":"7442:32:36"},"variableNames":[{"name":"value3","nativeSrc":"7432:6:36","nodeType":"YulIdentifier","src":"7432:6:36"}]},{"nativeSrc":"7483:42:36","nodeType":"YulAssignment","src":"7483:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7510:9:36","nodeType":"YulIdentifier","src":"7510:9:36"},{"kind":"number","nativeSrc":"7521:2:36","nodeType":"YulLiteral","src":"7521:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7506:3:36","nodeType":"YulIdentifier","src":"7506:3:36"},"nativeSrc":"7506:18:36","nodeType":"YulFunctionCall","src":"7506:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7493:12:36","nodeType":"YulIdentifier","src":"7493:12:36"},"nativeSrc":"7493:32:36","nodeType":"YulFunctionCall","src":"7493:32:36"},"variableNames":[{"name":"value4","nativeSrc":"7483:6:36","nodeType":"YulIdentifier","src":"7483:6:36"}]},{"nativeSrc":"7534:47:36","nodeType":"YulAssignment","src":"7534:47:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7565:9:36","nodeType":"YulIdentifier","src":"7565:9:36"},{"kind":"number","nativeSrc":"7576:3:36","nodeType":"YulLiteral","src":"7576:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7561:3:36","nodeType":"YulIdentifier","src":"7561:3:36"},"nativeSrc":"7561:19:36","nodeType":"YulFunctionCall","src":"7561:19:36"}],"functionName":{"name":"abi_decode_uint8","nativeSrc":"7544:16:36","nodeType":"YulIdentifier","src":"7544:16:36"},"nativeSrc":"7544:37:36","nodeType":"YulFunctionCall","src":"7544:37:36"},"variableNames":[{"name":"value5","nativeSrc":"7534:6:36","nodeType":"YulIdentifier","src":"7534:6:36"}]},{"nativeSrc":"7590:43:36","nodeType":"YulAssignment","src":"7590:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7617:9:36","nodeType":"YulIdentifier","src":"7617:9:36"},{"kind":"number","nativeSrc":"7628:3:36","nodeType":"YulLiteral","src":"7628:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7613:3:36","nodeType":"YulIdentifier","src":"7613:3:36"},"nativeSrc":"7613:19:36","nodeType":"YulFunctionCall","src":"7613:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"7600:12:36","nodeType":"YulIdentifier","src":"7600:12:36"},"nativeSrc":"7600:33:36","nodeType":"YulFunctionCall","src":"7600:33:36"},"variableNames":[{"name":"value6","nativeSrc":"7590:6:36","nodeType":"YulIdentifier","src":"7590:6:36"}]},{"nativeSrc":"7642:43:36","nodeType":"YulAssignment","src":"7642:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7669:9:36","nodeType":"YulIdentifier","src":"7669:9:36"},{"kind":"number","nativeSrc":"7680:3:36","nodeType":"YulLiteral","src":"7680:3:36","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"7665:3:36","nodeType":"YulIdentifier","src":"7665:3:36"},"nativeSrc":"7665:19:36","nodeType":"YulFunctionCall","src":"7665:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"7652:12:36","nodeType":"YulIdentifier","src":"7652:12:36"},"nativeSrc":"7652:33:36","nodeType":"YulFunctionCall","src":"7652:33:36"},"variableNames":[{"name":"value7","nativeSrc":"7642:6:36","nodeType":"YulIdentifier","src":"7642:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32","nativeSrc":"6866:825:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6966:9:36","nodeType":"YulTypedName","src":"6966:9:36","type":""},{"name":"dataEnd","nativeSrc":"6977:7:36","nodeType":"YulTypedName","src":"6977:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6989:6:36","nodeType":"YulTypedName","src":"6989:6:36","type":""},{"name":"value1","nativeSrc":"6997:6:36","nodeType":"YulTypedName","src":"6997:6:36","type":""},{"name":"value2","nativeSrc":"7005:6:36","nodeType":"YulTypedName","src":"7005:6:36","type":""},{"name":"value3","nativeSrc":"7013:6:36","nodeType":"YulTypedName","src":"7013:6:36","type":""},{"name":"value4","nativeSrc":"7021:6:36","nodeType":"YulTypedName","src":"7021:6:36","type":""},{"name":"value5","nativeSrc":"7029:6:36","nodeType":"YulTypedName","src":"7029:6:36","type":""},{"name":"value6","nativeSrc":"7037:6:36","nodeType":"YulTypedName","src":"7037:6:36","type":""},{"name":"value7","nativeSrc":"7045:6:36","nodeType":"YulTypedName","src":"7045:6:36","type":""}],"src":"6866:825:36"},{"body":{"nativeSrc":"7871:579:36","nodeType":"YulBlock","src":"7871:579:36","statements":[{"body":{"nativeSrc":"7918:16:36","nodeType":"YulBlock","src":"7918:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7927:1:36","nodeType":"YulLiteral","src":"7927:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7930:1:36","nodeType":"YulLiteral","src":"7930:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7920:6:36","nodeType":"YulIdentifier","src":"7920:6:36"},"nativeSrc":"7920:12:36","nodeType":"YulFunctionCall","src":"7920:12:36"},"nativeSrc":"7920:12:36","nodeType":"YulExpressionStatement","src":"7920:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7892:7:36","nodeType":"YulIdentifier","src":"7892:7:36"},{"name":"headStart","nativeSrc":"7901:9:36","nodeType":"YulIdentifier","src":"7901:9:36"}],"functionName":{"name":"sub","nativeSrc":"7888:3:36","nodeType":"YulIdentifier","src":"7888:3:36"},"nativeSrc":"7888:23:36","nodeType":"YulFunctionCall","src":"7888:23:36"},{"kind":"number","nativeSrc":"7913:3:36","nodeType":"YulLiteral","src":"7913:3:36","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"7884:3:36","nodeType":"YulIdentifier","src":"7884:3:36"},"nativeSrc":"7884:33:36","nodeType":"YulFunctionCall","src":"7884:33:36"},"nativeSrc":"7881:53:36","nodeType":"YulIf","src":"7881:53:36"},{"nativeSrc":"7943:33:36","nodeType":"YulAssignment","src":"7943:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"7966:9:36","nodeType":"YulIdentifier","src":"7966:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"7953:12:36","nodeType":"YulIdentifier","src":"7953:12:36"},"nativeSrc":"7953:23:36","nodeType":"YulFunctionCall","src":"7953:23:36"},"variableNames":[{"name":"value0","nativeSrc":"7943:6:36","nodeType":"YulIdentifier","src":"7943:6:36"}]},{"nativeSrc":"7985:42:36","nodeType":"YulAssignment","src":"7985:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8012:9:36","nodeType":"YulIdentifier","src":"8012:9:36"},{"kind":"number","nativeSrc":"8023:2:36","nodeType":"YulLiteral","src":"8023:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8008:3:36","nodeType":"YulIdentifier","src":"8008:3:36"},"nativeSrc":"8008:18:36","nodeType":"YulFunctionCall","src":"8008:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"7995:12:36","nodeType":"YulIdentifier","src":"7995:12:36"},"nativeSrc":"7995:32:36","nodeType":"YulFunctionCall","src":"7995:32:36"},"variableNames":[{"name":"value1","nativeSrc":"7985:6:36","nodeType":"YulIdentifier","src":"7985:6:36"}]},{"nativeSrc":"8036:46:36","nodeType":"YulVariableDeclaration","src":"8036:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8067:9:36","nodeType":"YulIdentifier","src":"8067:9:36"},{"kind":"number","nativeSrc":"8078:2:36","nodeType":"YulLiteral","src":"8078:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8063:3:36","nodeType":"YulIdentifier","src":"8063:3:36"},"nativeSrc":"8063:18:36","nodeType":"YulFunctionCall","src":"8063:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8050:12:36","nodeType":"YulIdentifier","src":"8050:12:36"},"nativeSrc":"8050:32:36","nodeType":"YulFunctionCall","src":"8050:32:36"},"variables":[{"name":"offset","nativeSrc":"8040:6:36","nodeType":"YulTypedName","src":"8040:6:36","type":""}]},{"body":{"nativeSrc":"8125:16:36","nodeType":"YulBlock","src":"8125:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8134:1:36","nodeType":"YulLiteral","src":"8134:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8137:1:36","nodeType":"YulLiteral","src":"8137:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8127:6:36","nodeType":"YulIdentifier","src":"8127:6:36"},"nativeSrc":"8127:12:36","nodeType":"YulFunctionCall","src":"8127:12:36"},"nativeSrc":"8127:12:36","nodeType":"YulExpressionStatement","src":"8127:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8097:6:36","nodeType":"YulIdentifier","src":"8097:6:36"},{"kind":"number","nativeSrc":"8105:18:36","nodeType":"YulLiteral","src":"8105:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8094:2:36","nodeType":"YulIdentifier","src":"8094:2:36"},"nativeSrc":"8094:30:36","nodeType":"YulFunctionCall","src":"8094:30:36"},"nativeSrc":"8091:50:36","nodeType":"YulIf","src":"8091:50:36"},{"nativeSrc":"8150:85:36","nodeType":"YulVariableDeclaration","src":"8150:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8207:9:36","nodeType":"YulIdentifier","src":"8207:9:36"},{"name":"offset","nativeSrc":"8218:6:36","nodeType":"YulIdentifier","src":"8218:6:36"}],"functionName":{"name":"add","nativeSrc":"8203:3:36","nodeType":"YulIdentifier","src":"8203:3:36"},"nativeSrc":"8203:22:36","nodeType":"YulFunctionCall","src":"8203:22:36"},{"name":"dataEnd","nativeSrc":"8227:7:36","nodeType":"YulIdentifier","src":"8227:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"8176:26:36","nodeType":"YulIdentifier","src":"8176:26:36"},"nativeSrc":"8176:59:36","nodeType":"YulFunctionCall","src":"8176:59:36"},"variables":[{"name":"value2_1","nativeSrc":"8154:8:36","nodeType":"YulTypedName","src":"8154:8:36","type":""},{"name":"value3_1","nativeSrc":"8164:8:36","nodeType":"YulTypedName","src":"8164:8:36","type":""}]},{"nativeSrc":"8244:18:36","nodeType":"YulAssignment","src":"8244:18:36","value":{"name":"value2_1","nativeSrc":"8254:8:36","nodeType":"YulIdentifier","src":"8254:8:36"},"variableNames":[{"name":"value2","nativeSrc":"8244:6:36","nodeType":"YulIdentifier","src":"8244:6:36"}]},{"nativeSrc":"8271:18:36","nodeType":"YulAssignment","src":"8271:18:36","value":{"name":"value3_1","nativeSrc":"8281:8:36","nodeType":"YulIdentifier","src":"8281:8:36"},"variableNames":[{"name":"value3","nativeSrc":"8271:6:36","nodeType":"YulIdentifier","src":"8271:6:36"}]},{"nativeSrc":"8298:42:36","nodeType":"YulAssignment","src":"8298:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8325:9:36","nodeType":"YulIdentifier","src":"8325:9:36"},{"kind":"number","nativeSrc":"8336:2:36","nodeType":"YulLiteral","src":"8336:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8321:3:36","nodeType":"YulIdentifier","src":"8321:3:36"},"nativeSrc":"8321:18:36","nodeType":"YulFunctionCall","src":"8321:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8308:12:36","nodeType":"YulIdentifier","src":"8308:12:36"},"nativeSrc":"8308:32:36","nodeType":"YulFunctionCall","src":"8308:32:36"},"variableNames":[{"name":"value4","nativeSrc":"8298:6:36","nodeType":"YulIdentifier","src":"8298:6:36"}]},{"nativeSrc":"8349:43:36","nodeType":"YulAssignment","src":"8349:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8376:9:36","nodeType":"YulIdentifier","src":"8376:9:36"},{"kind":"number","nativeSrc":"8387:3:36","nodeType":"YulLiteral","src":"8387:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8372:3:36","nodeType":"YulIdentifier","src":"8372:3:36"},"nativeSrc":"8372:19:36","nodeType":"YulFunctionCall","src":"8372:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"8359:12:36","nodeType":"YulIdentifier","src":"8359:12:36"},"nativeSrc":"8359:33:36","nodeType":"YulFunctionCall","src":"8359:33:36"},"variableNames":[{"name":"value5","nativeSrc":"8349:6:36","nodeType":"YulIdentifier","src":"8349:6:36"}]},{"nativeSrc":"8401:43:36","nodeType":"YulAssignment","src":"8401:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8428:9:36","nodeType":"YulIdentifier","src":"8428:9:36"},{"kind":"number","nativeSrc":"8439:3:36","nodeType":"YulLiteral","src":"8439:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"8424:3:36","nodeType":"YulIdentifier","src":"8424:3:36"},"nativeSrc":"8424:19:36","nodeType":"YulFunctionCall","src":"8424:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"8411:12:36","nodeType":"YulIdentifier","src":"8411:12:36"},"nativeSrc":"8411:33:36","nodeType":"YulFunctionCall","src":"8411:33:36"},"variableNames":[{"name":"value6","nativeSrc":"8401:6:36","nodeType":"YulIdentifier","src":"8401:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptrt_uint256t_uint256t_bytes32","nativeSrc":"7696:754:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7789:9:36","nodeType":"YulTypedName","src":"7789:9:36","type":""},{"name":"dataEnd","nativeSrc":"7800:7:36","nodeType":"YulTypedName","src":"7800:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7812:6:36","nodeType":"YulTypedName","src":"7812:6:36","type":""},{"name":"value1","nativeSrc":"7820:6:36","nodeType":"YulTypedName","src":"7820:6:36","type":""},{"name":"value2","nativeSrc":"7828:6:36","nodeType":"YulTypedName","src":"7828:6:36","type":""},{"name":"value3","nativeSrc":"7836:6:36","nodeType":"YulTypedName","src":"7836:6:36","type":""},{"name":"value4","nativeSrc":"7844:6:36","nodeType":"YulTypedName","src":"7844:6:36","type":""},{"name":"value5","nativeSrc":"7852:6:36","nodeType":"YulTypedName","src":"7852:6:36","type":""},{"name":"value6","nativeSrc":"7860:6:36","nodeType":"YulTypedName","src":"7860:6:36","type":""}],"src":"7696:754:36"},{"body":{"nativeSrc":"8542:161:36","nodeType":"YulBlock","src":"8542:161:36","statements":[{"body":{"nativeSrc":"8588:16:36","nodeType":"YulBlock","src":"8588:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8597:1:36","nodeType":"YulLiteral","src":"8597:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8600:1:36","nodeType":"YulLiteral","src":"8600:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8590:6:36","nodeType":"YulIdentifier","src":"8590:6:36"},"nativeSrc":"8590:12:36","nodeType":"YulFunctionCall","src":"8590:12:36"},"nativeSrc":"8590:12:36","nodeType":"YulExpressionStatement","src":"8590:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8563:7:36","nodeType":"YulIdentifier","src":"8563:7:36"},{"name":"headStart","nativeSrc":"8572:9:36","nodeType":"YulIdentifier","src":"8572:9:36"}],"functionName":{"name":"sub","nativeSrc":"8559:3:36","nodeType":"YulIdentifier","src":"8559:3:36"},"nativeSrc":"8559:23:36","nodeType":"YulFunctionCall","src":"8559:23:36"},{"kind":"number","nativeSrc":"8584:2:36","nodeType":"YulLiteral","src":"8584:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8555:3:36","nodeType":"YulIdentifier","src":"8555:3:36"},"nativeSrc":"8555:32:36","nodeType":"YulFunctionCall","src":"8555:32:36"},"nativeSrc":"8552:52:36","nodeType":"YulIf","src":"8552:52:36"},{"nativeSrc":"8613:33:36","nodeType":"YulAssignment","src":"8613:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"8636:9:36","nodeType":"YulIdentifier","src":"8636:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"8623:12:36","nodeType":"YulIdentifier","src":"8623:12:36"},"nativeSrc":"8623:23:36","nodeType":"YulFunctionCall","src":"8623:23:36"},"variableNames":[{"name":"value0","nativeSrc":"8613:6:36","nodeType":"YulIdentifier","src":"8613:6:36"}]},{"nativeSrc":"8655:42:36","nodeType":"YulAssignment","src":"8655:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8682:9:36","nodeType":"YulIdentifier","src":"8682:9:36"},{"kind":"number","nativeSrc":"8693:2:36","nodeType":"YulLiteral","src":"8693:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8678:3:36","nodeType":"YulIdentifier","src":"8678:3:36"},"nativeSrc":"8678:18:36","nodeType":"YulFunctionCall","src":"8678:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8665:12:36","nodeType":"YulIdentifier","src":"8665:12:36"},"nativeSrc":"8665:32:36","nodeType":"YulFunctionCall","src":"8665:32:36"},"variableNames":[{"name":"value1","nativeSrc":"8655:6:36","nodeType":"YulIdentifier","src":"8655:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nativeSrc":"8455:248:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8500:9:36","nodeType":"YulTypedName","src":"8500:9:36","type":""},{"name":"dataEnd","nativeSrc":"8511:7:36","nodeType":"YulTypedName","src":"8511:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8523:6:36","nodeType":"YulTypedName","src":"8523:6:36","type":""},{"name":"value1","nativeSrc":"8531:6:36","nodeType":"YulTypedName","src":"8531:6:36","type":""}],"src":"8455:248:36"},{"body":{"nativeSrc":"8812:212:36","nodeType":"YulBlock","src":"8812:212:36","statements":[{"body":{"nativeSrc":"8858:16:36","nodeType":"YulBlock","src":"8858:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8867:1:36","nodeType":"YulLiteral","src":"8867:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8870:1:36","nodeType":"YulLiteral","src":"8870:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8860:6:36","nodeType":"YulIdentifier","src":"8860:6:36"},"nativeSrc":"8860:12:36","nodeType":"YulFunctionCall","src":"8860:12:36"},"nativeSrc":"8860:12:36","nodeType":"YulExpressionStatement","src":"8860:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8833:7:36","nodeType":"YulIdentifier","src":"8833:7:36"},{"name":"headStart","nativeSrc":"8842:9:36","nodeType":"YulIdentifier","src":"8842:9:36"}],"functionName":{"name":"sub","nativeSrc":"8829:3:36","nodeType":"YulIdentifier","src":"8829:3:36"},"nativeSrc":"8829:23:36","nodeType":"YulFunctionCall","src":"8829:23:36"},{"kind":"number","nativeSrc":"8854:2:36","nodeType":"YulLiteral","src":"8854:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"8825:3:36","nodeType":"YulIdentifier","src":"8825:3:36"},"nativeSrc":"8825:32:36","nodeType":"YulFunctionCall","src":"8825:32:36"},"nativeSrc":"8822:52:36","nodeType":"YulIf","src":"8822:52:36"},{"nativeSrc":"8883:33:36","nodeType":"YulAssignment","src":"8883:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"8906:9:36","nodeType":"YulIdentifier","src":"8906:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"8893:12:36","nodeType":"YulIdentifier","src":"8893:12:36"},"nativeSrc":"8893:23:36","nodeType":"YulFunctionCall","src":"8893:23:36"},"variableNames":[{"name":"value0","nativeSrc":"8883:6:36","nodeType":"YulIdentifier","src":"8883:6:36"}]},{"nativeSrc":"8925:42:36","nodeType":"YulAssignment","src":"8925:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8952:9:36","nodeType":"YulIdentifier","src":"8952:9:36"},{"kind":"number","nativeSrc":"8963:2:36","nodeType":"YulLiteral","src":"8963:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8948:3:36","nodeType":"YulIdentifier","src":"8948:3:36"},"nativeSrc":"8948:18:36","nodeType":"YulFunctionCall","src":"8948:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8935:12:36","nodeType":"YulIdentifier","src":"8935:12:36"},"nativeSrc":"8935:32:36","nodeType":"YulFunctionCall","src":"8935:32:36"},"variableNames":[{"name":"value1","nativeSrc":"8925:6:36","nodeType":"YulIdentifier","src":"8925:6:36"}]},{"nativeSrc":"8976:42:36","nodeType":"YulAssignment","src":"8976:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9003:9:36","nodeType":"YulIdentifier","src":"9003:9:36"},{"kind":"number","nativeSrc":"9014:2:36","nodeType":"YulLiteral","src":"9014:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8999:3:36","nodeType":"YulIdentifier","src":"8999:3:36"},"nativeSrc":"8999:18:36","nodeType":"YulFunctionCall","src":"8999:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"8986:12:36","nodeType":"YulIdentifier","src":"8986:12:36"},"nativeSrc":"8986:32:36","nodeType":"YulFunctionCall","src":"8986:32:36"},"variableNames":[{"name":"value2","nativeSrc":"8976:6:36","nodeType":"YulIdentifier","src":"8976:6:36"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes32","nativeSrc":"8708:316:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8762:9:36","nodeType":"YulTypedName","src":"8762:9:36","type":""},{"name":"dataEnd","nativeSrc":"8773:7:36","nodeType":"YulTypedName","src":"8773:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8785:6:36","nodeType":"YulTypedName","src":"8785:6:36","type":""},{"name":"value1","nativeSrc":"8793:6:36","nodeType":"YulTypedName","src":"8793:6:36","type":""},{"name":"value2","nativeSrc":"8801:6:36","nodeType":"YulTypedName","src":"8801:6:36","type":""}],"src":"8708:316:36"},{"body":{"nativeSrc":"9182:372:36","nodeType":"YulBlock","src":"9182:372:36","statements":[{"body":{"nativeSrc":"9229:16:36","nodeType":"YulBlock","src":"9229:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9238:1:36","nodeType":"YulLiteral","src":"9238:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9241:1:36","nodeType":"YulLiteral","src":"9241:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9231:6:36","nodeType":"YulIdentifier","src":"9231:6:36"},"nativeSrc":"9231:12:36","nodeType":"YulFunctionCall","src":"9231:12:36"},"nativeSrc":"9231:12:36","nodeType":"YulExpressionStatement","src":"9231:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9203:7:36","nodeType":"YulIdentifier","src":"9203:7:36"},{"name":"headStart","nativeSrc":"9212:9:36","nodeType":"YulIdentifier","src":"9212:9:36"}],"functionName":{"name":"sub","nativeSrc":"9199:3:36","nodeType":"YulIdentifier","src":"9199:3:36"},"nativeSrc":"9199:23:36","nodeType":"YulFunctionCall","src":"9199:23:36"},{"kind":"number","nativeSrc":"9224:3:36","nodeType":"YulLiteral","src":"9224:3:36","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"9195:3:36","nodeType":"YulIdentifier","src":"9195:3:36"},"nativeSrc":"9195:33:36","nodeType":"YulFunctionCall","src":"9195:33:36"},"nativeSrc":"9192:53:36","nodeType":"YulIf","src":"9192:53:36"},{"nativeSrc":"9254:33:36","nodeType":"YulAssignment","src":"9254:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"9277:9:36","nodeType":"YulIdentifier","src":"9277:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"9264:12:36","nodeType":"YulIdentifier","src":"9264:12:36"},"nativeSrc":"9264:23:36","nodeType":"YulFunctionCall","src":"9264:23:36"},"variableNames":[{"name":"value0","nativeSrc":"9254:6:36","nodeType":"YulIdentifier","src":"9254:6:36"}]},{"nativeSrc":"9296:42:36","nodeType":"YulAssignment","src":"9296:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9323:9:36","nodeType":"YulIdentifier","src":"9323:9:36"},{"kind":"number","nativeSrc":"9334:2:36","nodeType":"YulLiteral","src":"9334:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9319:3:36","nodeType":"YulIdentifier","src":"9319:3:36"},"nativeSrc":"9319:18:36","nodeType":"YulFunctionCall","src":"9319:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9306:12:36","nodeType":"YulIdentifier","src":"9306:12:36"},"nativeSrc":"9306:32:36","nodeType":"YulFunctionCall","src":"9306:32:36"},"variableNames":[{"name":"value1","nativeSrc":"9296:6:36","nodeType":"YulIdentifier","src":"9296:6:36"}]},{"nativeSrc":"9347:42:36","nodeType":"YulAssignment","src":"9347:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9374:9:36","nodeType":"YulIdentifier","src":"9374:9:36"},{"kind":"number","nativeSrc":"9385:2:36","nodeType":"YulLiteral","src":"9385:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9370:3:36","nodeType":"YulIdentifier","src":"9370:3:36"},"nativeSrc":"9370:18:36","nodeType":"YulFunctionCall","src":"9370:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9357:12:36","nodeType":"YulIdentifier","src":"9357:12:36"},"nativeSrc":"9357:32:36","nodeType":"YulFunctionCall","src":"9357:32:36"},"variableNames":[{"name":"value2","nativeSrc":"9347:6:36","nodeType":"YulIdentifier","src":"9347:6:36"}]},{"nativeSrc":"9398:46:36","nodeType":"YulAssignment","src":"9398:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9429:9:36","nodeType":"YulIdentifier","src":"9429:9:36"},{"kind":"number","nativeSrc":"9440:2:36","nodeType":"YulLiteral","src":"9440:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9425:3:36","nodeType":"YulIdentifier","src":"9425:3:36"},"nativeSrc":"9425:18:36","nodeType":"YulFunctionCall","src":"9425:18:36"}],"functionName":{"name":"abi_decode_uint8","nativeSrc":"9408:16:36","nodeType":"YulIdentifier","src":"9408:16:36"},"nativeSrc":"9408:36:36","nodeType":"YulFunctionCall","src":"9408:36:36"},"variableNames":[{"name":"value3","nativeSrc":"9398:6:36","nodeType":"YulIdentifier","src":"9398:6:36"}]},{"nativeSrc":"9453:43:36","nodeType":"YulAssignment","src":"9453:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9480:9:36","nodeType":"YulIdentifier","src":"9480:9:36"},{"kind":"number","nativeSrc":"9491:3:36","nodeType":"YulLiteral","src":"9491:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9476:3:36","nodeType":"YulIdentifier","src":"9476:3:36"},"nativeSrc":"9476:19:36","nodeType":"YulFunctionCall","src":"9476:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"9463:12:36","nodeType":"YulIdentifier","src":"9463:12:36"},"nativeSrc":"9463:33:36","nodeType":"YulFunctionCall","src":"9463:33:36"},"variableNames":[{"name":"value4","nativeSrc":"9453:6:36","nodeType":"YulIdentifier","src":"9453:6:36"}]},{"nativeSrc":"9505:43:36","nodeType":"YulAssignment","src":"9505:43:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9532:9:36","nodeType":"YulIdentifier","src":"9532:9:36"},{"kind":"number","nativeSrc":"9543:3:36","nodeType":"YulLiteral","src":"9543:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"9528:3:36","nodeType":"YulIdentifier","src":"9528:3:36"},"nativeSrc":"9528:19:36","nodeType":"YulFunctionCall","src":"9528:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"9515:12:36","nodeType":"YulIdentifier","src":"9515:12:36"},"nativeSrc":"9515:33:36","nodeType":"YulFunctionCall","src":"9515:33:36"},"variableNames":[{"name":"value5","nativeSrc":"9505:6:36","nodeType":"YulIdentifier","src":"9505:6:36"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32","nativeSrc":"9029:525:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9108:9:36","nodeType":"YulTypedName","src":"9108:9:36","type":""},{"name":"dataEnd","nativeSrc":"9119:7:36","nodeType":"YulTypedName","src":"9119:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9131:6:36","nodeType":"YulTypedName","src":"9131:6:36","type":""},{"name":"value1","nativeSrc":"9139:6:36","nodeType":"YulTypedName","src":"9139:6:36","type":""},{"name":"value2","nativeSrc":"9147:6:36","nodeType":"YulTypedName","src":"9147:6:36","type":""},{"name":"value3","nativeSrc":"9155:6:36","nodeType":"YulTypedName","src":"9155:6:36","type":""},{"name":"value4","nativeSrc":"9163:6:36","nodeType":"YulTypedName","src":"9163:6:36","type":""},{"name":"value5","nativeSrc":"9171:6:36","nodeType":"YulTypedName","src":"9171:6:36","type":""}],"src":"9029:525:36"},{"body":{"nativeSrc":"9700:475:36","nodeType":"YulBlock","src":"9700:475:36","statements":[{"body":{"nativeSrc":"9747:16:36","nodeType":"YulBlock","src":"9747:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9756:1:36","nodeType":"YulLiteral","src":"9756:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9759:1:36","nodeType":"YulLiteral","src":"9759:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9749:6:36","nodeType":"YulIdentifier","src":"9749:6:36"},"nativeSrc":"9749:12:36","nodeType":"YulFunctionCall","src":"9749:12:36"},"nativeSrc":"9749:12:36","nodeType":"YulExpressionStatement","src":"9749:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9721:7:36","nodeType":"YulIdentifier","src":"9721:7:36"},{"name":"headStart","nativeSrc":"9730:9:36","nodeType":"YulIdentifier","src":"9730:9:36"}],"functionName":{"name":"sub","nativeSrc":"9717:3:36","nodeType":"YulIdentifier","src":"9717:3:36"},"nativeSrc":"9717:23:36","nodeType":"YulFunctionCall","src":"9717:23:36"},{"kind":"number","nativeSrc":"9742:3:36","nodeType":"YulLiteral","src":"9742:3:36","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9713:3:36","nodeType":"YulIdentifier","src":"9713:3:36"},"nativeSrc":"9713:33:36","nodeType":"YulFunctionCall","src":"9713:33:36"},"nativeSrc":"9710:53:36","nodeType":"YulIf","src":"9710:53:36"},{"nativeSrc":"9772:33:36","nodeType":"YulAssignment","src":"9772:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"9795:9:36","nodeType":"YulIdentifier","src":"9795:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"9782:12:36","nodeType":"YulIdentifier","src":"9782:12:36"},"nativeSrc":"9782:23:36","nodeType":"YulFunctionCall","src":"9782:23:36"},"variableNames":[{"name":"value0","nativeSrc":"9772:6:36","nodeType":"YulIdentifier","src":"9772:6:36"}]},{"nativeSrc":"9814:46:36","nodeType":"YulVariableDeclaration","src":"9814:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9845:9:36","nodeType":"YulIdentifier","src":"9845:9:36"},{"kind":"number","nativeSrc":"9856:2:36","nodeType":"YulLiteral","src":"9856:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9841:3:36","nodeType":"YulIdentifier","src":"9841:3:36"},"nativeSrc":"9841:18:36","nodeType":"YulFunctionCall","src":"9841:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9828:12:36","nodeType":"YulIdentifier","src":"9828:12:36"},"nativeSrc":"9828:32:36","nodeType":"YulFunctionCall","src":"9828:32:36"},"variables":[{"name":"offset","nativeSrc":"9818:6:36","nodeType":"YulTypedName","src":"9818:6:36","type":""}]},{"body":{"nativeSrc":"9903:16:36","nodeType":"YulBlock","src":"9903:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9912:1:36","nodeType":"YulLiteral","src":"9912:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9915:1:36","nodeType":"YulLiteral","src":"9915:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9905:6:36","nodeType":"YulIdentifier","src":"9905:6:36"},"nativeSrc":"9905:12:36","nodeType":"YulFunctionCall","src":"9905:12:36"},"nativeSrc":"9905:12:36","nodeType":"YulExpressionStatement","src":"9905:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9875:6:36","nodeType":"YulIdentifier","src":"9875:6:36"},{"kind":"number","nativeSrc":"9883:18:36","nodeType":"YulLiteral","src":"9883:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9872:2:36","nodeType":"YulIdentifier","src":"9872:2:36"},"nativeSrc":"9872:30:36","nodeType":"YulFunctionCall","src":"9872:30:36"},"nativeSrc":"9869:50:36","nodeType":"YulIf","src":"9869:50:36"},{"nativeSrc":"9928:85:36","nodeType":"YulVariableDeclaration","src":"9928:85:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9985:9:36","nodeType":"YulIdentifier","src":"9985:9:36"},{"name":"offset","nativeSrc":"9996:6:36","nodeType":"YulIdentifier","src":"9996:6:36"}],"functionName":{"name":"add","nativeSrc":"9981:3:36","nodeType":"YulIdentifier","src":"9981:3:36"},"nativeSrc":"9981:22:36","nodeType":"YulFunctionCall","src":"9981:22:36"},{"name":"dataEnd","nativeSrc":"10005:7:36","nodeType":"YulIdentifier","src":"10005:7:36"}],"functionName":{"name":"abi_decode_string_calldata","nativeSrc":"9954:26:36","nodeType":"YulIdentifier","src":"9954:26:36"},"nativeSrc":"9954:59:36","nodeType":"YulFunctionCall","src":"9954:59:36"},"variables":[{"name":"value1_1","nativeSrc":"9932:8:36","nodeType":"YulTypedName","src":"9932:8:36","type":""},{"name":"value2_1","nativeSrc":"9942:8:36","nodeType":"YulTypedName","src":"9942:8:36","type":""}]},{"nativeSrc":"10022:18:36","nodeType":"YulAssignment","src":"10022:18:36","value":{"name":"value1_1","nativeSrc":"10032:8:36","nodeType":"YulIdentifier","src":"10032:8:36"},"variableNames":[{"name":"value1","nativeSrc":"10022:6:36","nodeType":"YulIdentifier","src":"10022:6:36"}]},{"nativeSrc":"10049:18:36","nodeType":"YulAssignment","src":"10049:18:36","value":{"name":"value2_1","nativeSrc":"10059:8:36","nodeType":"YulIdentifier","src":"10059:8:36"},"variableNames":[{"name":"value2","nativeSrc":"10049:6:36","nodeType":"YulIdentifier","src":"10049:6:36"}]},{"nativeSrc":"10076:42:36","nodeType":"YulAssignment","src":"10076:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10103:9:36","nodeType":"YulIdentifier","src":"10103:9:36"},{"kind":"number","nativeSrc":"10114:2:36","nodeType":"YulLiteral","src":"10114:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10099:3:36","nodeType":"YulIdentifier","src":"10099:3:36"},"nativeSrc":"10099:18:36","nodeType":"YulFunctionCall","src":"10099:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"10086:12:36","nodeType":"YulIdentifier","src":"10086:12:36"},"nativeSrc":"10086:32:36","nodeType":"YulFunctionCall","src":"10086:32:36"},"variableNames":[{"name":"value3","nativeSrc":"10076:6:36","nodeType":"YulIdentifier","src":"10076:6:36"}]},{"nativeSrc":"10127:42:36","nodeType":"YulAssignment","src":"10127:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10154:9:36","nodeType":"YulIdentifier","src":"10154:9:36"},{"kind":"number","nativeSrc":"10165:2:36","nodeType":"YulLiteral","src":"10165:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10150:3:36","nodeType":"YulIdentifier","src":"10150:3:36"},"nativeSrc":"10150:18:36","nodeType":"YulFunctionCall","src":"10150:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"10137:12:36","nodeType":"YulIdentifier","src":"10137:12:36"},"nativeSrc":"10137:32:36","nodeType":"YulFunctionCall","src":"10137:32:36"},"variableNames":[{"name":"value4","nativeSrc":"10127:6:36","nodeType":"YulIdentifier","src":"10127:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32","nativeSrc":"9559:616:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9634:9:36","nodeType":"YulTypedName","src":"9634:9:36","type":""},{"name":"dataEnd","nativeSrc":"9645:7:36","nodeType":"YulTypedName","src":"9645:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9657:6:36","nodeType":"YulTypedName","src":"9657:6:36","type":""},{"name":"value1","nativeSrc":"9665:6:36","nodeType":"YulTypedName","src":"9665:6:36","type":""},{"name":"value2","nativeSrc":"9673:6:36","nodeType":"YulTypedName","src":"9673:6:36","type":""},{"name":"value3","nativeSrc":"9681:6:36","nodeType":"YulTypedName","src":"9681:6:36","type":""},{"name":"value4","nativeSrc":"9689:6:36","nodeType":"YulTypedName","src":"9689:6:36","type":""}],"src":"9559:616:36"},{"body":{"nativeSrc":"10339:363:36","nodeType":"YulBlock","src":"10339:363:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10356:9:36","nodeType":"YulIdentifier","src":"10356:9:36"},{"kind":"number","nativeSrc":"10367:2:36","nodeType":"YulLiteral","src":"10367:2:36","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"10349:6:36","nodeType":"YulIdentifier","src":"10349:6:36"},"nativeSrc":"10349:21:36","nodeType":"YulFunctionCall","src":"10349:21:36"},"nativeSrc":"10349:21:36","nodeType":"YulExpressionStatement","src":"10349:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10390:9:36","nodeType":"YulIdentifier","src":"10390:9:36"},{"kind":"number","nativeSrc":"10401:2:36","nodeType":"YulLiteral","src":"10401:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10386:3:36","nodeType":"YulIdentifier","src":"10386:3:36"},"nativeSrc":"10386:18:36","nodeType":"YulFunctionCall","src":"10386:18:36"},{"name":"value1","nativeSrc":"10406:6:36","nodeType":"YulIdentifier","src":"10406:6:36"}],"functionName":{"name":"mstore","nativeSrc":"10379:6:36","nodeType":"YulIdentifier","src":"10379:6:36"},"nativeSrc":"10379:34:36","nodeType":"YulFunctionCall","src":"10379:34:36"},"nativeSrc":"10379:34:36","nodeType":"YulExpressionStatement","src":"10379:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10439:9:36","nodeType":"YulIdentifier","src":"10439:9:36"},{"kind":"number","nativeSrc":"10450:2:36","nodeType":"YulLiteral","src":"10450:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10435:3:36","nodeType":"YulIdentifier","src":"10435:3:36"},"nativeSrc":"10435:18:36","nodeType":"YulFunctionCall","src":"10435:18:36"},{"name":"value0","nativeSrc":"10455:6:36","nodeType":"YulIdentifier","src":"10455:6:36"},{"name":"value1","nativeSrc":"10463:6:36","nodeType":"YulIdentifier","src":"10463:6:36"}],"functionName":{"name":"calldatacopy","nativeSrc":"10422:12:36","nodeType":"YulIdentifier","src":"10422:12:36"},"nativeSrc":"10422:48:36","nodeType":"YulFunctionCall","src":"10422:48:36"},"nativeSrc":"10422:48:36","nodeType":"YulExpressionStatement","src":"10422:48:36"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10494:9:36","nodeType":"YulIdentifier","src":"10494:9:36"},{"name":"value1","nativeSrc":"10505:6:36","nodeType":"YulIdentifier","src":"10505:6:36"}],"functionName":{"name":"add","nativeSrc":"10490:3:36","nodeType":"YulIdentifier","src":"10490:3:36"},"nativeSrc":"10490:22:36","nodeType":"YulFunctionCall","src":"10490:22:36"},{"kind":"number","nativeSrc":"10514:2:36","nodeType":"YulLiteral","src":"10514:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10486:3:36","nodeType":"YulIdentifier","src":"10486:3:36"},"nativeSrc":"10486:31:36","nodeType":"YulFunctionCall","src":"10486:31:36"},{"kind":"number","nativeSrc":"10519:1:36","nodeType":"YulLiteral","src":"10519:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"10479:6:36","nodeType":"YulIdentifier","src":"10479:6:36"},"nativeSrc":"10479:42:36","nodeType":"YulFunctionCall","src":"10479:42:36"},"nativeSrc":"10479:42:36","nodeType":"YulExpressionStatement","src":"10479:42:36"},{"nativeSrc":"10530:121:36","nodeType":"YulAssignment","src":"10530:121:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10546:9:36","nodeType":"YulIdentifier","src":"10546:9:36"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"10565:6:36","nodeType":"YulIdentifier","src":"10565:6:36"},{"kind":"number","nativeSrc":"10573:2:36","nodeType":"YulLiteral","src":"10573:2:36","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"10561:3:36","nodeType":"YulIdentifier","src":"10561:3:36"},"nativeSrc":"10561:15:36","nodeType":"YulFunctionCall","src":"10561:15:36"},{"kind":"number","nativeSrc":"10578:66:36","nodeType":"YulLiteral","src":"10578:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"10557:3:36","nodeType":"YulIdentifier","src":"10557:3:36"},"nativeSrc":"10557:88:36","nodeType":"YulFunctionCall","src":"10557:88:36"}],"functionName":{"name":"add","nativeSrc":"10542:3:36","nodeType":"YulIdentifier","src":"10542:3:36"},"nativeSrc":"10542:104:36","nodeType":"YulFunctionCall","src":"10542:104:36"},{"kind":"number","nativeSrc":"10648:2:36","nodeType":"YulLiteral","src":"10648:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10538:3:36","nodeType":"YulIdentifier","src":"10538:3:36"},"nativeSrc":"10538:113:36","nodeType":"YulFunctionCall","src":"10538:113:36"},"variableNames":[{"name":"tail","nativeSrc":"10530:4:36","nodeType":"YulIdentifier","src":"10530:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10671:9:36","nodeType":"YulIdentifier","src":"10671:9:36"},{"kind":"number","nativeSrc":"10682:4:36","nodeType":"YulLiteral","src":"10682:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10667:3:36","nodeType":"YulIdentifier","src":"10667:3:36"},"nativeSrc":"10667:20:36","nodeType":"YulFunctionCall","src":"10667:20:36"},{"name":"value2","nativeSrc":"10689:6:36","nodeType":"YulIdentifier","src":"10689:6:36"}],"functionName":{"name":"mstore","nativeSrc":"10660:6:36","nodeType":"YulIdentifier","src":"10660:6:36"},"nativeSrc":"10660:36:36","nodeType":"YulFunctionCall","src":"10660:36:36"},"nativeSrc":"10660:36:36","nodeType":"YulExpressionStatement","src":"10660:36:36"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed","nativeSrc":"10180:522:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10292:9:36","nodeType":"YulTypedName","src":"10292:9:36","type":""},{"name":"value2","nativeSrc":"10303:6:36","nodeType":"YulTypedName","src":"10303:6:36","type":""},{"name":"value1","nativeSrc":"10311:6:36","nodeType":"YulTypedName","src":"10311:6:36","type":""},{"name":"value0","nativeSrc":"10319:6:36","nodeType":"YulTypedName","src":"10319:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10330:4:36","nodeType":"YulTypedName","src":"10330:4:36","type":""}],"src":"10180:522:36"},{"body":{"nativeSrc":"10788:103:36","nodeType":"YulBlock","src":"10788:103:36","statements":[{"body":{"nativeSrc":"10834:16:36","nodeType":"YulBlock","src":"10834:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10843:1:36","nodeType":"YulLiteral","src":"10843:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"10846:1:36","nodeType":"YulLiteral","src":"10846:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10836:6:36","nodeType":"YulIdentifier","src":"10836:6:36"},"nativeSrc":"10836:12:36","nodeType":"YulFunctionCall","src":"10836:12:36"},"nativeSrc":"10836:12:36","nodeType":"YulExpressionStatement","src":"10836:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10809:7:36","nodeType":"YulIdentifier","src":"10809:7:36"},{"name":"headStart","nativeSrc":"10818:9:36","nodeType":"YulIdentifier","src":"10818:9:36"}],"functionName":{"name":"sub","nativeSrc":"10805:3:36","nodeType":"YulIdentifier","src":"10805:3:36"},"nativeSrc":"10805:23:36","nodeType":"YulFunctionCall","src":"10805:23:36"},{"kind":"number","nativeSrc":"10830:2:36","nodeType":"YulLiteral","src":"10830:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10801:3:36","nodeType":"YulIdentifier","src":"10801:3:36"},"nativeSrc":"10801:32:36","nodeType":"YulFunctionCall","src":"10801:32:36"},"nativeSrc":"10798:52:36","nodeType":"YulIf","src":"10798:52:36"},{"nativeSrc":"10859:26:36","nodeType":"YulAssignment","src":"10859:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"10875:9:36","nodeType":"YulIdentifier","src":"10875:9:36"}],"functionName":{"name":"mload","nativeSrc":"10869:5:36","nodeType":"YulIdentifier","src":"10869:5:36"},"nativeSrc":"10869:16:36","nodeType":"YulFunctionCall","src":"10869:16:36"},"variableNames":[{"name":"value0","nativeSrc":"10859:6:36","nodeType":"YulIdentifier","src":"10859:6:36"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"10707:184:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10754:9:36","nodeType":"YulTypedName","src":"10754:9:36","type":""},{"name":"dataEnd","nativeSrc":"10765:7:36","nodeType":"YulTypedName","src":"10765:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10777:6:36","nodeType":"YulTypedName","src":"10777:6:36","type":""}],"src":"10707:184:36"},{"body":{"nativeSrc":"10977:170:36","nodeType":"YulBlock","src":"10977:170:36","statements":[{"body":{"nativeSrc":"11023:16:36","nodeType":"YulBlock","src":"11023:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11032:1:36","nodeType":"YulLiteral","src":"11032:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"11035:1:36","nodeType":"YulLiteral","src":"11035:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11025:6:36","nodeType":"YulIdentifier","src":"11025:6:36"},"nativeSrc":"11025:12:36","nodeType":"YulFunctionCall","src":"11025:12:36"},"nativeSrc":"11025:12:36","nodeType":"YulExpressionStatement","src":"11025:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10998:7:36","nodeType":"YulIdentifier","src":"10998:7:36"},{"name":"headStart","nativeSrc":"11007:9:36","nodeType":"YulIdentifier","src":"11007:9:36"}],"functionName":{"name":"sub","nativeSrc":"10994:3:36","nodeType":"YulIdentifier","src":"10994:3:36"},"nativeSrc":"10994:23:36","nodeType":"YulFunctionCall","src":"10994:23:36"},{"kind":"number","nativeSrc":"11019:2:36","nodeType":"YulLiteral","src":"11019:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10990:3:36","nodeType":"YulIdentifier","src":"10990:3:36"},"nativeSrc":"10990:32:36","nodeType":"YulFunctionCall","src":"10990:32:36"},"nativeSrc":"10987:52:36","nodeType":"YulIf","src":"10987:52:36"},{"nativeSrc":"11048:29:36","nodeType":"YulVariableDeclaration","src":"11048:29:36","value":{"arguments":[{"name":"headStart","nativeSrc":"11067:9:36","nodeType":"YulIdentifier","src":"11067:9:36"}],"functionName":{"name":"mload","nativeSrc":"11061:5:36","nodeType":"YulIdentifier","src":"11061:5:36"},"nativeSrc":"11061:16:36","nodeType":"YulFunctionCall","src":"11061:16:36"},"variables":[{"name":"value","nativeSrc":"11052:5:36","nodeType":"YulTypedName","src":"11052:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11111:5:36","nodeType":"YulIdentifier","src":"11111:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11086:24:36","nodeType":"YulIdentifier","src":"11086:24:36"},"nativeSrc":"11086:31:36","nodeType":"YulFunctionCall","src":"11086:31:36"},"nativeSrc":"11086:31:36","nodeType":"YulExpressionStatement","src":"11086:31:36"},{"nativeSrc":"11126:15:36","nodeType":"YulAssignment","src":"11126:15:36","value":{"name":"value","nativeSrc":"11136:5:36","nodeType":"YulIdentifier","src":"11136:5:36"},"variableNames":[{"name":"value0","nativeSrc":"11126:6:36","nodeType":"YulIdentifier","src":"11126:6:36"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"10896:251:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10943:9:36","nodeType":"YulTypedName","src":"10943:9:36","type":""},{"name":"dataEnd","nativeSrc":"10954:7:36","nodeType":"YulTypedName","src":"10954:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10966:6:36","nodeType":"YulTypedName","src":"10966:6:36","type":""}],"src":"10896:251:36"},{"body":{"nativeSrc":"11281:119:36","nodeType":"YulBlock","src":"11281:119:36","statements":[{"nativeSrc":"11291:26:36","nodeType":"YulAssignment","src":"11291:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"11303:9:36","nodeType":"YulIdentifier","src":"11303:9:36"},{"kind":"number","nativeSrc":"11314:2:36","nodeType":"YulLiteral","src":"11314:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11299:3:36","nodeType":"YulIdentifier","src":"11299:3:36"},"nativeSrc":"11299:18:36","nodeType":"YulFunctionCall","src":"11299:18:36"},"variableNames":[{"name":"tail","nativeSrc":"11291:4:36","nodeType":"YulIdentifier","src":"11291:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11333:9:36","nodeType":"YulIdentifier","src":"11333:9:36"},{"name":"value0","nativeSrc":"11344:6:36","nodeType":"YulIdentifier","src":"11344:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11326:6:36","nodeType":"YulIdentifier","src":"11326:6:36"},"nativeSrc":"11326:25:36","nodeType":"YulFunctionCall","src":"11326:25:36"},"nativeSrc":"11326:25:36","nodeType":"YulExpressionStatement","src":"11326:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11371:9:36","nodeType":"YulIdentifier","src":"11371:9:36"},{"kind":"number","nativeSrc":"11382:2:36","nodeType":"YulLiteral","src":"11382:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11367:3:36","nodeType":"YulIdentifier","src":"11367:3:36"},"nativeSrc":"11367:18:36","nodeType":"YulFunctionCall","src":"11367:18:36"},{"name":"value1","nativeSrc":"11387:6:36","nodeType":"YulIdentifier","src":"11387:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11360:6:36","nodeType":"YulIdentifier","src":"11360:6:36"},"nativeSrc":"11360:34:36","nodeType":"YulFunctionCall","src":"11360:34:36"},"nativeSrc":"11360:34:36","nodeType":"YulExpressionStatement","src":"11360:34:36"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11152:248:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11242:9:36","nodeType":"YulTypedName","src":"11242:9:36","type":""},{"name":"value1","nativeSrc":"11253:6:36","nodeType":"YulTypedName","src":"11253:6:36","type":""},{"name":"value0","nativeSrc":"11261:6:36","nodeType":"YulTypedName","src":"11261:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11272:4:36","nodeType":"YulTypedName","src":"11272:4:36","type":""}],"src":"11152:248:36"},{"body":{"nativeSrc":"11437:152:36","nodeType":"YulBlock","src":"11437:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11454:1:36","nodeType":"YulLiteral","src":"11454:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"11457:77:36","nodeType":"YulLiteral","src":"11457:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11447:6:36","nodeType":"YulIdentifier","src":"11447:6:36"},"nativeSrc":"11447:88:36","nodeType":"YulFunctionCall","src":"11447:88:36"},"nativeSrc":"11447:88:36","nodeType":"YulExpressionStatement","src":"11447:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11551:1:36","nodeType":"YulLiteral","src":"11551:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"11554:4:36","nodeType":"YulLiteral","src":"11554:4:36","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"11544:6:36","nodeType":"YulIdentifier","src":"11544:6:36"},"nativeSrc":"11544:15:36","nodeType":"YulFunctionCall","src":"11544:15:36"},"nativeSrc":"11544:15:36","nodeType":"YulExpressionStatement","src":"11544:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11575:1:36","nodeType":"YulLiteral","src":"11575:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"11578:4:36","nodeType":"YulLiteral","src":"11578:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11568:6:36","nodeType":"YulIdentifier","src":"11568:6:36"},"nativeSrc":"11568:15:36","nodeType":"YulFunctionCall","src":"11568:15:36"},"nativeSrc":"11568:15:36","nodeType":"YulExpressionStatement","src":"11568:15:36"}]},"name":"panic_error_0x11","nativeSrc":"11405:184:36","nodeType":"YulFunctionDefinition","src":"11405:184:36"},{"body":{"nativeSrc":"11642:77:36","nodeType":"YulBlock","src":"11642:77:36","statements":[{"nativeSrc":"11652:16:36","nodeType":"YulAssignment","src":"11652:16:36","value":{"arguments":[{"name":"x","nativeSrc":"11663:1:36","nodeType":"YulIdentifier","src":"11663:1:36"},{"name":"y","nativeSrc":"11666:1:36","nodeType":"YulIdentifier","src":"11666:1:36"}],"functionName":{"name":"add","nativeSrc":"11659:3:36","nodeType":"YulIdentifier","src":"11659:3:36"},"nativeSrc":"11659:9:36","nodeType":"YulFunctionCall","src":"11659:9:36"},"variableNames":[{"name":"sum","nativeSrc":"11652:3:36","nodeType":"YulIdentifier","src":"11652:3:36"}]},{"body":{"nativeSrc":"11691:22:36","nodeType":"YulBlock","src":"11691:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11693:16:36","nodeType":"YulIdentifier","src":"11693:16:36"},"nativeSrc":"11693:18:36","nodeType":"YulFunctionCall","src":"11693:18:36"},"nativeSrc":"11693:18:36","nodeType":"YulExpressionStatement","src":"11693:18:36"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"11683:1:36","nodeType":"YulIdentifier","src":"11683:1:36"},{"name":"sum","nativeSrc":"11686:3:36","nodeType":"YulIdentifier","src":"11686:3:36"}],"functionName":{"name":"gt","nativeSrc":"11680:2:36","nodeType":"YulIdentifier","src":"11680:2:36"},"nativeSrc":"11680:10:36","nodeType":"YulFunctionCall","src":"11680:10:36"},"nativeSrc":"11677:36:36","nodeType":"YulIf","src":"11677:36:36"}]},"name":"checked_add_t_uint256","nativeSrc":"11594:125:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11625:1:36","nodeType":"YulTypedName","src":"11625:1:36","type":""},{"name":"y","nativeSrc":"11628:1:36","nodeType":"YulTypedName","src":"11628:1:36","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"11634:3:36","nodeType":"YulTypedName","src":"11634:3:36","type":""}],"src":"11594:125:36"},{"body":{"nativeSrc":"11881:162:36","nodeType":"YulBlock","src":"11881:162:36","statements":[{"nativeSrc":"11891:26:36","nodeType":"YulAssignment","src":"11891:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"11903:9:36","nodeType":"YulIdentifier","src":"11903:9:36"},{"kind":"number","nativeSrc":"11914:2:36","nodeType":"YulLiteral","src":"11914:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11899:3:36","nodeType":"YulIdentifier","src":"11899:3:36"},"nativeSrc":"11899:18:36","nodeType":"YulFunctionCall","src":"11899:18:36"},"variableNames":[{"name":"tail","nativeSrc":"11891:4:36","nodeType":"YulIdentifier","src":"11891:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11933:9:36","nodeType":"YulIdentifier","src":"11933:9:36"},{"name":"value0","nativeSrc":"11944:6:36","nodeType":"YulIdentifier","src":"11944:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11926:6:36","nodeType":"YulIdentifier","src":"11926:6:36"},"nativeSrc":"11926:25:36","nodeType":"YulFunctionCall","src":"11926:25:36"},"nativeSrc":"11926:25:36","nodeType":"YulExpressionStatement","src":"11926:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11971:9:36","nodeType":"YulIdentifier","src":"11971:9:36"},{"kind":"number","nativeSrc":"11982:2:36","nodeType":"YulLiteral","src":"11982:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11967:3:36","nodeType":"YulIdentifier","src":"11967:3:36"},"nativeSrc":"11967:18:36","nodeType":"YulFunctionCall","src":"11967:18:36"},{"name":"value1","nativeSrc":"11987:6:36","nodeType":"YulIdentifier","src":"11987:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11960:6:36","nodeType":"YulIdentifier","src":"11960:6:36"},"nativeSrc":"11960:34:36","nodeType":"YulFunctionCall","src":"11960:34:36"},"nativeSrc":"11960:34:36","nodeType":"YulExpressionStatement","src":"11960:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12014:9:36","nodeType":"YulIdentifier","src":"12014:9:36"},{"kind":"number","nativeSrc":"12025:2:36","nodeType":"YulLiteral","src":"12025:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12010:3:36","nodeType":"YulIdentifier","src":"12010:3:36"},"nativeSrc":"12010:18:36","nodeType":"YulFunctionCall","src":"12010:18:36"},{"name":"value2","nativeSrc":"12030:6:36","nodeType":"YulIdentifier","src":"12030:6:36"}],"functionName":{"name":"mstore","nativeSrc":"12003:6:36","nodeType":"YulIdentifier","src":"12003:6:36"},"nativeSrc":"12003:34:36","nodeType":"YulFunctionCall","src":"12003:34:36"},"nativeSrc":"12003:34:36","nodeType":"YulExpressionStatement","src":"12003:34:36"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11724:319:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11834:9:36","nodeType":"YulTypedName","src":"11834:9:36","type":""},{"name":"value2","nativeSrc":"11845:6:36","nodeType":"YulTypedName","src":"11845:6:36","type":""},{"name":"value1","nativeSrc":"11853:6:36","nodeType":"YulTypedName","src":"11853:6:36","type":""},{"name":"value0","nativeSrc":"11861:6:36","nodeType":"YulTypedName","src":"11861:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11872:4:36","nodeType":"YulTypedName","src":"11872:4:36","type":""}],"src":"11724:319:36"},{"body":{"nativeSrc":"12222:234:36","nodeType":"YulBlock","src":"12222:234:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12239:9:36","nodeType":"YulIdentifier","src":"12239:9:36"},{"kind":"number","nativeSrc":"12250:2:36","nodeType":"YulLiteral","src":"12250:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12232:6:36","nodeType":"YulIdentifier","src":"12232:6:36"},"nativeSrc":"12232:21:36","nodeType":"YulFunctionCall","src":"12232:21:36"},"nativeSrc":"12232:21:36","nodeType":"YulExpressionStatement","src":"12232:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12273:9:36","nodeType":"YulIdentifier","src":"12273:9:36"},{"kind":"number","nativeSrc":"12284:2:36","nodeType":"YulLiteral","src":"12284:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12269:3:36","nodeType":"YulIdentifier","src":"12269:3:36"},"nativeSrc":"12269:18:36","nodeType":"YulFunctionCall","src":"12269:18:36"},{"kind":"number","nativeSrc":"12289:2:36","nodeType":"YulLiteral","src":"12289:2:36","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"12262:6:36","nodeType":"YulIdentifier","src":"12262:6:36"},"nativeSrc":"12262:30:36","nodeType":"YulFunctionCall","src":"12262:30:36"},"nativeSrc":"12262:30:36","nodeType":"YulExpressionStatement","src":"12262:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12312:9:36","nodeType":"YulIdentifier","src":"12312:9:36"},{"kind":"number","nativeSrc":"12323:2:36","nodeType":"YulLiteral","src":"12323:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12308:3:36","nodeType":"YulIdentifier","src":"12308:3:36"},"nativeSrc":"12308:18:36","nodeType":"YulFunctionCall","src":"12308:18:36"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"12328:34:36","nodeType":"YulLiteral","src":"12328:34:36","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"12301:6:36","nodeType":"YulIdentifier","src":"12301:6:36"},"nativeSrc":"12301:62:36","nodeType":"YulFunctionCall","src":"12301:62:36"},"nativeSrc":"12301:62:36","nodeType":"YulExpressionStatement","src":"12301:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12383:9:36","nodeType":"YulIdentifier","src":"12383:9:36"},{"kind":"number","nativeSrc":"12394:2:36","nodeType":"YulLiteral","src":"12394:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12379:3:36","nodeType":"YulIdentifier","src":"12379:3:36"},"nativeSrc":"12379:18:36","nodeType":"YulFunctionCall","src":"12379:18:36"},{"hexValue":"64656c656761746563616c6c","kind":"string","nativeSrc":"12399:14:36","nodeType":"YulLiteral","src":"12399:14:36","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"12372:6:36","nodeType":"YulIdentifier","src":"12372:6:36"},"nativeSrc":"12372:42:36","nodeType":"YulFunctionCall","src":"12372:42:36"},"nativeSrc":"12372:42:36","nodeType":"YulExpressionStatement","src":"12372:42:36"},{"nativeSrc":"12423:27:36","nodeType":"YulAssignment","src":"12423:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"12435:9:36","nodeType":"YulIdentifier","src":"12435:9:36"},{"kind":"number","nativeSrc":"12446:3:36","nodeType":"YulLiteral","src":"12446:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12431:3:36","nodeType":"YulIdentifier","src":"12431:3:36"},"nativeSrc":"12431:19:36","nodeType":"YulFunctionCall","src":"12431:19:36"},"variableNames":[{"name":"tail","nativeSrc":"12423:4:36","nodeType":"YulIdentifier","src":"12423:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12048:408:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12199:9:36","nodeType":"YulTypedName","src":"12199:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12213:4:36","nodeType":"YulTypedName","src":"12213:4:36","type":""}],"src":"12048:408:36"},{"body":{"nativeSrc":"12635:234:36","nodeType":"YulBlock","src":"12635:234:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12652:9:36","nodeType":"YulIdentifier","src":"12652:9:36"},{"kind":"number","nativeSrc":"12663:2:36","nodeType":"YulLiteral","src":"12663:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12645:6:36","nodeType":"YulIdentifier","src":"12645:6:36"},"nativeSrc":"12645:21:36","nodeType":"YulFunctionCall","src":"12645:21:36"},"nativeSrc":"12645:21:36","nodeType":"YulExpressionStatement","src":"12645:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12686:9:36","nodeType":"YulIdentifier","src":"12686:9:36"},{"kind":"number","nativeSrc":"12697:2:36","nodeType":"YulLiteral","src":"12697:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12682:3:36","nodeType":"YulIdentifier","src":"12682:3:36"},"nativeSrc":"12682:18:36","nodeType":"YulFunctionCall","src":"12682:18:36"},{"kind":"number","nativeSrc":"12702:2:36","nodeType":"YulLiteral","src":"12702:2:36","type":"","value":"44"}],"functionName":{"name":"mstore","nativeSrc":"12675:6:36","nodeType":"YulIdentifier","src":"12675:6:36"},"nativeSrc":"12675:30:36","nodeType":"YulFunctionCall","src":"12675:30:36"},"nativeSrc":"12675:30:36","nodeType":"YulExpressionStatement","src":"12675:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12725:9:36","nodeType":"YulIdentifier","src":"12725:9:36"},{"kind":"number","nativeSrc":"12736:2:36","nodeType":"YulLiteral","src":"12736:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12721:3:36","nodeType":"YulIdentifier","src":"12721:3:36"},"nativeSrc":"12721:18:36","nodeType":"YulFunctionCall","src":"12721:18:36"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nativeSrc":"12741:34:36","nodeType":"YulLiteral","src":"12741:34:36","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nativeSrc":"12714:6:36","nodeType":"YulIdentifier","src":"12714:6:36"},"nativeSrc":"12714:62:36","nodeType":"YulFunctionCall","src":"12714:62:36"},"nativeSrc":"12714:62:36","nodeType":"YulExpressionStatement","src":"12714:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12796:9:36","nodeType":"YulIdentifier","src":"12796:9:36"},{"kind":"number","nativeSrc":"12807:2:36","nodeType":"YulLiteral","src":"12807:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12792:3:36","nodeType":"YulIdentifier","src":"12792:3:36"},"nativeSrc":"12792:18:36","nodeType":"YulFunctionCall","src":"12792:18:36"},{"hexValue":"6163746976652070726f7879","kind":"string","nativeSrc":"12812:14:36","nodeType":"YulLiteral","src":"12812:14:36","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nativeSrc":"12785:6:36","nodeType":"YulIdentifier","src":"12785:6:36"},"nativeSrc":"12785:42:36","nodeType":"YulFunctionCall","src":"12785:42:36"},"nativeSrc":"12785:42:36","nodeType":"YulExpressionStatement","src":"12785:42:36"},{"nativeSrc":"12836:27:36","nodeType":"YulAssignment","src":"12836:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"12848:9:36","nodeType":"YulIdentifier","src":"12848:9:36"},{"kind":"number","nativeSrc":"12859:3:36","nodeType":"YulLiteral","src":"12859:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12844:3:36","nodeType":"YulIdentifier","src":"12844:3:36"},"nativeSrc":"12844:19:36","nodeType":"YulFunctionCall","src":"12844:19:36"},"variableNames":[{"name":"tail","nativeSrc":"12836:4:36","nodeType":"YulIdentifier","src":"12836:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12461:408:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12612:9:36","nodeType":"YulTypedName","src":"12612:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12626:4:36","nodeType":"YulTypedName","src":"12626:4:36","type":""}],"src":"12461:408:36"},{"body":{"nativeSrc":"12906:152:36","nodeType":"YulBlock","src":"12906:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12923:1:36","nodeType":"YulLiteral","src":"12923:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"12926:77:36","nodeType":"YulLiteral","src":"12926:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12916:6:36","nodeType":"YulIdentifier","src":"12916:6:36"},"nativeSrc":"12916:88:36","nodeType":"YulFunctionCall","src":"12916:88:36"},"nativeSrc":"12916:88:36","nodeType":"YulExpressionStatement","src":"12916:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13020:1:36","nodeType":"YulLiteral","src":"13020:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"13023:4:36","nodeType":"YulLiteral","src":"13023:4:36","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"13013:6:36","nodeType":"YulIdentifier","src":"13013:6:36"},"nativeSrc":"13013:15:36","nodeType":"YulFunctionCall","src":"13013:15:36"},"nativeSrc":"13013:15:36","nodeType":"YulExpressionStatement","src":"13013:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13044:1:36","nodeType":"YulLiteral","src":"13044:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"13047:4:36","nodeType":"YulLiteral","src":"13047:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"13037:6:36","nodeType":"YulIdentifier","src":"13037:6:36"},"nativeSrc":"13037:15:36","nodeType":"YulFunctionCall","src":"13037:15:36"},"nativeSrc":"13037:15:36","nodeType":"YulExpressionStatement","src":"13037:15:36"}]},"name":"panic_error_0x32","nativeSrc":"12874:184:36","nodeType":"YulFunctionDefinition","src":"12874:184:36"},{"body":{"nativeSrc":"13110:148:36","nodeType":"YulBlock","src":"13110:148:36","statements":[{"body":{"nativeSrc":"13201:22:36","nodeType":"YulBlock","src":"13201:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"13203:16:36","nodeType":"YulIdentifier","src":"13203:16:36"},"nativeSrc":"13203:18:36","nodeType":"YulFunctionCall","src":"13203:18:36"},"nativeSrc":"13203:18:36","nodeType":"YulExpressionStatement","src":"13203:18:36"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"13126:5:36","nodeType":"YulIdentifier","src":"13126:5:36"},{"kind":"number","nativeSrc":"13133:66:36","nodeType":"YulLiteral","src":"13133:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"13123:2:36","nodeType":"YulIdentifier","src":"13123:2:36"},"nativeSrc":"13123:77:36","nodeType":"YulFunctionCall","src":"13123:77:36"},"nativeSrc":"13120:103:36","nodeType":"YulIf","src":"13120:103:36"},{"nativeSrc":"13232:20:36","nodeType":"YulAssignment","src":"13232:20:36","value":{"arguments":[{"name":"value","nativeSrc":"13243:5:36","nodeType":"YulIdentifier","src":"13243:5:36"},{"kind":"number","nativeSrc":"13250:1:36","nodeType":"YulLiteral","src":"13250:1:36","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13239:3:36","nodeType":"YulIdentifier","src":"13239:3:36"},"nativeSrc":"13239:13:36","nodeType":"YulFunctionCall","src":"13239:13:36"},"variableNames":[{"name":"ret","nativeSrc":"13232:3:36","nodeType":"YulIdentifier","src":"13232:3:36"}]}]},"name":"increment_t_uint256","nativeSrc":"13063:195:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"13092:5:36","nodeType":"YulTypedName","src":"13092:5:36","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"13102:3:36","nodeType":"YulTypedName","src":"13102:3:36","type":""}],"src":"13063:195:36"},{"body":{"nativeSrc":"13424:329:36","nodeType":"YulBlock","src":"13424:329:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13441:9:36","nodeType":"YulIdentifier","src":"13441:9:36"},{"kind":"number","nativeSrc":"13452:2:36","nodeType":"YulLiteral","src":"13452:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13434:6:36","nodeType":"YulIdentifier","src":"13434:6:36"},"nativeSrc":"13434:21:36","nodeType":"YulFunctionCall","src":"13434:21:36"},"nativeSrc":"13434:21:36","nodeType":"YulExpressionStatement","src":"13434:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13475:9:36","nodeType":"YulIdentifier","src":"13475:9:36"},{"kind":"number","nativeSrc":"13486:2:36","nodeType":"YulLiteral","src":"13486:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13471:3:36","nodeType":"YulIdentifier","src":"13471:3:36"},"nativeSrc":"13471:18:36","nodeType":"YulFunctionCall","src":"13471:18:36"},{"name":"value1","nativeSrc":"13491:6:36","nodeType":"YulIdentifier","src":"13491:6:36"}],"functionName":{"name":"mstore","nativeSrc":"13464:6:36","nodeType":"YulIdentifier","src":"13464:6:36"},"nativeSrc":"13464:34:36","nodeType":"YulFunctionCall","src":"13464:34:36"},"nativeSrc":"13464:34:36","nodeType":"YulExpressionStatement","src":"13464:34:36"},{"body":{"nativeSrc":"13589:16:36","nodeType":"YulBlock","src":"13589:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13598:1:36","nodeType":"YulLiteral","src":"13598:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"13601:1:36","nodeType":"YulLiteral","src":"13601:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13591:6:36","nodeType":"YulIdentifier","src":"13591:6:36"},"nativeSrc":"13591:12:36","nodeType":"YulFunctionCall","src":"13591:12:36"},"nativeSrc":"13591:12:36","nodeType":"YulExpressionStatement","src":"13591:12:36"}]},"condition":{"arguments":[{"name":"value1","nativeSrc":"13513:6:36","nodeType":"YulIdentifier","src":"13513:6:36"},{"kind":"number","nativeSrc":"13521:66:36","nodeType":"YulLiteral","src":"13521:66:36","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"13510:2:36","nodeType":"YulIdentifier","src":"13510:2:36"},"nativeSrc":"13510:78:36","nodeType":"YulFunctionCall","src":"13510:78:36"},"nativeSrc":"13507:98:36","nodeType":"YulIf","src":"13507:98:36"},{"nativeSrc":"13614:28:36","nodeType":"YulVariableDeclaration","src":"13614:28:36","value":{"arguments":[{"kind":"number","nativeSrc":"13632:1:36","nodeType":"YulLiteral","src":"13632:1:36","type":"","value":"5"},{"name":"value1","nativeSrc":"13635:6:36","nodeType":"YulIdentifier","src":"13635:6:36"}],"functionName":{"name":"shl","nativeSrc":"13628:3:36","nodeType":"YulIdentifier","src":"13628:3:36"},"nativeSrc":"13628:14:36","nodeType":"YulFunctionCall","src":"13628:14:36"},"variables":[{"name":"length","nativeSrc":"13618:6:36","nodeType":"YulTypedName","src":"13618:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13668:9:36","nodeType":"YulIdentifier","src":"13668:9:36"},{"kind":"number","nativeSrc":"13679:2:36","nodeType":"YulLiteral","src":"13679:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13664:3:36","nodeType":"YulIdentifier","src":"13664:3:36"},"nativeSrc":"13664:18:36","nodeType":"YulFunctionCall","src":"13664:18:36"},{"name":"value0","nativeSrc":"13684:6:36","nodeType":"YulIdentifier","src":"13684:6:36"},{"name":"length","nativeSrc":"13692:6:36","nodeType":"YulIdentifier","src":"13692:6:36"}],"functionName":{"name":"calldatacopy","nativeSrc":"13651:12:36","nodeType":"YulIdentifier","src":"13651:12:36"},"nativeSrc":"13651:48:36","nodeType":"YulFunctionCall","src":"13651:48:36"},"nativeSrc":"13651:48:36","nodeType":"YulExpressionStatement","src":"13651:48:36"},{"nativeSrc":"13708:39:36","nodeType":"YulAssignment","src":"13708:39:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13724:9:36","nodeType":"YulIdentifier","src":"13724:9:36"},{"name":"length","nativeSrc":"13735:6:36","nodeType":"YulIdentifier","src":"13735:6:36"}],"functionName":{"name":"add","nativeSrc":"13720:3:36","nodeType":"YulIdentifier","src":"13720:3:36"},"nativeSrc":"13720:22:36","nodeType":"YulFunctionCall","src":"13720:22:36"},{"kind":"number","nativeSrc":"13744:2:36","nodeType":"YulLiteral","src":"13744:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13716:3:36","nodeType":"YulIdentifier","src":"13716:3:36"},"nativeSrc":"13716:31:36","nodeType":"YulFunctionCall","src":"13716:31:36"},"variableNames":[{"name":"tail","nativeSrc":"13708:4:36","nodeType":"YulIdentifier","src":"13708:4:36"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"13263:490:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13385:9:36","nodeType":"YulTypedName","src":"13385:9:36","type":""},{"name":"value1","nativeSrc":"13396:6:36","nodeType":"YulTypedName","src":"13396:6:36","type":""},{"name":"value0","nativeSrc":"13404:6:36","nodeType":"YulTypedName","src":"13404:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13415:4:36","nodeType":"YulTypedName","src":"13415:4:36","type":""}],"src":"13263:490:36"},{"body":{"nativeSrc":"13932:246:36","nodeType":"YulBlock","src":"13932:246:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13949:9:36","nodeType":"YulIdentifier","src":"13949:9:36"},{"kind":"number","nativeSrc":"13960:2:36","nodeType":"YulLiteral","src":"13960:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13942:6:36","nodeType":"YulIdentifier","src":"13942:6:36"},"nativeSrc":"13942:21:36","nodeType":"YulFunctionCall","src":"13942:21:36"},"nativeSrc":"13942:21:36","nodeType":"YulExpressionStatement","src":"13942:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13983:9:36","nodeType":"YulIdentifier","src":"13983:9:36"},{"kind":"number","nativeSrc":"13994:2:36","nodeType":"YulLiteral","src":"13994:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13979:3:36","nodeType":"YulIdentifier","src":"13979:3:36"},"nativeSrc":"13979:18:36","nodeType":"YulFunctionCall","src":"13979:18:36"},{"kind":"number","nativeSrc":"13999:2:36","nodeType":"YulLiteral","src":"13999:2:36","type":"","value":"56"}],"functionName":{"name":"mstore","nativeSrc":"13972:6:36","nodeType":"YulIdentifier","src":"13972:6:36"},"nativeSrc":"13972:30:36","nodeType":"YulFunctionCall","src":"13972:30:36"},"nativeSrc":"13972:30:36","nodeType":"YulExpressionStatement","src":"13972:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14022:9:36","nodeType":"YulIdentifier","src":"14022:9:36"},{"kind":"number","nativeSrc":"14033:2:36","nodeType":"YulLiteral","src":"14033:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14018:3:36","nodeType":"YulIdentifier","src":"14018:3:36"},"nativeSrc":"14018:18:36","nodeType":"YulFunctionCall","src":"14018:18:36"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nativeSrc":"14038:34:36","nodeType":"YulLiteral","src":"14038:34:36","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nativeSrc":"14011:6:36","nodeType":"YulIdentifier","src":"14011:6:36"},"nativeSrc":"14011:62:36","nodeType":"YulFunctionCall","src":"14011:62:36"},"nativeSrc":"14011:62:36","nodeType":"YulExpressionStatement","src":"14011:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14093:9:36","nodeType":"YulIdentifier","src":"14093:9:36"},{"kind":"number","nativeSrc":"14104:2:36","nodeType":"YulLiteral","src":"14104:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14089:3:36","nodeType":"YulIdentifier","src":"14089:3:36"},"nativeSrc":"14089:18:36","nodeType":"YulFunctionCall","src":"14089:18:36"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nativeSrc":"14109:26:36","nodeType":"YulLiteral","src":"14109:26:36","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nativeSrc":"14082:6:36","nodeType":"YulIdentifier","src":"14082:6:36"},"nativeSrc":"14082:54:36","nodeType":"YulFunctionCall","src":"14082:54:36"},"nativeSrc":"14082:54:36","nodeType":"YulExpressionStatement","src":"14082:54:36"},{"nativeSrc":"14145:27:36","nodeType":"YulAssignment","src":"14145:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"14157:9:36","nodeType":"YulIdentifier","src":"14157:9:36"},{"kind":"number","nativeSrc":"14168:3:36","nodeType":"YulLiteral","src":"14168:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14153:3:36","nodeType":"YulIdentifier","src":"14153:3:36"},"nativeSrc":"14153:19:36","nodeType":"YulFunctionCall","src":"14153:19:36"},"variableNames":[{"name":"tail","nativeSrc":"14145:4:36","nodeType":"YulIdentifier","src":"14145:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13758:420:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13909:9:36","nodeType":"YulTypedName","src":"13909:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13923:4:36","nodeType":"YulTypedName","src":"13923:4:36","type":""}],"src":"13758:420:36"},{"body":{"nativeSrc":"14357:236:36","nodeType":"YulBlock","src":"14357:236:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14374:9:36","nodeType":"YulIdentifier","src":"14374:9:36"},{"kind":"number","nativeSrc":"14385:2:36","nodeType":"YulLiteral","src":"14385:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14367:6:36","nodeType":"YulIdentifier","src":"14367:6:36"},"nativeSrc":"14367:21:36","nodeType":"YulFunctionCall","src":"14367:21:36"},"nativeSrc":"14367:21:36","nodeType":"YulExpressionStatement","src":"14367:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14408:9:36","nodeType":"YulIdentifier","src":"14408:9:36"},{"kind":"number","nativeSrc":"14419:2:36","nodeType":"YulLiteral","src":"14419:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14404:3:36","nodeType":"YulIdentifier","src":"14404:3:36"},"nativeSrc":"14404:18:36","nodeType":"YulFunctionCall","src":"14404:18:36"},{"kind":"number","nativeSrc":"14424:2:36","nodeType":"YulLiteral","src":"14424:2:36","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"14397:6:36","nodeType":"YulIdentifier","src":"14397:6:36"},"nativeSrc":"14397:30:36","nodeType":"YulFunctionCall","src":"14397:30:36"},"nativeSrc":"14397:30:36","nodeType":"YulExpressionStatement","src":"14397:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14447:9:36","nodeType":"YulIdentifier","src":"14447:9:36"},{"kind":"number","nativeSrc":"14458:2:36","nodeType":"YulLiteral","src":"14458:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14443:3:36","nodeType":"YulIdentifier","src":"14443:3:36"},"nativeSrc":"14443:18:36","nodeType":"YulFunctionCall","src":"14443:18:36"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nativeSrc":"14463:34:36","nodeType":"YulLiteral","src":"14463:34:36","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nativeSrc":"14436:6:36","nodeType":"YulIdentifier","src":"14436:6:36"},"nativeSrc":"14436:62:36","nodeType":"YulFunctionCall","src":"14436:62:36"},"nativeSrc":"14436:62:36","nodeType":"YulExpressionStatement","src":"14436:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14518:9:36","nodeType":"YulIdentifier","src":"14518:9:36"},{"kind":"number","nativeSrc":"14529:2:36","nodeType":"YulLiteral","src":"14529:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14514:3:36","nodeType":"YulIdentifier","src":"14514:3:36"},"nativeSrc":"14514:18:36","nodeType":"YulFunctionCall","src":"14514:18:36"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nativeSrc":"14534:16:36","nodeType":"YulLiteral","src":"14534:16:36","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nativeSrc":"14507:6:36","nodeType":"YulIdentifier","src":"14507:6:36"},"nativeSrc":"14507:44:36","nodeType":"YulFunctionCall","src":"14507:44:36"},"nativeSrc":"14507:44:36","nodeType":"YulExpressionStatement","src":"14507:44:36"},{"nativeSrc":"14560:27:36","nodeType":"YulAssignment","src":"14560:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"14572:9:36","nodeType":"YulIdentifier","src":"14572:9:36"},{"kind":"number","nativeSrc":"14583:3:36","nodeType":"YulLiteral","src":"14583:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14568:3:36","nodeType":"YulIdentifier","src":"14568:3:36"},"nativeSrc":"14568:19:36","nodeType":"YulFunctionCall","src":"14568:19:36"},"variableNames":[{"name":"tail","nativeSrc":"14560:4:36","nodeType":"YulIdentifier","src":"14560:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14183:410:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14334:9:36","nodeType":"YulTypedName","src":"14334:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14348:4:36","nodeType":"YulTypedName","src":"14348:4:36","type":""}],"src":"14183:410:36"},{"body":{"nativeSrc":"14695:87:36","nodeType":"YulBlock","src":"14695:87:36","statements":[{"nativeSrc":"14705:26:36","nodeType":"YulAssignment","src":"14705:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"14717:9:36","nodeType":"YulIdentifier","src":"14717:9:36"},{"kind":"number","nativeSrc":"14728:2:36","nodeType":"YulLiteral","src":"14728:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14713:3:36","nodeType":"YulIdentifier","src":"14713:3:36"},"nativeSrc":"14713:18:36","nodeType":"YulFunctionCall","src":"14713:18:36"},"variableNames":[{"name":"tail","nativeSrc":"14705:4:36","nodeType":"YulIdentifier","src":"14705:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14747:9:36","nodeType":"YulIdentifier","src":"14747:9:36"},{"arguments":[{"name":"value0","nativeSrc":"14762:6:36","nodeType":"YulIdentifier","src":"14762:6:36"},{"kind":"number","nativeSrc":"14770:4:36","nodeType":"YulLiteral","src":"14770:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"14758:3:36","nodeType":"YulIdentifier","src":"14758:3:36"},"nativeSrc":"14758:17:36","nodeType":"YulFunctionCall","src":"14758:17:36"}],"functionName":{"name":"mstore","nativeSrc":"14740:6:36","nodeType":"YulIdentifier","src":"14740:6:36"},"nativeSrc":"14740:36:36","nodeType":"YulFunctionCall","src":"14740:36:36"},"nativeSrc":"14740:36:36","nodeType":"YulExpressionStatement","src":"14740:36:36"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"14598:184:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14664:9:36","nodeType":"YulTypedName","src":"14664:9:36","type":""},{"name":"value0","nativeSrc":"14675:6:36","nodeType":"YulTypedName","src":"14675:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14686:4:36","nodeType":"YulTypedName","src":"14686:4:36","type":""}],"src":"14598:184:36"},{"body":{"nativeSrc":"14894:87:36","nodeType":"YulBlock","src":"14894:87:36","statements":[{"nativeSrc":"14904:26:36","nodeType":"YulAssignment","src":"14904:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"14916:9:36","nodeType":"YulIdentifier","src":"14916:9:36"},{"kind":"number","nativeSrc":"14927:2:36","nodeType":"YulLiteral","src":"14927:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14912:3:36","nodeType":"YulIdentifier","src":"14912:3:36"},"nativeSrc":"14912:18:36","nodeType":"YulFunctionCall","src":"14912:18:36"},"variableNames":[{"name":"tail","nativeSrc":"14904:4:36","nodeType":"YulIdentifier","src":"14904:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14946:9:36","nodeType":"YulIdentifier","src":"14946:9:36"},{"arguments":[{"name":"value0","nativeSrc":"14961:6:36","nodeType":"YulIdentifier","src":"14961:6:36"},{"kind":"number","nativeSrc":"14969:4:36","nodeType":"YulLiteral","src":"14969:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"14957:3:36","nodeType":"YulIdentifier","src":"14957:3:36"},"nativeSrc":"14957:17:36","nodeType":"YulFunctionCall","src":"14957:17:36"}],"functionName":{"name":"mstore","nativeSrc":"14939:6:36","nodeType":"YulIdentifier","src":"14939:6:36"},"nativeSrc":"14939:36:36","nodeType":"YulFunctionCall","src":"14939:36:36"},"nativeSrc":"14939:36:36","nodeType":"YulExpressionStatement","src":"14939:36:36"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nativeSrc":"14787:194:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14863:9:36","nodeType":"YulTypedName","src":"14863:9:36","type":""},{"name":"value0","nativeSrc":"14874:6:36","nodeType":"YulTypedName","src":"14874:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14885:4:36","nodeType":"YulTypedName","src":"14885:4:36","type":""}],"src":"14787:194:36"},{"body":{"nativeSrc":"15206:160:36","nodeType":"YulBlock","src":"15206:160:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"15223:3:36","nodeType":"YulIdentifier","src":"15223:3:36"},{"kind":"number","nativeSrc":"15228:66:36","nodeType":"YulLiteral","src":"15228:66:36","type":"","value":"0x19457468657265756d205369676e6564204d6573736167653a0a333200000000"}],"functionName":{"name":"mstore","nativeSrc":"15216:6:36","nodeType":"YulIdentifier","src":"15216:6:36"},"nativeSrc":"15216:79:36","nodeType":"YulFunctionCall","src":"15216:79:36"},"nativeSrc":"15216:79:36","nodeType":"YulExpressionStatement","src":"15216:79:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"15315:3:36","nodeType":"YulIdentifier","src":"15315:3:36"},{"kind":"number","nativeSrc":"15320:2:36","nodeType":"YulLiteral","src":"15320:2:36","type":"","value":"28"}],"functionName":{"name":"add","nativeSrc":"15311:3:36","nodeType":"YulIdentifier","src":"15311:3:36"},"nativeSrc":"15311:12:36","nodeType":"YulFunctionCall","src":"15311:12:36"},{"name":"value0","nativeSrc":"15325:6:36","nodeType":"YulIdentifier","src":"15325:6:36"}],"functionName":{"name":"mstore","nativeSrc":"15304:6:36","nodeType":"YulIdentifier","src":"15304:6:36"},"nativeSrc":"15304:28:36","nodeType":"YulFunctionCall","src":"15304:28:36"},"nativeSrc":"15304:28:36","nodeType":"YulExpressionStatement","src":"15304:28:36"},{"nativeSrc":"15341:19:36","nodeType":"YulAssignment","src":"15341:19:36","value":{"arguments":[{"name":"pos","nativeSrc":"15352:3:36","nodeType":"YulIdentifier","src":"15352:3:36"},{"kind":"number","nativeSrc":"15357:2:36","nodeType":"YulLiteral","src":"15357:2:36","type":"","value":"60"}],"functionName":{"name":"add","nativeSrc":"15348:3:36","nodeType":"YulIdentifier","src":"15348:3:36"},"nativeSrc":"15348:12:36","nodeType":"YulFunctionCall","src":"15348:12:36"},"variableNames":[{"name":"end","nativeSrc":"15341:3:36","nodeType":"YulIdentifier","src":"15341:3:36"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"14986:380:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15182:3:36","nodeType":"YulTypedName","src":"15182:3:36","type":""},{"name":"value0","nativeSrc":"15187:6:36","nodeType":"YulTypedName","src":"15187:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15198:3:36","nodeType":"YulTypedName","src":"15198:3:36","type":""}],"src":"14986:380:36"},{"body":{"nativeSrc":"15542:220:36","nodeType":"YulBlock","src":"15542:220:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"15559:3:36","nodeType":"YulIdentifier","src":"15559:3:36"},{"name":"value0","nativeSrc":"15564:6:36","nodeType":"YulIdentifier","src":"15564:6:36"}],"functionName":{"name":"mstore","nativeSrc":"15552:6:36","nodeType":"YulIdentifier","src":"15552:6:36"},"nativeSrc":"15552:19:36","nodeType":"YulFunctionCall","src":"15552:19:36"},"nativeSrc":"15552:19:36","nodeType":"YulExpressionStatement","src":"15552:19:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"15591:3:36","nodeType":"YulIdentifier","src":"15591:3:36"},{"kind":"number","nativeSrc":"15596:2:36","nodeType":"YulLiteral","src":"15596:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15587:3:36","nodeType":"YulIdentifier","src":"15587:3:36"},"nativeSrc":"15587:12:36","nodeType":"YulFunctionCall","src":"15587:12:36"},{"name":"value1","nativeSrc":"15601:6:36","nodeType":"YulIdentifier","src":"15601:6:36"}],"functionName":{"name":"mstore","nativeSrc":"15580:6:36","nodeType":"YulIdentifier","src":"15580:6:36"},"nativeSrc":"15580:28:36","nodeType":"YulFunctionCall","src":"15580:28:36"},"nativeSrc":"15580:28:36","nodeType":"YulExpressionStatement","src":"15580:28:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"15628:3:36","nodeType":"YulIdentifier","src":"15628:3:36"},{"kind":"number","nativeSrc":"15633:2:36","nodeType":"YulLiteral","src":"15633:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15624:3:36","nodeType":"YulIdentifier","src":"15624:3:36"},"nativeSrc":"15624:12:36","nodeType":"YulFunctionCall","src":"15624:12:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"15646:3:36","nodeType":"YulLiteral","src":"15646:3:36","type":"","value":"248"},{"name":"value2","nativeSrc":"15651:6:36","nodeType":"YulIdentifier","src":"15651:6:36"}],"functionName":{"name":"shl","nativeSrc":"15642:3:36","nodeType":"YulIdentifier","src":"15642:3:36"},"nativeSrc":"15642:16:36","nodeType":"YulFunctionCall","src":"15642:16:36"},{"kind":"number","nativeSrc":"15660:66:36","nodeType":"YulLiteral","src":"15660:66:36","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"15638:3:36","nodeType":"YulIdentifier","src":"15638:3:36"},"nativeSrc":"15638:89:36","nodeType":"YulFunctionCall","src":"15638:89:36"}],"functionName":{"name":"mstore","nativeSrc":"15617:6:36","nodeType":"YulIdentifier","src":"15617:6:36"},"nativeSrc":"15617:111:36","nodeType":"YulFunctionCall","src":"15617:111:36"},"nativeSrc":"15617:111:36","nodeType":"YulExpressionStatement","src":"15617:111:36"},{"nativeSrc":"15737:19:36","nodeType":"YulAssignment","src":"15737:19:36","value":{"arguments":[{"name":"pos","nativeSrc":"15748:3:36","nodeType":"YulIdentifier","src":"15748:3:36"},{"kind":"number","nativeSrc":"15753:2:36","nodeType":"YulLiteral","src":"15753:2:36","type":"","value":"65"}],"functionName":{"name":"add","nativeSrc":"15744:3:36","nodeType":"YulIdentifier","src":"15744:3:36"},"nativeSrc":"15744:12:36","nodeType":"YulFunctionCall","src":"15744:12:36"},"variableNames":[{"name":"end","nativeSrc":"15737:3:36","nodeType":"YulIdentifier","src":"15737:3:36"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__nonPadded_inplace_fromStack_reversed","nativeSrc":"15371:391:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15502:3:36","nodeType":"YulTypedName","src":"15502:3:36","type":""},{"name":"value2","nativeSrc":"15507:6:36","nodeType":"YulTypedName","src":"15507:6:36","type":""},{"name":"value1","nativeSrc":"15515:6:36","nodeType":"YulTypedName","src":"15515:6:36","type":""},{"name":"value0","nativeSrc":"15523:6:36","nodeType":"YulTypedName","src":"15523:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15534:3:36","nodeType":"YulTypedName","src":"15534:3:36","type":""}],"src":"15371:391:36"},{"body":{"nativeSrc":"15816:79:36","nodeType":"YulBlock","src":"15816:79:36","statements":[{"nativeSrc":"15826:17:36","nodeType":"YulAssignment","src":"15826:17:36","value":{"arguments":[{"name":"x","nativeSrc":"15838:1:36","nodeType":"YulIdentifier","src":"15838:1:36"},{"name":"y","nativeSrc":"15841:1:36","nodeType":"YulIdentifier","src":"15841:1:36"}],"functionName":{"name":"sub","nativeSrc":"15834:3:36","nodeType":"YulIdentifier","src":"15834:3:36"},"nativeSrc":"15834:9:36","nodeType":"YulFunctionCall","src":"15834:9:36"},"variableNames":[{"name":"diff","nativeSrc":"15826:4:36","nodeType":"YulIdentifier","src":"15826:4:36"}]},{"body":{"nativeSrc":"15867:22:36","nodeType":"YulBlock","src":"15867:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"15869:16:36","nodeType":"YulIdentifier","src":"15869:16:36"},"nativeSrc":"15869:18:36","nodeType":"YulFunctionCall","src":"15869:18:36"},"nativeSrc":"15869:18:36","nodeType":"YulExpressionStatement","src":"15869:18:36"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"15858:4:36","nodeType":"YulIdentifier","src":"15858:4:36"},{"name":"x","nativeSrc":"15864:1:36","nodeType":"YulIdentifier","src":"15864:1:36"}],"functionName":{"name":"gt","nativeSrc":"15855:2:36","nodeType":"YulIdentifier","src":"15855:2:36"},"nativeSrc":"15855:11:36","nodeType":"YulFunctionCall","src":"15855:11:36"},"nativeSrc":"15852:37:36","nodeType":"YulIf","src":"15852:37:36"}]},"name":"checked_sub_t_uint256","nativeSrc":"15767:128:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"15798:1:36","nodeType":"YulTypedName","src":"15798:1:36","type":""},{"name":"y","nativeSrc":"15801:1:36","nodeType":"YulTypedName","src":"15801:1:36","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"15807:4:36","nodeType":"YulTypedName","src":"15807:4:36","type":""}],"src":"15767:128:36"},{"body":{"nativeSrc":"16029:168:36","nodeType":"YulBlock","src":"16029:168:36","statements":[{"nativeSrc":"16039:26:36","nodeType":"YulAssignment","src":"16039:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16051:9:36","nodeType":"YulIdentifier","src":"16051:9:36"},{"kind":"number","nativeSrc":"16062:2:36","nodeType":"YulLiteral","src":"16062:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16047:3:36","nodeType":"YulIdentifier","src":"16047:3:36"},"nativeSrc":"16047:18:36","nodeType":"YulFunctionCall","src":"16047:18:36"},"variableNames":[{"name":"tail","nativeSrc":"16039:4:36","nodeType":"YulIdentifier","src":"16039:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16081:9:36","nodeType":"YulIdentifier","src":"16081:9:36"},{"name":"value0","nativeSrc":"16092:6:36","nodeType":"YulIdentifier","src":"16092:6:36"}],"functionName":{"name":"mstore","nativeSrc":"16074:6:36","nodeType":"YulIdentifier","src":"16074:6:36"},"nativeSrc":"16074:25:36","nodeType":"YulFunctionCall","src":"16074:25:36"},"nativeSrc":"16074:25:36","nodeType":"YulExpressionStatement","src":"16074:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16119:9:36","nodeType":"YulIdentifier","src":"16119:9:36"},{"kind":"number","nativeSrc":"16130:2:36","nodeType":"YulLiteral","src":"16130:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16115:3:36","nodeType":"YulIdentifier","src":"16115:3:36"},"nativeSrc":"16115:18:36","nodeType":"YulFunctionCall","src":"16115:18:36"},{"arguments":[{"name":"value1","nativeSrc":"16139:6:36","nodeType":"YulIdentifier","src":"16139:6:36"},{"kind":"number","nativeSrc":"16147:42:36","nodeType":"YulLiteral","src":"16147:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16135:3:36","nodeType":"YulIdentifier","src":"16135:3:36"},"nativeSrc":"16135:55:36","nodeType":"YulFunctionCall","src":"16135:55:36"}],"functionName":{"name":"mstore","nativeSrc":"16108:6:36","nodeType":"YulIdentifier","src":"16108:6:36"},"nativeSrc":"16108:83:36","nodeType":"YulFunctionCall","src":"16108:83:36"},"nativeSrc":"16108:83:36","nodeType":"YulExpressionStatement","src":"16108:83:36"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"15900:297:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15990:9:36","nodeType":"YulTypedName","src":"15990:9:36","type":""},{"name":"value1","nativeSrc":"16001:6:36","nodeType":"YulTypedName","src":"16001:6:36","type":""},{"name":"value0","nativeSrc":"16009:6:36","nodeType":"YulTypedName","src":"16009:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16020:4:36","nodeType":"YulTypedName","src":"16020:4:36","type":""}],"src":"15900:297:36"},{"body":{"nativeSrc":"16359:241:36","nodeType":"YulBlock","src":"16359:241:36","statements":[{"nativeSrc":"16369:26:36","nodeType":"YulAssignment","src":"16369:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16381:9:36","nodeType":"YulIdentifier","src":"16381:9:36"},{"kind":"number","nativeSrc":"16392:2:36","nodeType":"YulLiteral","src":"16392:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16377:3:36","nodeType":"YulIdentifier","src":"16377:3:36"},"nativeSrc":"16377:18:36","nodeType":"YulFunctionCall","src":"16377:18:36"},"variableNames":[{"name":"tail","nativeSrc":"16369:4:36","nodeType":"YulIdentifier","src":"16369:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16411:9:36","nodeType":"YulIdentifier","src":"16411:9:36"},{"name":"value0","nativeSrc":"16422:6:36","nodeType":"YulIdentifier","src":"16422:6:36"}],"functionName":{"name":"mstore","nativeSrc":"16404:6:36","nodeType":"YulIdentifier","src":"16404:6:36"},"nativeSrc":"16404:25:36","nodeType":"YulFunctionCall","src":"16404:25:36"},"nativeSrc":"16404:25:36","nodeType":"YulExpressionStatement","src":"16404:25:36"},{"nativeSrc":"16438:52:36","nodeType":"YulVariableDeclaration","src":"16438:52:36","value":{"kind":"number","nativeSrc":"16448:42:36","nodeType":"YulLiteral","src":"16448:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16442:2:36","nodeType":"YulTypedName","src":"16442:2:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16510:9:36","nodeType":"YulIdentifier","src":"16510:9:36"},{"kind":"number","nativeSrc":"16521:2:36","nodeType":"YulLiteral","src":"16521:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16506:3:36","nodeType":"YulIdentifier","src":"16506:3:36"},"nativeSrc":"16506:18:36","nodeType":"YulFunctionCall","src":"16506:18:36"},{"arguments":[{"name":"value1","nativeSrc":"16530:6:36","nodeType":"YulIdentifier","src":"16530:6:36"},{"name":"_1","nativeSrc":"16538:2:36","nodeType":"YulIdentifier","src":"16538:2:36"}],"functionName":{"name":"and","nativeSrc":"16526:3:36","nodeType":"YulIdentifier","src":"16526:3:36"},"nativeSrc":"16526:15:36","nodeType":"YulFunctionCall","src":"16526:15:36"}],"functionName":{"name":"mstore","nativeSrc":"16499:6:36","nodeType":"YulIdentifier","src":"16499:6:36"},"nativeSrc":"16499:43:36","nodeType":"YulFunctionCall","src":"16499:43:36"},"nativeSrc":"16499:43:36","nodeType":"YulExpressionStatement","src":"16499:43:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16562:9:36","nodeType":"YulIdentifier","src":"16562:9:36"},{"kind":"number","nativeSrc":"16573:2:36","nodeType":"YulLiteral","src":"16573:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16558:3:36","nodeType":"YulIdentifier","src":"16558:3:36"},"nativeSrc":"16558:18:36","nodeType":"YulFunctionCall","src":"16558:18:36"},{"arguments":[{"name":"value2","nativeSrc":"16582:6:36","nodeType":"YulIdentifier","src":"16582:6:36"},{"name":"_1","nativeSrc":"16590:2:36","nodeType":"YulIdentifier","src":"16590:2:36"}],"functionName":{"name":"and","nativeSrc":"16578:3:36","nodeType":"YulIdentifier","src":"16578:3:36"},"nativeSrc":"16578:15:36","nodeType":"YulFunctionCall","src":"16578:15:36"}],"functionName":{"name":"mstore","nativeSrc":"16551:6:36","nodeType":"YulIdentifier","src":"16551:6:36"},"nativeSrc":"16551:43:36","nodeType":"YulFunctionCall","src":"16551:43:36"},"nativeSrc":"16551:43:36","nodeType":"YulExpressionStatement","src":"16551:43:36"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"16202:398:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16312:9:36","nodeType":"YulTypedName","src":"16312:9:36","type":""},{"name":"value2","nativeSrc":"16323:6:36","nodeType":"YulTypedName","src":"16323:6:36","type":""},{"name":"value1","nativeSrc":"16331:6:36","nodeType":"YulTypedName","src":"16331:6:36","type":""},{"name":"value0","nativeSrc":"16339:6:36","nodeType":"YulTypedName","src":"16339:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16350:4:36","nodeType":"YulTypedName","src":"16350:4:36","type":""}],"src":"16202:398:36"},{"body":{"nativeSrc":"16686:103:36","nodeType":"YulBlock","src":"16686:103:36","statements":[{"body":{"nativeSrc":"16732:16:36","nodeType":"YulBlock","src":"16732:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16741:1:36","nodeType":"YulLiteral","src":"16741:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"16744:1:36","nodeType":"YulLiteral","src":"16744:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16734:6:36","nodeType":"YulIdentifier","src":"16734:6:36"},"nativeSrc":"16734:12:36","nodeType":"YulFunctionCall","src":"16734:12:36"},"nativeSrc":"16734:12:36","nodeType":"YulExpressionStatement","src":"16734:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"16707:7:36","nodeType":"YulIdentifier","src":"16707:7:36"},{"name":"headStart","nativeSrc":"16716:9:36","nodeType":"YulIdentifier","src":"16716:9:36"}],"functionName":{"name":"sub","nativeSrc":"16703:3:36","nodeType":"YulIdentifier","src":"16703:3:36"},"nativeSrc":"16703:23:36","nodeType":"YulFunctionCall","src":"16703:23:36"},{"kind":"number","nativeSrc":"16728:2:36","nodeType":"YulLiteral","src":"16728:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"16699:3:36","nodeType":"YulIdentifier","src":"16699:3:36"},"nativeSrc":"16699:32:36","nodeType":"YulFunctionCall","src":"16699:32:36"},"nativeSrc":"16696:52:36","nodeType":"YulIf","src":"16696:52:36"},{"nativeSrc":"16757:26:36","nodeType":"YulAssignment","src":"16757:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16773:9:36","nodeType":"YulIdentifier","src":"16773:9:36"}],"functionName":{"name":"mload","nativeSrc":"16767:5:36","nodeType":"YulIdentifier","src":"16767:5:36"},"nativeSrc":"16767:16:36","nodeType":"YulFunctionCall","src":"16767:16:36"},"variableNames":[{"name":"value0","nativeSrc":"16757:6:36","nodeType":"YulIdentifier","src":"16757:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nativeSrc":"16605:184:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16652:9:36","nodeType":"YulTypedName","src":"16652:9:36","type":""},{"name":"dataEnd","nativeSrc":"16663:7:36","nodeType":"YulTypedName","src":"16663:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"16675:6:36","nodeType":"YulTypedName","src":"16675:6:36","type":""}],"src":"16605:184:36"},{"body":{"nativeSrc":"16968:236:36","nodeType":"YulBlock","src":"16968:236:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16985:9:36","nodeType":"YulIdentifier","src":"16985:9:36"},{"kind":"number","nativeSrc":"16996:2:36","nodeType":"YulLiteral","src":"16996:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16978:6:36","nodeType":"YulIdentifier","src":"16978:6:36"},"nativeSrc":"16978:21:36","nodeType":"YulFunctionCall","src":"16978:21:36"},"nativeSrc":"16978:21:36","nodeType":"YulExpressionStatement","src":"16978:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17019:9:36","nodeType":"YulIdentifier","src":"17019:9:36"},{"kind":"number","nativeSrc":"17030:2:36","nodeType":"YulLiteral","src":"17030:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17015:3:36","nodeType":"YulIdentifier","src":"17015:3:36"},"nativeSrc":"17015:18:36","nodeType":"YulFunctionCall","src":"17015:18:36"},{"kind":"number","nativeSrc":"17035:2:36","nodeType":"YulLiteral","src":"17035:2:36","type":"","value":"46"}],"functionName":{"name":"mstore","nativeSrc":"17008:6:36","nodeType":"YulIdentifier","src":"17008:6:36"},"nativeSrc":"17008:30:36","nodeType":"YulFunctionCall","src":"17008:30:36"},"nativeSrc":"17008:30:36","nodeType":"YulExpressionStatement","src":"17008:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17058:9:36","nodeType":"YulIdentifier","src":"17058:9:36"},{"kind":"number","nativeSrc":"17069:2:36","nodeType":"YulLiteral","src":"17069:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17054:3:36","nodeType":"YulIdentifier","src":"17054:3:36"},"nativeSrc":"17054:18:36","nodeType":"YulFunctionCall","src":"17054:18:36"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nativeSrc":"17074:34:36","nodeType":"YulLiteral","src":"17074:34:36","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nativeSrc":"17047:6:36","nodeType":"YulIdentifier","src":"17047:6:36"},"nativeSrc":"17047:62:36","nodeType":"YulFunctionCall","src":"17047:62:36"},"nativeSrc":"17047:62:36","nodeType":"YulExpressionStatement","src":"17047:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17129:9:36","nodeType":"YulIdentifier","src":"17129:9:36"},{"kind":"number","nativeSrc":"17140:2:36","nodeType":"YulLiteral","src":"17140:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17125:3:36","nodeType":"YulIdentifier","src":"17125:3:36"},"nativeSrc":"17125:18:36","nodeType":"YulFunctionCall","src":"17125:18:36"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nativeSrc":"17145:16:36","nodeType":"YulLiteral","src":"17145:16:36","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nativeSrc":"17118:6:36","nodeType":"YulIdentifier","src":"17118:6:36"},"nativeSrc":"17118:44:36","nodeType":"YulFunctionCall","src":"17118:44:36"},"nativeSrc":"17118:44:36","nodeType":"YulExpressionStatement","src":"17118:44:36"},{"nativeSrc":"17171:27:36","nodeType":"YulAssignment","src":"17171:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"17183:9:36","nodeType":"YulIdentifier","src":"17183:9:36"},{"kind":"number","nativeSrc":"17194:3:36","nodeType":"YulLiteral","src":"17194:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17179:3:36","nodeType":"YulIdentifier","src":"17179:3:36"},"nativeSrc":"17179:19:36","nodeType":"YulFunctionCall","src":"17179:19:36"},"variableNames":[{"name":"tail","nativeSrc":"17171:4:36","nodeType":"YulIdentifier","src":"17171:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16794:410:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16945:9:36","nodeType":"YulTypedName","src":"16945:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16959:4:36","nodeType":"YulTypedName","src":"16959:4:36","type":""}],"src":"16794:410:36"},{"body":{"nativeSrc":"17383:231:36","nodeType":"YulBlock","src":"17383:231:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17400:9:36","nodeType":"YulIdentifier","src":"17400:9:36"},{"kind":"number","nativeSrc":"17411:2:36","nodeType":"YulLiteral","src":"17411:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17393:6:36","nodeType":"YulIdentifier","src":"17393:6:36"},"nativeSrc":"17393:21:36","nodeType":"YulFunctionCall","src":"17393:21:36"},"nativeSrc":"17393:21:36","nodeType":"YulExpressionStatement","src":"17393:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17434:9:36","nodeType":"YulIdentifier","src":"17434:9:36"},{"kind":"number","nativeSrc":"17445:2:36","nodeType":"YulLiteral","src":"17445:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17430:3:36","nodeType":"YulIdentifier","src":"17430:3:36"},"nativeSrc":"17430:18:36","nodeType":"YulFunctionCall","src":"17430:18:36"},{"kind":"number","nativeSrc":"17450:2:36","nodeType":"YulLiteral","src":"17450:2:36","type":"","value":"41"}],"functionName":{"name":"mstore","nativeSrc":"17423:6:36","nodeType":"YulIdentifier","src":"17423:6:36"},"nativeSrc":"17423:30:36","nodeType":"YulFunctionCall","src":"17423:30:36"},"nativeSrc":"17423:30:36","nodeType":"YulExpressionStatement","src":"17423:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17473:9:36","nodeType":"YulIdentifier","src":"17473:9:36"},{"kind":"number","nativeSrc":"17484:2:36","nodeType":"YulLiteral","src":"17484:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17469:3:36","nodeType":"YulIdentifier","src":"17469:3:36"},"nativeSrc":"17469:18:36","nodeType":"YulFunctionCall","src":"17469:18:36"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nativeSrc":"17489:34:36","nodeType":"YulLiteral","src":"17489:34:36","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nativeSrc":"17462:6:36","nodeType":"YulIdentifier","src":"17462:6:36"},"nativeSrc":"17462:62:36","nodeType":"YulFunctionCall","src":"17462:62:36"},"nativeSrc":"17462:62:36","nodeType":"YulExpressionStatement","src":"17462:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17544:9:36","nodeType":"YulIdentifier","src":"17544:9:36"},{"kind":"number","nativeSrc":"17555:2:36","nodeType":"YulLiteral","src":"17555:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17540:3:36","nodeType":"YulIdentifier","src":"17540:3:36"},"nativeSrc":"17540:18:36","nodeType":"YulFunctionCall","src":"17540:18:36"},{"hexValue":"6961626c6555554944","kind":"string","nativeSrc":"17560:11:36","nodeType":"YulLiteral","src":"17560:11:36","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nativeSrc":"17533:6:36","nodeType":"YulIdentifier","src":"17533:6:36"},"nativeSrc":"17533:39:36","nodeType":"YulFunctionCall","src":"17533:39:36"},"nativeSrc":"17533:39:36","nodeType":"YulExpressionStatement","src":"17533:39:36"},{"nativeSrc":"17581:27:36","nodeType":"YulAssignment","src":"17581:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"17593:9:36","nodeType":"YulIdentifier","src":"17593:9:36"},{"kind":"number","nativeSrc":"17604:3:36","nodeType":"YulLiteral","src":"17604:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17589:3:36","nodeType":"YulIdentifier","src":"17589:3:36"},"nativeSrc":"17589:19:36","nodeType":"YulFunctionCall","src":"17589:19:36"},"variableNames":[{"name":"tail","nativeSrc":"17581:4:36","nodeType":"YulIdentifier","src":"17581:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17209:405:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17360:9:36","nodeType":"YulTypedName","src":"17360:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17374:4:36","nodeType":"YulTypedName","src":"17374:4:36","type":""}],"src":"17209:405:36"},{"body":{"nativeSrc":"17906:371:36","nodeType":"YulBlock","src":"17906:371:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"17923:3:36","nodeType":"YulIdentifier","src":"17923:3:36"},{"name":"value0","nativeSrc":"17928:6:36","nodeType":"YulIdentifier","src":"17928:6:36"}],"functionName":{"name":"mstore","nativeSrc":"17916:6:36","nodeType":"YulIdentifier","src":"17916:6:36"},"nativeSrc":"17916:19:36","nodeType":"YulFunctionCall","src":"17916:19:36"},"nativeSrc":"17916:19:36","nodeType":"YulExpressionStatement","src":"17916:19:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17955:3:36","nodeType":"YulIdentifier","src":"17955:3:36"},{"kind":"number","nativeSrc":"17960:2:36","nodeType":"YulLiteral","src":"17960:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17951:3:36","nodeType":"YulIdentifier","src":"17951:3:36"},"nativeSrc":"17951:12:36","nodeType":"YulFunctionCall","src":"17951:12:36"},{"name":"value1","nativeSrc":"17965:6:36","nodeType":"YulIdentifier","src":"17965:6:36"}],"functionName":{"name":"mstore","nativeSrc":"17944:6:36","nodeType":"YulIdentifier","src":"17944:6:36"},"nativeSrc":"17944:28:36","nodeType":"YulFunctionCall","src":"17944:28:36"},"nativeSrc":"17944:28:36","nodeType":"YulExpressionStatement","src":"17944:28:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"17992:3:36","nodeType":"YulIdentifier","src":"17992:3:36"},{"kind":"number","nativeSrc":"17997:2:36","nodeType":"YulLiteral","src":"17997:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17988:3:36","nodeType":"YulIdentifier","src":"17988:3:36"},"nativeSrc":"17988:12:36","nodeType":"YulFunctionCall","src":"17988:12:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"18010:2:36","nodeType":"YulLiteral","src":"18010:2:36","type":"","value":"96"},{"name":"value2","nativeSrc":"18014:6:36","nodeType":"YulIdentifier","src":"18014:6:36"}],"functionName":{"name":"shl","nativeSrc":"18006:3:36","nodeType":"YulIdentifier","src":"18006:3:36"},"nativeSrc":"18006:15:36","nodeType":"YulFunctionCall","src":"18006:15:36"},{"kind":"number","nativeSrc":"18023:66:36","nodeType":"YulLiteral","src":"18023:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"18002:3:36","nodeType":"YulIdentifier","src":"18002:3:36"},"nativeSrc":"18002:88:36","nodeType":"YulFunctionCall","src":"18002:88:36"}],"functionName":{"name":"mstore","nativeSrc":"17981:6:36","nodeType":"YulIdentifier","src":"17981:6:36"},"nativeSrc":"17981:110:36","nodeType":"YulFunctionCall","src":"17981:110:36"},"nativeSrc":"17981:110:36","nodeType":"YulExpressionStatement","src":"17981:110:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"18111:3:36","nodeType":"YulIdentifier","src":"18111:3:36"},{"kind":"number","nativeSrc":"18116:2:36","nodeType":"YulLiteral","src":"18116:2:36","type":"","value":"84"}],"functionName":{"name":"add","nativeSrc":"18107:3:36","nodeType":"YulIdentifier","src":"18107:3:36"},"nativeSrc":"18107:12:36","nodeType":"YulFunctionCall","src":"18107:12:36"},{"name":"value3","nativeSrc":"18121:6:36","nodeType":"YulIdentifier","src":"18121:6:36"}],"functionName":{"name":"mstore","nativeSrc":"18100:6:36","nodeType":"YulIdentifier","src":"18100:6:36"},"nativeSrc":"18100:28:36","nodeType":"YulFunctionCall","src":"18100:28:36"},"nativeSrc":"18100:28:36","nodeType":"YulExpressionStatement","src":"18100:28:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"18148:3:36","nodeType":"YulIdentifier","src":"18148:3:36"},{"kind":"number","nativeSrc":"18153:3:36","nodeType":"YulLiteral","src":"18153:3:36","type":"","value":"116"}],"functionName":{"name":"add","nativeSrc":"18144:3:36","nodeType":"YulIdentifier","src":"18144:3:36"},"nativeSrc":"18144:13:36","nodeType":"YulFunctionCall","src":"18144:13:36"},{"name":"value4","nativeSrc":"18159:6:36","nodeType":"YulIdentifier","src":"18159:6:36"}],"functionName":{"name":"mstore","nativeSrc":"18137:6:36","nodeType":"YulIdentifier","src":"18137:6:36"},"nativeSrc":"18137:29:36","nodeType":"YulFunctionCall","src":"18137:29:36"},"nativeSrc":"18137:29:36","nodeType":"YulExpressionStatement","src":"18137:29:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"18186:3:36","nodeType":"YulIdentifier","src":"18186:3:36"},{"kind":"number","nativeSrc":"18191:3:36","nodeType":"YulLiteral","src":"18191:3:36","type":"","value":"148"}],"functionName":{"name":"add","nativeSrc":"18182:3:36","nodeType":"YulIdentifier","src":"18182:3:36"},"nativeSrc":"18182:13:36","nodeType":"YulFunctionCall","src":"18182:13:36"},{"name":"value5","nativeSrc":"18197:6:36","nodeType":"YulIdentifier","src":"18197:6:36"}],"functionName":{"name":"mstore","nativeSrc":"18175:6:36","nodeType":"YulIdentifier","src":"18175:6:36"},"nativeSrc":"18175:29:36","nodeType":"YulFunctionCall","src":"18175:29:36"},"nativeSrc":"18175:29:36","nodeType":"YulExpressionStatement","src":"18175:29:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"18224:3:36","nodeType":"YulIdentifier","src":"18224:3:36"},{"kind":"number","nativeSrc":"18229:3:36","nodeType":"YulLiteral","src":"18229:3:36","type":"","value":"180"}],"functionName":{"name":"add","nativeSrc":"18220:3:36","nodeType":"YulIdentifier","src":"18220:3:36"},"nativeSrc":"18220:13:36","nodeType":"YulFunctionCall","src":"18220:13:36"},{"name":"value6","nativeSrc":"18235:6:36","nodeType":"YulIdentifier","src":"18235:6:36"}],"functionName":{"name":"mstore","nativeSrc":"18213:6:36","nodeType":"YulIdentifier","src":"18213:6:36"},"nativeSrc":"18213:29:36","nodeType":"YulFunctionCall","src":"18213:29:36"},"nativeSrc":"18213:29:36","nodeType":"YulExpressionStatement","src":"18213:29:36"},{"nativeSrc":"18251:20:36","nodeType":"YulAssignment","src":"18251:20:36","value":{"arguments":[{"name":"pos","nativeSrc":"18262:3:36","nodeType":"YulIdentifier","src":"18262:3:36"},{"kind":"number","nativeSrc":"18267:3:36","nodeType":"YulLiteral","src":"18267:3:36","type":"","value":"212"}],"functionName":{"name":"add","nativeSrc":"18258:3:36","nodeType":"YulIdentifier","src":"18258:3:36"},"nativeSrc":"18258:13:36","nodeType":"YulFunctionCall","src":"18258:13:36"},"variableNames":[{"name":"end","nativeSrc":"18251:3:36","nodeType":"YulIdentifier","src":"18251:3:36"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"17619:658:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17834:3:36","nodeType":"YulTypedName","src":"17834:3:36","type":""},{"name":"value6","nativeSrc":"17839:6:36","nodeType":"YulTypedName","src":"17839:6:36","type":""},{"name":"value5","nativeSrc":"17847:6:36","nodeType":"YulTypedName","src":"17847:6:36","type":""},{"name":"value4","nativeSrc":"17855:6:36","nodeType":"YulTypedName","src":"17855:6:36","type":""},{"name":"value3","nativeSrc":"17863:6:36","nodeType":"YulTypedName","src":"17863:6:36","type":""},{"name":"value2","nativeSrc":"17871:6:36","nodeType":"YulTypedName","src":"17871:6:36","type":""},{"name":"value1","nativeSrc":"17879:6:36","nodeType":"YulTypedName","src":"17879:6:36","type":""},{"name":"value0","nativeSrc":"17887:6:36","nodeType":"YulTypedName","src":"17887:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17898:3:36","nodeType":"YulTypedName","src":"17898:3:36","type":""}],"src":"17619:658:36"},{"body":{"nativeSrc":"18456:233:36","nodeType":"YulBlock","src":"18456:233:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18473:9:36","nodeType":"YulIdentifier","src":"18473:9:36"},{"kind":"number","nativeSrc":"18484:2:36","nodeType":"YulLiteral","src":"18484:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18466:6:36","nodeType":"YulIdentifier","src":"18466:6:36"},"nativeSrc":"18466:21:36","nodeType":"YulFunctionCall","src":"18466:21:36"},"nativeSrc":"18466:21:36","nodeType":"YulExpressionStatement","src":"18466:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18507:9:36","nodeType":"YulIdentifier","src":"18507:9:36"},{"kind":"number","nativeSrc":"18518:2:36","nodeType":"YulLiteral","src":"18518:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18503:3:36","nodeType":"YulIdentifier","src":"18503:3:36"},"nativeSrc":"18503:18:36","nodeType":"YulFunctionCall","src":"18503:18:36"},{"kind":"number","nativeSrc":"18523:2:36","nodeType":"YulLiteral","src":"18523:2:36","type":"","value":"43"}],"functionName":{"name":"mstore","nativeSrc":"18496:6:36","nodeType":"YulIdentifier","src":"18496:6:36"},"nativeSrc":"18496:30:36","nodeType":"YulFunctionCall","src":"18496:30:36"},"nativeSrc":"18496:30:36","nodeType":"YulExpressionStatement","src":"18496:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18546:9:36","nodeType":"YulIdentifier","src":"18546:9:36"},{"kind":"number","nativeSrc":"18557:2:36","nodeType":"YulLiteral","src":"18557:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18542:3:36","nodeType":"YulIdentifier","src":"18542:3:36"},"nativeSrc":"18542:18:36","nodeType":"YulFunctionCall","src":"18542:18:36"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nativeSrc":"18562:34:36","nodeType":"YulLiteral","src":"18562:34:36","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nativeSrc":"18535:6:36","nodeType":"YulIdentifier","src":"18535:6:36"},"nativeSrc":"18535:62:36","nodeType":"YulFunctionCall","src":"18535:62:36"},"nativeSrc":"18535:62:36","nodeType":"YulExpressionStatement","src":"18535:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18617:9:36","nodeType":"YulIdentifier","src":"18617:9:36"},{"kind":"number","nativeSrc":"18628:2:36","nodeType":"YulLiteral","src":"18628:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18613:3:36","nodeType":"YulIdentifier","src":"18613:3:36"},"nativeSrc":"18613:18:36","nodeType":"YulFunctionCall","src":"18613:18:36"},{"hexValue":"6e697469616c697a696e67","kind":"string","nativeSrc":"18633:13:36","nodeType":"YulLiteral","src":"18633:13:36","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nativeSrc":"18606:6:36","nodeType":"YulIdentifier","src":"18606:6:36"},"nativeSrc":"18606:41:36","nodeType":"YulFunctionCall","src":"18606:41:36"},"nativeSrc":"18606:41:36","nodeType":"YulExpressionStatement","src":"18606:41:36"},{"nativeSrc":"18656:27:36","nodeType":"YulAssignment","src":"18656:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"18668:9:36","nodeType":"YulIdentifier","src":"18668:9:36"},{"kind":"number","nativeSrc":"18679:3:36","nodeType":"YulLiteral","src":"18679:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18664:3:36","nodeType":"YulIdentifier","src":"18664:3:36"},"nativeSrc":"18664:19:36","nodeType":"YulFunctionCall","src":"18664:19:36"},"variableNames":[{"name":"tail","nativeSrc":"18656:4:36","nodeType":"YulIdentifier","src":"18656:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18282:407:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18433:9:36","nodeType":"YulTypedName","src":"18433:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18447:4:36","nodeType":"YulTypedName","src":"18447:4:36","type":""}],"src":"18282:407:36"},{"body":{"nativeSrc":"18879:285:36","nodeType":"YulBlock","src":"18879:285:36","statements":[{"nativeSrc":"18889:27:36","nodeType":"YulAssignment","src":"18889:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"18901:9:36","nodeType":"YulIdentifier","src":"18901:9:36"},{"kind":"number","nativeSrc":"18912:3:36","nodeType":"YulLiteral","src":"18912:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18897:3:36","nodeType":"YulIdentifier","src":"18897:3:36"},"nativeSrc":"18897:19:36","nodeType":"YulFunctionCall","src":"18897:19:36"},"variableNames":[{"name":"tail","nativeSrc":"18889:4:36","nodeType":"YulIdentifier","src":"18889:4:36"}]},{"nativeSrc":"18925:52:36","nodeType":"YulVariableDeclaration","src":"18925:52:36","value":{"kind":"number","nativeSrc":"18935:42:36","nodeType":"YulLiteral","src":"18935:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18929:2:36","nodeType":"YulTypedName","src":"18929:2:36","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18993:9:36","nodeType":"YulIdentifier","src":"18993:9:36"},{"arguments":[{"name":"value0","nativeSrc":"19008:6:36","nodeType":"YulIdentifier","src":"19008:6:36"},{"name":"_1","nativeSrc":"19016:2:36","nodeType":"YulIdentifier","src":"19016:2:36"}],"functionName":{"name":"and","nativeSrc":"19004:3:36","nodeType":"YulIdentifier","src":"19004:3:36"},"nativeSrc":"19004:15:36","nodeType":"YulFunctionCall","src":"19004:15:36"}],"functionName":{"name":"mstore","nativeSrc":"18986:6:36","nodeType":"YulIdentifier","src":"18986:6:36"},"nativeSrc":"18986:34:36","nodeType":"YulFunctionCall","src":"18986:34:36"},"nativeSrc":"18986:34:36","nodeType":"YulExpressionStatement","src":"18986:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19040:9:36","nodeType":"YulIdentifier","src":"19040:9:36"},{"kind":"number","nativeSrc":"19051:2:36","nodeType":"YulLiteral","src":"19051:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19036:3:36","nodeType":"YulIdentifier","src":"19036:3:36"},"nativeSrc":"19036:18:36","nodeType":"YulFunctionCall","src":"19036:18:36"},{"name":"value1","nativeSrc":"19056:6:36","nodeType":"YulIdentifier","src":"19056:6:36"}],"functionName":{"name":"mstore","nativeSrc":"19029:6:36","nodeType":"YulIdentifier","src":"19029:6:36"},"nativeSrc":"19029:34:36","nodeType":"YulFunctionCall","src":"19029:34:36"},"nativeSrc":"19029:34:36","nodeType":"YulExpressionStatement","src":"19029:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19083:9:36","nodeType":"YulIdentifier","src":"19083:9:36"},{"kind":"number","nativeSrc":"19094:2:36","nodeType":"YulLiteral","src":"19094:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19079:3:36","nodeType":"YulIdentifier","src":"19079:3:36"},"nativeSrc":"19079:18:36","nodeType":"YulFunctionCall","src":"19079:18:36"},{"name":"value2","nativeSrc":"19099:6:36","nodeType":"YulIdentifier","src":"19099:6:36"}],"functionName":{"name":"mstore","nativeSrc":"19072:6:36","nodeType":"YulIdentifier","src":"19072:6:36"},"nativeSrc":"19072:34:36","nodeType":"YulFunctionCall","src":"19072:34:36"},"nativeSrc":"19072:34:36","nodeType":"YulExpressionStatement","src":"19072:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19126:9:36","nodeType":"YulIdentifier","src":"19126:9:36"},{"kind":"number","nativeSrc":"19137:2:36","nodeType":"YulLiteral","src":"19137:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19122:3:36","nodeType":"YulIdentifier","src":"19122:3:36"},"nativeSrc":"19122:18:36","nodeType":"YulFunctionCall","src":"19122:18:36"},{"arguments":[{"name":"value3","nativeSrc":"19146:6:36","nodeType":"YulIdentifier","src":"19146:6:36"},{"name":"_1","nativeSrc":"19154:2:36","nodeType":"YulIdentifier","src":"19154:2:36"}],"functionName":{"name":"and","nativeSrc":"19142:3:36","nodeType":"YulIdentifier","src":"19142:3:36"},"nativeSrc":"19142:15:36","nodeType":"YulFunctionCall","src":"19142:15:36"}],"functionName":{"name":"mstore","nativeSrc":"19115:6:36","nodeType":"YulIdentifier","src":"19115:6:36"},"nativeSrc":"19115:43:36","nodeType":"YulFunctionCall","src":"19115:43:36"},"nativeSrc":"19115:43:36","nodeType":"YulExpressionStatement","src":"19115:43:36"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed","nativeSrc":"18694:470:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18824:9:36","nodeType":"YulTypedName","src":"18824:9:36","type":""},{"name":"value3","nativeSrc":"18835:6:36","nodeType":"YulTypedName","src":"18835:6:36","type":""},{"name":"value2","nativeSrc":"18843:6:36","nodeType":"YulTypedName","src":"18843:6:36","type":""},{"name":"value1","nativeSrc":"18851:6:36","nodeType":"YulTypedName","src":"18851:6:36","type":""},{"name":"value0","nativeSrc":"18859:6:36","nodeType":"YulTypedName","src":"18859:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18870:4:36","nodeType":"YulTypedName","src":"18870:4:36","type":""}],"src":"18694:470:36"},{"body":{"nativeSrc":"19201:152:36","nodeType":"YulBlock","src":"19201:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19218:1:36","nodeType":"YulLiteral","src":"19218:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"19221:77:36","nodeType":"YulLiteral","src":"19221:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"19211:6:36","nodeType":"YulIdentifier","src":"19211:6:36"},"nativeSrc":"19211:88:36","nodeType":"YulFunctionCall","src":"19211:88:36"},"nativeSrc":"19211:88:36","nodeType":"YulExpressionStatement","src":"19211:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19315:1:36","nodeType":"YulLiteral","src":"19315:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"19318:4:36","nodeType":"YulLiteral","src":"19318:4:36","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"19308:6:36","nodeType":"YulIdentifier","src":"19308:6:36"},"nativeSrc":"19308:15:36","nodeType":"YulFunctionCall","src":"19308:15:36"},"nativeSrc":"19308:15:36","nodeType":"YulExpressionStatement","src":"19308:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19339:1:36","nodeType":"YulLiteral","src":"19339:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"19342:4:36","nodeType":"YulLiteral","src":"19342:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"19332:6:36","nodeType":"YulIdentifier","src":"19332:6:36"},"nativeSrc":"19332:15:36","nodeType":"YulFunctionCall","src":"19332:15:36"},"nativeSrc":"19332:15:36","nodeType":"YulExpressionStatement","src":"19332:15:36"}]},"name":"panic_error_0x21","nativeSrc":"19169:184:36","nodeType":"YulFunctionDefinition","src":"19169:184:36"},{"body":{"nativeSrc":"19424:184:36","nodeType":"YulBlock","src":"19424:184:36","statements":[{"nativeSrc":"19434:10:36","nodeType":"YulVariableDeclaration","src":"19434:10:36","value":{"kind":"number","nativeSrc":"19443:1:36","nodeType":"YulLiteral","src":"19443:1:36","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"19438:1:36","nodeType":"YulTypedName","src":"19438:1:36","type":""}]},{"body":{"nativeSrc":"19503:63:36","nodeType":"YulBlock","src":"19503:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"19528:3:36","nodeType":"YulIdentifier","src":"19528:3:36"},{"name":"i","nativeSrc":"19533:1:36","nodeType":"YulIdentifier","src":"19533:1:36"}],"functionName":{"name":"add","nativeSrc":"19524:3:36","nodeType":"YulIdentifier","src":"19524:3:36"},"nativeSrc":"19524:11:36","nodeType":"YulFunctionCall","src":"19524:11:36"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"19547:3:36","nodeType":"YulIdentifier","src":"19547:3:36"},{"name":"i","nativeSrc":"19552:1:36","nodeType":"YulIdentifier","src":"19552:1:36"}],"functionName":{"name":"add","nativeSrc":"19543:3:36","nodeType":"YulIdentifier","src":"19543:3:36"},"nativeSrc":"19543:11:36","nodeType":"YulFunctionCall","src":"19543:11:36"}],"functionName":{"name":"mload","nativeSrc":"19537:5:36","nodeType":"YulIdentifier","src":"19537:5:36"},"nativeSrc":"19537:18:36","nodeType":"YulFunctionCall","src":"19537:18:36"}],"functionName":{"name":"mstore","nativeSrc":"19517:6:36","nodeType":"YulIdentifier","src":"19517:6:36"},"nativeSrc":"19517:39:36","nodeType":"YulFunctionCall","src":"19517:39:36"},"nativeSrc":"19517:39:36","nodeType":"YulExpressionStatement","src":"19517:39:36"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"19464:1:36","nodeType":"YulIdentifier","src":"19464:1:36"},{"name":"length","nativeSrc":"19467:6:36","nodeType":"YulIdentifier","src":"19467:6:36"}],"functionName":{"name":"lt","nativeSrc":"19461:2:36","nodeType":"YulIdentifier","src":"19461:2:36"},"nativeSrc":"19461:13:36","nodeType":"YulFunctionCall","src":"19461:13:36"},"nativeSrc":"19453:113:36","nodeType":"YulForLoop","post":{"nativeSrc":"19475:19:36","nodeType":"YulBlock","src":"19475:19:36","statements":[{"nativeSrc":"19477:15:36","nodeType":"YulAssignment","src":"19477:15:36","value":{"arguments":[{"name":"i","nativeSrc":"19486:1:36","nodeType":"YulIdentifier","src":"19486:1:36"},{"kind":"number","nativeSrc":"19489:2:36","nodeType":"YulLiteral","src":"19489:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19482:3:36","nodeType":"YulIdentifier","src":"19482:3:36"},"nativeSrc":"19482:10:36","nodeType":"YulFunctionCall","src":"19482:10:36"},"variableNames":[{"name":"i","nativeSrc":"19477:1:36","nodeType":"YulIdentifier","src":"19477:1:36"}]}]},"pre":{"nativeSrc":"19457:3:36","nodeType":"YulBlock","src":"19457:3:36","statements":[]},"src":"19453:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"19586:3:36","nodeType":"YulIdentifier","src":"19586:3:36"},{"name":"length","nativeSrc":"19591:6:36","nodeType":"YulIdentifier","src":"19591:6:36"}],"functionName":{"name":"add","nativeSrc":"19582:3:36","nodeType":"YulIdentifier","src":"19582:3:36"},"nativeSrc":"19582:16:36","nodeType":"YulFunctionCall","src":"19582:16:36"},{"kind":"number","nativeSrc":"19600:1:36","nodeType":"YulLiteral","src":"19600:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"19575:6:36","nodeType":"YulIdentifier","src":"19575:6:36"},"nativeSrc":"19575:27:36","nodeType":"YulFunctionCall","src":"19575:27:36"},"nativeSrc":"19575:27:36","nodeType":"YulExpressionStatement","src":"19575:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19358:250:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"19402:3:36","nodeType":"YulTypedName","src":"19402:3:36","type":""},{"name":"dst","nativeSrc":"19407:3:36","nodeType":"YulTypedName","src":"19407:3:36","type":""},{"name":"length","nativeSrc":"19412:6:36","nodeType":"YulTypedName","src":"19412:6:36","type":""}],"src":"19358:250:36"},{"body":{"nativeSrc":"19662:280:36","nodeType":"YulBlock","src":"19662:280:36","statements":[{"nativeSrc":"19672:26:36","nodeType":"YulVariableDeclaration","src":"19672:26:36","value":{"arguments":[{"name":"value","nativeSrc":"19692:5:36","nodeType":"YulIdentifier","src":"19692:5:36"}],"functionName":{"name":"mload","nativeSrc":"19686:5:36","nodeType":"YulIdentifier","src":"19686:5:36"},"nativeSrc":"19686:12:36","nodeType":"YulFunctionCall","src":"19686:12:36"},"variables":[{"name":"length","nativeSrc":"19676:6:36","nodeType":"YulTypedName","src":"19676:6:36","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"19714:3:36","nodeType":"YulIdentifier","src":"19714:3:36"},{"name":"length","nativeSrc":"19719:6:36","nodeType":"YulIdentifier","src":"19719:6:36"}],"functionName":{"name":"mstore","nativeSrc":"19707:6:36","nodeType":"YulIdentifier","src":"19707:6:36"},"nativeSrc":"19707:19:36","nodeType":"YulFunctionCall","src":"19707:19:36"},"nativeSrc":"19707:19:36","nodeType":"YulExpressionStatement","src":"19707:19:36"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"19774:5:36","nodeType":"YulIdentifier","src":"19774:5:36"},{"kind":"number","nativeSrc":"19781:4:36","nodeType":"YulLiteral","src":"19781:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19770:3:36","nodeType":"YulIdentifier","src":"19770:3:36"},"nativeSrc":"19770:16:36","nodeType":"YulFunctionCall","src":"19770:16:36"},{"arguments":[{"name":"pos","nativeSrc":"19792:3:36","nodeType":"YulIdentifier","src":"19792:3:36"},{"kind":"number","nativeSrc":"19797:4:36","nodeType":"YulLiteral","src":"19797:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19788:3:36","nodeType":"YulIdentifier","src":"19788:3:36"},"nativeSrc":"19788:14:36","nodeType":"YulFunctionCall","src":"19788:14:36"},{"name":"length","nativeSrc":"19804:6:36","nodeType":"YulIdentifier","src":"19804:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19735:34:36","nodeType":"YulIdentifier","src":"19735:34:36"},"nativeSrc":"19735:76:36","nodeType":"YulFunctionCall","src":"19735:76:36"},"nativeSrc":"19735:76:36","nodeType":"YulExpressionStatement","src":"19735:76:36"},{"nativeSrc":"19820:116:36","nodeType":"YulAssignment","src":"19820:116:36","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"19835:3:36","nodeType":"YulIdentifier","src":"19835:3:36"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"19848:6:36","nodeType":"YulIdentifier","src":"19848:6:36"},{"kind":"number","nativeSrc":"19856:2:36","nodeType":"YulLiteral","src":"19856:2:36","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"19844:3:36","nodeType":"YulIdentifier","src":"19844:3:36"},"nativeSrc":"19844:15:36","nodeType":"YulFunctionCall","src":"19844:15:36"},{"kind":"number","nativeSrc":"19861:66:36","nodeType":"YulLiteral","src":"19861:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"19840:3:36","nodeType":"YulIdentifier","src":"19840:3:36"},"nativeSrc":"19840:88:36","nodeType":"YulFunctionCall","src":"19840:88:36"}],"functionName":{"name":"add","nativeSrc":"19831:3:36","nodeType":"YulIdentifier","src":"19831:3:36"},"nativeSrc":"19831:98:36","nodeType":"YulFunctionCall","src":"19831:98:36"},{"kind":"number","nativeSrc":"19931:4:36","nodeType":"YulLiteral","src":"19931:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19827:3:36","nodeType":"YulIdentifier","src":"19827:3:36"},"nativeSrc":"19827:109:36","nodeType":"YulFunctionCall","src":"19827:109:36"},"variableNames":[{"name":"end","nativeSrc":"19820:3:36","nodeType":"YulIdentifier","src":"19820:3:36"}]}]},"name":"abi_encode_bytes","nativeSrc":"19613:329:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"19639:5:36","nodeType":"YulTypedName","src":"19639:5:36","type":""},{"name":"pos","nativeSrc":"19646:3:36","nodeType":"YulTypedName","src":"19646:3:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19654:3:36","nodeType":"YulTypedName","src":"19654:3:36","type":""}],"src":"19613:329:36"},{"body":{"nativeSrc":"20094:141:36","nodeType":"YulBlock","src":"20094:141:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20111:9:36","nodeType":"YulIdentifier","src":"20111:9:36"},{"name":"value0","nativeSrc":"20122:6:36","nodeType":"YulIdentifier","src":"20122:6:36"}],"functionName":{"name":"mstore","nativeSrc":"20104:6:36","nodeType":"YulIdentifier","src":"20104:6:36"},"nativeSrc":"20104:25:36","nodeType":"YulFunctionCall","src":"20104:25:36"},"nativeSrc":"20104:25:36","nodeType":"YulExpressionStatement","src":"20104:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20149:9:36","nodeType":"YulIdentifier","src":"20149:9:36"},{"kind":"number","nativeSrc":"20160:2:36","nodeType":"YulLiteral","src":"20160:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20145:3:36","nodeType":"YulIdentifier","src":"20145:3:36"},"nativeSrc":"20145:18:36","nodeType":"YulFunctionCall","src":"20145:18:36"},{"kind":"number","nativeSrc":"20165:2:36","nodeType":"YulLiteral","src":"20165:2:36","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"20138:6:36","nodeType":"YulIdentifier","src":"20138:6:36"},"nativeSrc":"20138:30:36","nodeType":"YulFunctionCall","src":"20138:30:36"},"nativeSrc":"20138:30:36","nodeType":"YulExpressionStatement","src":"20138:30:36"},{"nativeSrc":"20177:52:36","nodeType":"YulAssignment","src":"20177:52:36","value":{"arguments":[{"name":"value1","nativeSrc":"20202:6:36","nodeType":"YulIdentifier","src":"20202:6:36"},{"arguments":[{"name":"headStart","nativeSrc":"20214:9:36","nodeType":"YulIdentifier","src":"20214:9:36"},{"kind":"number","nativeSrc":"20225:2:36","nodeType":"YulLiteral","src":"20225:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20210:3:36","nodeType":"YulIdentifier","src":"20210:3:36"},"nativeSrc":"20210:18:36","nodeType":"YulFunctionCall","src":"20210:18:36"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"20185:16:36","nodeType":"YulIdentifier","src":"20185:16:36"},"nativeSrc":"20185:44:36","nodeType":"YulFunctionCall","src":"20185:44:36"},"variableNames":[{"name":"tail","nativeSrc":"20177:4:36","nodeType":"YulIdentifier","src":"20177:4:36"}]}]},"name":"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"19947:288:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20055:9:36","nodeType":"YulTypedName","src":"20055:9:36","type":""},{"name":"value1","nativeSrc":"20066:6:36","nodeType":"YulTypedName","src":"20066:6:36","type":""},{"name":"value0","nativeSrc":"20074:6:36","nodeType":"YulTypedName","src":"20074:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20085:4:36","nodeType":"YulTypedName","src":"20085:4:36","type":""}],"src":"19947:288:36"},{"body":{"nativeSrc":"20377:150:36","nodeType":"YulBlock","src":"20377:150:36","statements":[{"nativeSrc":"20387:27:36","nodeType":"YulVariableDeclaration","src":"20387:27:36","value":{"arguments":[{"name":"value0","nativeSrc":"20407:6:36","nodeType":"YulIdentifier","src":"20407:6:36"}],"functionName":{"name":"mload","nativeSrc":"20401:5:36","nodeType":"YulIdentifier","src":"20401:5:36"},"nativeSrc":"20401:13:36","nodeType":"YulFunctionCall","src":"20401:13:36"},"variables":[{"name":"length","nativeSrc":"20391:6:36","nodeType":"YulTypedName","src":"20391:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"20462:6:36","nodeType":"YulIdentifier","src":"20462:6:36"},{"kind":"number","nativeSrc":"20470:4:36","nodeType":"YulLiteral","src":"20470:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"20458:3:36","nodeType":"YulIdentifier","src":"20458:3:36"},"nativeSrc":"20458:17:36","nodeType":"YulFunctionCall","src":"20458:17:36"},{"name":"pos","nativeSrc":"20477:3:36","nodeType":"YulIdentifier","src":"20477:3:36"},{"name":"length","nativeSrc":"20482:6:36","nodeType":"YulIdentifier","src":"20482:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"20423:34:36","nodeType":"YulIdentifier","src":"20423:34:36"},"nativeSrc":"20423:66:36","nodeType":"YulFunctionCall","src":"20423:66:36"},"nativeSrc":"20423:66:36","nodeType":"YulExpressionStatement","src":"20423:66:36"},{"nativeSrc":"20498:23:36","nodeType":"YulAssignment","src":"20498:23:36","value":{"arguments":[{"name":"pos","nativeSrc":"20509:3:36","nodeType":"YulIdentifier","src":"20509:3:36"},{"name":"length","nativeSrc":"20514:6:36","nodeType":"YulIdentifier","src":"20514:6:36"}],"functionName":{"name":"add","nativeSrc":"20505:3:36","nodeType":"YulIdentifier","src":"20505:3:36"},"nativeSrc":"20505:16:36","nodeType":"YulFunctionCall","src":"20505:16:36"},"variableNames":[{"name":"end","nativeSrc":"20498:3:36","nodeType":"YulIdentifier","src":"20498:3:36"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"20240:287:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20353:3:36","nodeType":"YulTypedName","src":"20353:3:36","type":""},{"name":"value0","nativeSrc":"20358:6:36","nodeType":"YulTypedName","src":"20358:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20369:3:36","nodeType":"YulTypedName","src":"20369:3:36","type":""}],"src":"20240:287:36"},{"body":{"nativeSrc":"20706:235:36","nodeType":"YulBlock","src":"20706:235:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20723:9:36","nodeType":"YulIdentifier","src":"20723:9:36"},{"kind":"number","nativeSrc":"20734:2:36","nodeType":"YulLiteral","src":"20734:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20716:6:36","nodeType":"YulIdentifier","src":"20716:6:36"},"nativeSrc":"20716:21:36","nodeType":"YulFunctionCall","src":"20716:21:36"},"nativeSrc":"20716:21:36","nodeType":"YulExpressionStatement","src":"20716:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20757:9:36","nodeType":"YulIdentifier","src":"20757:9:36"},{"kind":"number","nativeSrc":"20768:2:36","nodeType":"YulLiteral","src":"20768:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20753:3:36","nodeType":"YulIdentifier","src":"20753:3:36"},"nativeSrc":"20753:18:36","nodeType":"YulFunctionCall","src":"20753:18:36"},{"kind":"number","nativeSrc":"20773:2:36","nodeType":"YulLiteral","src":"20773:2:36","type":"","value":"45"}],"functionName":{"name":"mstore","nativeSrc":"20746:6:36","nodeType":"YulIdentifier","src":"20746:6:36"},"nativeSrc":"20746:30:36","nodeType":"YulFunctionCall","src":"20746:30:36"},"nativeSrc":"20746:30:36","nodeType":"YulExpressionStatement","src":"20746:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20796:9:36","nodeType":"YulIdentifier","src":"20796:9:36"},{"kind":"number","nativeSrc":"20807:2:36","nodeType":"YulLiteral","src":"20807:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20792:3:36","nodeType":"YulIdentifier","src":"20792:3:36"},"nativeSrc":"20792:18:36","nodeType":"YulFunctionCall","src":"20792:18:36"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nativeSrc":"20812:34:36","nodeType":"YulLiteral","src":"20812:34:36","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nativeSrc":"20785:6:36","nodeType":"YulIdentifier","src":"20785:6:36"},"nativeSrc":"20785:62:36","nodeType":"YulFunctionCall","src":"20785:62:36"},"nativeSrc":"20785:62:36","nodeType":"YulExpressionStatement","src":"20785:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20867:9:36","nodeType":"YulIdentifier","src":"20867:9:36"},{"kind":"number","nativeSrc":"20878:2:36","nodeType":"YulLiteral","src":"20878:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20863:3:36","nodeType":"YulIdentifier","src":"20863:3:36"},"nativeSrc":"20863:18:36","nodeType":"YulFunctionCall","src":"20863:18:36"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nativeSrc":"20883:15:36","nodeType":"YulLiteral","src":"20883:15:36","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nativeSrc":"20856:6:36","nodeType":"YulIdentifier","src":"20856:6:36"},"nativeSrc":"20856:43:36","nodeType":"YulFunctionCall","src":"20856:43:36"},"nativeSrc":"20856:43:36","nodeType":"YulExpressionStatement","src":"20856:43:36"},{"nativeSrc":"20908:27:36","nodeType":"YulAssignment","src":"20908:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"20920:9:36","nodeType":"YulIdentifier","src":"20920:9:36"},{"kind":"number","nativeSrc":"20931:3:36","nodeType":"YulLiteral","src":"20931:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20916:3:36","nodeType":"YulIdentifier","src":"20916:3:36"},"nativeSrc":"20916:19:36","nodeType":"YulFunctionCall","src":"20916:19:36"},"variableNames":[{"name":"tail","nativeSrc":"20908:4:36","nodeType":"YulIdentifier","src":"20908:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20532:409:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20683:9:36","nodeType":"YulTypedName","src":"20683:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20697:4:36","nodeType":"YulTypedName","src":"20697:4:36","type":""}],"src":"20532:409:36"},{"body":{"nativeSrc":"21127:217:36","nodeType":"YulBlock","src":"21127:217:36","statements":[{"nativeSrc":"21137:27:36","nodeType":"YulAssignment","src":"21137:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"21149:9:36","nodeType":"YulIdentifier","src":"21149:9:36"},{"kind":"number","nativeSrc":"21160:3:36","nodeType":"YulLiteral","src":"21160:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"21145:3:36","nodeType":"YulIdentifier","src":"21145:3:36"},"nativeSrc":"21145:19:36","nodeType":"YulFunctionCall","src":"21145:19:36"},"variableNames":[{"name":"tail","nativeSrc":"21137:4:36","nodeType":"YulIdentifier","src":"21137:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21180:9:36","nodeType":"YulIdentifier","src":"21180:9:36"},{"name":"value0","nativeSrc":"21191:6:36","nodeType":"YulIdentifier","src":"21191:6:36"}],"functionName":{"name":"mstore","nativeSrc":"21173:6:36","nodeType":"YulIdentifier","src":"21173:6:36"},"nativeSrc":"21173:25:36","nodeType":"YulFunctionCall","src":"21173:25:36"},"nativeSrc":"21173:25:36","nodeType":"YulExpressionStatement","src":"21173:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21218:9:36","nodeType":"YulIdentifier","src":"21218:9:36"},{"kind":"number","nativeSrc":"21229:2:36","nodeType":"YulLiteral","src":"21229:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21214:3:36","nodeType":"YulIdentifier","src":"21214:3:36"},"nativeSrc":"21214:18:36","nodeType":"YulFunctionCall","src":"21214:18:36"},{"arguments":[{"name":"value1","nativeSrc":"21238:6:36","nodeType":"YulIdentifier","src":"21238:6:36"},{"kind":"number","nativeSrc":"21246:4:36","nodeType":"YulLiteral","src":"21246:4:36","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"21234:3:36","nodeType":"YulIdentifier","src":"21234:3:36"},"nativeSrc":"21234:17:36","nodeType":"YulFunctionCall","src":"21234:17:36"}],"functionName":{"name":"mstore","nativeSrc":"21207:6:36","nodeType":"YulIdentifier","src":"21207:6:36"},"nativeSrc":"21207:45:36","nodeType":"YulFunctionCall","src":"21207:45:36"},"nativeSrc":"21207:45:36","nodeType":"YulExpressionStatement","src":"21207:45:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21272:9:36","nodeType":"YulIdentifier","src":"21272:9:36"},{"kind":"number","nativeSrc":"21283:2:36","nodeType":"YulLiteral","src":"21283:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21268:3:36","nodeType":"YulIdentifier","src":"21268:3:36"},"nativeSrc":"21268:18:36","nodeType":"YulFunctionCall","src":"21268:18:36"},{"name":"value2","nativeSrc":"21288:6:36","nodeType":"YulIdentifier","src":"21288:6:36"}],"functionName":{"name":"mstore","nativeSrc":"21261:6:36","nodeType":"YulIdentifier","src":"21261:6:36"},"nativeSrc":"21261:34:36","nodeType":"YulFunctionCall","src":"21261:34:36"},"nativeSrc":"21261:34:36","nodeType":"YulExpressionStatement","src":"21261:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21315:9:36","nodeType":"YulIdentifier","src":"21315:9:36"},{"kind":"number","nativeSrc":"21326:2:36","nodeType":"YulLiteral","src":"21326:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21311:3:36","nodeType":"YulIdentifier","src":"21311:3:36"},"nativeSrc":"21311:18:36","nodeType":"YulFunctionCall","src":"21311:18:36"},{"name":"value3","nativeSrc":"21331:6:36","nodeType":"YulIdentifier","src":"21331:6:36"}],"functionName":{"name":"mstore","nativeSrc":"21304:6:36","nodeType":"YulIdentifier","src":"21304:6:36"},"nativeSrc":"21304:34:36","nodeType":"YulFunctionCall","src":"21304:34:36"},"nativeSrc":"21304:34:36","nodeType":"YulExpressionStatement","src":"21304:34:36"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"20946:398:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21072:9:36","nodeType":"YulTypedName","src":"21072:9:36","type":""},{"name":"value3","nativeSrc":"21083:6:36","nodeType":"YulTypedName","src":"21083:6:36","type":""},{"name":"value2","nativeSrc":"21091:6:36","nodeType":"YulTypedName","src":"21091:6:36","type":""},{"name":"value1","nativeSrc":"21099:6:36","nodeType":"YulTypedName","src":"21099:6:36","type":""},{"name":"value0","nativeSrc":"21107:6:36","nodeType":"YulTypedName","src":"21107:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21118:4:36","nodeType":"YulTypedName","src":"21118:4:36","type":""}],"src":"20946:398:36"},{"body":{"nativeSrc":"21523:179:36","nodeType":"YulBlock","src":"21523:179:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21540:9:36","nodeType":"YulIdentifier","src":"21540:9:36"},{"kind":"number","nativeSrc":"21551:2:36","nodeType":"YulLiteral","src":"21551:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21533:6:36","nodeType":"YulIdentifier","src":"21533:6:36"},"nativeSrc":"21533:21:36","nodeType":"YulFunctionCall","src":"21533:21:36"},"nativeSrc":"21533:21:36","nodeType":"YulExpressionStatement","src":"21533:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21574:9:36","nodeType":"YulIdentifier","src":"21574:9:36"},{"kind":"number","nativeSrc":"21585:2:36","nodeType":"YulLiteral","src":"21585:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21570:3:36","nodeType":"YulIdentifier","src":"21570:3:36"},"nativeSrc":"21570:18:36","nodeType":"YulFunctionCall","src":"21570:18:36"},{"kind":"number","nativeSrc":"21590:2:36","nodeType":"YulLiteral","src":"21590:2:36","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"21563:6:36","nodeType":"YulIdentifier","src":"21563:6:36"},"nativeSrc":"21563:30:36","nodeType":"YulFunctionCall","src":"21563:30:36"},"nativeSrc":"21563:30:36","nodeType":"YulExpressionStatement","src":"21563:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21613:9:36","nodeType":"YulIdentifier","src":"21613:9:36"},{"kind":"number","nativeSrc":"21624:2:36","nodeType":"YulLiteral","src":"21624:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21609:3:36","nodeType":"YulIdentifier","src":"21609:3:36"},"nativeSrc":"21609:18:36","nodeType":"YulFunctionCall","src":"21609:18:36"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"21629:31:36","nodeType":"YulLiteral","src":"21629:31:36","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"21602:6:36","nodeType":"YulIdentifier","src":"21602:6:36"},"nativeSrc":"21602:59:36","nodeType":"YulFunctionCall","src":"21602:59:36"},"nativeSrc":"21602:59:36","nodeType":"YulExpressionStatement","src":"21602:59:36"},{"nativeSrc":"21670:26:36","nodeType":"YulAssignment","src":"21670:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"21682:9:36","nodeType":"YulIdentifier","src":"21682:9:36"},{"kind":"number","nativeSrc":"21693:2:36","nodeType":"YulLiteral","src":"21693:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21678:3:36","nodeType":"YulIdentifier","src":"21678:3:36"},"nativeSrc":"21678:18:36","nodeType":"YulFunctionCall","src":"21678:18:36"},"variableNames":[{"name":"tail","nativeSrc":"21670:4:36","nodeType":"YulIdentifier","src":"21670:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21349:353:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21500:9:36","nodeType":"YulTypedName","src":"21500:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21514:4:36","nodeType":"YulTypedName","src":"21514:4:36","type":""}],"src":"21349:353:36"},{"body":{"nativeSrc":"21828:98:36","nodeType":"YulBlock","src":"21828:98:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21845:9:36","nodeType":"YulIdentifier","src":"21845:9:36"},{"kind":"number","nativeSrc":"21856:2:36","nodeType":"YulLiteral","src":"21856:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21838:6:36","nodeType":"YulIdentifier","src":"21838:6:36"},"nativeSrc":"21838:21:36","nodeType":"YulFunctionCall","src":"21838:21:36"},"nativeSrc":"21838:21:36","nodeType":"YulExpressionStatement","src":"21838:21:36"},{"nativeSrc":"21868:52:36","nodeType":"YulAssignment","src":"21868:52:36","value":{"arguments":[{"name":"value0","nativeSrc":"21893:6:36","nodeType":"YulIdentifier","src":"21893:6:36"},{"arguments":[{"name":"headStart","nativeSrc":"21905:9:36","nodeType":"YulIdentifier","src":"21905:9:36"},{"kind":"number","nativeSrc":"21916:2:36","nodeType":"YulLiteral","src":"21916:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21901:3:36","nodeType":"YulIdentifier","src":"21901:3:36"},"nativeSrc":"21901:18:36","nodeType":"YulFunctionCall","src":"21901:18:36"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"21876:16:36","nodeType":"YulIdentifier","src":"21876:16:36"},"nativeSrc":"21876:44:36","nodeType":"YulFunctionCall","src":"21876:44:36"},"variableNames":[{"name":"tail","nativeSrc":"21868:4:36","nodeType":"YulIdentifier","src":"21868:4:36"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21707:219:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21797:9:36","nodeType":"YulTypedName","src":"21797:9:36","type":""},{"name":"value0","nativeSrc":"21808:6:36","nodeType":"YulTypedName","src":"21808:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21819:4:36","nodeType":"YulTypedName","src":"21819:4:36","type":""}],"src":"21707:219:36"}]},"contents":"{\n    { }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_contract$_IRealmId_$5006__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        value5 := abi_decode_uint8(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_string_calldata_ptrt_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes32t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptrt_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_bytes32__to_t_string_memory_ptr_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), value1)\n        calldatacopy(add(headStart, 96), value0, value1)\n        mstore(add(add(headStart, value1), 96), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 96)\n        mstore(add(headStart, 0x20), value2)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        if gt(value1, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length := shl(5, value1)\n        calldatacopy(add(headStart, 64), value0, length)\n        tail := add(add(headStart, length), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000)\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), and(shl(248, value2), 0xff00000000000000000000000000000000000000000000000000000000000000))\n        end := add(pos, 65)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_bytes32_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value6, value5, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), and(shl(96, value2), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 84), value3)\n        mstore(add(pos, 116), value4)\n        mstore(add(pos, 148), value5)\n        mstore(add(pos, 180), value6)\n        end := add(pos, 212)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1556":[{"length":32,"start":2849},{"length":32,"start":3025},{"length":32,"start":4082},{"length":32,"start":4258},{"length":32,"start":4587}],"4060":[{"length":32,"start":690},{"length":32,"start":1778},{"length":32,"start":2008},{"length":32,"start":2265},{"length":32,"start":2444},{"length":32,"start":3807},{"length":32,"start":5115},{"length":32,"start":5345},{"length":32,"start":6751},{"length":32,"start":6973},{"length":32,"start":7191},{"length":32,"start":7411},{"length":32,"start":7606},{"length":32,"start":7867},{"length":32,"start":8117},{"length":32,"start":8551},{"length":32,"start":8931}]},"linkReferences":{},"object":"6080604052600436106102195760003560e01c806386a8e98a1161011d578063a3b0b5a3116100b0578063d547741f1161007f578063e564a0e211610064578063e564a0e21461067d578063f2fde38b1461069d578063f9515962146106bd57600080fd5b8063d547741f1461063d578063dc893ce41461065d57600080fd5b8063a3b0b5a3146105b3578063ad3b1d48146105e7578063bcb3962114610607578063d14a5c711461061d57600080fd5b806391d14854116100ec57806391d148541461053357806399d342ac146105535780639cc7f708146105735780639d70b0051461059357600080fd5b806386a8e98a146104be5780638bb9c5bf146104de5780638da5cb5b146104fe578063906405a31461051357600080fd5b80634519eb1d116101b057806352d1902d1161017f57806375b238fc1161016457806375b238fc14610455578063794459be146104895780638129fc1c146104a957600080fd5b806352d1902d146104205780635b4e128c1461043557600080fd5b80634519eb1d1461036f5780634529cc1b1461038f5780634f1ef286146103cf57806351955dfc146103e257600080fd5b80632f2ff15d116101ec5780632f2ff15d146102f95780633659cfe6146103195780633c6bb436146103395780633f30b00f1461034f57600080fd5b8063098b64191461021e578063141a468c1461025157806318ee89f01461027e5780632681a28a146102a0575b600080fd5b34801561022a57600080fd5b5061023e6102393660046134af565b6106ed565b6040519081526020015b60405180910390f35b34801561025d57600080fd5b5061023e61026c366004613502565b60686020526000908152604090205481565b34801561028a57600080fd5b5061029e61029936600461351b565b610875565b005b3480156102ac57600080fd5b506102d47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610248565b34801561030557600080fd5b5061029e610314366004613578565b610adc565b34801561032557600080fd5b5061029e6103343660046135a8565b610b0a565b34801561034557600080fd5b5061023e606a5481565b34801561035b57600080fd5b5061029e61036a3660046135c5565b610d0f565b34801561037b57600080fd5b5061023e61038a36600461363a565b610e96565b34801561039b57600080fd5b506103bf6103aa366004613502565b60666020526000908152604090205460ff1681565b6040519015158152602001610248565b61029e6103dd3660046136a6565b610fdb565b3480156103ee57600080fd5b5061023e6103fd366004613788565b606760209081526000938452604080852082529284528284209052825290205481565b34801561042c57600080fd5b5061023e6111d1565b34801561044157600080fd5b5061029e610450366004613502565b6112bd565b34801561046157600080fd5b5061023e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561049557600080fd5b5061023e6104a43660046137b4565b6113f6565b3480156104b557600080fd5b5061029e611580565b3480156104ca57600080fd5b5061029e6104d9366004613502565b611724565b3480156104ea57600080fd5b5061029e6104f9366004613502565b611808565b34801561050a57600080fd5b506102d461181c565b34801561051f57600080fd5b5061029e61052e3660046135c5565b611848565b34801561053f57600080fd5b506103bf61054e366004613578565b6119d2565b34801561055f57600080fd5b5061029e61056e366004613816565b611a1f565b34801561057f57600080fd5b5061023e61058e366004613502565b611af4565b34801561059f57600080fd5b5061029e6105ae366004613899565b611bd7565b3480156105bf57600080fd5b5061023e7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b3480156105f357600080fd5b5061023e610602366004613907565b611caa565b34801561061357600080fd5b5061023e60655481565b34801561062957600080fd5b5061029e610638366004613788565b611d84565b34801561064957600080fd5b5061029e610658366004613578565b611f51565b34801561066957600080fd5b5061029e610678366004613929565b611f74565b34801561068957600080fd5b5061029e61069836600461397a565b6122a3565b3480156106a957600080fd5b5061029e6106b83660046135a8565b612372565b3480156106c957600080fd5b506103bf6106d8366004613502565b60696020526000908152604090205460ff1681565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cad6b9018585886040518463ffffffff1660e01b815260040161074d939291906139d8565b602060405180830381865afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190613a2f565b6040517fa9735f940000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190613a2f565b60008881526067602090815260408083209583529481528482209282529190915291909120549150505b949350505050565b6108aa7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9335b6108a3612386565b91906123b4565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190613a48565b506040517fa9735f94000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9735f9490602401602060405180830381865afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c9190613a2f565b9050838114610a56576040517fb196cc7700000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044015b60405180910390fd5b6000868152606760209081526040808320888452825280832087845290915281208054859290610a87908490613a94565b909155505060408051868152602081018690529081018490528290879033907f9092bf6bd1cf7db4fcf41aedc7c0333b51c57f5b80b429bc3d9caa5587c6ad82906060015b60405180910390a4505050505050565b33610aef81610ae961243a565b90612468565b610b05838383610afd612386565b9291906124d3565b505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610bcf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610a4d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610c447f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610ce7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a4d565b610cf0816125aa565b60408051600080825260208201909252610d0c918391906125b6565b50565b610d397fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361089b565b80610d70576040517f3fb4608600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610e585760696000848484818110610d9157610d91613aa7565b602090810292909201358352508101919091526040016000205460ff1615610e0157828282818110610dc557610dc5613aa7565b905060200201356040517fb6421242000000000000000000000000000000000000000000000000000000008152600401610a4d91815260200190565b600160696000858585818110610e1957610e19613aa7565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610e5090613ad6565b915050610d73565b507f0d8c56a8918ec09c2fe3c4d9fcc00ece66df217a1ab3ad768dd0a71620da5b4e8282604051610e8a929190613b0e565b60405180910390a15050565b6040517fa9735f9400000000000000000000000000000000000000000000000000000000815260048101859052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa158015610f26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4a9190613a2f565b60008781526068602090815260408083205460655482518085018d905280840187905260608c811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690820152607481018b9052609481019190915260b4810189905260d4808201929092528251808203909201825260f401909152805191012091925090979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036110a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610a4d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166111157f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146111b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610a4d565b6111c1826125aa565b6111cd828260016125b6565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a4d565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054600290610100900460ff161580156112df575060005460ff8083169116105b61136b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a4d565b60008054606a8490557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff8316908117610100177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610e8a565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cad6b9018585886040518463ffffffff1660e01b8152600401611456939291906139d8565b602060405180830381865afa158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114979190613a2f565b6040517fa9735f940000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c9190613a2f565b60655460009081526067602090815260408083209583529481528482209282529190915291909120549150505b9392505050565b600054610100900460ff16158080156115a05750600054600160ff909116105b806115ba5750303b1580156115ba575060005460ff166001145b611646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a4d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156116a457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6116ac6127b5565b6116be336116b861243a565b9061284e565b8015610d0c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61174e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361089b565b60008181526066602052604090205460ff161561179a576040517f796c3e9a00000000000000000000000000000000000000000000000000000000815260048101829052602401610a4d565b60658190556000818152606660205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f61228c895f8ba06548597d3e34a23bc0ecb6d1e62a1eb3fa30be04883a17ef31906117199083815260200190565b610d0c3382611815612386565b919061288d565b600061184361182961243a565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6118727fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361089b565b806118a9576040517f3fb4608600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156119a057606960008484848181106118ca576118ca613aa7565b602090810292909201358352508101919091526040016000205460ff16611939578282828181106118fd576118fd613aa7565b905060200201356040517fa89513e1000000000000000000000000000000000000000000000000000000008152600401610a4d91815260200190565b6069600084848481811061194f5761194f613aa7565b6020908102929092013583525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061199881613ad6565b9150506118ac565b507f5b2c9fcbb27d48bdbfc59f0564b5ba81539309ebf09a940fad64d171bcfb9ff98282604051610e8a929190613b0e565b6000611a1683836119e1612386565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b90505b92915050565b6040517fcad6b90100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cad6b90190611a98908b908b908e906004016139d8565b602060405180830381865afa158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190613a2f565b9050611ae9818787878787611f74565b505050505050505050565b6040517fa9735f9400000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa158015611b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba89190613a2f565b606554600090815260676020908152604080832096835295815285822092825291909152929092205492915050565b6040517fcad6b90100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cad6b90190611c5090899089908c906004016139d8565b602060405180830381865afa158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190613a2f565b9050611ca08882868686610875565b5050505050505050565b6040517fa9735f9400000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9735f9490602401602060405180830381865afa158015611d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5e9190613a2f565b600094855260676020908152604080872095875294815284862091865252505090205490565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015611e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e369190613a48565b90503373ffffffffffffffffffffffffffffffffffffffff821614611e89576040517f33ffff9b000000000000000000000000000000000000000000000000000000008152336004820152602401610a4d565b6040517fa9735f94000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9735f9490602401602060405180830381865afa158015611f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3b9190613a2f565b9050611f4a8582868686612931565b5050505050565b33611f5e81610ae961243a565b610b05838383611f6c612386565b929190612a76565b6000868152606860205260408082205490517fa9735f94000000000000000000000000000000000000000000000000000000008152600481018990529091907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9735f9490602401602060405180830381865afa158015612011573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120359190613a2f565b6065546040805160208082018d905281830185905233606090811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690830152607482018c9052609482019390935260b481018a905260d48082018790528251808303909101815260f490910190915280519101209091506000906040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052909150600090605c01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020909101207f6352211e000000000000000000000000000000000000000000000000000000008252600482018c9052915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156121ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d29190613a48565b60408051602081018a905280820189905260f88b901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260619091019091529091506000612231838584612b40565b90508061226a576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6122778d878e8e87612931565b612282876001613a94565b60009d8e5260686020526040909d209c909c55505050505050505050505050565b6040517fcad6b90100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cad6b9019061231c90889088908b906004016139d8565b602060405180830381865afa158015612339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235d9190613a2f565b905061236a818484611d84565b505050505050565b610d0c338261237f61243a565b9190612d0d565b600080611a1960017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23613b60565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610b05576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610a4d565b600080611a1960017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd613b60565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146111cd576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610a4d565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166125a45760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b610d0c33610ae961243a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156125e957610b0583612e21565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561266e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261266b91810190613a2f565b60015b6126fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610a4d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146127a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610a4d565b50610b05838383612f2b565b600054610100900460ff1661284c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610a4d565b565b61288361287c60017f5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84613b60565b6001612f50565b6111cd8282612f9c565b6128988382846123b4565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b606554600090815260676020908152604080832088845282528083208784529091529020548381101561299a576040517fcf4791810000000000000000000000000000000000000000000000000000000081526004810187905260248101859052604401610a4d565b60008381526069602052604090205460ff166129e5576040517fa89513e100000000000000000000000000000000000000000000000000000000815260048101849052602401610a4d565b6129ef8482613b60565b6065805460009081526067602090815260408083208b845282528083208a8452825291829020939093559054815133815292830188905290820186905273ffffffffffffffffffffffffffffffffffffffff84166060830152849188907fe514533875fbd3f8f396088d636e746599d8b5c3ba77e9ccfa9fc01ff706460190608001610acc565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156125a45760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600161259b565b6000806000612b4f8585613059565b90925090506000816004811115612b6857612b68613b73565b148015612ba057508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612bb057600192505050611579565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401612be5929190613c10565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612c6e9190613c29565b600060405180830381855afa9150503d8060008114612ca9576040519150601f19603f3d011682016040523d82523d6000602084013e612cae565b606091505b5091509150818015612cc1575080516020145b8015612d01575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090612cff9083016020908101908401613a2f565b145b98975050505050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114612d7a576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610a4d565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146125a45783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b73ffffffffffffffffffffffffffffffffffffffff81163b612ec5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610a4d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612f348361309e565b600082511180612f415750805b15610b05576125a483836130eb565b81548290828110612f97576040517fbf0c18ec0000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604401610a4d565b505550565b73ffffffffffffffffffffffffffffffffffffffff8116156130245781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6111cd7f7f5828d0000000000000000000000000000000000000000000000000000000006001613052613110565b919061313e565b600080825160410361308f5760208301516040840151606085015160001a6130838782858561321a565b94509450505050613097565b506000905060025b9250929050565b6130a781612e21565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611a168383604051806060016040528060278152602001613c5960279139613309565b600080611a1960017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e613b60565b7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016131b6576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156132515750600090506003613300565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156132a5573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166132f957600060019250925050613300565b9150600090505b94509492505050565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516133339190613c29565b600060405180830381855af49150503d806000811461336e576040519150601f19603f3d011682016040523d82523d6000602084013e613373565b606091505b50915091506133848683838761338e565b9695505050505050565b6060831561342457825160000361341d5773ffffffffffffffffffffffffffffffffffffffff85163b61341d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a4d565b508161086d565b61086d83838151156134395781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d9190613c45565b60008083601f84011261347f57600080fd5b50813567ffffffffffffffff81111561349757600080fd5b60208301915083602082850101111561309757600080fd5b600080600080606085870312156134c557600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156134ea57600080fd5b6134f68782880161346d565b95989497509550505050565b60006020828403121561351457600080fd5b5035919050565b600080600080600060a0868803121561353357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d0c57600080fd5b6000806040838503121561358b57600080fd5b82359150602083013561359d81613556565b809150509250929050565b6000602082840312156135ba57600080fd5b813561157981613556565b600080602083850312156135d857600080fd5b823567ffffffffffffffff808211156135f057600080fd5b818501915085601f83011261360457600080fd5b81358181111561361357600080fd5b8660208260051b850101111561362857600080fd5b60209290920196919550909350505050565b6000806000806080858703121561365057600080fd5b84359350602085013561366281613556565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156136b957600080fd5b82356136c481613556565b9150602083013567ffffffffffffffff808211156136e157600080fd5b818501915085601f8301126136f557600080fd5b81358181111561370757613707613677565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561374d5761374d613677565b8160405282815288602084870101111561376657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006060848603121561379d57600080fd5b505081359360208301359350604090920135919050565b6000806000604084860312156137c957600080fd5b83359250602084013567ffffffffffffffff8111156137e757600080fd5b6137f38682870161346d565b9497909650939450505050565b803560ff8116811461381157600080fd5b919050565b60008060008060008060008060e0898b03121561383257600080fd5b88359750602089013567ffffffffffffffff81111561385057600080fd5b61385c8b828c0161346d565b909850965050604089013594506060890135935061387c60808a01613800565b925060a0890135915060c089013590509295985092959890939650565b600080600080600080600060c0888a0312156138b457600080fd5b8735965060208801359550604088013567ffffffffffffffff8111156138d957600080fd5b6138e58a828b0161346d565b989b979a50986060810135976080820135975060a09091013595509350505050565b6000806040838503121561391a57600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561394257600080fd5b86359550602087013594506040870135935061396060608801613800565b92506080870135915060a087013590509295509295509295565b60008060008060006080868803121561399257600080fd5b85359450602086013567ffffffffffffffff8111156139b057600080fd5b6139bc8882890161346d565b9699909850959660408101359660609091013595509350505050565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168301019050826020830152949350505050565b600060208284031215613a4157600080fd5b5051919050565b600060208284031215613a5a57600080fd5b815161157981613556565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115611a1957611a19613a65565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b0757613b07613a65565b5060010190565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613b4757600080fd5b8260051b80856040850137919091016040019392505050565b81810381811115611a1957611a19613a65565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60005b83811015613bbd578181015183820152602001613ba5565b50506000910152565b60008151808452613bde816020860160208601613ba2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b82815260406020820152600061086d6040830184613bc6565b60008251613c3b818460208701613ba2565b9190910192915050565b602081526000611a166020830184613bc656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b5f4061480d3a61e51c0f00ca1c42476ce206048a176bd41b81a4996123a42f864736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x219 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x86A8E98A GT PUSH2 0x11D JUMPI DUP1 PUSH4 0xA3B0B5A3 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE564A0E2 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE564A0E2 EQ PUSH2 0x67D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x69D JUMPI DUP1 PUSH4 0xF9515962 EQ PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD547741F EQ PUSH2 0x63D JUMPI DUP1 PUSH4 0xDC893CE4 EQ PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3B0B5A3 EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0xAD3B1D48 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0xBCB39621 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0xD14A5C71 EQ PUSH2 0x61D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0x99D342AC EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0x9CC7F708 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0x9D70B005 EQ PUSH2 0x593 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x86A8E98A EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4FE JUMPI DUP1 PUSH4 0x906405A3 EQ PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4519EB1D GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x52D1902D GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x75B238FC GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x794459BE EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x5B4E128C EQ PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4519EB1D EQ PUSH2 0x36F JUMPI DUP1 PUSH4 0x4529CC1B EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x3CF JUMPI DUP1 PUSH4 0x51955DFC EQ PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x1EC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0x3C6BB436 EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x3F30B00F EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98B6419 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x141A468C EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x18EE89F0 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x2681A28A EQ PUSH2 0x2A0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x34AF JUMP JUMPDEST PUSH2 0x6ED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0x351B JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x3578 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x334 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0xB0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH1 0x6A SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x36A CALLDATASIZE PUSH1 0x4 PUSH2 0x35C5 JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x38A CALLDATASIZE PUSH1 0x4 PUSH2 0x363A JUMP JUMPDEST PUSH2 0xE96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST PUSH2 0x29E PUSH2 0x3DD CALLDATASIZE PUSH1 0x4 PUSH2 0x36A6 JUMP JUMPDEST PUSH2 0xFDB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x3FD CALLDATASIZE PUSH1 0x4 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 DUP3 MSTORE SWAP3 DUP5 MSTORE DUP3 DUP5 KECCAK256 SWAP1 MSTORE DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x11D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x12BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x37B4 JUMP JUMPDEST PUSH2 0x13F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x1580 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x4D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x1724 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x4F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x1808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x181C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x52E CALLDATASIZE PUSH1 0x4 PUSH2 0x35C5 JUMP JUMPDEST PUSH2 0x1848 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x3578 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x56E CALLDATASIZE PUSH1 0x4 PUSH2 0x3816 JUMP JUMPDEST PUSH2 0x1A1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH2 0x1AF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x5AE CALLDATASIZE PUSH1 0x4 PUSH2 0x3899 JUMP JUMPDEST PUSH2 0x1BD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x3907 JUMP JUMPDEST PUSH2 0x1CAA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x638 CALLDATASIZE PUSH1 0x4 PUSH2 0x3788 JUMP JUMPDEST PUSH2 0x1D84 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x658 CALLDATASIZE PUSH1 0x4 PUSH2 0x3578 JUMP JUMPDEST PUSH2 0x1F51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x678 CALLDATASIZE PUSH1 0x4 PUSH2 0x3929 JUMP JUMPDEST PUSH2 0x1F74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x689 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x698 CALLDATASIZE PUSH1 0x4 PUSH2 0x397A JUMP JUMPDEST PUSH2 0x22A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29E PUSH2 0x6B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x35A8 JUMP JUMPDEST PUSH2 0x2372 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x6D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3502 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x74D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x78E SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x81F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x843 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8AA PUSH32 0x8F4F2DA22E8AC8F11E15F9FC141CDDBB5DEEA8800186560ABB6E68C5496619A9 CALLER JUMPDEST PUSH2 0x8A3 PUSH2 0x2386 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x935 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x959 SWAP2 SWAP1 PUSH2 0x3A48 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA0C SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 EQ PUSH2 0xA56 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB196CC7700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xA87 SWAP1 DUP5 SWAP1 PUSH2 0x3A94 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP3 SWAP1 DUP8 SWAP1 CALLER SWAP1 PUSH32 0x9092BF6BD1CF7DB4FCF41AEDC7C0333B51C57F5B80B429BC3D9CAA5587C6AD82 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0xAEF DUP2 PUSH2 0xAE9 PUSH2 0x243A JUMP JUMPDEST SWAP1 PUSH2 0x2468 JUMP JUMPDEST PUSH2 0xB05 DUP4 DUP4 DUP4 PUSH2 0xAFD PUSH2 0x2386 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x24D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0xBCF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC44 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH2 0xCF0 DUP2 PUSH2 0x25AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD0C SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x25B6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD39 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x89B JUMP JUMPDEST DUP1 PUSH2 0xD70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE58 JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0xD91 JUMPI PUSH2 0xD91 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE01 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0xDC5 JUMPI PUSH2 0xDC5 PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xB642124200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x69 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0xE19 JUMPI PUSH2 0xE19 PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0xE50 SWAP1 PUSH2 0x3AD6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD73 JUMP JUMPDEST POP PUSH32 0xD8C56A8918EC09C2FE3C4D9FCC00ECE66DF217A1AB3AD768DD0A71620DA5B4E DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE8A SWAP3 SWAP2 SWAP1 PUSH2 0x3B0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF4A SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x65 SLOAD DUP3 MLOAD DUP1 DUP6 ADD DUP14 SWAP1 MSTORE DUP1 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP13 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x74 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x94 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xB4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP1 DUP3 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0xF4 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP2 SWAP3 POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND ADDRESS SUB PUSH2 0x10A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x64656C656761746563616C6C0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1115 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6163746976652070726F78790000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x11C1 DUP3 PUSH2 0x25AA JUMP JUMPDEST PUSH2 0x11CD DUP3 DUP3 PUSH1 0x1 PUSH2 0x25B6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1298 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST POP PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x12DF JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0x136B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x6A DUP5 SWAP1 SSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH1 0xFF DUP4 AND SWAP1 DUP2 OR PUSH2 0x100 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCAD6B901 DUP6 DUP6 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1456 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1473 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1497 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1528 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x154C SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x15A0 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x15BA JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15BA JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1646 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x16A4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x16AC PUSH2 0x27B5 JUMP JUMPDEST PUSH2 0x16BE CALLER PUSH2 0x16B8 PUSH2 0x243A JUMP JUMPDEST SWAP1 PUSH2 0x284E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x174E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x89B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x179A JUMPI PUSH1 0x40 MLOAD PUSH32 0x796C3E9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x65 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x61228C895F8BA06548597D3E34A23BC0ECB6D1E62A1EB3FA30BE04883A17EF31 SWAP1 PUSH2 0x1719 SWAP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0C CALLER DUP3 PUSH2 0x1815 PUSH2 0x2386 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x288D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1843 PUSH2 0x1829 PUSH2 0x243A JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1872 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 CALLER PUSH2 0x89B JUMP JUMPDEST DUP1 PUSH2 0x18A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3FB4608600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19A0 JUMPI PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x18CA JUMPI PUSH2 0x18CA PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1939 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x18FD JUMPI PUSH2 0x18FD PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x194F JUMPI PUSH2 0x194F PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 PUSH2 0x1998 DUP2 PUSH2 0x3AD6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x18AC JUMP JUMPDEST POP PUSH32 0x5B2C9FCBB27D48BDBFC59F0564B5BA81539309EBF09A940FAD64D171BCFB9FF9 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE8A SWAP3 SWAP2 SWAP1 PUSH2 0x3B0E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A16 DUP4 DUP4 PUSH2 0x19E1 PUSH2 0x2386 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1A98 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AD9 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x1AE9 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1F74 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BA8 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 DUP2 MSTORE DUP6 DUP3 KECCAK256 SWAP3 DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x1C50 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C91 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x1CA0 DUP9 DUP3 DUP7 DUP7 DUP7 PUSH2 0x875 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D5E SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SWAP6 DUP8 MSTORE SWAP5 DUP2 MSTORE DUP5 DUP7 KECCAK256 SWAP2 DUP7 MSTORE MSTORE POP POP SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E36 SWAP2 SWAP1 PUSH2 0x3A48 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x1E89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x33FFFF9B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F3B SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x1F4A DUP6 DUP3 DUP7 DUP7 DUP7 PUSH2 0x2931 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x1F5E DUP2 PUSH2 0xAE9 PUSH2 0x243A JUMP JUMPDEST PUSH2 0xB05 DUP4 DUP4 DUP4 PUSH2 0x1F6C PUSH2 0x2386 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xA9735F9400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA9735F94 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2011 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2035 SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP14 SWAP1 MSTORE DUP2 DUP4 ADD DUP6 SWAP1 MSTORE CALLER PUSH1 0x60 SWAP1 DUP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x74 DUP3 ADD DUP13 SWAP1 MSTORE PUSH1 0x94 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xB4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0xD4 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF4 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP13 SWAP1 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21D2 SWAP2 SWAP1 PUSH2 0x3A48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xF8 DUP12 SWAP1 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x60 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x41 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x61 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 PUSH2 0x2231 DUP4 DUP6 DUP5 PUSH2 0x2B40 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x226A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2277 DUP14 DUP8 DUP15 DUP15 DUP8 PUSH2 0x2931 JUMP JUMPDEST PUSH2 0x2282 DUP8 PUSH1 0x1 PUSH2 0x3A94 JUMP JUMPDEST PUSH1 0x0 SWAP14 DUP15 MSTORE PUSH1 0x68 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP14 KECCAK256 SWAP13 SWAP1 SWAP13 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAD6B90100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xCAD6B901 SWAP1 PUSH2 0x231C SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x39D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2339 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x235D SWAP2 SWAP1 PUSH2 0x3A2F JUMP JUMPDEST SWAP1 POP PUSH2 0x236A DUP2 DUP5 DUP5 PUSH2 0x1D84 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD0C CALLER DUP3 PUSH2 0x237F PUSH2 0x243A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2D0D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A19 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A19 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x3B60 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x11CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x25A4 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xD0C CALLER PUSH2 0xAE9 PUSH2 0x243A JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x25E9 JUMPI PUSH2 0xB05 DUP4 PUSH2 0x2E21 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x266E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x266B SWAP2 DUP2 ADD SWAP1 PUSH2 0x3A2F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x26FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E206973206E6F742055555053000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 EQ PUSH2 0x27A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6961626C65555549440000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST POP PUSH2 0xB05 DUP4 DUP4 DUP4 PUSH2 0x2F2B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x284C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2883 PUSH2 0x287C PUSH1 0x1 PUSH32 0x5B388D90DC1312BA799F321972F13311234FA1163BCABEC7CF66101C4876EB84 PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x2F50 JUMP JUMPDEST PUSH2 0x11CD DUP3 DUP3 PUSH2 0x2F9C JUMP JUMPDEST PUSH2 0x2898 DUP4 DUP3 DUP5 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x299A JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x29E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA89513E100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x29EF DUP5 DUP3 PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MLOAD CALLER DUP2 MSTORE SWAP3 DUP4 ADD DUP9 SWAP1 MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 SWAP2 DUP9 SWAP1 PUSH32 0xE514533875FBD3F8F396088D636E746599D8B5C3BA77E9CCFA9FC01FF7064601 SWAP1 PUSH1 0x80 ADD PUSH2 0xACC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x25A4 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x259B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B4F DUP6 DUP6 PUSH2 0x3059 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2B68 JUMPI PUSH2 0x2B68 PUSH2 0x3B73 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x2BA0 JUMPI POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2BB0 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x1579 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E PUSH1 0xE0 SHL DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BE5 SWAP3 SWAP2 SWAP1 PUSH2 0x3C10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2C6E SWAP2 SWAP1 PUSH2 0x3C29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2CA9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CAE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2CC1 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x2D01 JUMPI POP DUP1 MLOAD PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2CFF SWAP1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x3A2F JUMP JUMPDEST EQ JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x2D7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA4D JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25A4 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE PUSH2 0x2EC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA4D JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2F34 DUP4 PUSH2 0x309E JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x2F41 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xB05 JUMPI PUSH2 0x25A4 DUP4 DUP4 PUSH2 0x30EB JUMP JUMPDEST DUP2 SLOAD DUP3 SWAP1 DUP3 DUP2 LT PUSH2 0x2F97 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBF0C18EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA4D JUMP JUMPDEST POP SSTORE POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x3024 JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x11CD PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x3052 PUSH2 0x3110 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x313E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x308F JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x3083 DUP8 DUP3 DUP6 DUP6 PUSH2 0x321A JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x3097 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x30A7 DUP2 PUSH2 0x2E21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1A16 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3C59 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x3309 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A19 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x3B60 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x31B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x72C683BB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x3251 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x3300 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x32F9 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x3300 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x3333 SWAP2 SWAP1 PUSH2 0x3C29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x336E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3373 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3384 DUP7 DUP4 DUP4 DUP8 PUSH2 0x338E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3424 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x341D JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x341D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA4D JUMP JUMPDEST POP DUP2 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x86D DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3439 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4D SWAP2 SWAP1 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x347F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x34C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x34EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34F6 DUP8 DUP3 DUP9 ADD PUSH2 0x346D JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x358B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x359D DUP2 PUSH2 0x3556 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1579 DUP2 PUSH2 0x3556 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x35D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x35F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x3628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3662 DUP2 PUSH2 0x3556 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x36C4 DUP2 PUSH2 0x3556 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x36E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3707 JUMPI PUSH2 0x3707 PUSH2 0x3677 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x374D JUMPI PUSH2 0x374D PUSH2 0x3677 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x379D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x37C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x37E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x37F3 DUP7 DUP3 DUP8 ADD PUSH2 0x346D JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x385C DUP12 DUP3 DUP13 ADD PUSH2 0x346D JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x387C PUSH1 0x80 DUP11 ADD PUSH2 0x3800 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x38B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38E5 DUP11 DUP3 DUP12 ADD PUSH2 0x346D JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP9 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP8 PUSH1 0x80 DUP3 ADD CALLDATALOAD SWAP8 POP PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x391A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x3960 PUSH1 0x60 DUP9 ADD PUSH2 0x3800 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39BC DUP9 DUP3 DUP10 ADD PUSH2 0x346D JUMP JUMPDEST SWAP7 SWAP10 SWAP1 SWAP9 POP SWAP6 SWAP7 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP7 PUSH1 0x60 SWAP1 SWAP2 ADD CALLDATALOAD SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP5 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x60 DUP5 DUP4 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP4 ADD ADD SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1579 DUP2 PUSH2 0x3556 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A19 PUSH2 0x3A65 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3B07 JUMPI PUSH2 0x3B07 PUSH2 0x3A65 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x3B47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A19 PUSH2 0x3A65 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BBD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3BA5 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3BDE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3BA2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x86D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3C3B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3BA2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1A16 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3BC6 JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220B5F406 EQ DUP1 0xD3 0xA6 0x1E MLOAD 0xC0 CREATE 0xC LOG1 0xC4 0x24 PUSH23 0xCE206048A176BD41B81A4996123A42F864736F6C634300 ADDMOD ISZERO STOP CALLER ","sourceMap":"109:300:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19847:320:32;;;;;;;;;;-1:-1:-1;19847:320:32;;;;;:::i;:::-;;:::i;:::-;;;1065:25:36;;;1053:2;1038:18;19847:320:32;;;;;;;;1976:41;;;;;;;;;;-1:-1:-1;1976:41:32;;;;;:::i;:::-;;;;;;;;;;;;;;10135:623;;;;;;;;;;-1:-1:-1;10135:623:32;;;;;:::i;:::-;;:::i;:::-;;1706:43;;;;;;;;;;;;;;;;;;1938:42:36;1926:55;;;1908:74;;1896:2;1881:18;1706:43:32;1745:243:36;1116:257:0;;;;;;;;;;-1:-1:-1;1116:257:0;;;;;:::i;:::-;;:::i;3387:195:21:-;;;;;;;;;;-1:-1:-1;3387:195:21;;;;;:::i;:::-;;:::i;388:18:35:-;;;;;;;;;;;;;;;;7815:597:32;;;;;;;;;;-1:-1:-1;7815:597:32;;;;;:::i;:::-;;:::i;22550:343::-;;;;;;;;;;-1:-1:-1;22550:343:32;;;;;:::i;:::-;;:::i;1790:39::-;;;;;;;;;;-1:-1:-1;1790:39:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4333:14:36;;4326:22;4308:41;;4296:2;4281:18;1790:39:32;4168:187:36;3901:220:21;;;;;;:::i;:::-;;:::i;1836:83:32:-;;;;;;;;;;-1:-1:-1;1836:83:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3006:131:21;;;;;;;;;;;;;:::i;289:93:35:-;;;;;;;;;;-1:-1:-1;289:93:35;;;;;:::i;:::-;;:::i;1499:60:32:-;;;;;;;;;;;;1536:23;1499:60;;21191:311;;;;;;;;;;-1:-1:-1;21191:311:32;;;;;:::i;:::-;;:::i;6308:149::-;;;;;;;;;;;;;:::i;7024:328::-;;;;;;;;;;-1:-1:-1;7024:328:32;;;;;:::i;:::-;;:::i;1994:124:0:-;;;;;;;;;;-1:-1:-1;1994:124:0;;;;;:::i;:::-;;:::i;710:120:1:-;;;;;;;;;;;;;:::i;8885:602:32:-;;;;;;;;;;-1:-1:-1;8885:602:32;;;;;:::i;:::-;;:::i;2159:162:0:-;;;;;;;;;;-1:-1:-1;2159:162:0;;;;;:::i;:::-;;:::i;14342:285:32:-;;;;;;;;;;-1:-1:-1;14342:285:32;;;;;:::i;:::-;;:::i;20461:212::-;;;;;;;;;;-1:-1:-1;20461:212:32;;;;;:::i;:::-;;:::i;11578:363::-;;;;;;;;;;-1:-1:-1;11578:363:32;;;;;:::i;:::-;;:::i;1565:68::-;;;;;;;;;;;;1606:27;1565:68;;19098:221;;;;;;;;;;-1:-1:-1;19098:221:32;;;;;:::i;:::-;;:::i;1756:28::-;;;;;;;;;;;;;;;;18396:398;;;;;;;;;;-1:-1:-1;18396:398:32;;;;;:::i;:::-;;:::i;1694:259:0:-;;;;;;;;;;-1:-1:-1;1694:259:0;;;;;:::i;:::-;;:::i;15553:868:32:-;;;;;;;;;;-1:-1:-1;15553:868:32;;;;;:::i;:::-;;:::i;17391:245::-;;;;;;;;;;-1:-1:-1;17391:245:32;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;;;;;-1:-1:-1;864:152:1;;;;;:::i;:::-;;:::i;2044:57:32:-;;;;;;;;;;-1:-1:-1;2044:57:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;19847:320;19947:7;19966:15;19984:17;:28;;;20013:4;;20019:10;19984:46;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20065:37;;;;;;;;1065:25:36;;;19966:64:32;;-1:-1:-1;20040:22:32;;20065:28;:17;:28;;;;1038:18:36;;20065:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20119:16;;;;:8;:16;;;;;;;;:25;;;;;;;;;:41;;;;;;;;;;;;;-1:-1:-1;;19847:320:32;;;;;;;:::o;10135:623::-;10269:74;1606:27;719:10:26;10330:12:32;10269:29;:27;:29::i;:::-;:44;:74;:44;:74::i;:::-;10354:34;;;;;;;;1065:25:36;;;10354:17:32;:25;;;;;1038:18:36;;10354:34:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;10426:37:32;;;;;;;;1065:25:36;;;10398::32;;10426:17;:28;;;;;1038:18:36;;10426:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10398:65;;10498:14;10477:17;:35;10473:119;;10535:46;;;;;;;;11326:25:36;;;11367:18;;;11360:34;;;11299:18;;10535:46:32;;;;;;;;10473:119;10602:16;;;;:8;:16;;;;;;;;:25;;;;;;;;:41;;;;;;;;:51;;10647:6;;10602:16;:51;;10647:6;;10602:51;:::i;:::-;;;;-1:-1:-1;;10668:83:32;;;11926:25:36;;;11982:2;11967:18;;11960:34;;;12010:18;;;12003:34;;;10700:17:32;;10692:6;;719:10:26;;10668:83:32;;11914:2:36;11899:18;10668:83:32;;;;;;;;10259:499;10135:623;;;;;:::o;1116:257:0:-;719:10:26;1226:66:0;719:10:26;1226:33:0;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;3387:195:21:-;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;;;;12250:2:36;1873:80:21;;;12232:21:36;12289:2;12269:18;;;12262:30;12328:34;12308:18;;;12301:62;12399:14;12379:18;;;12372:42;12431:19;;1873:80:21;12048:408:36;1873:80:21;1995:6;1971:30;;:20;1312:66:18;1536:65;;;;1457:151;1971:20:21;:30;;;1963:87;;;;;;;12663:2:36;1963:87:21;;;12645:21:36;12702:2;12682:18;;;12675:30;12741:34;12721:18;;;12714:62;12812:14;12792:18;;;12785:42;12844:19;;1963:87:21;12461:408:36;1963:87:21;3468:36:::1;3486:17;3468;:36::i;:::-;3555:12;::::0;;3565:1:::1;3555:12:::0;;;::::1;::::0;::::1;::::0;;;3514:61:::1;::::0;3536:17;;3555:12;3514:21:::1;:61::i;:::-;3387:195:::0;:::o;7815:597:32:-;7902:70;1536:23;719:10:26;7959:12:32;640:96:26;7902:70:32;7986:23;7982:91;;8032:30;;;;;;;;;;;;;;7982:91;8088:9;8083:268;8103:22;;;8083:268;;;8150:25;:41;8176:11;;8188:1;8176:14;;;;;;;:::i;:::-;;;;;;;;;;8150:41;;-1:-1:-1;8150:41:32;;;;;;;;-1:-1:-1;8150:41:32;;;;8146:133;;;8249:11;;8261:1;8249:14;;;;;;;:::i;:::-;;;;;;;8218:46;;;;;;;;;1065:25:36;;1053:2;1038:18;;919:177;8146:133:32;8336:4;8292:25;:41;8318:11;;8330:1;8318:14;;;;;;;:::i;:::-;;;;;;;8292:41;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;8127:3;;;;;:::i;:::-;;;;8083:268;;;;8365:40;8393:11;;8365:40;;;;;;;:::i;:::-;;;;;;;;7815:597;;:::o;22550:343::-;22711:37;;;;;;;;1065:25:36;;;22667:7:32;;;;22711:28;:17;:28;;;;1038:18:36;;22711:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;22758:15;22834;;;:6;:15;;;;;;;;;22137:13;;22078:92;;;;;17916:19:36;;;17951:12;;;17944:28;;;18010:2;18006:15;;;18023:66;18002:88;17988:12;;;17981:110;18107:12;;;18100:28;;;18144:13;;;18137:29;;;;18182:13;;;18175:29;;;18220:13;;;;18213:29;;;;22078:92:32;;;;;;;;;;18258:13:36;;22078:92:32;;;22068:103;;;;;22686:62;;-1:-1:-1;22758:15:32;:104;22550:343;-1:-1:-1;;;;;;;22550:343:32:o;3901:220:21:-;1881:23;1898:6;1881:23;1889:4;1881:23;1873:80;;;;;;;12250:2:36;1873:80:21;;;12232:21:36;12289:2;12269:18;;;12262:30;12328:34;12308:18;;;12301:62;12399:14;12379:18;;;12372:42;12431:19;;1873:80:21;12048:408:36;1873:80:21;1995:6;1971:30;;:20;1312:66:18;1536:65;;;;1457:151;1971:20:21;:30;;;1963:87;;;;;;;12663:2:36;1963:87:21;;;12645:21:36;12702:2;12682:18;;;12675:30;12741:34;12721:18;;;12714:62;12812:14;12792:18;;;12785:42;12844:19;;1963:87:21;12461:408:36;1963:87:21;4016:36:::1;4034:17;4016;:36::i;:::-;4062:52;4084:17;4103:4;4109;4062:21;:52::i;:::-;3901:220:::0;;:::o;3006:131::-;3084:7;2324:4;2316:23;2333:6;2316:23;;2308:92;;;;;;;13960:2:36;2308:92:21;;;13942:21:36;13999:2;13979:18;;;13972:30;14038:34;14018:18;;;14011:62;14109:26;14089:18;;;14082:54;14153:19;;2308:92:21;13758:420:36;2308:92:21;-1:-1:-1;1312:66:18::1;3006:131:21::0;:::o;289:93:35:-;4882:13:20;;349:1:35;;4882:13:20;;;;;4881:14;:40;;;;-1:-1:-1;4899:12:20;;:22;;;;:12;;:22;4881:40;4873:99;;;;;;;14385:2:36;4873:99:20;;;14367:21:36;14424:2;14404:18;;;14397:30;14463:34;14443:18;;;14436:62;14534:16;14514:18;;;14507:44;14568:19;;4873:99:20;14183:410:36;4873:99:20;4982:12;:22;;362:3:35::1;:13:::0;;;5014:20:20;;4982:22;;;5014:20;;;4982:22;5014:20;;5055:21;;;;5091:20;;14740:36:36;;;5091:20:20;;14728:2:36;14713:18;5091:20:20;14598:184:36;21191:311:32;21275:7;21294:15;21312:17;:28;;;21341:4;;21347:10;21312:46;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21393:37;;;;;;;;1065:25:36;;;21294:64:32;;-1:-1:-1;21368:22:32;;21393:28;:17;:28;;;;1038:18:36;;21393:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21456:13;;21447:23;;;;:8;:23;;;;;;;;:32;;;;;;;;;:48;;;;;;;;;;;;;-1:-1:-1;;21191:311:32;;;;;;:::o;6308:149::-;3279:19:20;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:20;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:20;1713:19:22;:23;;;3387:66:20;;-1:-1:-1;3436:12:20;;;;;:17;3387:66;3325:201;;;;;;;14385:2:36;3325:201:20;;;14367:21:36;14424:2;14404:18;;;14397:30;14463:34;14443:18;;;14436:62;14534:16;14514:18;;;14507:44;14568:19;;3325:201:20;14183:410:36;3325:201:20;3536:12;:16;;;;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;;;;;;;3562:65;6359:24:32::1;:22;:24::i;:::-;6393:57;719:10:26::0;6393:33:32::1;:31;:33::i;:::-;:43:::0;::::1;:57::i;:::-;3651:14:20::0;3647:99;;;3697:5;3681:21;;;;;;3721:14;;-1:-1:-1;14740:36:36;;3721:14:20;;14728:2:36;14713:18;3721:14:20;;;;;;;;3269:483;6308:149:32:o;7024:328::-;7085:70;1536:23;719:10:26;7142:12:32;640:96:26;7085:70:32;7169:15;;;;:7;:15;;;;;;;;7165:77;;;7207:24;;;;;;;;1065:25:36;;;1038:18;;7207:24:32;919:177:36;7165:77:32;7252:13;:22;;;7284:15;;;;:7;:15;;;;;;;:22;;;;7302:4;7284:22;;;7321:24;;;;;7268:6;1065:25:36;;1053:2;1038:18;;919:177;1994:124:0;2049:62;719:10:26;2106:4:0;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3674:15:10;;;;3578:118;782:41:1;775:48;;710:120;:::o;8885:602:32:-;8975:70;1536:23;719:10:26;9032:12:32;640:96:26;8975:70:32;9059:23;9055:91;;9105:30;;;;;;;;;;;;;;9055:91;9161:9;9156:268;9176:22;;;9156:268;;;9224:25;:41;9250:11;;9262:1;9250:14;;;;;;;:::i;:::-;;;;;;;;;;9224:41;;-1:-1:-1;9224:41:32;;;;;;;;-1:-1:-1;9224:41:32;;;;9219:133;;9322:11;;9334:1;9322:14;;;;;;;:::i;:::-;;;;;;;9292:45;;;;;;;;;1065:25:36;;1053:2;1038:18;;919:177;9219:133:32;9372:25;:41;9398:11;;9410:1;9398:14;;;;;;;:::i;:::-;;;;;;;;;;9372:41;;-1:-1:-1;9372:41:32;;;;;;;;-1:-1:-1;9372:41:32;9365:48;;;;;;9200:3;;;;:::i;:::-;;;;9156:268;;;;9438:42;9468:11;;9438:42;;;;;;;:::i;2159:162:0:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2834:13:9;2866;;;;;;;;;;;:22;;;;;;;;;;;;;;;2745:150;2262:52:0;2255:59;;2159:162;;;;;:::o;14342:285:32:-;14512:46;;;;;14494:15;;14512:28;:17;:28;;;;:46;;14541:4;;;;14547:10;;14512:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14494:64;;14568:52;14576:7;14585:6;14593:17;14612:1;14615;14618;14568:7;:52::i;:::-;14484:143;14342:285;;;;;;;;:::o;20461:212::-;20564:37;;;;;;;;1065:25:36;;;20520:7:32;;;;20564:28;:17;:28;;;;1038:18:36;;20564:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20627:13;;20618:23;;;;:8;:23;;;;;;;;:32;;;;;;;;;:48;;;;;;;;;;;;;20461:212;-1:-1:-1;;20461:212:32:o;11578:363::-;11811:46;;;;;11793:15;;11811:28;:17;:28;;;;:46;;11840:4;;;;11846:10;;11811:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11793:64;;11867:67;11875:6;11883:7;11892:14;11908:6;11916:17;11867:7;:67::i;:::-;11783:158;11578:363;;;;;;;:::o;19098:221::-;19217:37;;;;;;;;1065:25:36;;;19173:7:32;;;;19217:28;:17;:28;;;;1038:18:36;;19217:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19271:16;;;;:8;:16;;;;;;;;:25;;;;;;;;;:41;;;;-1:-1:-1;;19271:41:32;;;;19098:221::o;18396:398::-;18506:34;;;;;;;;1065:25:36;;;18490:13:32;;18506:17;:25;;;;;1038:18:36;;18506:34:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18490:50;-1:-1:-1;719:10:26;18554:21:32;;;;18550:88;;18598:29;;;;;719:10:26;18598:29:32;;;1908:74:36;1881:18;;18598:29:32;1745:243:36;18550:88:32;18673:37;;;;;;;;1065:25:36;;;18648:22:32;;18673:17;:28;;;;;1038:18:36;;18673:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18648:62;;18720:67;18729:7;18738:14;18754:6;18762:17;18781:5;18720:8;:67::i;:::-;18480:314;;18396:398;;;:::o;1694:259:0:-;719:10:26;1805:66:0;719:10:26;1805:33:0;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;15553:868:32:-;15678:13;15694:15;;;:6;:15;;;;;;;15744:37;;;;;;;;1065:25:36;;;15694:15:32;;15678:13;15744:17;:28;;;;;1038:18:36;;15744:37:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;22137:13;;22078:92;;;;;;;17916:19:36;;;17951:12;;;17944:28;;;719:10:26;18010:2:36;18006:15;;;18023:66;18002:88;17988:12;;;17981:110;18107:12;;;18100:28;;;18144:13;;;18137:29;;;;18182:13;;;18175:29;;;18220:13;;;;18213:29;;;22078:92:32;;;;;;;;;;18258:13:36;;;;22078:92:32;;;22068:103;;;;;15719:62;;-1:-1:-1;15791:19:32;;15945:65;;15228:66:36;15945:65:32;;;15216:79:36;15311:12;;;15304:28;;;15791:110:32;;-1:-1:-1;15911:21:32;;15348:12:36;;15945:65:32;;;;;;;;;;;;;;15935:76;;15945:65;15935:76;;;;16038:34;;;;;;1065:25:36;;;15935:76:32;-1:-1:-1;16022:13:32;;16038:25;:17;:25;;;;1038:18:36;;16038:34:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16107:25;;;;;;15552:19:36;;;15587:12;;;15580:28;;;15646:3;15642:16;;;15660:66;15638:89;15624:12;;;15617:111;16107:25:32;;;;;;;;;15744:12:36;;;;16107:25:32;;;16022:50;;-1:-1:-1;;16157:69:32;16022:50;16201:13;16107:25;16157:36;:69::i;:::-;16142:84;;16241:7;16236:64;;16271:18;;;;;;;;;;;;;;16236:64;16310:67;16319:7;16328:14;16344:6;16352:17;16371:5;16310:8;:67::i;:::-;16405:9;:5;16413:1;16405:9;:::i;:::-;16387:15;;;;:6;:15;;;;;;:27;;;;-1:-1:-1;;;;;;;;;;;;15553:868:32:o;17391:245::-;17530:46;;;;;17512:15;;17530:28;:17;:28;;;;:46;;17559:4;;;;17565:10;;17530:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17512:64;;17586:43;17594:7;17603:6;17611:17;17586:7;:43::i;:::-;17502:134;17391:245;;;;;:::o;864:152:1:-;934:75;719:10:26;1000:8:1;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;4441:174:9:-;4482:16;;699:67;765:1;707:54;699:67;:::i;3705:170::-;2834:13;2866;;;;;;;;;;;:22;;;;;;;;;;;;;3802:66;;3840:28;;;;;;;;16074:25:36;;;16147:42;16135:55;;16115:18;;;16108:83;16047:18;;3840:28:9;15900:297:36;5087:174:10;5128:16;;920:71;990:1;928:58;920:71;:::i;4435:162::-;4541:15;;;4530:26;;;4541:15;;4530:26;4526:64;;4565:25;;;;;1938:42:36;1926:55;;4565:25:10;;;1908:74:36;1881:18;;4565:25:10;1745:243:36;1148:272:9;2834:13;2866;;;;;;;;;;;:22;;;;;;;;;;;;;1253:161;;1298:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1323:4;1298:29;;;1346:57;;16404:25:36;;;16506:18;;;16499:43;16578:15;;;16558:18;;;16551:43;;;;1346:57:9;;16392:2:36;16377:18;1346:57:9;;;;;;;;1253:161;1148:272;;;;:::o;6602:146:32:-;6671:70;719:10:26;6671:33:32;:31;:33::i;2820:944:18:-;971:66;3236:59;;;3232:526;;;3311:37;3330:17;3311:18;:37::i;3232:526::-;3412:17;3383:61;;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3383:63:18;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3379:302;;3610:56;;;;;16996:2:36;3610:56:18;;;16978:21:36;17035:2;17015:18;;;17008:30;17074:34;17054:18;;;17047:62;17145:16;17125:18;;;17118:44;17179:19;;3610:56:18;16794:410:36;3379:302:18;1312:66;3496:28;;3488:82;;;;;;;17411:2:36;3488:82:18;;;17393:21:36;17450:2;17430:18;;;17423:30;17489:34;17469:18;;;17462:62;17560:11;17540:18;;;17533:39;17589:19;;3488:82:18;17209:405:36;3488:82:18;3447:138;3694:53;3712:17;3731:4;3737:9;3694:17;:53::i;1042:67:21:-;5374:13:20;;;;;;;5366:69;;;;;;;18484:2:36;5366:69:20;;;18466:21:36;18523:2;18503:18;;;18496:30;18562:34;18542:18;;;18535:62;18633:13;18613:18;;;18606:41;18664:19;;5366:69:20;18282:407:36;5366:69:20;1042:67:21:o;2513:180:10:-;2591:54;1056:69;1124:1;1064:56;1056:69;:::i;:::-;2643:1;2591:28;:54::i;:::-;2655:31;:1;2673:12;2655:17;:31::i;2327:234:9:-;2416:30;:1;2433:4;2439:6;2416:16;:30::i;:::-;2480:5;2456:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2500:54;;16404:25:36;;;16506:18;;;16499:43;;;16558:18;;16551:43;;;;2500:54:9;;16392:2:36;16377:18;2500:54:9;;;;;;;2327:234;;;:::o;12571:638:32:-;12734:13;;12707:15;12725:23;;;:8;:23;;;;;;;;:32;;;;;;;;:48;;;;;;;;;12787:16;;;12783:90;;;12826:36;;;;;;;;11326:25:36;;;11367:18;;;11360:34;;;11299:18;;12826:36:32;11152:248:36;12783:90:32;12887:44;;;;:25;:44;;;;;;;;12882:131;;12954:48;;;;;;;;1065:25:36;;;1038:18;;12954:48:32;919:177:36;12882:131:32;13074:16;13084:6;13074:7;:16;:::i;:::-;13032:13;;;13023:23;;;;:8;:23;;;;;;;;:32;;;;;;;;:48;;;;;;;;;:67;;;;13124:13;;13106:96;;719:10:26;18986:34:36;;19036:18;;;19029:34;;;19079:18;;;19072:34;;;18935:42;19142:15;;19137:2;19122:18;;19115:43;13139:17:32;;13023:32;;13106:96;;18912:3:36;18897:19;13106:96:32;18694:470:36;1798:273:9;2834:13;2866;;;;;;;;;;;:22;;;;;;;;;;;;;1904:161;;;1973:5;1948:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1997:57;;16404:25:36;;;16506:18;;;16499:43;16578:15;;;16558:18;;;16551:43;;;;1997:57:9;;16392:2:36;16377:18;1997:57:9;16202:398:36;1039:667:30;1175:4;1192:17;1211:24;1239:33;1256:4;1262:9;1239:16;:33::i;:::-;1191:81;;-1:-1:-1;1191:81:30;-1:-1:-1;1295:26:30;1286:5;:35;;;;;;;;:::i;:::-;;:58;;;;;1338:6;1325:19;;:9;:19;;;1286:58;1282:100;;;1367:4;1360:11;;;;;;1282:100;1393:12;1407:19;1430:6;:17;;1484:34;;;1520:4;1526:9;1461:75;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1430:116;;;;1461:75;1430:116;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1392:154;;;;1564:7;:42;;;;;1587:6;:13;1604:2;1587:19;1564:42;:134;;;;-1:-1:-1;1622:29:30;;1663:34;;1622:29;;;;;;;;;;;;:::i;:::-;:76;1564:134;1556:143;1039:667;-1:-1:-1;;;;;;;;1039:667:30:o;3068:383:10:-;3190:15;;;;;;;3219:23;;;;3215:60;;3251:24;;;;;1938:42:36;1926:55;;3251:24:10;;;1908:74:36;1881:18;;3251:24:10;1745:243:36;3215:60:10;3306:8;3289:25;;:13;:25;;;3285:160;;3330:26;;;;;;;;;;;;;3375:59;;;;;;;;-1:-1:-1;;3375:59:10;3156:295;3068:383;;;:::o;1699:281:18:-;1713:19:22;;;;1772:106:18;;;;;;;20734:2:36;1772:106:18;;;20716:21:36;20773:2;20753:18;;;20746:30;20812:34;20792:18;;;20785:62;20883:15;20863:18;;;20856:43;20916:19;;1772:106:18;20532:409:36;1772:106:18;1312:66;1888:85;;;;;;;;;;;;;;;1699:281::o;2372:276::-;2480:29;2491:17;2480:10;:29::i;:::-;2537:1;2523:4;:11;:15;:28;;;;2542:9;2523:28;2519:123;;;2567:64;2607:17;2626:4;2567:39;:64::i;672:357:15:-;866:20;;821:11;;900:21;;;896:88;;930:54;;;;;;;;11326:25:36;;;11367:18;;;11360:34;;;11299:18;;930:54:15;11152:248:36;896:88:15;-1:-1:-1;994:28:15;-1:-1:-1;672:357:15:o;1561:355:10:-;1649:26;;;;1645:166;;1691:30;;;;;;;;;;;;1740:60;;-1:-1:-1;;1740:60:10;;-1:-1:-1;;1740:60:10;1645:166;1820:89;1877:25;1904:4;1820:34;:32;:34::i;:::-;:56;:89;:56;:89::i;2145:730:29:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:29;;-1:-1:-1;2822:35:29;2259:610;2145:730;;;;;:::o;2086:152:18:-;2152:37;2171:17;2152:18;:37::i;:::-;2204:27;;;;;;;;;;;2086:152;:::o;6685:198:22:-;6768:12;6799:77;6820:6;6828:4;6799:77;;;;;;;;;;;;;;;;;:20;:77::i;1705:174:13:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;881:35;896:20;881:35;;;877:68;;925:20;;;;;;;;;;;;;;877:68;955:34;;;;;:21;:34;;;;;;;;;;;;:46;;;;;;;;;;;;;773:235::o;5069:1494:29:-;5195:7;;6119:66;6106:79;;6102:161;;;-1:-1:-1;6217:1:29;;-1:-1:-1;6221:30:29;6201:51;;6102:161;6374:24;;;6357:14;6374:24;;;;;;;;;21173:25:36;;;21246:4;21234:17;;21214:18;;;21207:45;;;;21268:18;;;21261:34;;;21311:18;;;21304:34;;;6374:24:29;;21145:19:36;;6374:24:29;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6374:24:29;;;;;;-1:-1:-1;;6412:20:29;;;6408:101;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;-1:-1:-1;6535:20:29;;-1:-1:-1;5069:1494:29;;;;;;;;:::o;7069:325:22:-;7210:12;7235;7249:23;7276:6;:19;;7296:4;7276:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7234:67;;;;7318:69;7345:6;7353:7;7362:10;7374:12;7318:26;:69::i;:::-;7311:76;7069:325;-1:-1:-1;;;;;;7069:325:22:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:10;:17;7938:1;7917:22;7913:286;;1713:19;;;;8124:60;;;;;;;21551:2:36;8124:60:22;;;21533:21:36;21590:2;21570:18;;;21563:30;21629:31;21609:18;;;21602:59;21678:18;;8124:60:22;21349:353:36;8124:60:22;-1:-1:-1;8219:10:22;8212:17;;7886:418;8260:33;8268:10;8280:12;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;;;;;;;;;;:::i;14:348:36:-;66:8;76:6;130:3;123:4;115:6;111:17;107:27;97:55;;148:1;145;138:12;97:55;-1:-1:-1;171:20:36;;214:18;203:30;;200:50;;;246:1;243;236:12;200:50;283:4;275:6;271:17;259:29;;335:3;328:4;319:6;311;307:19;303:30;300:39;297:59;;;352:1;349;342:12;367:547;456:6;464;472;480;533:2;521:9;512:7;508:23;504:32;501:52;;;549:1;546;539:12;501:52;585:9;572:23;562:33;;642:2;631:9;627:18;614:32;604:42;;697:2;686:9;682:18;669:32;724:18;716:6;713:30;710:50;;;756:1;753;746:12;710:50;795:59;846:7;837:6;826:9;822:22;795:59;:::i;:::-;367:547;;;;-1:-1:-1;873:8:36;-1:-1:-1;;;;367:547:36:o;1101:180::-;1160:6;1213:2;1201:9;1192:7;1188:23;1184:32;1181:52;;;1229:1;1226;1219:12;1181:52;-1:-1:-1;1252:23:36;;1101:180;-1:-1:-1;1101:180:36:o;1286:454::-;1381:6;1389;1397;1405;1413;1466:3;1454:9;1445:7;1441:23;1437:33;1434:53;;;1483:1;1480;1473:12;1434:53;-1:-1:-1;;1506:23:36;;;1576:2;1561:18;;1548:32;;-1:-1:-1;1627:2:36;1612:18;;1599:32;;1678:2;1663:18;;1650:32;;-1:-1:-1;1729:3:36;1714:19;1701:33;;-1:-1:-1;1286:454:36;-1:-1:-1;1286:454:36:o;1993:154::-;2079:42;2072:5;2068:54;2061:5;2058:65;2048:93;;2137:1;2134;2127:12;2152:315;2220:6;2228;2281:2;2269:9;2260:7;2256:23;2252:32;2249:52;;;2297:1;2294;2287:12;2249:52;2333:9;2320:23;2310:33;;2393:2;2382:9;2378:18;2365:32;2406:31;2431:5;2406:31;:::i;:::-;2456:5;2446:15;;;2152:315;;;;;:::o;2472:247::-;2531:6;2584:2;2572:9;2563:7;2559:23;2555:32;2552:52;;;2600:1;2597;2590:12;2552:52;2639:9;2626:23;2658:31;2683:5;2658:31;:::i;2724:615::-;2810:6;2818;2871:2;2859:9;2850:7;2846:23;2842:32;2839:52;;;2887:1;2884;2877:12;2839:52;2927:9;2914:23;2956:18;2997:2;2989:6;2986:14;2983:34;;;3013:1;3010;3003:12;2983:34;3051:6;3040:9;3036:22;3026:32;;3096:7;3089:4;3085:2;3081:13;3077:27;3067:55;;3118:1;3115;3108:12;3067:55;3158:2;3145:16;3184:2;3176:6;3173:14;3170:34;;;3200:1;3197;3190:12;3170:34;3253:7;3248:2;3238:6;3235:1;3231:14;3227:2;3223:23;3219:32;3216:45;3213:65;;;3274:1;3271;3264:12;3213:65;3305:2;3297:11;;;;;3327:6;;-1:-1:-1;2724:615:36;;-1:-1:-1;;;;2724:615:36:o;3344:452::-;3430:6;3438;3446;3454;3507:3;3495:9;3486:7;3482:23;3478:33;3475:53;;;3524:1;3521;3514:12;3475:53;3560:9;3547:23;3537:33;;3620:2;3609:9;3605:18;3592:32;3633:31;3658:5;3633:31;:::i;:::-;3344:452;;3683:5;;-1:-1:-1;;;;3735:2:36;3720:18;;3707:32;;3786:2;3771:18;3758:32;;3344:452::o;4360:184::-;4412:77;4409:1;4402:88;4509:4;4506:1;4499:15;4533:4;4530:1;4523:15;4549:1115;4626:6;4634;4687:2;4675:9;4666:7;4662:23;4658:32;4655:52;;;4703:1;4700;4693:12;4655:52;4742:9;4729:23;4761:31;4786:5;4761:31;:::i;:::-;4811:5;-1:-1:-1;4867:2:36;4852:18;;4839:32;4890:18;4920:14;;;4917:34;;;4947:1;4944;4937:12;4917:34;4985:6;4974:9;4970:22;4960:32;;5030:7;5023:4;5019:2;5015:13;5011:27;5001:55;;5052:1;5049;5042:12;5001:55;5088:2;5075:16;5110:2;5106;5103:10;5100:36;;;5116:18;;:::i;:::-;5250:2;5244:9;5312:4;5304:13;;5155:66;5300:22;;;5324:2;5296:31;5292:40;5280:53;;;5348:18;;;5368:22;;;5345:46;5342:72;;;5394:18;;:::i;:::-;5434:10;5430:2;5423:22;5469:2;5461:6;5454:18;5509:7;5504:2;5499;5495;5491:11;5487:20;5484:33;5481:53;;;5530:1;5527;5520:12;5481:53;5586:2;5581;5577;5573:11;5568:2;5560:6;5556:15;5543:46;5631:1;5626:2;5621;5613:6;5609:15;5605:24;5598:35;5652:6;5642:16;;;;;;;4549:1115;;;;;:::o;5669:316::-;5746:6;5754;5762;5815:2;5803:9;5794:7;5790:23;5786:32;5783:52;;;5831:1;5828;5821:12;5783:52;-1:-1:-1;;5854:23:36;;;5924:2;5909:18;;5896:32;;-1:-1:-1;5975:2:36;5960:18;;;5947:32;;5669:316;-1:-1:-1;5669:316:36:o;5990:479::-;6070:6;6078;6086;6139:2;6127:9;6118:7;6114:23;6110:32;6107:52;;;6155:1;6152;6145:12;6107:52;6191:9;6178:23;6168:33;;6252:2;6241:9;6237:18;6224:32;6279:18;6271:6;6268:30;6265:50;;;6311:1;6308;6301:12;6265:50;6350:59;6401:7;6392:6;6381:9;6377:22;6350:59;:::i;:::-;5990:479;;6428:8;;-1:-1:-1;6324:85:36;;-1:-1:-1;;;;5990:479:36:o;6705:156::-;6771:20;;6831:4;6820:16;;6810:27;;6800:55;;6851:1;6848;6841:12;6800:55;6705:156;;;:::o;6866:825::-;6989:6;6997;7005;7013;7021;7029;7037;7045;7098:3;7086:9;7077:7;7073:23;7069:33;7066:53;;;7115:1;7112;7105:12;7066:53;7151:9;7138:23;7128:33;;7212:2;7201:9;7197:18;7184:32;7239:18;7231:6;7228:30;7225:50;;;7271:1;7268;7261:12;7225:50;7310:59;7361:7;7352:6;7341:9;7337:22;7310:59;:::i;:::-;7388:8;;-1:-1:-1;7284:85:36;-1:-1:-1;;7470:2:36;7455:18;;7442:32;;-1:-1:-1;7521:2:36;7506:18;;7493:32;;-1:-1:-1;7544:37:36;7576:3;7561:19;;7544:37;:::i;:::-;7534:47;;7628:3;7617:9;7613:19;7600:33;7590:43;;7680:3;7669:9;7665:19;7652:33;7642:43;;6866:825;;;;;;;;;;;:::o;7696:754::-;7812:6;7820;7828;7836;7844;7852;7860;7913:3;7901:9;7892:7;7888:23;7884:33;7881:53;;;7930:1;7927;7920:12;7881:53;7966:9;7953:23;7943:33;;8023:2;8012:9;8008:18;7995:32;7985:42;;8078:2;8067:9;8063:18;8050:32;8105:18;8097:6;8094:30;8091:50;;;8137:1;8134;8127:12;8091:50;8176:59;8227:7;8218:6;8207:9;8203:22;8176:59;:::i;:::-;7696:754;;;;-1:-1:-1;8254:8:36;8336:2;8321:18;;8308:32;;8387:3;8372:19;;8359:33;;-1:-1:-1;8439:3:36;8424:19;;;8411:33;;-1:-1:-1;7696:754:36;-1:-1:-1;;;;7696:754:36:o;8455:248::-;8523:6;8531;8584:2;8572:9;8563:7;8559:23;8555:32;8552:52;;;8600:1;8597;8590:12;8552:52;-1:-1:-1;;8623:23:36;;;8693:2;8678:18;;;8665:32;;-1:-1:-1;8455:248:36:o;9029:525::-;9131:6;9139;9147;9155;9163;9171;9224:3;9212:9;9203:7;9199:23;9195:33;9192:53;;;9241:1;9238;9231:12;9192:53;9277:9;9264:23;9254:33;;9334:2;9323:9;9319:18;9306:32;9296:42;;9385:2;9374:9;9370:18;9357:32;9347:42;;9408:36;9440:2;9429:9;9425:18;9408:36;:::i;:::-;9398:46;;9491:3;9480:9;9476:19;9463:33;9453:43;;9543:3;9532:9;9528:19;9515:33;9505:43;;9029:525;;;;;;;;:::o;9559:616::-;9657:6;9665;9673;9681;9689;9742:3;9730:9;9721:7;9717:23;9713:33;9710:53;;;9759:1;9756;9749:12;9710:53;9795:9;9782:23;9772:33;;9856:2;9845:9;9841:18;9828:32;9883:18;9875:6;9872:30;9869:50;;;9915:1;9912;9905:12;9869:50;9954:59;10005:7;9996:6;9985:9;9981:22;9954:59;:::i;:::-;9559:616;;10032:8;;-1:-1:-1;9928:85:36;;10114:2;10099:18;;10086:32;;10165:2;10150:18;;;10137:32;;-1:-1:-1;9559:616:36;-1:-1:-1;;;;9559:616:36:o;10180:522::-;10367:2;10356:9;10349:21;10406:6;10401:2;10390:9;10386:18;10379:34;10463:6;10455;10450:2;10439:9;10435:18;10422:48;10519:1;10514:2;10505:6;10494:9;10490:22;10486:31;10479:42;10330:4;10648:2;10578:66;10573:2;10565:6;10561:15;10557:88;10546:9;10542:104;10538:113;10530:121;;10689:6;10682:4;10671:9;10667:20;10660:36;10180:522;;;;;;:::o;10707:184::-;10777:6;10830:2;10818:9;10809:7;10805:23;10801:32;10798:52;;;10846:1;10843;10836:12;10798:52;-1:-1:-1;10869:16:36;;10707:184;-1:-1:-1;10707:184:36:o;10896:251::-;10966:6;11019:2;11007:9;10998:7;10994:23;10990:32;10987:52;;;11035:1;11032;11025:12;10987:52;11067:9;11061:16;11086:31;11111:5;11086:31;:::i;11405:184::-;11457:77;11454:1;11447:88;11554:4;11551:1;11544:15;11578:4;11575:1;11568:15;11594:125;11659:9;;;11680:10;;;11677:36;;;11693:18;;:::i;12874:184::-;12926:77;12923:1;12916:88;13023:4;13020:1;13013:15;13047:4;13044:1;13037:15;13063:195;13102:3;13133:66;13126:5;13123:77;13120:103;;13203:18;;:::i;:::-;-1:-1:-1;13250:1:36;13239:13;;13063:195::o;13263:490::-;13452:2;13441:9;13434:21;13491:6;13486:2;13475:9;13471:18;13464:34;13415:4;13521:66;13513:6;13510:78;13507:98;;;13601:1;13598;13591:12;13507:98;13635:6;13632:1;13628:14;13692:6;13684;13679:2;13668:9;13664:18;13651:48;13720:22;;;;13744:2;13716:31;;13263:490;-1:-1:-1;;;13263:490:36:o;15767:128::-;15834:9;;;15855:11;;;15852:37;;;15869:18;;:::i;19169:184::-;19221:77;19218:1;19211:88;19318:4;19315:1;19308:15;19342:4;19339:1;19332:15;19358:250;19443:1;19453:113;19467:6;19464:1;19461:13;19453:113;;;19543:11;;;19537:18;19524:11;;;19517:39;19489:2;19482:10;19453:113;;;-1:-1:-1;;19600:1:36;19582:16;;19575:27;19358:250::o;19613:329::-;19654:3;19692:5;19686:12;19719:6;19714:3;19707:19;19735:76;19804:6;19797:4;19792:3;19788:14;19781:4;19774:5;19770:16;19735:76;:::i;:::-;19856:2;19844:15;19861:66;19840:88;19831:98;;;;19931:4;19827:109;;19613:329;-1:-1:-1;;19613:329:36:o;19947:288::-;20122:6;20111:9;20104:25;20165:2;20160;20149:9;20145:18;20138:30;20085:4;20185:44;20225:2;20214:9;20210:18;20202:6;20185:44;:::i;20240:287::-;20369:3;20407:6;20401:13;20423:66;20482:6;20477:3;20470:4;20462:6;20458:17;20423:66;:::i;:::-;20505:16;;;;;20240:287;-1:-1:-1;;20240:287:36:o;21707:219::-;21856:2;21845:9;21838:21;21819:4;21876:44;21916:2;21905:9;21901:18;21893:6;21876:44;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"3108200","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"251","DEPOSITOR_ROLE()":"229","REALM_ID_CONTRACT()":"infinite","allowedConsumeReasonCodes(bytes32)":"2560","balanceOf(bytes32,bytes32,string)":"infinite","balanceOf(bytes32,string)":"infinite","balanceOf(bytes32,uint256)":"infinite","balanceOf(uint256)":"infinite","balances(bytes32,uint256,uint256)":"2714","batchAddConsumeReasonCodes(bytes32[])":"infinite","batchRemoveConsumeReasonCodes(bytes32[])":"infinite","consume(bytes32,string,uint256,bytes32)":"infinite","consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":"infinite","consume(uint256,uint256,bytes32)":"infinite","consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":"infinite","currentSeason()":"2373","deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":"infinite","deposit(bytes32,uint256,uint256,uint256,bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","initialize()":"infinite","initializeV2(uint256)":"52030","nonces(uint256)":"2496","owner()":"infinite","preparePayload(uint256,address,uint256,bytes32)":"infinite","proxiableUUID()":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","seasons(bytes32)":"2518","setCurrentSeason(bytes32)":"infinite","transferOwnership(address)":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","val()":"2374"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEPOSITOR_ROLE()":"a3b0b5a3","REALM_ID_CONTRACT()":"2681a28a","allowedConsumeReasonCodes(bytes32)":"f9515962","balanceOf(bytes32,bytes32,string)":"098b6419","balanceOf(bytes32,string)":"794459be","balanceOf(bytes32,uint256)":"ad3b1d48","balanceOf(uint256)":"9cc7f708","balances(bytes32,uint256,uint256)":"51955dfc","batchAddConsumeReasonCodes(bytes32[])":"3f30b00f","batchRemoveConsumeReasonCodes(bytes32[])":"906405a3","consume(bytes32,string,uint256,bytes32)":"e564a0e2","consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":"99d342ac","consume(uint256,uint256,bytes32)":"d14a5c71","consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":"dc893ce4","currentSeason()":"bcb39621","deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":"9d70b005","deposit(bytes32,uint256,uint256,uint256,bytes32)":"18ee89f0","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize()":"8129fc1c","initializeV2(uint256)":"5b4e128c","nonces(uint256)":"141a468c","owner()":"8da5cb5b","preparePayload(uint256,address,uint256,bytes32)":"4519eb1d","proxiableUUID()":"52d1902d","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","seasons(bytes32)":"4529cc1b","setCurrentSeason(bytes32)":"86a8e98a","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","val()":"3c6bb436"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"realmIdContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"}],\"name\":\"ConsumeReasonCodeAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"}],\"name\":\"ConsumeReasonCodeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConsumeReasonCodesArrayEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"IncorrectSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPhase\",\"type\":\"uint256\"}],\"name\":\"InitializationPhaseAlreadyReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidRealmIdContractAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidRealmIdVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"SeasonAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"BatchAddedConsumeReasonCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"BatchRemovedConsumeReasonCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realmIdOwner\",\"type\":\"address\"}],\"name\":\"Consumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"SetCurrentSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REALM_ID_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IRealmId\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allowedConsumeReasonCodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"batchAddConsumeReasonCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"reasonCodes\",\"type\":\"bytes32[]\"}],\"name\":\"batchRemoveConsumeReasonCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"consumeReasonCode\",\"type\":\"bytes32\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"realmIdVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"realmId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"}],\"name\":\"preparePayload\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seasons\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"season\",\"type\":\"bytes32\"}],\"name\":\"setCurrentSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"val\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ConsumeReasonCodeAlreadyExists(bytes32)\":[{\"params\":{\"reasonCode\":\"The reason code that already exists in the mapping.\"}}],\"ConsumeReasonCodeDoesNotExist(bytes32)\":[{\"params\":{\"reasonCode\":\"The reason code that does not exist in the mapping.\"}}],\"IncorrectSigner(address)\":[{\"params\":{\"signer\":\"The incorrect signer.\"}}],\"InitializationPhaseAlreadyReached(uint256,uint256)\":[{\"params\":{\"currentPhase\":\"The current phase.\",\"newPhase\":\"The new phase trying to be set.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"params\":{\"realmId\":\"The given realmId.\",\"requiredBalance\":\"The required balance.\"}}],\"InvalidRealmIdContractAddress(address)\":[{\"params\":{\"addr\":\"The invalid realmId contract address.\"}}],\"InvalidRealmIdVersion(uint256,uint256)\":[{\"params\":{\"realmId\":\"The given realmId.\",\"realmIdVersion\":\"The given realmId version.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"SeasonAlreadySet(bytes32)\":[{\"params\":{\"season\":\"The season that already exists in the mapping.\"}}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BatchAddedConsumeReasonCode(bytes32[])\":{\"params\":{\"reasonCodes\":\"The reason codes added to the mapping.\"}},\"BatchRemovedConsumeReasonCode(bytes32[])\":{\"params\":{\"reasonCodes\":\"The reason codes removed from the mapping.\"}},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)\":{\"params\":{\"amount\":\"The amount consumed.\",\"operator\":\"The sender of the consumption.\",\"realmId\":\"The realmId of the balance consumed from.\",\"realmIdOwner\":\"The realmId owner's address.\",\"realmIdVersion\":\"The realmId version.\",\"reasonCode\":\"The reason code of the consumption.\",\"season\":\"The season of the balance consumed from.\"}},\"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"The amount deposited.\",\"realmId\":\"The realmId of the balance deposited to.\",\"realmIdVersion\":\"The realmId version.\",\"reasonCode\":\"The reason code of the deposit.\",\"season\":\"The season of the balance deposited to.\",\"sender\":\"The sender of the deposit.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}},\"SetCurrentSeason(bytes32)\":{\"params\":{\"season\":\"The new season being set.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(bytes32,bytes32,string)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.\",\"params\":{\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\",\"season\":\"The season.\"},\"returns\":{\"_0\":\"The balance.\"}},\"balanceOf(bytes32,string)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.\",\"params\":{\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\"},\"returns\":{\"_0\":\"The balance.\"}},\"balanceOf(bytes32,uint256)\":{\"details\":\"Reverts if fails to resolve realmId's version.\",\"params\":{\"realmId\":\"The realmId.\",\"season\":\"The season.\"},\"returns\":{\"_0\":\"The balance.\"}},\"balanceOf(uint256)\":{\"details\":\"Reverts if fails to resolve realmId's version.\",\"params\":{\"realmId\":\"The realmId.\"},\"returns\":{\"_0\":\"The balance.\"}},\"batchAddConsumeReasonCodes(bytes32[])\":{\"details\":\"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes already exists in the mapping.Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.\",\"params\":{\"reasonCodes\":\"Array of reason codes to add.\"}},\"batchRemoveConsumeReasonCodes(bytes32[])\":{\"details\":\"Reverts if sender does not have Admin role.Reverts if the given reason codes array is empty.Reverts if any of the given reason codes do not exist in the mapping.Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.\",\"params\":{\"reasonCodes\":\"Array of reason codes to remove.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"consume(bytes32,string,uint256,bytes32)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\"}},\"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if fails to resolve realmId from the given parent node and name.Reverts if fails to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"name\":\"The name of the realmId.\",\"parentNode\":\"The parent node of the realmId.\",\"r\":\"r value of the signature.\",\"s\":\"s value of the signature.\",\"v\":\"v value of the signature.\"}},\"consume(uint256,uint256,bytes32)\":{\"details\":\"Reverts if fails to resolve owner of the realmId.Reverts if the sender is not the owner of the realmId.Reverts if fails to resolve realmId's version.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"realmId\":\"The realmId to deposit to.\"}},\"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if failes to resolve realmId's version.Reverts if signature is invalid.Reverts if fails to resolve owner of the realmId.Reverts if signer is not the realmId owner.Reverts if balance is insufficient.Reverts if the consume reason code is not allowed.Emits a {Consumed} event if the consumption is successful.\",\"params\":{\"amount\":\"The amount to consume.\",\"consumeReasonCode\":\"The reason code of the consumption.\",\"r\":\"r value of the signature.\",\"realmId\":\"The realmId to consume from.\",\"s\":\"s value of the signature.\",\"v\":\"v value of the signature.\"}},\"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)\":{\"details\":\"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event with msg.sender as the sender.\",\"params\":{\"amount\":\"The amount to deposit.\",\"depositReasonCode\":\"The reason code of the deposit.\",\"name\":\"The name associated with the realmId.\",\"parentNode\":\"The parent node associated with the realmId.\",\"realmIdVersion\":\"The realmId version.\",\"season\":\"The season to deposit to.\"}},\"deposit(bytes32,uint256,uint256,uint256,bytes32)\":{\"details\":\"Reverts if sender does not have Depositor role.Reverts if the realmId does not exist.Reverts if the given realmId version does not match the current realmId version.Emits a {Deposited} event if successful.\",\"params\":{\"amount\":\"The amount to deposit.\",\"depositReasonCode\":\"The reason code of the deposit.\",\"realmId\":\"The realmId to deposit to.\",\"realmIdVersion\":\"The realmId version.\",\"season\":\"The season to deposit to.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"preparePayload(uint256,address,uint256,bytes32)\":{\"details\":\"Reverts if fails to resolve the realmId's version.\",\"params\":{\"amount\":\"The amount.\",\"realmId\":\"The realmId.\",\"reasonCode\":\"The reason code.\"},\"returns\":{\"_0\":\"The payload.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"setCurrentSeason(bytes32)\":{\"details\":\"Reverts if sender does not have Admin role.Reverts if the given season has already been set before.Emits a {SetCurrentSeason} event if successful.\",\"params\":{\"season\":\"The season to set.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ConsumeReasonCodeAlreadyExists(bytes32)\":[{\"notice\":\"Thrown when the given consume reason code already exists in the mapping.\"}],\"ConsumeReasonCodeDoesNotExist(bytes32)\":[{\"notice\":\"Thrown when the given reason code does not exist in the mapping.\"}],\"ConsumeReasonCodesArrayEmpty()\":[{\"notice\":\"Thrown when the given consume reason codes array is empty.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"IncorrectSigner(address)\":[{\"notice\":\"Thrown when the signer is not the realmId owner.\"}],\"InitializationPhaseAlreadyReached(uint256,uint256)\":[{\"notice\":\"Emitted when trying to set a phase value that has already been reached.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"notice\":\"Thrown when the realmId does not have enough balance\"}],\"InvalidRealmIdContractAddress(address)\":[{\"notice\":\"Thrown at construction when the given realmId contract address is invalid.\"}],\"InvalidRealmIdVersion(uint256,uint256)\":[{\"notice\":\"Thrown when the given realmId version does not match the current realmId version.\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when the signature is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}],\"SeasonAlreadySet(bytes32)\":[{\"notice\":\"Thrown when the given season has already been set.\"}]},\"events\":{\"BatchAddedConsumeReasonCode(bytes32[])\":{\"notice\":\"Emitted when one or more reason code(s) are added to the comsume reason code mapping.\"},\"BatchRemovedConsumeReasonCode(bytes32[])\":{\"notice\":\"Emitted when one or more reason code(s) are removed from the comsume reason code mapping.\"},\"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)\":{\"notice\":\"Emitted when an amount is consumed from a balance.\"},\"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Emitted when an amount is deposited to a balance.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"},\"SetCurrentSeason(bytes32)\":{\"notice\":\"Emitted when the current season is set.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(bytes32,bytes32,string)\":{\"notice\":\"Gets the balance of a realmId for a specified season.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.\"},\"balanceOf(bytes32,string)\":{\"notice\":\"Gets the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season.\"},\"balanceOf(bytes32,uint256)\":{\"notice\":\"Gets the balance of a given realmId for a specified season.Applies to the current version of the realmId.\"},\"balanceOf(uint256)\":{\"notice\":\"Gets the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season.\"},\"batchAddConsumeReasonCodes(bytes32[])\":{\"notice\":\"Adds one or more reason code(s) to the consume reason code mapping.\"},\"batchRemoveConsumeReasonCodes(bytes32[])\":{\"notice\":\"Removes one or more reason code(s) from the consume reason code mapping.\"},\"consume(bytes32,string,uint256,bytes32)\":{\"notice\":\"Called by the realmId owner to consume a given amount from the realmId's balance.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season.\"},\"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Called with a signature to consume a given amount from the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season.\"},\"consume(uint256,uint256,bytes32)\":{\"notice\":\"Called by the realmId owner to consume a given amount from the given realmId's balance.Applies to the current version of the realmId.Applies to the current season.\"},\"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Called with a signature to consume a given amount from the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season.\"},\"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)\":{\"notice\":\"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.The realmId is resolved from the given parent node and name.\"},\"deposit(bytes32,uint256,uint256,uint256,bytes32)\":{\"notice\":\"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"initialize()\":{\"notice\":\"Initializes the contract with the provided realmId contract address.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"preparePayload(uint256,address,uint256,bytes32)\":{\"notice\":\"Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"setCurrentSeason(bytes32)\":{\"notice\":\"Sets the current season.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol\":\"MockRealmPointsUpgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x922cf4abb506400feb78edab23e1cacddbd50541d345f460004e73a5eef182dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xfb45a36f64044b641cc76eb19b394cfb4d936104651e55fee6e4d28b7cde1222\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1ae6db61ce87a6f7bd1ba3467520f4171f950719a0fa3439c073254e7c385d8d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b65163852ad12e03d4afe37faef822ebdf08f898bbea7c67264fa39874cb44e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RealmPoints/RealmPoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IRealmId} from \\\"./interface/IRealmId.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {AccessControlBase} from \\\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\\\";\\nimport {ContractOwnershipBase} from \\\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title RealmPoints\\n/// @notice This contract is designed for managing the point balances of RealmId.\\n/// @notice Point balances are registered by realmId (verioned) by season.\\n/// @notice Methods apply to the current version of the realmId if realmId version is not specified.\\n/// @notice Methods support identifying the realmId by the realmId itself, or by its parent node and name.\\ncontract RealmPoints is Initializable, AccessControlBase, ContractOwnershipBase, UUPSUpgradeable {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IRealmId public immutable REALM_ID_CONTRACT;\\n\\n    bytes32 public currentSeason;\\n    mapping(bytes32 => bool) public seasons;\\n\\n    mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256))) public balances; // season => realmId => realmIdVersion => balance\\n\\n    mapping(uint256 => uint256) public nonces; // realmId => nonce\\n\\n    mapping(bytes32 => bool) public allowedConsumeReasonCodes;\\n\\n    /// @notice Emitted when the current season is set.\\n    /// @param season The new season being set.\\n    event SetCurrentSeason(bytes32 season);\\n\\n    /// @notice Emitted when one or more reason code(s) are added to the comsume reason code mapping.\\n    /// @param reasonCodes The reason codes added to the mapping.\\n    event BatchAddedConsumeReasonCode(bytes32[] reasonCodes);\\n\\n    /// @notice Emitted when one or more reason code(s) are removed from the comsume reason code mapping.\\n    /// @param reasonCodes The reason codes removed from the mapping.\\n    event BatchRemovedConsumeReasonCode(bytes32[] reasonCodes);\\n\\n    /// @notice Emitted when an amount is deposited to a balance.\\n    /// @param sender The sender of the deposit.\\n    /// @param season The season of the balance deposited to.\\n    /// @param reasonCode The reason code of the deposit.\\n    /// @param realmId The realmId of the balance deposited to.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount deposited.\\n    event Deposited(\\n        address indexed sender,\\n        bytes32 indexed season,\\n        bytes32 indexed reasonCode,\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an amount is consumed from a balance.\\n    /// @param realmId The realmId of the balance consumed from.\\n    /// @param season The season of the balance consumed from.\\n    /// @param reasonCode The reason code of the consumption.\\n    /// @param operator The sender of the consumption.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount consumed.\\n    /// @param realmIdOwner The realmId owner's address.\\n    event Consumed(\\n        uint256 indexed realmId,\\n        bytes32 indexed season,\\n        bytes32 indexed reasonCode,\\n        address operator,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        address realmIdOwner\\n    );\\n\\n    /// @notice Thrown at construction when the given realmId contract address is invalid.\\n    /// @param addr The invalid realmId contract address.\\n    error InvalidRealmIdContractAddress(address addr);\\n\\n    /// @notice Thrown when the given season has already been set.\\n    /// @param season The season that already exists in the mapping.\\n    error SeasonAlreadySet(bytes32 season);\\n\\n    /// @notice Thrown when the given consume reason codes array is empty.\\n    error ConsumeReasonCodesArrayEmpty();\\n\\n    /// @notice Thrown when the given consume reason code already exists in the mapping.\\n    /// @param reasonCode The reason code that already exists in the mapping.\\n    error ConsumeReasonCodeAlreadyExists(bytes32 reasonCode);\\n\\n    /// @notice Thrown when the given reason code does not exist in the mapping.\\n    /// @param reasonCode The reason code that does not exist in the mapping.\\n    error ConsumeReasonCodeDoesNotExist(bytes32 reasonCode);\\n\\n    /// @notice Thrown when the given realmId version does not match the current realmId version.\\n    /// @param realmId The given realmId.\\n    /// @param realmIdVersion The given realmId version.\\n    error InvalidRealmIdVersion(uint256 realmId, uint256 realmIdVersion);\\n\\n    /// @notice Thrown when the realmId does not have enough balance\\n    /// @param realmId The given realmId.\\n    /// @param requiredBalance The required balance.\\n    error InsufficientBalance(uint256 realmId, uint256 requiredBalance);\\n\\n    /// @notice Thrown when the signer is not the realmId owner.\\n    /// @param signer The incorrect signer.\\n    error IncorrectSigner(address signer);\\n\\n    /// @notice Thrown when the signature is invalid.\\n    error InvalidSignature();\\n\\n    /// @param realmIdContractAddress The realmId contract address.\\n    /// @dev Reverts if the given address is invalid (equal to ZeroAddress).\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address realmIdContractAddress) {\\n        if (realmIdContractAddress == address(0)) {\\n            revert InvalidRealmIdContractAddress(realmIdContractAddress);\\n        }\\n        REALM_ID_CONTRACT = IRealmId(realmIdContractAddress);\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract with the provided realmId contract address.\\n    function initialize() public initializer {\\n        __UUPSUpgradeable_init();\\n        ContractOwnershipStorage.layout().proxyInit(_msgSender());\\n    }\\n\\n    /// @notice Checks whether the sender is authorized to upgrade the contract.\\n    /// @dev Reverts if sender is not the contract owner.\\n    function _authorizeUpgrade(address) internal view override {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n    }\\n\\n    /// @notice Sets the current season.\\n    /// @dev Reverts if sender does not have Admin role.\\n    /// @dev Reverts if the given season has already been set before.\\n    /// @dev Emits a {SetCurrentSeason} event if successful.\\n    /// @param season The season to set.\\n    function setCurrentSeason(bytes32 season) external {\\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\\n        if (seasons[season]) {\\n            revert SeasonAlreadySet(season);\\n        }\\n\\n        currentSeason = season;\\n        seasons[season] = true;\\n        emit SetCurrentSeason(season);\\n    }\\n\\n    /// @notice Adds one or more reason code(s) to the consume reason code mapping.\\n    /// @dev Reverts if sender does not have Admin role.\\n    /// @dev Reverts if the given reason codes array is empty.\\n    /// @dev Reverts if any of the given reason codes already exists in the mapping.\\n    /// @dev Emits a {BatchAddedConsumeReasonCode} event if all the given reason codes are successfully added.\\n    /// @param reasonCodes Array of reason codes to add.\\n    function batchAddConsumeReasonCodes(bytes32[] calldata reasonCodes) external {\\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\\n        if (reasonCodes.length <= 0) {\\n            revert ConsumeReasonCodesArrayEmpty();\\n        }\\n\\n        for (uint256 i = 0; i < reasonCodes.length; i++) {\\n            if (allowedConsumeReasonCodes[reasonCodes[i]]) {\\n                revert ConsumeReasonCodeAlreadyExists(reasonCodes[i]);\\n            }\\n            allowedConsumeReasonCodes[reasonCodes[i]] = true;\\n        }\\n        emit BatchAddedConsumeReasonCode(reasonCodes);\\n    }\\n\\n    /// @notice Removes one or more reason code(s) from the consume reason code mapping.\\n    /// @dev Reverts if sender does not have Admin role.\\n    /// @dev Reverts if the given reason codes array is empty.\\n    /// @dev Reverts if any of the given reason codes do not exist in the mapping.\\n    /// @dev Emits a {BatchRemovedConsumeReasonCode} event if all the given reason codes are successfully removed.\\n    /// @param reasonCodes Array of reason codes to remove.\\n    function batchRemoveConsumeReasonCodes(bytes32[] calldata reasonCodes) external {\\n        AccessControlStorage.layout().enforceHasRole(ADMIN_ROLE, _msgSender());\\n        if (reasonCodes.length <= 0) {\\n            revert ConsumeReasonCodesArrayEmpty();\\n        }\\n\\n        for (uint256 i = 0; i < reasonCodes.length; i++) {\\n            if (!allowedConsumeReasonCodes[reasonCodes[i]]) {\\n                revert ConsumeReasonCodeDoesNotExist(reasonCodes[i]);\\n            }\\n            delete allowedConsumeReasonCodes[reasonCodes[i]];\\n        }\\n        emit BatchRemovedConsumeReasonCode(reasonCodes);\\n    }\\n\\n    /// @notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\\n    /// @dev Reverts if sender does not have Depositor role.\\n    /// @dev Reverts if the realmId does not exist.\\n    /// @dev Reverts if the given realmId version does not match the current realmId version.\\n    /// @dev Emits a {Deposited} event if successful.\\n    /// @param season The season to deposit to.\\n    /// @param realmId The realmId to deposit to.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount to deposit.\\n    /// @param depositReasonCode The reason code of the deposit.\\n    function deposit(bytes32 season, uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 depositReasonCode) public {\\n        AccessControlStorage.layout().enforceHasRole(DEPOSITOR_ROLE, _msgSender());\\n\\n        REALM_ID_CONTRACT.ownerOf(realmId);\\n        uint256 curRealmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        if (curRealmIdVersion != realmIdVersion) {\\n            revert InvalidRealmIdVersion(realmId, realmIdVersion);\\n        }\\n\\n        balances[season][realmId][realmIdVersion] += amount;\\n        emit Deposited(_msgSender(), season, depositReasonCode, realmId, realmIdVersion, amount);\\n    }\\n\\n    /// @notice Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @dev Reverts if sender does not have Depositor role.\\n    /// @dev Reverts if the realmId does not exist.\\n    /// @dev Reverts if the given realmId version does not match the current realmId version.\\n    /// @dev Emits a {Deposited} event with msg.sender as the sender.\\n    /// @param season The season to deposit to.\\n    /// @param parentNode The parent node associated with the realmId.\\n    /// @param name The name associated with the realmId.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount to deposit.\\n    /// @param depositReasonCode The reason code of the deposit.\\n    function deposit(\\n        bytes32 season,\\n        bytes32 parentNode,\\n        string calldata name,\\n        uint256 realmIdVersion,\\n        uint256 amount,\\n        bytes32 depositReasonCode\\n    ) external {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        deposit(season, realmId, realmIdVersion, amount, depositReasonCode);\\n    }\\n\\n    /// @notice Called by other public functions to consume a given amount from the balance of a given realmId and version.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param realmId The realmId to deposit to.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    /// @param owner Address of the realmId's owner.\\n    function _consume(uint256 realmId, uint256 realmIdVersion, uint256 amount, bytes32 consumeReasonCode, address owner) internal {\\n        uint256 balance = balances[currentSeason][realmId][realmIdVersion];\\n        if (balance < amount) {\\n            revert InsufficientBalance(realmId, amount);\\n        }\\n        if (!allowedConsumeReasonCodes[consumeReasonCode]) {\\n            revert ConsumeReasonCodeDoesNotExist(consumeReasonCode);\\n        }\\n\\n        balances[currentSeason][realmId][realmIdVersion] = balance - amount;\\n\\n        emit Consumed(realmId, currentSeason, consumeReasonCode, _msgSender(), realmIdVersion, amount, owner);\\n    }\\n\\n    /// @notice Called with a signature to consume a given amount from the balance of a realmId.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @dev Reverts if signature is invalid.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if signer is not the realmId owner.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    /// @param v v value of the signature.\\n    /// @param s s value of the signature.\\n    /// @param r r value of the signature.\\n    function consume(bytes32 parentNode, string calldata name, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) external {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        consume(realmId, amount, consumeReasonCode, v, r, s);\\n    }\\n\\n    /// @notice Called with a signature to consume a given amount from the balance of a given realmId.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if failes to resolve realmId's version.\\n    /// @dev Reverts if signature is invalid.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if signer is not the realmId owner.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param realmId The realmId to consume from.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    /// @param v v value of the signature.\\n    /// @param s s value of the signature.\\n    /// @param r r value of the signature.\\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode, uint8 v, bytes32 r, bytes32 s) public {\\n        uint256 nonce = nonces[realmId];\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        bytes32 messageHash = _preparePayload(realmId, realmIdVersion, _msgSender(), amount, nonce, consumeReasonCode);\\n        bytes32 messageDigest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\n\\n        address owner = REALM_ID_CONTRACT.ownerOf(realmId);\\n        bytes memory signature = abi.encodePacked(r, s, v);\\n        bool isValid = SignatureChecker.isValidSignatureNow(owner, messageDigest, signature);\\n        if (!isValid) {\\n            revert InvalidSignature();\\n        }\\n\\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner);\\n        nonces[realmId] = nonce + 1;\\n    }\\n\\n    /// @notice Called by the realmId owner to consume a given amount from the realmId's balance.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if the sender is not the owner of the realmId.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    function consume(bytes32 parentNode, string calldata name, uint256 amount, bytes32 consumeReasonCode) external {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        consume(realmId, amount, consumeReasonCode);\\n    }\\n\\n    /// @notice Called by the realmId owner to consume a given amount from the given realmId's balance.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve owner of the realmId.\\n    /// @dev Reverts if the sender is not the owner of the realmId.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @dev Reverts if balance is insufficient.\\n    /// @dev Reverts if the consume reason code is not allowed.\\n    /// @dev Emits a {Consumed} event if the consumption is successful.\\n    /// @param realmId The realmId to deposit to.\\n    /// @param amount The amount to consume.\\n    /// @param consumeReasonCode The reason code of the consumption.\\n    function consume(uint256 realmId, uint256 amount, bytes32 consumeReasonCode) public {\\n        address owner = REALM_ID_CONTRACT.ownerOf(realmId);\\n        if (_msgSender() != owner) {\\n            revert IncorrectSigner(_msgSender());\\n        }\\n\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        _consume(realmId, realmIdVersion, amount, consumeReasonCode, owner);\\n    }\\n\\n    /// @notice Gets the balance of a given realmId for a specified season.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param season The season.\\n    /// @param realmId The realmId.\\n    /// @return The balance.\\n    function balanceOf(bytes32 season, uint256 realmId) external view returns (uint256) {\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[season][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Gets the balance of a realmId for a specified season.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param season The season.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @return The balance.\\n    function balanceOf(bytes32 season, bytes32 parentNode, string calldata name) external view returns (uint256) {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[season][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Gets the balance of a given realmId.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param realmId The realmId.\\n    /// @return The balance.\\n    function balanceOf(uint256 realmId) external view returns (uint256) {\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[currentSeason][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Gets the balance of a realmId.\\n    /// @notice The realmId is resolved from the given parent node and name.\\n    /// @notice Applies to the current version of the realmId.\\n    /// @notice Applies to the current season.\\n    /// @dev Reverts if fails to resolve realmId from the given parent node and name.\\n    /// @dev Reverts if fails to resolve realmId's version.\\n    /// @param parentNode The parent node of the realmId.\\n    /// @param name The name of the realmId.\\n    /// @return The balance.\\n    function balanceOf(bytes32 parentNode, string calldata name) external view returns (uint256) {\\n        uint256 realmId = REALM_ID_CONTRACT.getTokenId(name, parentNode);\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        return balances[currentSeason][realmId][realmIdVersion];\\n    }\\n\\n    /// @notice Returns a payload generated from the arguments and the current season.\\n    /// @param realmId The realmId.\\n    /// @param realmIdVersion The realmId version.\\n    /// @param amount The amount.\\n    /// @param nonce The nonce.\\n    /// @param reasonCode The reason code.\\n    /// @return The payload.\\n    function _preparePayload(\\n        uint256 realmId,\\n        uint256 realmIdVersion,\\n        address spender,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes32 reasonCode\\n    ) internal view returns (bytes32) {\\n        bytes32 payload = keccak256(abi.encodePacked(realmId, realmIdVersion, spender, amount, currentSeason, reasonCode, nonce));\\n        return payload;\\n    }\\n\\n    /// @notice Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version.\\n    /// @dev Reverts if fails to resolve the realmId's version.\\n    /// @param realmId The realmId.\\n    /// @param amount The amount.\\n    /// @param reasonCode The reason code.\\n    /// @return The payload.\\n    function preparePayload(uint256 realmId, address spender, uint256 amount, bytes32 reasonCode) external view returns (bytes32) {\\n        uint256 realmIdVersion = REALM_ID_CONTRACT.burnCounts(realmId);\\n        bytes32 payload = _preparePayload(realmId, realmIdVersion, spender, amount, nonces[realmId], reasonCode);\\n        return payload;\\n    }\\n}\\n\",\"keccak256\":\"0xdeea9079bb035868c0658088b05778eb5902cfc9e6d436cfb81fabbc525a1b76\",\"license\":\"MIT\"},\"contracts/RealmPoints/interface/IRealmId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// import {RealmId} from \\\"../realmIdContract/RealmId.sol\\\";\\n\\ninterface IRealmId {\\n    function burnCounts(uint256 realmId) external view returns (uint256);\\n\\n    function getTokenId(string calldata name, bytes32 parentNode) external pure returns (uint256);\\n\\n    function ownerOf(uint256 realmId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfad6e9198a7ed75d8ebb7253962413ce9e789c9d4a90b31bbf460a3f2bef217a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {RealmPoints} from \\\"../../RealmPoints.sol\\\";\\n\\ncontract MockRealmPointsUpgrade is RealmPoints {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address realmIdContract) RealmPoints(realmIdContract) {}\\n\\n    function initializeV2(uint256 _newVal) public reinitializer(2) {\\n        val = _newVal;\\n    }\\n\\n    uint256 public val;\\n}\\n\",\"keccak256\":\"0xd74bdb7af9a7c3a939bd9255344c828597fff33a968898472ba9805952efd7ab\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1363,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1366,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1345,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1660,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":4062,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"currentSeason","offset":0,"slot":"101","type":"t_bytes32"},{"astId":4066,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"seasons","offset":0,"slot":"102","type":"t_mapping(t_bytes32,t_bool)"},{"astId":4074,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"balances","offset":0,"slot":"103","type":"t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"},{"astId":4078,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"nonces","offset":0,"slot":"104","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4082,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"allowedConsumeReasonCodes","offset":0,"slot":"105","type":"t_mapping(t_bytes32,t_bool)"},{"astId":5075,"contract":"contracts/RealmPoints/mock/upgrades/MockRealmPointsUpgrade.sol:MockRealmPointsUpgrade","label":"val","offset":0,"slot":"106","type":"t_uint256"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => mapping(uint256 => uint256)))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"},"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"ConsumeReasonCodeAlreadyExists(bytes32)":[{"notice":"Thrown when the given consume reason code already exists in the mapping."}],"ConsumeReasonCodeDoesNotExist(bytes32)":[{"notice":"Thrown when the given reason code does not exist in the mapping."}],"ConsumeReasonCodesArrayEmpty()":[{"notice":"Thrown when the given consume reason codes array is empty."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"IncorrectSigner(address)":[{"notice":"Thrown when the signer is not the realmId owner."}],"InitializationPhaseAlreadyReached(uint256,uint256)":[{"notice":"Emitted when trying to set a phase value that has already been reached."}],"InsufficientBalance(uint256,uint256)":[{"notice":"Thrown when the realmId does not have enough balance"}],"InvalidRealmIdContractAddress(address)":[{"notice":"Thrown at construction when the given realmId contract address is invalid."}],"InvalidRealmIdVersion(uint256,uint256)":[{"notice":"Thrown when the given realmId version does not match the current realmId version."}],"InvalidSignature()":[{"notice":"Thrown when the signature is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}],"SeasonAlreadySet(bytes32)":[{"notice":"Thrown when the given season has already been set."}]},"events":{"BatchAddedConsumeReasonCode(bytes32[])":{"notice":"Emitted when one or more reason code(s) are added to the comsume reason code mapping."},"BatchRemovedConsumeReasonCode(bytes32[])":{"notice":"Emitted when one or more reason code(s) are removed from the comsume reason code mapping."},"Consumed(uint256,bytes32,bytes32,address,uint256,uint256,address)":{"notice":"Emitted when an amount is consumed from a balance."},"Deposited(address,bytes32,bytes32,uint256,uint256,uint256)":{"notice":"Emitted when an amount is deposited to a balance."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."},"SetCurrentSeason(bytes32)":{"notice":"Emitted when the current season is set."}},"kind":"user","methods":{"balanceOf(bytes32,bytes32,string)":{"notice":"Gets the balance of a realmId for a specified season.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId."},"balanceOf(bytes32,string)":{"notice":"Gets the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season."},"balanceOf(bytes32,uint256)":{"notice":"Gets the balance of a given realmId for a specified season.Applies to the current version of the realmId."},"balanceOf(uint256)":{"notice":"Gets the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season."},"batchAddConsumeReasonCodes(bytes32[])":{"notice":"Adds one or more reason code(s) to the consume reason code mapping."},"batchRemoveConsumeReasonCodes(bytes32[])":{"notice":"Removes one or more reason code(s) from the consume reason code mapping."},"consume(bytes32,string,uint256,bytes32)":{"notice":"Called by the realmId owner to consume a given amount from the realmId's balance.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season."},"consume(bytes32,string,uint256,bytes32,uint8,bytes32,bytes32)":{"notice":"Called with a signature to consume a given amount from the balance of a realmId.The realmId is resolved from the given parent node and name.Applies to the current version of the realmId.Applies to the current season."},"consume(uint256,uint256,bytes32)":{"notice":"Called by the realmId owner to consume a given amount from the given realmId's balance.Applies to the current version of the realmId.Applies to the current season."},"consume(uint256,uint256,bytes32,uint8,bytes32,bytes32)":{"notice":"Called with a signature to consume a given amount from the balance of a given realmId.Applies to the current version of the realmId.Applies to the current season."},"deposit(bytes32,bytes32,string,uint256,uint256,bytes32)":{"notice":"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season.The realmId is resolved from the given parent node and name."},"deposit(bytes32,uint256,uint256,uint256,bytes32)":{"notice":"Called by a depoistor to increase the balance of a realmId (with a given version) for a specified season."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"initialize()":{"notice":"Initializes the contract with the provided realmId contract address."},"owner()":{"notice":"Gets the address of the contract owner."},"preparePayload(uint256,address,uint256,bytes32)":{"notice":"Returns a payload generated from the arguments, current nounce, current season and the given realmId's current version."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"setCurrentSeason(bytes32)":{"notice":"Sets the current season."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}